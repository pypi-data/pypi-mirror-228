# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dydxprotocol.clob import tx_pb2 as dydxprotocol_dot_clob_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProposedOperations = channel.unary_unary(
                '/dydxprotocol.clob.Msg/ProposedOperations',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperations.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperationsResponse.FromString,
                )
        self.PlaceOrder = channel.unary_unary(
                '/dydxprotocol.clob.Msg/PlaceOrder',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrder.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrderResponse.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/dydxprotocol.clob.Msg/CancelOrder',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrder.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrderResponse.FromString,
                )
        self.CreateClobPair = channel.unary_unary(
                '/dydxprotocol.clob.Msg/CreateClobPair',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPair.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPairResponse.FromString,
                )
        self.UpdateEquityTierLimitConfiguration = channel.unary_unary(
                '/dydxprotocol.clob.Msg/UpdateEquityTierLimitConfiguration',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfiguration.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfigurationResponse.FromString,
                )
        self.UpdateBlockRateLimitConfiguration = channel.unary_unary(
                '/dydxprotocol.clob.Msg/UpdateBlockRateLimitConfiguration',
                request_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfiguration.SerializeToString,
                response_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfigurationResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def ProposedOperations(self, request, context):
        """ProposedOperations is a temporary message used by block proposers
        for matching orders as part of the ABCI++ workaround.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceOrder(self, request, context):
        """PlaceOrder allows accounts to place orders on the orderbook.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """CancelOrder allows accounts to cancel existing orders on the orderbook.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateClobPair(self, request, context):
        """CreateClobPair creates a new clob pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEquityTierLimitConfiguration(self, request, context):
        """UpdateEquityTierLimitConfiguration updates the equity tier limit
        configuration in state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBlockRateLimitConfiguration(self, request, context):
        """UpdateBlockRateLimitConfiguration updates the block rate limit
        configuration in state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProposedOperations': grpc.unary_unary_rpc_method_handler(
                    servicer.ProposedOperations,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperations.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperationsResponse.SerializeToString,
            ),
            'PlaceOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrder,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrder.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrder.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrderResponse.SerializeToString,
            ),
            'CreateClobPair': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClobPair,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPair.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPairResponse.SerializeToString,
            ),
            'UpdateEquityTierLimitConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEquityTierLimitConfiguration,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfiguration.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfigurationResponse.SerializeToString,
            ),
            'UpdateBlockRateLimitConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBlockRateLimitConfiguration,
                    request_deserializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfiguration.FromString,
                    response_serializer=dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfigurationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dydxprotocol.clob.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def ProposedOperations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/ProposedOperations',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperations.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgProposedOperationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlaceOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/PlaceOrder',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrder.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgPlaceOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/CancelOrder',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrder.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgCancelOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateClobPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/CreateClobPair',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPair.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgCreateClobPairResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEquityTierLimitConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/UpdateEquityTierLimitConfiguration',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfiguration.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateEquityTierLimitConfigurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBlockRateLimitConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.clob.Msg/UpdateBlockRateLimitConfiguration',
            dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfiguration.SerializeToString,
            dydxprotocol_dot_clob_dot_tx__pb2.MsgUpdateBlockRateLimitConfigurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
