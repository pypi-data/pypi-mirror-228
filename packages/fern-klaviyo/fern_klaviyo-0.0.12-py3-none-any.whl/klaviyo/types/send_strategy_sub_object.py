# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .static_schedule_options import StaticScheduleOptions
from .sto_schedule_options import StoScheduleOptions
from .throttled_schedule_options import ThrottledScheduleOptions


class SendStrategySubObject(pydantic.BaseModel):
    method: str = pydantic.Field(
        description="Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']"
    )
    options_static: typing.Optional[StaticScheduleOptions]
    options_throttled: typing.Optional[ThrottledScheduleOptions]
    options_sto: typing.Optional[StoScheduleOptions]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
