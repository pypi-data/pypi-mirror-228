!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	c:/Users/ekarni/compare-my-stocks/src/compare_my_stocks/transactions/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20221204.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
BUY	parsecsv.py	/^    BUY = "BUY"$/;"	v	class:BuySellEnum
BUY	parsecsvo.py	/^    BUY = "BUY"$/;"	v	class:BuySellEnum
BuyDictItem	transactioninterface.py	/^BuyDictItem=namedtuple("BuyDictItem","Qty Cost Symbol Notes IBContract Source AdjustedPrice",def/;"	v
BuyDictType	transactioninterface.py	/^BuyDictType=Dict[datetime,BuyDictItem]$/;"	v
BuySellEnum	parsecsv.py	/^class BuySellEnum(Enum):$/;"	c
BuySellEnum	parsecsvo.py	/^class BuySellEnum(Enum):$/;"	c
CACHEDIBINSTOCK	transactioninterface.py	/^    CACHEDIBINSTOCK=3$/;"	v	class:TransactionSource
CANCELBUY	parsecsv.py	/^    CANCELBUY = "BUY (Ca.)"$/;"	v	class:BuySellEnum
CANCELBUY	parsecsvo.py	/^    CANCELBUY = "BUY (Ca.)"$/;"	v	class:BuySellEnum
CANCELSELL	parsecsv.py	/^    CANCELSELL = "SELL (Ca.)"$/;"	v	class:BuySellEnum
CANCELSELL	parsecsvo.py	/^    CANCELSELL = "SELL (Ca.)"$/;"	v	class:BuySellEnum
COLUMNS	mystockstransactionhandler.py	/^    COLUMNS = ["Id", "Symbol", "Name", "DisplaySymbol", "Exchange", "Portfolio", "Currency", "La/;"	v	class:MyStocksTransactionHandler
FAKECOLUMNS	mystockstransactionhandler.py	/^    FAKECOLUMNS = ["Id", "Symbol", "Name", "DisplaySymbol", "Exchange", "Portfolio", "Currency",/;"	v	class:MyStocksTransactionHandler
IB	transactioninterface.py	/^    IB=1$/;"	v	class:TransactionSource
IBTransactionHandler	IBtransactionhandler.py	/^class IBTransactionHandler(TrasnasctionHandler, TransactionHandlerImplementator):$/;"	c
MyStocksTransactionHandler	mystockstransactionhandler.py	/^class MyStocksTransactionHandler(TrasnasctionHandler, TransactionHandlerImplementator):$/;"	c
NAME	IBtransactionhandler.py	/^    NAME="IB"$/;"	v	class:IBTransactionHandler
NAME	mystockstransactionhandler.py	/^    NAME = "MyStocks"$/;"	v	class:MyStocksTransactionHandler
NAME	stockprices.py	/^    NAME="StockPrices"$/;"	v	class:StockPrices
Row	mystockstransactionhandler.py	/^    Row=namedtuple("Row", FAKECOLUMNS,defaults=[""]* len(COLUMNS ))$/;"	v	class:MyStocksTransactionHandler
SELL	parsecsv.py	/^    SELL = "SELL"$/;"	v	class:BuySellEnum
SELL	parsecsvo.py	/^    SELL = "SELL"$/;"	v	class:BuySellEnum
STOCK	transactioninterface.py	/^    STOCK=2$/;"	v	class:TransactionSource
StockPrices	stockprices.py	/^class StockPrices(TrasnasctionHandler,RapidApi,TransactionHandlerImplementator):$/;"	c
Trade	parsecsvo.py	/^class Trade:$/;"	c
TransactionHandlerImplementator	transactioninterface.py	/^class TransactionHandlerImplementator(metaclass=ABCMeta):$/;"	c
TransactionHandlerInterface	transactioninterface.py	/^class TransactionHandlerInterface(metaclass=ABCMeta):$/;"	c
TransactionHandlerManager	transactionhandlermanager.py	/^class TransactionHandlerManager(TransactionHandlerInterface):$/;"	c
TransactionSource	transactioninterface.py	/^class TransactionSource(Enum):$/;"	c
TrasnasctionHandler	transactionhandler.py	/^class TrasnasctionHandler(TransactionHandlerInterface,TransactionHandlerImplementator):$/;"	c
__init__	IBtransactionhandler.py	/^    def __init__(self,man):$/;"	m	class:IBTransactionHandler
__init__	mystockstransactionhandler.py	/^    def __init__(self,manager,):$/;"	m	class:MyStocksTransactionHandler
__init__	stockprices.py	/^    def __init__(self,man,tickers):$/;"	m	class:StockPrices
__init__	transactionhandler.py	/^    def __init__(self,manager):$/;"	m	class:TrasnasctionHandler
__init__	transactionhandlermanager.py	/^    def __init__(self,input_processer):$/;"	m	class:TransactionHandlerManager
buydic	transactionhandler.py	/^    def buydic(self) -> dict:$/;"	m	class:TrasnasctionHandler	typeref:typename:dict
buydic	transactionhandlermanager.py	/^    def buydic(self) -> dict:$/;"	m	class:TransactionHandlerManager	typeref:typename:dict
buydic	transactioninterface.py	/^    def buydic(self) -> Dict[datetime,BuyDictItem]:$/;"	m	class:TransactionHandlerInterface	typeref:typename:Dict[datetime,BuyDictItem]
buydicforexport	transactionhandlermanager.py	/^    def buydicforexport(self) -> dict:$/;"	m	class:TransactionHandlerManager	typeref:typename:dict
buysymbols	transactionhandler.py	/^    def buysymbols(self) -> set:$/;"	m	class:TrasnasctionHandler	typeref:typename:set
buysymbols	transactionhandlermanager.py	/^    def buysymbols(self) -> set:$/;"	m	class:TransactionHandlerManager	typeref:typename:set
combine	transactionhandlermanager.py	/^    def combine(self):$/;"	m	class:TransactionHandlerManager
combine_transactions	transactionhandlermanager.py	/^    def combine_transactions(self):$/;"	m	class:TransactionHandlerManager
doquery	IBtransactionhandler.py	/^    def doquery(self):$/;"	m	class:IBTransactionHandler
export_portfolio	transactionhandlermanager.py	/^    def export_portfolio(self):$/;"	m	class:TransactionHandlerManager
filter_bad	stockprices.py	/^    def filter_bad(self):$/;"	m	class:StockPrices
get_data_for_graph	transactionhandlermanager.py	/^    def get_data_for_graph(self,columns):$/;"	m	class:TransactionHandlerManager
get_datesym	transactionhandlermanager.py	/^        def get_datesym(buydic):$/;"	f	member:TransactionHandlerManager.combine	file:
get_handlers	transactionhandlermanager.py	/^    def get_handlers(self):$/;"	m	class:TransactionHandlerManager
get_hist_split	stockprices.py	/^    def get_hist_split(self,symbol):$/;"	m	class:StockPrices
get_ib_handler	IBtransactionhandler.py	/^def get_ib_handler(manager):$/;"	f
get_portfolio_stocks	transactionhandler.py	/^    def get_portfolio_stocks(self):  # TODO:: to fix$/;"	m	class:TrasnasctionHandler
get_portfolio_stocks	transactioninterface.py	/^    def get_portfolio_stocks(self):  # TODO:: to fix$/;"	m	class:TransactionHandlerInterface
get_portfolio_stocks	transactioninterface.py	/^    def get_portfolio_stocks(self):$/;"	m	class:TransactionHandlerImplementator
get_stock_handler	mystockstransactionhandler.py	/^def get_stock_handler(man):$/;"	f
get_vars	transactionhandlermanager.py	/^        def get_vars(dicforsym,mindate):$/;"	f	member:TransactionHandlerManager.combine	file:
get_vars_for_cache	mystockstransactionhandler.py	/^    def get_vars_for_cache(self):$/;"	m	class:MyStocksTransactionHandler
get_vars_for_cache	stockprices.py	/^    def get_vars_for_cache(self):$/;"	m	class:StockPrices
get_vars_for_cache	transactionhandler.py	/^    def get_vars_for_cache(self):$/;"	m	class:TrasnasctionHandler
get_vars_for_cache	transactioninterface.py	/^    def get_vars_for_cache(self):$/;"	m	class:TransactionHandlerImplementator
loctim	mystockstransactionhandler.py	/^        def loctim(dic,item): #not the most efficient.$/;"	f	member:MyStocksTransactionHandler.save_transaction_table	file:
log_buydict_stats	mystockstransactionhandler.py	/^    def log_buydict_stats(self):$/;"	m	class:MyStocksTransactionHandler
log_buydict_stats	transactionhandler.py	/^    def log_buydict_stats(self):$/;"	m	class:TrasnasctionHandler
log_buydict_stats	transactionhandlermanager.py	/^    def log_buydict_stats(self):$/;"	m	class:TransactionHandlerManager
log_buydict_stats	transactioninterface.py	/^    def log_buydict_stats(self):$/;"	m	class:TransactionHandlerInterface
nanch	transactionhandler.py	/^        def nanch(x):$/;"	f	member:TrasnasctionHandler.update_sym_property	file:
np	transactionhandlermanager.py	/^import numpy as np$/;"	I	nameref:module:numpy
params	transactionhandlermanager.py	/^    def params(self):$/;"	m	class:TransactionHandlerManager
parse_trade	parsecsv.py	/^def parse_trade(row):$/;"	f
parse_trade	parsecsvo.py	/^def parse_trade(row: List[str]) -> Trade:$/;"	f	typeref:typename:Trade
pd	mystockstransactionhandler.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	parsecsv.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	transactionhandlermanager.py	/^import pandas as pd$/;"	I	nameref:module:pandas
populate_buydic	IBtransactionhandler.py	/^    def populate_buydic(self):$/;"	m	class:IBTransactionHandler
populate_buydic	mystockstransactionhandler.py	/^    def populate_buydic(self):$/;"	m	class:MyStocksTransactionHandler
populate_buydic	stockprices.py	/^    def populate_buydic(self):$/;"	m	class:StockPrices
populate_buydic	transactioninterface.py	/^    def populate_buydic(self):$/;"	m	class:TransactionHandlerImplementator
process_transactions	transactionhandler.py	/^    def process_transactions(self):$/;"	m	class:TrasnasctionHandler
process_transactions	transactionhandlermanager.py	/^    def process_transactions(self): #from all sources$/;"	m	class:TransactionHandlerManager
process_transactions	transactioninterface.py	/^    def process_transactions(self):$/;"	m	class:TransactionHandlerInterface
read_trasaction_table	mystockstransactionhandler.py	/^    def read_trasaction_table(self, x):$/;"	m	class:MyStocksTransactionHandler
reader	parsecsvo.py	/^    reader = csv.reader(f)$/;"	v
return_trades	parsecsv.py	/^def return_trades(filepath):$/;"	f
save_cache	IBtransactionhandler.py	/^    def save_cache(self):$/;"	m	class:IBTransactionHandler
save_cache	transactionhandler.py	/^    def save_cache(self):$/;"	m	class:TrasnasctionHandler
save_cache	transactioninterface.py	/^    def save_cache(self):$/;"	m	class:TransactionHandlerInterface
save_cache_date	mystockstransactionhandler.py	/^    def save_cache_date(self):$/;"	m	class:MyStocksTransactionHandler
save_cache_date	transactionhandler.py	/^    def save_cache_date(self):$/;"	m	class:TrasnasctionHandler
save_transaction_table	mystockstransactionhandler.py	/^    def save_transaction_table(self, buydict,file,normailze_to_cur=False):$/;"	m	class:MyStocksTransactionHandler
set_vars_for_cache	mystockstransactionhandler.py	/^    def set_vars_for_cache(self,v):$/;"	m	class:MyStocksTransactionHandler
set_vars_for_cache	stockprices.py	/^    def set_vars_for_cache(self, v):$/;"	m	class:StockPrices
set_vars_for_cache	transactionhandler.py	/^    def set_vars_for_cache(self,v):$/;"	m	class:TrasnasctionHandler
set_vars_for_cache	transactioninterface.py	/^    def set_vars_for_cache(self, v):$/;"	m	class:TransactionHandlerImplementator
symbol_info	transactionhandlermanager.py	/^    def symbol_info(self):$/;"	m	class:TransactionHandlerManager
symbol_info	transactionhandlermanager.py	/^    def symbol_info(self, value):$/;"	m	class:TransactionHandlerManager
trades	parsecsvo.py	/^    trades = [parse_trade(row) for row in reader]$/;"	v
try_fix_dic	transactionhandlermanager.py	/^    def try_fix_dic(self,cur_action : Tuple[datetime,BuyDictItem],last_action :  Tuple[datetime,/;"	m	class:TransactionHandlerManager
try_to_use_cache	IBtransactionhandler.py	/^    def try_to_use_cache(self):$/;"	m	class:IBTransactionHandler
try_to_use_cache	transactionhandler.py	/^    def try_to_use_cache(self):$/;"	m	class:TrasnasctionHandler
update_buydic	transactionhandlermanager.py	/^    def update_buydic(self,key,val):$/;"	m	class:TransactionHandlerManager
update_dic	transactionhandlermanager.py	/^        def update_dic(mindate, secondinst, dic, real,num_of_duplicates):$/;"	f	member:TransactionHandlerManager.combine	file:
update_sym_property	transactionhandler.py	/^    def update_sym_property(self, symbol, value, prop='currency', updateanyway=True):$/;"	m	class:TrasnasctionHandler
