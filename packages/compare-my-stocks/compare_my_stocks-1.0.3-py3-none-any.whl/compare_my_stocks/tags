!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/ekarni/compare-my-stocks/src/compare_my_stocks/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20221204.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
ABS	common/common.py	/^    ABS = 0$/;"	v	class:Types
ADDITIONALOPTIONS	data/myconfig.py	/^ADDITIONALOPTIONS={} #Additonal graph options #{'marker':'o'}$/;"	v
ADDPROCESS	data/myconfig.py	/^ADDPROCESS=r'..\\compare_my_stocks\\ibsrv.py'$/;"	v
ADDPROT	common/common.py	/^    ADDPROT=auto()$/;"	v	class:UniteType
ADDTOTAL	common/common.py	/^    ADDTOTAL=auto()$/;"	v	class:UniteType
ADDTOTALS	common/common.py	/^    ADDTOTALS= ADDPROT | ADDTOTAL$/;"	v	class:UniteType
AVG	common/common.py	/^    AVG=auto()$/;"	v	class:UniteType
AbstractSymbol	engine/symbols.py	/^class AbstractSymbol():$/;"	c
ActOnData	processing/actondata.py	/^class ActOnData:$/;"	c
BASECUR	data/myconfig.py	/^BASECUR="USD"$/;"	v
BOTHSYMBOLS	data/myconfig.py	/^BOTHSYMBOLS=[]$/;"	v
BuyDictItem	transactions/transactioninterface.py	/^BuyDictItem=namedtuple("BuyDictItem","Qty Cost Symbol Notes IBContract",defaults=[None]*5)$/;"	v
BuyDictType	transactions/transactioninterface.py	/^BuyDictType=Dict[datetime,BuyDictItem]$/;"	v
CACHEUSAGE	data/myconfig.py	/^CACHEUSAGE=UseCache.FORCEUSE$/;"	v
COLUMNS	transactions/mystockstransactionhandler.py	/^    COLUMNS = ["Id", "Symbol", "Name", "DisplaySymbol", "Exchange", "Portfolio", "Currency", "La/;"	v	class:MyStocksTransactionHandler
COMBINEAMOUNTPERC	data/myconfig.py	/^COMBINEAMOUNTPERC=10$/;"	v
COMBINEDATEDIFF	data/myconfig.py	/^COMBINEDATEDIFF=20$/;"	v
COMMONSTOCK	data/myconfig.py	/^COMMONSTOCK= 'NOEARNINGS'$/;"	v
COMPARE	common/common.py	/^    COMPARE=auto()$/;"	v	class:Types
CRYPTO	data/myconfig.py	/^CRYPTO= set(['cardano','bitcoin','ethereum']) #names of investpy$/;"	v
Cache	common/common.py	/^    Cache=0$/;"	v	class:InputSourceType
Cache	transactions/transactioninterface.py	/^    Cache=0$/;"	v	class:TransactionSourceType
Categories	engine/compareengine.py	/^    def Categories(self):$/;"	m	class:CompareEngine
Categories	engine/symbolsinterface.py	/^    def Categories(self):$/;"	m	class:SymbolsInterface
CompareEngine	engine/compareengine.py	/^class CompareEngine(GraphGenerator, InputProcessor, DataGenerator, CompareEngineInterface):$/;"	c
CompareEngineInterface	engine/compareengineinterface.py	/^class CompareEngineInterface(SymbolsInterface):$/;"	c
ConnectedME	input/ibsource.py	/^    ConnectedME=None$/;"	v	class:IBSourceRem
DATAFILEPTR	data/myconfig.py	/^DATAFILEPTR= 'DATA_FILE'$/;"	v
DEBUG	data/myconfig.py	/^DEBUG=1$/;"	v
DEFAULTCURR	data/myconfig.py	/^DEFAULTCURR=["USD","EUR","GBP","ILS"]$/;"	v
DEFAULTFROMDATE	data/myconfig.py	/^DEFAULTFROMDATE = datetime.datetime(2020,1,1,tzinfo=pytz.UTC)$/;"	v
DEFAULTNOTEBOOK	data/myconfig.py	/^DEFAULTNOTEBOOK=r'jupyter\\defaultnotebook.ipynb'$/;"	v
DEF_FIG_SIZE	data/myconfig.py	/^DEF_FIG_SIZE = (13.2 * 0.5 ,6* 0.5)$/;"	v
DIFF	common/common.py	/^    DIFF=auto()$/;"	v	class:Types
DONT	common/common.py	/^    DONT=0$/;"	v	class:UseCache
DONT	gui/formobserverinterface.py	/^    DONT=0$/;"	v	class:ResetRanges
DONT_RUN_NOTEBOOK	data/myconfig.py	/^DONT_RUN_NOTEBOOK=True$/;"	v
DOWNLOADDATAFORPROT	data/myconfig.py	/^DOWNLOADDATAFORPROT=True$/;"	v
DataGenerator	processing/datagenerator.py	/^class DataGenerator(SymbolsInterface, InputData,InputProcessorInterface):$/;"	c
DisplayModes	gui/formobserver.py	/^class DisplayModes(int,Enum):$/;"	c
DoLongProcess	common/dolongprocess.py	/^class DoLongProcess(QObject):$/;"	c
DoLongProcessSlots	common/dolongprocess.py	/^class DoLongProcessSlots(QObject):$/;"	c
EARNINGSTORAGE	data/myconfig.py	/^EARNINGSTORAGE = 'earnings.dat'$/;"	v
EPS	common/common.py	/^EPS=0.0001$/;"	v
EXCHANGES	data/myconfig.py	/^EXCHANGES= ["NYSE","nasdaq","xetra",'NYSE','London','OTC Markets']$/;"	v
EXCHANGES	data/myconfig.py	/^EXCHANGES= [i.lower() for i in EXCHANGES]$/;"	v
EXCHANGE_CURRENCY	data/myconfig.py	/^EXCHANGE_CURRENCY= {'London':'GBP','Xetra': 'EUR'}$/;"	v
EXPORTEDPORT	data/myconfig.py	/^EXPORTEDPORT="exported.csv"$/;"	v
EXT	data/myconfig.py	/^EXT=['QQQ']$/;"	v
EarningProcessor	input/earningsproc.py	/^class EarningProcessor(SeekingAlphaApi):$/;"	c
EnhancedJSONEncoder	common/common.py	/^class EnhancedJSONEncoder(DjangoJSONEncoder):$/;"	c
FAKECOLUMNS	transactions/mystockstransactionhandler.py	/^    FAKECOLUMNS = ["Id", "Symbol", "Name", "DisplaySymbol", "Exchange", "Portfolio", "Currency",/;"	v	class:MyStocksTransactionHandler
FILE_LIST_TO_RES	config/config.py	/^FILE_LIST_TO_RES=["HIST_F","HIST_F_BACKUP","JSONFILENAME","SERIALIZEDFILE","REVENUEFILE","INCOME/;"	v
FIXBUYSELLDIFFDAYS	data/myconfig.py	/^FIXBUYSELLDIFFDAYS=3$/;"	v
FORCE	gui/formobserverinterface.py	/^    FORCE=2/;"	v	class:ResetRanges
FORCEUSE	common/common.py	/^    FORCEUSE=2$/;"	v	class:UseCache
FULL	gui/formobserver.py	/^    FULL=3$/;"	v	class:DisplayModes
FormInitializer	gui/forminitializer.py	/^class FormInitializer(FormObserver, FormInitializerInterface):$/;"	c
FormInitializerInterface	gui/forminitializerinterface.py	/^class FormInitializerInterface():$/;"	c
FormInterface	gui/forminterface.py	/^class FormInterface:$/;"	c
FormObserver	gui/formobserver.py	/^class FormObserver(ListsObserver, GraphsHandler, JupyterHandler,CompareEngineInterface):$/;"	c
GLOB_DIC	ib/ibtestx.py	/^GLOB_DIC=defaultdict( dict)$/;"	v
GRAPHFN	data/myconfig.py	/^GRAPHFN='graphs.json'$/;"	v
GraphGenerator	graph/graphgenerator.py	/^class GraphGenerator:$/;"	c
GraphsHandler	gui/formobserver.py	/^class GraphsHandler(CompareEngineInterface,FormInitializerInterface):$/;"	c
Groups	engine/compareengine.py	/^    def Groups(self):$/;"	m	class:CompareEngine
Groups	engine/symbolsinterface.py	/^    def Groups(self) -> dict:$/;"	m	class:SymbolsInterface	typeref:typename:dict
HIST_F	data/myconfig.py	/^HIST_F = r'hist_file.cache'$/;"	v
HIST_F_BACKUP	data/myconfig.py	/^HIST_F_BACKUP = HIST_F+'.back'$/;"	v
HIST_PERIOD	ib/ibtestx.py	/^HIST_PERIOD='1m'$/;"	v
HOSTIB	data/myconfig.py	/^HOSTIB='127.0.0.1'$/;"	v
IB	common/common.py	/^    IB=auto()$/;"	v	class:InputSourceType
IB	transactions/transactioninterface.py	/^    IB=auto()$/;"	v	class:TransactionSourceType
IBMediator	ib/ibtestx.py	/^class IBMediator():$/;"	c
IBSRVPORT	data/myconfig.py	/^IBSRVPORT=9090 #When you open IB SERVER in a sec process$/;"	v
IBSource	input/ibsource.py	/^class IBSource(InputSource):$/;"	c
IBSourceRem	input/ibsource.py	/^class IBSourceRem:$/;"	c
IBTransactionHandler	transactions/IBtransactionhandler.py	/^class IBTransactionHandler(TrasnasctionHandler, TransactionHandlerImplementator):$/;"	c
IGNORECONF	data/myconfig.py	/^IGNORECONF = {} # sym : fromdate$/;"	v
IGNORED_SYMBOLS	data/myconfig.py	/^IGNORED_SYMBOLS=['FB']$/;"	v
IGNORE_ADJUST	data/myconfig.py	/^IGNORE_ADJUST=1$/;"	v
INCOMEFILE	data/myconfig.py	/^INCOMEFILE = 'NOEARNINGS'$/;"	v
INPUTSOURCE	data/myconfig.py	/^INPUTSOURCE=InputSourceType.IB #IB for interactive$/;"	v
IfAPROP	gui/formobserverinterface.py	/^    IfAPROP=1$/;"	v	class:ResetRanges
ImpacketFormatter	common/loghandler.py	/^class ImpacketFormatter(colorlog.ColoredFormatter):$/;"	c
ImpacketFormatterTimeStamp	common/loghandler.py	/^class ImpacketFormatterTimeStamp(ImpacketFormatter):$/;"	c
InputData	input/inputdata.py	/^class InputData(ABC):$/;"	c
InputProcessor	input/inputprocessor.py	/^class InputProcessor(InputProcessorInterface):$/;"	c
InputProcessorInterface	input/inputprocessorinterface.py	/^class InputProcessorInterface():$/;"	c
InputSource	input/inputsource.py	/^class InputSource():$/;"	c
InputSourceInterface	input/inputsource.py	/^class InputSourceInterface(metaclass=ABCMeta):$/;"	c
InputSourceType	common/common.py	/^class InputSourceType(Flag):$/;"	c
InvestPy	common/common.py	/^    InvestPy=auto()$/;"	v	class:InputSourceType
InvestPySource	input/investpysource.py	/^class InvestPySource(InputSource):$/;"	c
JSONFILENAME	data/myconfig.py	/^JSONFILENAME=r'groups.json'$/;"	v
JUPYTER	gui/formobserver.py	/^    JUPYTER=1,$/;"	v	class:DisplayModes
JupyterHandler	gui/jupyterhandler.py	/^class JupyterHandler(FormInterface):$/;"	c
LASTGRAPHNAME	data/myconfig.py	/^LASTGRAPHNAME="Last"$/;"	v
LOADLASTATBEGIN	data/myconfig.py	/^LOADLASTATBEGIN=True #Load last graph when the program starts $/;"	v
LimitType	common/common.py	/^class LimitType(int,Flag):$/;"	c
Link	common/orederedset.py	/^class Link(object):$/;"	c
ListsObserver	gui/listobserver.py	/^class ListsObserver():$/;"	c
MAX	common/common.py	/^    MAX=auto()$/;"	v	class:LimitType
MAX	common/common.py	/^    MAX=auto()$/;"	v	class:UniteType
MAXCACHETIMESPAN	data/myconfig.py	/^MAXCACHETIMESPAN=datetime.timedelta(days=1)$/;"	v
MAXCOLS	data/myconfig.py	/^MAXCOLS=30$/;"	v
MAXPERCDIFFIBSTOCKWARN	data/myconfig.py	/^MAXPERCDIFFIBSTOCKWARN=0.2$/;"	v
MAX_DIFF	ib/ibtestx.py	/^MAX_DIFF=60 #seconds$/;"	v
MIN	common/common.py	/^    MIN=auto()$/;"	v	class:LimitType
MIN	common/common.py	/^    MIN=auto()$/;"	v	class:UniteType
MIN	data/myconfig.py	/^MIN=4000$/;"	v
MINCHECKREQ	data/myconfig.py	/^MINCHECKREQ=10$/;"	v
MINCOLFORCOLUMS	data/myconfig.py	/^MINCOLFORCOLUMS=20$/;"	v
MINIMAL	gui/formobserver.py	/^    MINIMAL=0,$/;"	v	class:DisplayModes
MINIMALPRECREQ	data/myconfig.py	/^MINIMALPRECREQ=0.2$/;"	v
MYPATH	config/config.py	/^MYPATH=os.path.dirname(__file__)$/;"	v
MYPROJ	config/config.py	/^MYPROJ='compare_my_stocks'$/;"	v
MainWindow	gui/mainwindow.py	/^class MainWindow(QMainWindow, FormInitializer):$/;"	c
MplCanvas	gui/forminitializer.py	/^class MplCanvas(FigureCanvasQTAgg):$/;"	c
MyDeamon	ibsrv.py	/^class MyDeamon(Pyro5.server.Daemon):$/;"	c
MyItem	gui/listobserver.py	/^class MyItem(QListWidgetItem,AbstractSymbol):$/;"	c
MyOrderedSet	common/orederedset.py	/^class MyOrderedSet(OrderedSet):$/;"	c
MySignal	common/common.py	/^class MySignal:$/;"	c
MyStock	transactions/transactioninterface.py	/^    MyStock=auto()$/;"	v	class:TransactionSourceType
MyStocksTransactionHandler	transactions/mystockstransactionhandler.py	/^class MyStocksTransactionHandler(TrasnasctionHandler, TransactionHandlerImplementator):$/;"	c
MyTableModel	gui/stockchoice.py	/^class MyTableModel(QAbstractTableModel):$/;"	c
NAME	transactions/IBtransactionhandler.py	/^    NAME="IB"$/;"	v	class:IBTransactionHandler
NAME	transactions/mystockstransactionhandler.py	/^    NAME = "MyStocks"$/;"	v	class:MyStocksTransactionHandler
NAME	transactions/stockprices.py	/^    NAME="StockPrices"$/;"	v	class:StockPrices
NOJUPYTER	gui/formobserver.py	/^    NOJUPYTER = 2,$/;"	v	class:DisplayModes
NONE	common/common.py	/^    NONE=0$/;"	v	class:UniteType
NORMALIZE_ON_TRANSACTIONSAVE	data/myconfig.py	/^NORMALIZE_ON_TRANSACTIONSAVE=0$/;"	v
NavigationToolbar	gui/forminitializer.py	/^from matplotlib.backends.backend_qt import NavigationToolbar2QT as NavigationToolbar$/;"	Y	nameref:unknown:NavigationToolbar2QT
NoDataException	common/common.py	/^class NoDataException(Exception):$/;"	c
OrderedSet	common/orederedset.py	/^class OrderedSet(collections.MutableSet):$/;"	c
PERATIO	common/common.py	/^    PERATIO = auto()$/;"	v	class:Types
PORT	data/myconfig.py	/^PORT = 4001#5050$/;"	v
PORT	ib/ibtestx.py	/^PORT=8080$/;"	v
PORTIB	data/myconfig.py	/^PORTIB=7596$/;"	v
PRECDIFF	common/common.py	/^    PRECDIFF = PRECENTAGE | DIFF$/;"	v	class:Types
PRECENTAGE	common/common.py	/^    PRECENTAGE=auto()$/;"	v	class:Types
PRICE	common/common.py	/^    PRICE=auto()$/;"	v	class:Types
PRICESELLS	common/common.py	/^    PRICESELLS=auto()$/;"	v	class:Types
PROFIT	common/common.py	/^    PROFIT = auto()$/;"	v	class:Types
PROJDIR	config/config.py	/^PROJDIR= os.path.join(os.path.expanduser("~"),"."+MYPROJ)$/;"	v
PROJPATHENV	config/config.py	/^PROJPATHENV = 'COMPARE_STOCK_PATH'$/;"	v
ParameterError	engine/parameters.py	/^class ParameterError(Exception):$/;"	c
Parameters	engine/parameters.py	/^class Parameters:$/;"	c
PickSymbol	gui/stockchoice.py	/^def PickSymbol(inpsource,initial):$/;"	f
QDateRangeSlider	gui/daterangeslider.py	/^class QDateRangeSlider(_GenericRangeSlider[float]):$/;"	c
RANGE	common/common.py	/^    RANGE=0$/;"	v	class:LimitType
REGULAR_ACCOUNT	data/myconfig.py	/^REGULAR_ACCOUNT = '' #your interactive broker account$/;"	v
REGULAR_USERNAME	data/myconfig.py	/^REGULAR_USERNAME = '' #your username$/;"	v
RELPROFIT	common/common.py	/^    RELPROFIT = auto()$/;"	v	class:Types
RELTOEND	common/common.py	/^    RELTOEND=auto()$/;"	v	class:Types
RELTOMAX	common/common.py	/^    RELTOMAX=auto()$/;"	v	class:Types
RELTOMIN	common/common.py	/^    RELTOMIN=auto()$/;"	v	class:Types
RELTOSTART	common/common.py	/^    RELTOSTART=auto()$/;"	v	class:Types
REVENUEFILE	data/myconfig.py	/^REVENUEFILE ='NOEARNINGS'$/;"	v
RapidApi	input/earningscommon.py	/^class RapidApi:$/;"	c
RefVar	common/refvar.py	/^class RefVar(object):$/;"	c
ResetRanges	gui/formobserverinterface.py	/^class ResetRanges(int,Enum):$/;"	c
Row	transactions/mystockstransactionhandler.py	/^    Row=namedtuple("Row", FAKECOLUMNS,defaults=[""]* len(COLUMNS ))$/;"	v	class:MyStocksTransactionHandler
SEEKINGALPHAHeaders	data/myconfig.py	/^SEEKINGALPHAHeaders = {$/;"	v
SERIALIZEDFILE	data/myconfig.py	/^SERIALIZEDFILE=r'serialized.dat' #internal$/;"	v
SIMPLEMODE	data/myconfig.py	/^SIMPLEMODE=0 #in this mode, there is no UI, just graph. can set USEQT =0 only if  in simple mode/;"	v
SIMPLEMODE	runsit.py	/^USEWX, USEWEB, USEQT, SIMPLEMODE = config.USEWX, config.USEWEB, config.USEQT, config.SIMPLEMODE$/;"	v
SKIP_EARNINGS	data/myconfig.py	/^SKIP_EARNINGS=1$/;"	v
STOCK_CURRENCY	data/myconfig.py	/^STOCK_CURRENCY= {'VETH.DE':'EUR','VBTC1':'EUR'}$/;"	v
SUM	common/common.py	/^    SUM=auto()$/;"	v	class:UniteType
SafeSignal	common/common.py	/^class SafeSignal:$/;"	c
SeekingAlphaApi	input/earningsproc.py	/^class SeekingAlphaApi(RapidApi):$/;"	c
Serialized	common/common.py	/^Serialized=namedtuple('Serialized', ['origdata','beforedata','afterdata','act','parameters','Gro/;"	v
SimpleSymbol	engine/symbols.py	/^class SimpleSymbol(AbstractSymbol):$/;"	c
StockPrices	transactions/stockprices.py	/^class StockPrices(TrasnasctionHandler,RapidApi,TransactionHandlerImplementator):$/;"	c
StockPricesHeaders	data/myconfig.py	/^StockPricesHeaders = {$/;"	v
SymbolError	input/inputprocessor.py	/^class SymbolError(Exception):$/;"	c
SymbolsInterface	engine/symbolsinterface.py	/^class SymbolsInterface():$/;"	c
THEORTICAL_PROFIT	common/common.py	/^    THEORTICAL_PROFIT=auto()$/;"	v	class:Types
TOADJUST	engine/symbolsinterface.py	/^    TOADJUST = ['avg_cost_by_stock', 'rel_profit_by_stock']$/;"	v	class:SymbolsInterface
TOADJUSTLONG	engine/symbolsinterface.py	/^    TOADJUSTLONG = ['alldates', 'unrel_profit', 'value', 'tot_profit_by_stock']$/;"	v	class:SymbolsInterface
TOKEEP	engine/symbolsinterface.py	/^    TOKEEP= ['holding_by_stock','rel_profit_by_stock','avg_cost_by_stock','peratio','pricesells'/;"	v	class:SymbolsInterface
TOTPROFIT	common/common.py	/^    TOTPROFIT = auto() #Though I wanted it to be X | Y$/;"	v	class:Types
TRACELEVEL	common/loghandler.py	/^TRACELEVEL=5$/;"	v
TRANSACTIONSOURCE	data/myconfig.py	/^TRANSACTIONSOURCE = TransactionSourceType.IB | TransactionSourceType.MyStock$/;"	v
TRANSACTION_HANDLERS	data/myconfig.py	/^TRANSACTION_HANDLERS={$/;"	v
TRANSLATEDIC	data/myconfig.py	/^TRANSLATEDIC= {$/;"	v
TRANSLATE_EXCHANGES	data/myconfig.py	/^TRANSLATE_EXCHANGES={'NASDAQ':'NYSE'}$/;"	v
TRYSTORAGEFOREARNINGS	data/myconfig.py	/^TRYSTORAGEFOREARNINGS= True$/;"	v
TRYSTORAGEFOREARNINGS	data/myconfig.py	/^TRYSTORAGEFOREARNINGS=1$/;"	v
TZINFO	data/myconfig.py	/^TZINFO=datetime.timezone(datetime.timedelta(hours=-3),'GMT3')$/;"	v
TaskParams	common/dolongprocess.py	/^TaskParams=namedtuple("TaskParams","params finish_params", defaults=(None,None))$/;"	v
TransactionHandlerImplementator	transactions/transactioninterface.py	/^class TransactionHandlerImplementator(metaclass=ABCMeta):$/;"	c
TransactionHandlerInterface	transactions/transactioninterface.py	/^class TransactionHandlerInterface(metaclass=ABCMeta):$/;"	c
TransactionHandlerManager	transactions/transactionhandlermanager.py	/^class TransactionHandlerManager(TransactionHandlerInterface):$/;"	c
TransactionSourceType	transactions/transactioninterface.py	/^class TransactionSourceType(Flag):$/;"	c
TrasnasctionHandler	transactions/transactionhandler.py	/^class TrasnasctionHandler(TransactionHandlerInterface,TransactionHandlerImplementator):$/;"	c
Types	common/common.py	/^class Types(int,Flag):$/;"	c
USEIFAVALIABLE	common/common.py	/^    USEIFAVALIABLE=1$/;"	v	class:UseCache
USEQT	data/myconfig.py	/^USEQT=1$/;"	v
USEQT	graph/graphgenerator.py	/^USEQT=config.USEQT$/;"	v
USEQT	runsit.py	/^USEWX, USEWEB, USEQT, SIMPLEMODE = config.USEWX, config.USEWEB, config.USEQT, config.SIMPLEMODE$/;"	v
USEWEB	data/myconfig.py	/^USEWEB=0$/;"	v
USEWEB	runsit.py	/^USEWX, USEWEB, USEQT, SIMPLEMODE = config.USEWX, config.USEWEB, config.USEQT, config.SIMPLEMODE$/;"	v
USEWX	data/myconfig.py	/^USEWX=0$/;"	v
USEWX	runsit.py	/^USEWX, USEWEB, USEQT, SIMPLEMODE = config.USEWX, config.USEWEB, config.USEQT, config.SIMPLEMODE$/;"	v
UniteType	common/common.py	/^class UniteType(int,Flag):$/;"	c
UseCache	common/common.py	/^class UseCache(int,Enum):$/;"	c
VALIDEXCHANGES	data/myconfig.py	/^VALIDEXCHANGES=["NYSE","NASDAQ","ISLAND","XERTA","LSE"]$/;"	v
VALUE	common/common.py	/^    VALUE=auto()$/;"	v	class:Types
WRONG_EXCHANGE	input/ibsource.py	/^WRONG_EXCHANGE = 200$/;"	v
Window	gui/stockchoice.py	/^class Window(QDialog):$/;"	c
__contains__	common/orederedset.py	/^    def __contains__(self, key):$/;"	m	class:OrderedSet
__eq__	common/orederedset.py	/^    def __eq__(self, other):$/;"	m	class:OrderedSet
__eq__	engine/symbols.py	/^    def __eq__(self, other):$/;"	m	class:AbstractSymbol
__getattr__	engine/symbols.py	/^    def __getattr__(self, item):$/;"	m	class:AbstractSymbol
__getattr__	input/ibsource.py	/^    def __getattr__(self, item):$/;"	m	class:IBSource
__getstate__	engine/parameters.py	/^    def __getstate__(self):$/;"	m	class:Parameters
__getstate__	engine/symbols.py	/^    def __getstate__(self):$/;"	m	class:SimpleSymbol
__getstate__	processing/actondata.py	/^    def __getstate__(self):$/;"	m	class:ActOnData
__gt__	engine/symbols.py	/^    def __gt__(self, other):$/;"	m	class:SimpleSymbol
__hash__	engine/symbols.py	/^    __hash__ = AbstractSymbol.__hash__$/;"	v	class:SimpleSymbol	file:
__hash__	engine/symbols.py	/^    def __hash__(self): #TODO:to precalc$/;"	m	class:AbstractSymbol
__hash__	gui/listobserver.py	/^    __hash__ = AbstractSymbol.__hash__$/;"	v	class:MyItem	file:
__init__	common/common.py	/^    def __init__(self,signal,cond):$/;"	m	class:SafeSignal
__init__	common/common.py	/^    def __init__(self,typ):$/;"	m	class:MySignal
__init__	common/dolongprocess.py	/^    def __init__(self, task):$/;"	m	class:DoLongProcessSlots
__init__	common/dolongprocess.py	/^    def __init__(self,task):$/;"	m	class:DoLongProcess
__init__	common/loghandler.py	/^  def __init__(self):$/;"	m	class:ImpacketFormatter
__init__	common/loghandler.py	/^  def __init__(self):$/;"	m	class:ImpacketFormatterTimeStamp
__init__	common/orederedset.py	/^    def __init__(self, iterable=None):$/;"	m	class:OrderedSet
__init__	common/refvar.py	/^    def __init__(self, value=None):$/;"	m	class:RefVar
__init__	engine/compareengine.py	/^    def __init__(self,axes=None):$/;"	m	class:CompareEngine
__init__	engine/symbols.py	/^    def __init__(self,t):$/;"	m	class:SimpleSymbol
__init__	graph/graphgenerator.py	/^    def __init__(self,axes):$/;"	m	class:GraphGenerator
__init__	gui/daterangeslider.py	/^    def __init__(self,*args, **kw):$/;"	m	class:QDateRangeSlider
__init__	gui/forminitializer.py	/^    def __init__(self):$/;"	m	class:FormInitializer
__init__	gui/forminitializer.py	/^    def __init__(self):$/;"	m	class:MplCanvas
__init__	gui/formobserver.py	/^    def __init__(self):$/;"	m	class:FormObserver
__init__	gui/formobserver.py	/^    def __init__(self):$/;"	m	class:GraphsHandler
__init__	gui/jupyterhandler.py	/^    def __init__(self):$/;"	m	class:JupyterHandler
__init__	gui/listobserver.py	/^    def __init__(self):$/;"	m	class:ListsObserver
__init__	gui/listobserver.py	/^    def __init__(self,text,parent=None,*args):$/;"	m	class:MyItem
__init__	gui/mainwindow.py	/^    def __init__(self):$/;"	m	class:MainWindow
__init__	gui/stockchoice.py	/^    def __init__(self, parent, results, *args):$/;"	m	class:MyTableModel
__init__	gui/stockchoice.py	/^    def __init__(self,inpsource,initial):$/;"	m	class:Window
__init__	ib/ibtestx.py	/^    def __init__(self):$/;"	m	class:IBMediator
__init__	input/earningscommon.py	/^    def __init__(self):$/;"	m	class:RapidApi
__init__	input/earningsproc.py	/^    def __init__(self):$/;"	m	class:EarningProcessor
__init__	input/ibsource.py	/^    def __init__(self,host=config.HOSTIB,port=config.PORTIB,clientId=1,readonly=True,proxy=True)/;"	m	class:IBSource
__init__	input/inputprocessor.py	/^    def __init__(self,symb,transaction_handler,no_input=False):$/;"	m	class:InputProcessor
__init__	input/inputsource.py	/^    def __init__(self):$/;"	m	class:InputSource
__init__	processing/actondata.py	/^    def __init__(self, arr, df, type, fulldf, compare_with, inputData: InputData):$/;"	m	class:ActOnData
__init__	processing/datagenerator.py	/^    def __init__(self):$/;"	m	class:DataGenerator
__init__	transactions/IBtransactionhandler.py	/^    def __init__(self,man):$/;"	m	class:IBTransactionHandler
__init__	transactions/mystockstransactionhandler.py	/^    def __init__(self,manager,):$/;"	m	class:MyStocksTransactionHandler
__init__	transactions/stockprices.py	/^    def __init__(self,man,tickers):$/;"	m	class:StockPrices
__init__	transactions/transactionhandler.py	/^    def __init__(self,manager):$/;"	m	class:TrasnasctionHandler
__init__	transactions/transactionhandlermanager.py	/^    def __init__(self,input_processer):$/;"	m	class:TransactionHandlerManager
__iter__	common/orederedset.py	/^    def __iter__(self):$/;"	m	class:OrderedSet
__len__	common/orederedset.py	/^    def __len__(self):$/;"	m	class:OrderedSet
__lt__	engine/symbols.py	/^    def __lt__(self, other):$/;"	m	class:SimpleSymbol
__nsetattr__	engine/parameters.py	/^    def __nsetattr__(self, name, value):$/;"	f	function:paramaware	file:
__post_init__	engine/parameters.py	/^    def __post_init__(self,ext,baseclass=None):$/;"	m	class:Parameters
__repr__	common/orederedset.py	/^    def __repr__(self):$/;"	m	class:OrderedSet
__reversed__	common/orederedset.py	/^    def __reversed__(self):$/;"	m	class:OrderedSet
__setstate__	engine/symbols.py	/^    def __setstate__(self, d):$/;"	m	class:SimpleSymbol
__slots__	common/orederedset.py	/^    __slots__ = 'prev', 'next', 'key', '__weakref__'$/;"	v	class:Link	file:
__str__	engine/symbols.py	/^    def __str__(self):$/;"	m	class:SimpleSymbol
__str__	gui/listobserver.py	/^    def __str__(self):$/;"	m	class:MyItem
_ext	engine/parameters.py	/^    _ext : list =field(default_factory=config.EXT.copy)$/;"	v	class:Parameters	typeref:typename:list
_fromdate	engine/parameters.py	/^    _fromdate : datetime=None$/;"	v	class:Parameters	typeref:typename:datetime
_get_crypto_history	input/investpysource.py	/^    def _get_crypto_history(self,sym,startdate,enddate):$/;"	m	class:InvestPySource
_get_symbol_history	input/investpysource.py	/^    def _get_symbol_history(self, sym, startdate, enddate):$/;"	m	class:InvestPySource
_selected_stocks	engine/parameters.py	/^    _selected_stocks: list =field(default_factory=list)$/;"	v	class:Parameters	typeref:typename:list
_todate	engine/parameters.py	/^    _todate: datetime =None$/;"	v	class:Parameters	typeref:typename:datetime
add	common/orederedset.py	/^    def add(self, key):$/;"	m	class:OrderedSet
addAttrs	common/common.py	/^def addAttrs(attr_names):$/;"	f
add_current_to	gui/listobserver.py	/^    def add_current_to(self, org):$/;"	m	class:ListsObserver
add_reserved	gui/listobserver.py	/^    def add_reserved(self):$/;"	m	class:ListsObserver
add_selected	gui/listobserver.py	/^    def add_selected(self):$/;"	m	class:ListsObserver
add_to_ref	gui/listobserver.py	/^    def add_to_ref(self):$/;"	m	class:ListsObserver
add_to_sel	gui/listobserver.py	/^    def add_to_sel(self):$/;"	m	class:ListsObserver
additems	gui/listobserver.py	/^def additems(lstwid,items):$/;"	f
adjust_for_currency	input/inputprocessor.py	/^    def adjust_for_currency(self):$/;"	m	class:InputProcessor
adjust_sym_for_currency	input/inputprocessor.py	/^    def adjust_sym_for_currency(self, currency, enddate, fromdate, hist, sym):$/;"	m	class:InputProcessor
adjust_to_currency	engine/parameters.py	/^    adjust_to_currency : bool= True$/;"	v	class:Parameters	typeref:typename:bool
adjusted_for_base_cur	engine/parameters.py	/^    adjusted_for_base_cur :bool =True$/;"	v	class:Parameters	typeref:typename:bool
adjusted_panel	input/inputprocessor.py	/^    def adjusted_panel(self):$/;"	m	class:InputProcessor
adjusted_panel	input/inputprocessor.py	/^    def adjusted_panel(self, value):$/;"	m	class:InputProcessor
after_load	gui/forminitializer.py	/^    def after_load(self):$/;"	m	class:FormInitializer
after_load	gui/forminitializerinterface.py	/^    def after_load(self):$/;"	m	class:FormInitializerInterface
after_task	gui/formobserver.py	/^        def after_task():$/;"	f	member:GraphsHandler.load_graph	file:
alldates	input/inputdata.py	/^        def alldates(self):$/;"	m	class:InputData
anotherproc	runsit.py	/^anotherproc=None$/;"	v
app	__main__.py	/^    from ipykernel import kernelapp as app$/;"	Y	nameref:unknown:kernelapp
appenddf	input/earningsproc.py	/^        def appenddf(org,other):$/;"	f	member:EarningProcessor.get_earnings	file:
attribute_set	gui/formobserver.py	/^    def attribute_set(self, attr, value, reset_ranges=0):$/;"	m	class:FormObserver
avg_cost_by_stock	input/inputdata.py	/^        def avg_cost_by_stock(self):$/;"	m	class:InputData
axes	gui/forminitializer.py	/^    def axes(self):$/;"	m	class:FormInitializer
baseclass	engine/parameters.py	/^    baseclass = dataclasses.InitVar$/;"	v	class:Parameters
buydic	transactions/transactionhandler.py	/^    def buydic(self) -> dict:$/;"	m	class:TrasnasctionHandler	typeref:typename:dict
buydic	transactions/transactionhandlermanager.py	/^    def buydic(self) -> dict:$/;"	m	class:TransactionHandlerManager	typeref:typename:dict
buydic	transactions/transactioninterface.py	/^    def buydic(self) -> Dict[datetime,BuyDictItem]:$/;"	m	class:TransactionHandlerInterface	typeref:typename:Dict[datetime,BuyDictItem]
buysymbols	transactions/transactionhandler.py	/^    def buysymbols(self) -> set:$/;"	m	class:TrasnasctionHandler	typeref:typename:set
buysymbols	transactions/transactionhandlermanager.py	/^    def buysymbols(self) -> set:$/;"	m	class:TransactionHandlerManager	typeref:typename:set
calc_shares	input/earningsproc.py	/^    def calc_shares(self, tickers):$/;"	m	class:EarningProcessor
calc_splited	input/inputprocessor.py	/^        def calc_splited(sym,last_time, time):$/;"	f	member:InputProcessor.process_hist_internal	file:
calc_theoritical_profit	processing/actondata.py	/^    def calc_theoritical_profit(self):$/;"	m	class:ActOnData
call	gui/formobserver.py	/^        def call(after_task):$/;"	f	member:FormObserver.update_graph	file:
call_graph_generator	engine/compareengine.py	/^    def call_graph_generator(self, B, just_upd, type):$/;"	m	class:CompareEngine
can_handle_dict	input/ibsource.py	/^    def can_handle_dict(self, sym):$/;"	m	class:IBSource
can_handle_dict	input/inputsource.py	/^    def can_handle_dict(self, sym):$/;"	m	class:InputSourceInterface
can_handle_dict	input/inputsource.py	/^    def can_handle_dict(self,sym):$/;"	m	class:InputSource
category_changed	gui/formobserver.py	/^    def category_changed(self,num):$/;"	m	class:FormObserver
change_mode	gui/formobserver.py	/^    def change_mode(self,mode,val):$/;"	m	class:FormObserver
clientDisconnect	ibsrv.py	/^    def clientDisconnect(self,conn):$/;"	m	class:MyDeamon
closeEvent	gui/mainwindow.py	/^    def closeEvent(self, event):$/;"	m	class:MainWindow
code	config/config.py	/^    code = compile(f.read(), config_file, 'exec')$/;"	v
cols_by_selection	processing/datagenerator.py	/^    def cols_by_selection(self,  data):$/;"	m	class:DataGenerator
columnCount	gui/stockchoice.py	/^    def columnCount(self, parent):$/;"	m	class:MyTableModel
combine	transactions/transactionhandlermanager.py	/^    def combine(self):$/;"	m	class:TransactionHandlerManager
command	common/dolongprocess.py	/^    command = Signal(TaskParams)$/;"	v	class:DoLongProcessSlots
compare_changed	gui/formobserver.py	/^    def compare_changed(self,num):$/;"	m	class:FormObserver
compare_with	engine/parameters.py	/^    compare_with: str =None$/;"	v	class:Parameters	typeref:typename:str
complete_status	input/inputprocessor.py	/^    def complete_status(self):$/;"	m	class:InputProcessor
complete_status	input/inputprocessorinterface.py	/^    def complete_status(self):$/;"	m	class:InputProcessorInterface
condmax	processing/datagenerator.py	/^        condmax = lambda min, max: (max >= self.params.valuerange[0] and max <= self.params.valu/;"	f	member:DataGenerator.filter_ranges	file:
condmin	processing/datagenerator.py	/^        condmin = lambda min, max: (min >= self.params.valuerange[0] and min <= self.params.valu/;"	f	member:DataGenerator.filter_ranges	file:
condrange	processing/datagenerator.py	/^        condrange = lambda min, max: (min >= self.params.valuerange[0] and max <= self.params.va/;"	f	member:DataGenerator.filter_ranges	file:
config_file	config/config.py	/^res,config_file=resolvefile('myconfig.py')$/;"	v
connect	common/common.py	/^    def connect(self,  slot):$/;"	m	class:MySignal
connect	common/common.py	/^    def connect(self,  slot):$/;"	m	class:SafeSignal
conv_date	common/common.py	/^def conv_date(dat):$/;"	f
convert_dicts_to_df_and_add_earnings	input/inputprocessor.py	/^    def convert_dicts_to_df_and_add_earnings(self,partial_symbols_update):$/;"	m	class:InputProcessor
copyit	engine/parameters.py	/^def copyit(cls):$/;"	f
costcomp	processing/actondata.py	/^            costcomp = lambda f: intialCostComp * self._ds.avg_cost_by_stock[st][f] \/ intialCos/;"	f	member:ActOnData.calc_theoritical_profit	file:
createForm	gui/stockchoice.py	/^    def createForm(self):$/;"	m	class:Window
cur_category	engine/compareengine.py	/^    def cur_category(self) -> str:$/;"	m	class:CompareEngine	typeref:typename:str
cur_category	engine/compareengine.py	/^    def cur_category(self, value: str):$/;"	m	class:CompareEngine
cur_category	engine/parameters.py	/^    cur_category:str = None$/;"	v	class:Parameters	typeref:typename:str
currency_to_adjust	engine/parameters.py	/^    currency_to_adjust: str = None$/;"	v	class:Parameters	typeref:typename:str
daemon	ibsrv.py	/^daemon = MyDeamon(host="localhost",port=config.IBSRVPORT)                # make a Pyro daemon$/;"	v
data	gui/stockchoice.py	/^    def data(self, index, role):$/;"	m	class:MyTableModel
datapath	config/config.py	/^datapath=os.path.realpath((os.path.join(MYPATH,'..','data')))$/;"	v
dateValueChanged	gui/daterangeslider.py	/^    dateValueChanged = Signal(tuple)$/;"	v	class:QDateRangeSlider
date_changed	gui/formobserver.py	/^    def date_changed(self, value,toupdate=True):$/;"	m	class:FormObserver
datevalue	gui/daterangeslider.py	/^    def datevalue(self):$/;"	m	class:QDateRangeSlider
datevalue	gui/daterangeslider.py	/^    def datevalue(self,val):$/;"	m	class:QDateRangeSlider
deco	common/common.py	/^  def deco(cls):$/;"	f	function:addAttrs	file:
decorated	common/common.py	/^    def decorated(func):$/;"	f	function:simple_exception_handling	file:
decorator	common/refvar.py	/^    def decorator(klass):$/;"	f	function:refproperty	file:
decrease	gui/formobserver.py	/^    def decrease(self,*args):$/;"	m	class:FormObserver
def_fig_size	engine/parameters.py	/^    def_fig_size : tuple = config.DEF_FIG_SIZE$/;"	v	class:Parameters	typeref:typename:tuple
default	common/common.py	/^    def default(self, o):$/;"	m	class:EnhancedJSONEncoder
del_in_lists	gui/listobserver.py	/^    def del_in_lists(self):$/;"	m	class:ListsObserver
del_selected	gui/listobserver.py	/^    def del_selected(z):$/;"	m	class:ListsObserver
dic	engine/symbols.py	/^    def dic(self):$/;"	m	class:AbstractSymbol
dic	engine/symbols.py	/^    def dic(self):$/;"	m	class:SimpleSymbol
dic	gui/listobserver.py	/^    def dic(self):$/;"	m	class:MyItem
dictfilt	common/common.py	/^dictfilt = lambda x, y: dict([(i, x[i]) for i in x if i in set(y)])$/;"	f
dictnfilt	common/common.py	/^dictnfilt = lambda x, y: dict([(i, x[i]) for i in x if not(i in set(y))])$/;"	f
discard	common/orederedset.py	/^    def discard(self, key):$/;"	m	class:OrderedSet
display_graph	jupyter/jupytertools.py	/^def display_graph():$/;"	f
do	processing/actondata.py	/^    def do(self):$/;"	m	class:ActOnData
do_select	gui/formobserver.py	/^    def do_select(self):$/;"	m	class:FormObserver
doquery	transactions/IBtransactionhandler.py	/^    def doquery(self):$/;"	m	class:IBTransactionHandler
edit_groups	gui/formobserver.py	/^    def edit_groups(self):$/;"	m	class:FormObserver
edited	gui/stockchoice.py	/^    def edited(self):$/;"	m	class:Window
emit	common/common.py	/^    def emit(self,*args,**kw):$/;"	m	class:MySignal
emit	common/common.py	/^    def emit(self,*args,**kw):$/;"	m	class:SafeSignal
export_portfolio	transactions/transactionhandlermanager.py	/^    def export_portfolio(self):$/;"	m	class:TransactionHandlerManager
ext	engine/parameters.py	/^    def ext(self):$/;"	m	class:Parameters
ext	engine/parameters.py	/^    def ext(self,v):$/;"	m	class:Parameters
ext	engine/parameters.py	/^    ext: dataclasses.InitVar[list] = field(default=[]) #same as reference stock$/;"	v	class:Parameters	typeref:typename:dataclasses.InitVar[list]
f	runsit.py	/^        def f():$/;"	f	function:main	file:
fast_conv_to_df	input/inputprocessor.py	/^    def fast_conv_to_df(self, dicdics):$/;"	m	class:InputProcessor
figure	gui/forminitializer.py	/^    def figure(self):$/;"	m	class:FormInitializer
fil	config/config.py	/^    res, fil=resolvefile(globals()[f])$/;"	v
filt	processing/datagenerator.py	/^        def filt(x,df):$/;"	f	member:DataGenerator.unite_groups	file:
filter_bad	transactions/stockprices.py	/^    def filter_bad(self):$/;"	m	class:StockPrices
filter_input	input/inputprocessor.py	/^    def filter_input(self,keys):$/;"	m	class:InputProcessor
filter_ranges	processing/datagenerator.py	/^    def filter_ranges(self, Marr, b, df, min_arr):$/;"	m	class:DataGenerator
finished	common/dolongprocess.py	/^    finished = Signal()$/;"	v	class:DoLongProcess
finished	common/dolongprocess.py	/^    finished = Signal(tuple)$/;"	v	class:DoLongProcessSlots
finishedGeneration	processing/datagenerator.py	/^    finishedGeneration=MySignal(int)$/;"	v	class:DataGenerator
finished_generation	gui/jupyterhandler.py	/^    def finished_generation(self,number):$/;"	m	class:JupyterHandler
firstKeynotNan	processing/actondata.py	/^        firstKeynotNan = lambda x: next((k for k,l in x.items() if not math.isnan(l)))$/;"	f	member:ActOnData.calc_theoritical_profit	file:
firstnotNan	processing/actondata.py	/^        firstnotNan = lambda x: next((l for l in x.values() if not math.isnan(l)))$/;"	f	member:ActOnData.calc_theoritical_profit	file:
fix_valid_exchanges	input/inputsource.py	/^        def fix_valid_exchanges(l):$/;"	f	member:InputSource.resolve_symbols	file:
fixinf	processing/actondata.py	/^    def fixinf(self,arr):$/;"	m	class:ActOnData
flaskapp	ib/ibtestx.py	/^flaskapp = Flask('ibtest')$/;"	v
format	common/loghandler.py	/^  def format(self, record):$/;"	m	class:ImpacketFormatter
formatTime	common/loghandler.py	/^  def formatTime(self, record, datefmt=None):$/;"	m	class:ImpacketFormatterTimeStamp
fromdate	engine/parameters.py	/^    def fromdate(self):$/;"	m	class:Parameters
fromdate	engine/parameters.py	/^    def fromdate(self, value):$/;"	m	class:Parameters
fromstorage	input/earningsproc.py	/^    def fromstorage():$/;"	m	class:EarningProcessor
func	runsit.py	/^def func(x=None):$/;"	f
gen_actual_graph	graph/graphgenerator.py	/^    def gen_actual_graph(self, B, cols, dt, isline, starthidden, just_upd,type):$/;"	m	class:GraphGenerator
gen_graph	engine/compareengine.py	/^    def gen_graph(self, params: Parameters, just_upd=0, reprocess=1):$/;"	m	class:CompareEngine
generate_data	processing/datagenerator.py	/^    def generate_data(self):$/;"	m	class:DataGenerator
generate_initial_data	processing/datagenerator.py	/^    def generate_initial_data(self, compare_with, type):$/;"	m	class:DataGenerator
generate_or_make	input/earningsproc.py	/^    def generate_or_make():$/;"	m	class:EarningProcessor
generate_temp	gui/jupyterhandler.py	/^    def generate_temp(self):$/;"	m	class:JupyterHandler
generation_task	gui/jupyterhandler.py	/^    def generation_task(self):$/;"	m	class:JupyterHandler
generic_add_lists	gui/listobserver.py	/^    def generic_add_lists(org, dst):$/;"	m	class:ListsObserver
genobs	gui/formobserver.py	/^        genobs=lambda x:partial(self.attribute_set, x, reset_ranges=ResetRanges.DONT)$/;"	f	member:FormObserver.setup_observers	file:
genobsReset	gui/formobserver.py	/^        genobsReset = lambda x: partial(self.attribute_set, x, reset_ranges=1)$/;"	f	member:FormObserver.setup_observers	file:
genobsResetForce	gui/formobserver.py	/^        genobsResetForce = lambda x: partial(self.attribute_set, x, reset_ranges=ResetRanges.FOR/;"	f	member:FormObserver.setup_observers	file:
get	common/refvar.py	/^    def get(self,*args):$/;"	m	class:RefVar
getAttr	common/common.py	/^      def getAttr(self, attr_name=attr_name):$/;"	f	function:addAttrs.deco	file:
getInfo	gui/stockchoice.py	/^    def getInfo(self):$/;"	m	class:Window
get_DF	input/inputprocessor.py	/^        def get_DF(dic,name):$/;"	f	member:InputProcessor.fast_conv_to_df	file:
get_account_data	ib/ibtestx.py	/^def get_account_data():$/;"	f
get_adjusted_df_for_currency	input/inputprocessor.py	/^    def get_adjusted_df_for_currency(self, dic):$/;"	m	class:InputProcessor
get_all_symbols	input/inputsource.py	/^    def get_all_symbols(self):$/;"	m	class:InputSource
get_all_symbols	input/inputsource.py	/^    def get_all_symbols(self):$/;"	m	class:InputSourceInterface
get_contract_details_ext	input/ibsource.py	/^    def get_contract_details_ext(self, contractdic):$/;"	m	class:IBSourceRem
get_currency_hist	input/inputprocessor.py	/^    def get_currency_hist(self, currency, fromdate, enddate):$/;"	m	class:InputProcessor
get_currency_hist	input/inputprocessorinterface.py	/^    def get_currency_hist(self, currency, fromdate, enddate):$/;"	m	class:InputProcessorInterface
get_currency_history	input/ibsource.py	/^    def get_currency_history(self, pair, startdate, enddate):$/;"	m	class:IBSource
get_currency_history	input/inputsource.py	/^    def get_currency_history(self, pair, startdate, enddate):$/;"	m	class:InputSourceInterface
get_currency_history	input/investpysource.py	/^    def get_currency_history(self, pair : tuple, startdate, enddate):$/;"	m	class:InvestPySource
get_current_currency	input/ibsource.py	/^    def get_current_currency(self, pair):$/;"	m	class:IBSourceRem
get_current_currency	input/inputsource.py	/^    def get_current_currency(self, pair):$/;"	m	class:InputSourceInterface
get_current_currency	input/investpysource.py	/^    def get_current_currency(self,pair):$/;"	m	class:InvestPySource
get_data_by_type	processing/datagenerator.py	/^    def get_data_by_type(self, type= Types.RELTOMAX, compare_with=None):$/;"	m	class:DataGenerator
get_data_from_source	input/inputprocessor.py	/^    def get_data_from_source(self, partial_symbols_update,fromdate,todate):$/;"	m	class:InputProcessor
get_datesym	transactions/transactionhandlermanager.py	/^        def get_datesym(buydic):$/;"	f	member:TransactionHandlerManager.combine	file:
get_df_by_type	processing/datagenerator.py	/^    def get_df_by_type(self, div,unitetyp):$/;"	m	class:DataGenerator
get_earnings	input/earningsinp.py	/^def get_earnings():$/;"	f
get_earnings	input/earningsproc.py	/^    def get_earnings(self,tickers,periods=range(-23,3)):$/;"	m	class:EarningProcessor
get_earnings_hist	input/earningsproc.py	/^    def get_earnings_hist(self,ids_dic,periods=range(-23,3)):$/;"	m	class:SeekingAlphaApi
get_first_where_all_are_good	common/common.py	/^def get_first_where_all_are_good(arr,remove_zeros=False,last=0):$/;"	f
get_handlers	transactions/transactionhandlermanager.py	/^    def get_handlers(self):$/;"	m	class:TransactionHandlerManager
get_hist_split	transactions/stockprices.py	/^    def get_hist_split(self,symbol):$/;"	m	class:StockPrices
get_hist_sym	input/inputprocessor.py	/^    def get_hist_sym(self,mindate, maxdate, sym, sym_corrected):$/;"	m	class:InputProcessor
get_ib_handler	transactions/IBtransactionhandler.py	/^def get_ib_handler(man):$/;"	f
get_ib_source	input/ibsource.py	/^def get_ib_source() :$/;"	f
get_ids	input/earningsproc.py	/^    def get_ids(self, tickers):$/;"	m	class:EarningProcessor
get_json	input/earningscommon.py	/^    def get_json(self,querystring, url):$/;"	m	class:RapidApi
get_matching_symbols	input/ibsource.py	/^    def get_matching_symbols(self, sym, results=10):$/;"	m	class:IBSource
get_matching_symbols	input/inputsource.py	/^    def get_matching_symbols(self, sym, results):$/;"	m	class:InputSourceInterface
get_matching_symbols	input/investpysource.py	/^    def get_matching_symbols(self,sym,results=16):$/;"	m	class:InvestPySource
get_matching_symbols_int	input/ibsource.py	/^    def get_matching_symbols_int(self, sym,results=10):$/;"	m	class:IBSourceRem
get_meta_data	input/earningsproc.py	/^    def get_meta_data(self,tick):$/;"	m	class:SeekingAlphaApi
get_options_from_groups	engine/compareengine.py	/^    def get_options_from_groups(self,ls):$/;"	m	class:CompareEngine
get_options_from_groups	engine/symbolsinterface.py	/^    def get_options_from_groups(self, ls):$/;"	m	class:SymbolsInterface
get_portfolio_stocks	engine/compareengineinterface.py	/^    def get_portfolio_stocks(self):  # TODO:: to fix$/;"	m	class:CompareEngineInterface
get_portfolio_stocks	transactions/transactionhandler.py	/^    def get_portfolio_stocks(self):  # TODO:: to fix$/;"	m	class:TrasnasctionHandler
get_portfolio_stocks	transactions/transactioninterface.py	/^    def get_portfolio_stocks(self):  # TODO:: to fix$/;"	m	class:TransactionHandlerInterface
get_portfolio_stocks	transactions/transactioninterface.py	/^    def get_portfolio_stocks(self):$/;"	m	class:TransactionHandlerImplementator
get_positions	input/ibsource.py	/^    def get_positions(self):$/;"	m	class:IBSourceRem
get_range_gap	input/inputprocessor.py	/^        def get_range_gap(dates,fromdate,todate):$/;"	f	member:InputProcessor.get_data_from_source	file:
get_realtime_contract	input/ibsource.py	/^    def get_realtime_contract(self, contract):$/;"	m	class:IBSourceRem
get_ref_array	processing/actondata.py	/^    def get_ref_array(self,arr):$/;"	m	class:ActOnData
get_relevant_currency	input/inputprocessor.py	/^    def get_relevant_currency(self,x):$/;"	m	class:InputProcessor
get_shares	input/earningsproc.py	/^    def get_shares(self,tick):$/;"	m	class:SeekingAlphaApi
get_stat	input/inputprocessor.py	/^        def get_stat(filter_str):$/;"	f	member:InputProcessor.complete_status	file:
get_stock_handler	transactions/mystockstransactionhandler.py	/^def get_stock_handler(man):$/;"	f
get_symbol_history	input/ibsource.py	/^    def get_symbol_history(self, sym, startdate, enddate, iscrypto=False):$/;"	m	class:IBSource
get_symbol_history	input/inputsource.py	/^    def get_symbol_history(self, sym, startdate, enddate, iscrypto):$/;"	m	class:InputSourceInterface
get_symbol_history	input/investpysource.py	/^    def get_symbol_history(self, sym, startdate, enddate, iscrypto=False):$/;"	m	class:InvestPySource
get_title	graph/graphgenerator.py	/^    def get_title(self):$/;"	m	class:GraphGenerator
get_updated_dict	ib/ibtestx.py	/^    def get_updated_dict(self,w):$/;"	m	class:IBMediator
get_vars	transactions/transactionhandlermanager.py	/^        def get_vars(dicforsym,mindate):$/;"	f	member:TransactionHandlerManager.combine	file:
get_vars_for_cache	transactions/mystockstransactionhandler.py	/^    def get_vars_for_cache(self):$/;"	m	class:MyStocksTransactionHandler
get_vars_for_cache	transactions/stockprices.py	/^    def get_vars_for_cache(self):$/;"	m	class:StockPrices
get_vars_for_cache	transactions/transactionhandler.py	/^    def get_vars_for_cache(self):$/;"	m	class:TrasnasctionHandler
get_vars_for_cache	transactions/transactioninterface.py	/^    def get_vars_for_cache(self):$/;"	m	class:TransactionHandlerImplementator
getbasetype	graph/graphgenerator.py	/^        def getbasetype(type):    $/;"	f	member:GraphGenerator.get_title	file:
getearnings_int	input/earningsinp.py	/^def getearnings_int(st, aa):$/;"	f
getp	common/refvar.py	/^    def getp(self):$/;"	f	function:refproperty	file:
graphObj	gui/forminterface.py	/^        def graphObj(self) -> SymbolsInterface:$/;"	m	class:FormInterface	typeref:typename:SymbolsInterface
graphObj	gui/mainwindow.py	/^    def graphObj(self) -> SymbolsInterface:$/;"	m	class:MainWindow	typeref:typename:SymbolsInterface
graphObj	gui/mainwindow.py	/^    def graphObj(self, value):$/;"	m	class:MainWindow
grep_positions_value	ib/ibtestx.py	/^    def grep_positions_value(self,added_qty=0,buy_price=0,override=0):$/;"	m	class:IBMediator
groups	engine/parameters.py	/^    groups : list =field(default_factory=list)$/;"	v	class:Parameters	typeref:typename:list
groups_changed	gui/formobserver.py	/^    def groups_changed(self):$/;"	m	class:FormObserver
handle_compare	processing/actondata.py	/^    def handle_compare(self):$/;"	m	class:ActOnData
handle_line	graph/graphgenerator.py	/^    def handle_line(self,ar,starthidden,just_upd):$/;"	m	class:GraphGenerator
handle_operation	processing/actondata.py	/^    def handle_operation(self):$/;"	m	class:ActOnData
headerData	gui/stockchoice.py	/^    def headerData(self, col, orientation, role):$/;"	m	class:MyTableModel
helper	engine/parameters.py	/^    def helper(self,ls):$/;"	m	class:Parameters
historicalhelper	input/ibsource.py	/^    def historicalhelper(self, startdate, enddate, contract):$/;"	m	class:IBSource
holdcomp	processing/actondata.py	/^            holdcomp = lambda f: intialHoldComp * self._ds.holding_by_stock[st][f] \/ initialHol/;"	f	member:ActOnData.calc_theoritical_profit	file:
holding_by_stock	input/inputdata.py	/^        def holding_by_stock(self):$/;"	m	class:InputData
ifnn	common/common.py	/^def ifnn(t, v, els=lambda: None):$/;"	f
ignore_minmax	engine/parameters.py	/^    ignore_minmax: bool = False$/;"	v	class:Parameters	typeref:typename:bool
increase_fig	engine/parameters.py	/^    increase_fig: bool = False$/;"	v	class:Parameters	typeref:typename:bool
increase_fig	engine/parameters.py	/^    increase_fig: bool =1$/;"	v	class:Parameters	typeref:typename:bool
index_of	common/common.py	/^def index_of(val, in_list):$/;"	f
init	input/ibsource.py	/^    def init(self,host=config.HOSTIB,port=config.PORTIB,clientId=1,readonly=True):$/;"	m	class:IBSourceRem
init_input	input/inputprocessor.py	/^    def init_input(self):$/;"	m	class:InputProcessor
init_log	common/loghandler.py	/^def init_log(ts=False):$/;"	f
initialize_graph_and_ib	runsit.py	/^def initialize_graph_and_ib(axes=None):$/;"	f
inputsource	engine/symbolsinterface.py	/^    def inputsource(self) -> InputSourceInterface:$/;"	m	class:SymbolsInterface	typeref:typename:InputSourceInterface
inputsource	input/inputprocessor.py	/^    def inputsource(self) -> InputSourceInterface:$/;"	m	class:InputProcessor	typeref:typename:InputSourceInterface
internal	common/common.py	/^        def internal(*args,**kwargs):$/;"	f	function:simple_exception_handling.decorated	file:
internal_save	gui/formobserver.py	/^    def internal_save(self, text,upd=True):$/;"	m	class:GraphsHandler
intersection	common/orederedset.py	/^    def intersection(self,set):$/;"	m	class:MyOrderedSet
is_initialized	input/earningscommon.py	/^    def is_initialized(self):$/;"	m	class:RapidApi
is_started	common/dolongprocess.py	/^    def is_started(self):$/;"	m	class:DoLongProcess
is_started	common/dolongprocess.py	/^    def is_started(self):$/;"	m	class:DoLongProcessSlots
isline	engine/parameters.py	/^    isline: bool =True$/;"	v	class:Parameters	typeref:typename:bool
kill_proc_tree	runsit.py	/^def kill_proc_tree(pid, including_parent=True):$/;"	f
launch_notebook	gui/jupyterhandler.py	/^    def launch_notebook(self,filename=None):$/;"	m	class:JupyterHandler
limit_by	engine/parameters.py	/^    limit_by : LimitType = LimitType.RANGE$/;"	v	class:Parameters	typeref:typename:LimitType
limit_port_changed	gui/formobserver.py	/^    def limit_port_changed(self,val):$/;"	m	class:FormObserver
limit_to_portfolio	engine/parameters.py	/^    limit_to_portfolio : bool =False$/;"	v	class:Parameters	typeref:typename:bool
lmap	common/common.py	/^lmap= lambda x,y: list(map(x,y))$/;"	f
load_cache	input/inputprocessor.py	/^    def load_cache(self,minimal=False):$/;"	m	class:InputProcessor
load_data	jupyter/jupytertools.py	/^def load_data() -> Serialized:$/;"	f	typeref:typename:Serialized
load_existing_graphs	gui/formobserver.py	/^    def load_existing_graphs(self):$/;"	m	class:GraphsHandler
load_from_json_dict	engine/parameters.py	/^    def load_from_json_dict(cls,dic):$/;"	m	class:Parameters
load_graph	gui/formobserver.py	/^    def load_graph(self,text=None):$/;"	m	class:GraphsHandler
load_jupyter_observers	gui/jupyterhandler.py	/^    def load_jupyter_observers(self):$/;"	m	class:JupyterHandler
load_last_if_needed	gui/formobserver.py	/^    def load_last_if_needed(self):$/;"	m	class:GraphsHandler
load_ui	gui/mainwindow.py	/^    def load_ui(self):$/;"	m	class:MainWindow
localize_me	input/earningscommon.py	/^localize_me = lambda x: (pytz.UTC.localize(x, True) if not x.tzinfo else x)/;"	f
localize_me	input/inputprocessor.py	/^        localize_me = lambda x: (pytz.UTC.localize(x, True) if not x.tzinfo else x)$/;"	f	member:InputProcessor.get_data_from_source	file:
loctim	transactions/mystockstransactionhandler.py	/^        def loctim(dic,item): #not the most efficient.$/;"	f	member:MyStocksTransactionHandler.save_transaction_table	file:
log_colors	common/loghandler.py	/^log_colors = {$/;"	v
log_conv	common/common.py	/^def log_conv(*tup):$/;"	f
lookup_symbol	gui/listobserver.py	/^    def lookup_symbol(self):$/;"	m	class:ListsObserver
main	app.py	/^def main():$/;"	f
main	ib/ibtestx.py	/^def main(runFalsk=True):$/;"	f
main	runsit.py	/^def main():$/;"	f
mediator	ib/ibtestx.py	/^mediator=None $/;"	v
minMaxChanged	processing/datagenerator.py	/^    minMaxChanged=MySignal(tuple)$/;"	v	class:DataGenerator
my_val_change	gui/daterangeslider.py	/^    def my_val_change(self,val):$/;"	m	class:QDateRangeSlider
myinstance	gui/stockchoice.py	/^    myinstance=None$/;"	v	class:Window
namesChanged	processing/datagenerator.py	/^    namesChanged = MySignal(int)$/;"	v	class:DataGenerator
nanch	transactions/transactionhandler.py	/^        def nanch(x):$/;"	f	member:TrasnasctionHandler.update_sym_property	file:
nbutil	input/ibsource.py	/^from ib_insync import Forex, util as nbutil, Contract, RequestError$/;"	Y	nameref:unknown:util
need_add_process	common/common.py	/^def need_add_process(config):$/;"	f
newinit	common/refvar.py	/^        def newinit(self,*args,**kw):$/;"	f	function:refproperty.decorator	file:
newinit	engine/parameters.py	/^    def newinit(self,*args,**kwargs):$/;"	f	function:paramaware	file:
np	common/common.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	processing/actondata.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	processing/datagenerator.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	transactions/transactionhandlermanager.py	/^import numpy as np$/;"	I	nameref:module:numpy
numrange	engine/parameters.py	/^    numrange : List[int] = (None,None)$/;"	v	class:Parameters	typeref:typename:List[int]
on_disconnect	input/ibsource.py	/^    def on_disconnect():$/;"	m	class:IBSourceRem
on_json_closed	gui/formobserver.py	/^    def on_json_closed(self,*args):$/;"	m	class:FormObserver
onpick	graph/graphgenerator.py	/^    def onpick(self,event):$/;"	m	class:GraphGenerator
ownership	input/ibsource.py	/^    def ownership(self):$/;"	m	class:IBSource
paramaware	engine/parameters.py	/^def paramaware(klass):$/;"	f
params	engine/compareengine.py	/^    def params(self) -> Parameters:$/;"	m	class:CompareEngine	typeref:typename:Parameters
params	engine/compareengine.py	/^    def params(self,value : Parameters):$/;"	m	class:CompareEngine
params	engine/symbolsinterface.py	/^    def params(self) -> Parameters:$/;"	m	class:SymbolsInterface	typeref:typename:Parameters
params	transactions/transactionhandlermanager.py	/^    def params(self):$/;"	m	class:TransactionHandlerManager
pd	gui/daterangeslider.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	input/inputprocessor.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	input/inputsource.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	input/investpysource.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	transactions/mystockstransactionhandler.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	transactions/transactionhandlermanager.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd_ignore_warning	runsit.py	/^def pd_ignore_warning():$/;"	f
plt	runsit.py	/^        from matplotlib import pyplot as plt$/;"	Y	function:main	file:	nameref:unknown:pyplot
pop	common/orederedset.py	/^    def pop(self, last=True):$/;"	m	class:OrderedSet
populate_buydic	transactions/IBtransactionhandler.py	/^    def populate_buydic(self):$/;"	m	class:IBTransactionHandler
populate_buydic	transactions/mystockstransactionhandler.py	/^    def populate_buydic(self):$/;"	m	class:MyStocksTransactionHandler
populate_buydic	transactions/stockprices.py	/^    def populate_buydic(self):$/;"	m	class:StockPrices
populate_buydic	transactions/transactioninterface.py	/^    def populate_buydic(self):$/;"	m	class:TransactionHandlerImplementator
portfolio	engine/parameters.py	/^    portfolio: str  = None #The portfolio to read from transaction table in MyStocks$/;"	v	class:Parameters	typeref:typename:str
prepare_graph_widget	gui/forminitializer.py	/^    def prepare_graph_widget(self):$/;"	m	class:FormInitializer
prepare_graph_widget	gui/forminitializerinterface.py	/^    def prepare_graph_widget(self):$/;"	m	class:FormInitializerInterface
prepare_sliders	gui/mainwindow.py	/^    def prepare_sliders(self):$/;"	m	class:MainWindow
print_formatted_traceback	common/common.py	/^def print_formatted_traceback():$/;"	f
print_if_ok	config/config.py	/^def print_if_ok(*args):$/;"	f
process	engine/compareengineinterface.py	/^    def process(self,  partial_symbol_update=Set,params=None):$/;"	m	class:CompareEngineInterface
process	input/inputprocessor.py	/^    def process(self, partial_symbol_update=set(),params=None,buy_filter=None):$/;"	m	class:InputProcessor
process	input/inputprocessorinterface.py	/^    def process(self, partial_symbol_update, params, buy_filter):$/;"	m	class:InputProcessorInterface
process_command	common/dolongprocess.py	/^    def process_command(self, taskparams):$/;"	m	class:DoLongProcessSlots
process_elem	gui/listobserver.py	/^    def process_elem(self,params):$/;"	m	class:ListsObserver
process_hist_internal	input/inputprocessor.py	/^    def process_hist_internal(self, buyoperations, cur_action, partial_symbols_update, splits, c/;"	m	class:InputProcessor
process_history	input/inputprocessor.py	/^    def process_history(self, partial_symbols_update=set()):$/;"	m	class:InputProcessor
process_if_needed	gui/listobserver.py	/^    def process_if_needed(self,stock):$/;"	m	class:ListsObserver
process_internal	input/inputprocessor.py	/^    def process_internal(self, partial_symbol_update):$/;"	m	class:InputProcessor
process_transactions	transactions/transactionhandler.py	/^    def process_transactions(self):$/;"	m	class:TrasnasctionHandler
process_transactions	transactions/transactionhandlermanager.py	/^    def process_transactions(self): #from all sources$/;"	m	class:TransactionHandlerManager
process_transactions	transactions/transactioninterface.py	/^    def process_transactions(self):$/;"	m	class:TransactionHandlerInterface
query_symbol	input/ibsource.py	/^    def query_symbol(self, sym):$/;"	m	class:IBSource
query_symbol	input/inputsource.py	/^    def query_symbol(self, sym):$/;"	m	class:InputSourceInterface
query_symbol	input/investpysource.py	/^    def query_symbol(self,sym):$/;"	m	class:InvestPySource
read_groups_from_file	engine/compareengine.py	/^    def read_groups_from_file(self):$/;"	m	class:CompareEngine
read_groups_from_file	engine/symbolsinterface.py	/^    def read_groups_from_file(self):$/;"	m	class:SymbolsInterface
read_trasaction_table	transactions/mystockstransactionhandler.py	/^    def read_trasaction_table(self, x):$/;"	m	class:MyStocksTransactionHandler
readjust_for_currency	processing/datagenerator.py	/^    def readjust_for_currency(self,ncurrency):$/;"	m	class:DataGenerator
refernced_changed	gui/formobserver.py	/^    def refernced_changed(self,*args,**kw):$/;"	m	class:FormObserver
refproperty	common/refvar.py	/^def refproperty(var,value=None):$/;"	f
refresh_stocks	gui/formobserver.py	/^    def refresh_stocks(self,*args):$/;"	m	class:FormObserver
refresh_task	gui/formobserver.py	/^    def refresh_task(self,x,params):$/;"	m	class:FormObserver
reg_panel	input/inputprocessor.py	/^    def reg_panel(self):$/;"	m	class:InputProcessor
reg_panel	input/inputprocessor.py	/^    def reg_panel(self, value):$/;"	m	class:InputProcessor
rel	graph/graphgenerator.py	/^        def rel(type):$/;"	f	member:GraphGenerator.get_title	file:
rel_profit_by_stock	input/inputdata.py	/^        def rel_profit_by_stock(self):$/;"	m	class:InputData
remove_all_anotations	graph/graphgenerator.py	/^    def remove_all_anotations(self):$/;"	m	class:GraphGenerator
reqHistoricalData	input/ibsource.py	/^    def reqHistoricalData(self, contract, enddate, td):$/;"	m	class:IBSourceRem
reqHistoricalData_ext	input/ibsource.py	/^    def reqHistoricalData_ext(self, contract, enddate, td):$/;"	m	class:IBSourceRem
required_syms	engine/compareengine.py	/^    def  required_syms(self, include_ext=True, want_portfolio_if_needed=False, want_unite_symbol/;"	m	class:CompareEngine
required_syms	engine/symbolsinterface.py	/^    def required_syms(self,include_ext = True, want_portfolio_if_needed = False, want_unite_symb/;"	m	class:SymbolsInterface
res	config/config.py	/^    res, fil=resolvefile(globals()[f])$/;"	v
res	config/config.py	/^res,config_file=resolvefile('myconfig.py')$/;"	v
resolve_currency	input/inputprocessor.py	/^    def resolve_currency(self, sym, l, hist):$/;"	m	class:InputProcessor
resolve_hack	engine/parameters.py	/^    resolve_hack: dict = field(default_factory=dict)$/;"	v	class:Parameters	typeref:typename:dict
resolve_symbol	input/inputsource.py	/^    def resolve_symbol(self, sym):$/;"	m	class:InputSourceInterface
resolve_symbol	input/inputsource.py	/^    def resolve_symbol(self,sym):$/;"	m	class:InputSource
resolve_symbols	input/inputsource.py	/^    def resolve_symbols(self, sym, results=10,strict=True):$/;"	m	class:InputSourceInterface
resolve_symbols	input/inputsource.py	/^    def resolve_symbols(self,sym,results=10,strict=True):$/;"	m	class:InputSource
resolvefile	config/config.py	/^def resolvefile(filename):$/;"	f
return_df	input/inputprocessor.py	/^    def return_df(df, cur,commonstock_df,name):$/;"	m	class:InputProcessor
return_subpanel	input/inputprocessor.py	/^        def return_subpanel(s,dic):$/;"	f	member:InputProcessor.get_adjusted_df_for_currency	file:
rowCount	gui/stockchoice.py	/^    def rowCount(self, parent):$/;"	m	class:MyTableModel
row_by_index	gui/stockchoice.py	/^    def row_by_index(self,index):$/;"	m	class:MyTableModel
run	common/dolongprocess.py	/^    def run(self):$/;"	m	class:DoLongProcess
run	gui/mainwindow.py	/^    def run(self,graphObj : SymbolsInterface):$/;"	m	class:MainWindow
safeconnect	gui/formobserver.py	/^        def safeconnect(signal,fun):$/;"	f	member:FormObserver.setup_observers	file:
safeloc	input/earningsproc.py	/^def safeloc(x,df):$/;"	f
save	input/earningsproc.py	/^    def save(self):$/;"	m	class:EarningProcessor
save_cache	transactions/IBtransactionhandler.py	/^    def save_cache(self):$/;"	m	class:IBTransactionHandler
save_cache	transactions/transactionhandler.py	/^    def save_cache(self):$/;"	m	class:TrasnasctionHandler
save_cache	transactions/transactioninterface.py	/^    def save_cache(self):$/;"	m	class:TransactionHandlerInterface
save_cache_date	transactions/mystockstransactionhandler.py	/^    def save_cache_date(self):$/;"	m	class:MyStocksTransactionHandler
save_cache_date	transactions/transactionhandler.py	/^    def save_cache_date(self):$/;"	m	class:TrasnasctionHandler
save_data	input/inputprocessor.py	/^    def save_data(self):$/;"	m	class:InputProcessor
save_graph	gui/formobserver.py	/^    def save_graph(self):$/;"	m	class:GraphsHandler
save_last_graph	gui/formobserver.py	/^    def save_last_graph(self):$/;"	m	class:GraphsHandler
save_transaction_table	transactions/mystockstransactionhandler.py	/^    def save_transaction_table(self, buydict,file,normailze_to_cur=config.NORMALIZE_ON_TRANSACTI/;"	m	class:MyStocksTransactionHandler
select_rows	gui/formobserver.py	/^    def select_rows(widget,indices):$/;"	m	class:FormObserver
selected_changed	gui/formobserver.py	/^    def selected_changed(self,*args,**kw):$/;"	m	class:FormObserver
selected_stocks	engine/parameters.py	/^    def selected_stocks(self):$/;"	m	class:Parameters
selected_stocks	engine/parameters.py	/^    def selected_stocks(self,v):$/;"	m	class:Parameters
selectmode	runsit.py	/^def selectmode():$/;"	f
serialize_me	processing/datagenerator.py	/^    def serialize_me(self,filepath=config.SERIALIZEDFILE):$/;"	m	class:DataGenerator
serialized_data	processing/datagenerator.py	/^    def serialized_data(self):$/;"	m	class:DataGenerator
set	common/refvar.py	/^    def set(self,main, value):$/;"	m	class:RefVar
setAttr	common/common.py	/^      def setAttr(self, value, attr_name=attr_name):$/;"	f	function:addAttrs.deco	file:
set_all_toggled_value	gui/forminitializer.py	/^    def set_all_toggled_value(self):$/;"	m	class:FormInitializer
set_all_toggled_value	gui/forminitializerinterface.py	/^    def set_all_toggled_value(self):$/;"	m	class:FormInitializerInterface
set_groups_values	gui/forminitializer.py	/^    def set_groups_values(self, isinit=1,isinitialforstock=1):$/;"	m	class:FormInitializer
set_vars_for_cache	transactions/mystockstransactionhandler.py	/^    def set_vars_for_cache(self,v):$/;"	m	class:MyStocksTransactionHandler
set_vars_for_cache	transactions/stockprices.py	/^    def set_vars_for_cache(self, v):$/;"	m	class:StockPrices
set_vars_for_cache	transactions/transactionhandler.py	/^    def set_vars_for_cache(self,v):$/;"	m	class:TrasnasctionHandler
set_vars_for_cache	transactions/transactioninterface.py	/^    def set_vars_for_cache(self, v):$/;"	m	class:TransactionHandlerImplementator
setp	common/refvar.py	/^    def setp(self,v):$/;"	f	function:refproperty	file:
setup_controls_from_params	gui/forminitializer.py	/^    def setup_controls_from_params(self,initial=True,isinitialforstock=None):$/;"	m	class:FormInitializer
setup_controls_from_params	gui/forminitializerinterface.py	/^    def setup_controls_from_params(self, initial, isinitialforstock):$/;"	m	class:FormInitializerInterface
setup_observers	gui/formobserver.py	/^    def setup_observers(self):$/;"	m	class:FormObserver
show_annotation	graph/graphgenerator.py	/^def show_annotation(sel,cls=None, ax=None,generation=None):$/;"	f
show_graph	engine/parameters.py	/^    show_graph : bool =False$/;"	v	class:Parameters	typeref:typename:bool
show_hide	graph/graphgenerator.py	/^    def show_hide(self,toshow):$/;"	m	class:GraphGenerator
showhide	gui/formobserver.py	/^    def showhide(self):$/;"	m	class:FormObserver
shown_stock	engine/parameters.py	/^    shown_stock: list =field(default_factory=list)$/;"	v	class:Parameters	typeref:typename:list
simple_exception_handling	common/common.py	/^def simple_exception_handling(err_description=None,return_succ=False):$/;"	f
simplify_hist	input/inputprocessor.py	/^    def simplify_hist(self, partial_symbols_update):$/;"	m	class:InputProcessor
smain	app.py	/^    from compare_my_stocks import main as smain$/;"	Y	function:main	file:	nameref:unknown:main
sort	gui/stockchoice.py	/^    def sort(self, col, order):$/;"	m	class:MyTableModel
st	input/earningsinp.py	/^st = ["A", "AAPL", "ABBV", "ABC", "ABMD", "ABT", "ADRE", "AFL", "AIG", "AIZ", "AJG", "ALGN", "AL/;"	v
starthidden	engine/parameters.py	/^    starthidden : bool =0$/;"	v	class:Parameters	typeref:typename:bool
startit	common/dolongprocess.py	/^    def startit(self,*params):$/;"	m	class:DoLongProcess
statusChanges	processing/datagenerator.py	/^    statusChanges= MySignal(str)$/;"	v	class:DataGenerator
stock_edited	gui/listobserver.py	/^    def stock_edited(self):$/;"	m	class:ListsObserver
switch_adjust	gui/formobserver.py	/^        def switch_adjust(tosize=True):$/;"	f	member:FormObserver.change_mode	file:
symbol	engine/symbols.py	/^    def symbol(self):$/;"	m	class:AbstractSymbol
symbol	engine/symbols.py	/^    def symbol(self):$/;"	m	class:SimpleSymbol
symbol	gui/listobserver.py	/^    def symbol(self):$/;"	m	class:MyItem
symbol_info	transactions/transactionhandlermanager.py	/^    def symbol_info(self):$/;"	m	class:TransactionHandlerManager
symbol_info	transactions/transactionhandlermanager.py	/^    def symbol_info(self, value):$/;"	m	class:TransactionHandlerManager
tmp	input/ibsource.py	/^        def tmp(x):$/;"	f	member:IBSource.get_matching_symbols	file:
to_simple	gui/listobserver.py	/^def to_simple(ls):$/;"	f
todate	engine/parameters.py	/^    def todate(self):$/;"	m	class:Parameters
todate	engine/parameters.py	/^    def todate(self, value):$/;"	m	class:Parameters
todatetime	gui/formobserver.py	/^        def todatetime(x):$/;"	f	member:FormObserver.update_from_datefields	file:
tot_profit_by_stock	input/inputdata.py	/^        def tot_profit_by_stock(self):$/;"	m	class:InputData
transaction_handler	input/inputprocessor.py	/^    def transaction_handler(self):$/;"	m	class:InputProcessor
transactions_fromdate	engine/parameters.py	/^    transactions_fromdate : datetime = None$/;"	v	class:Parameters	typeref:typename:datetime
transactions_todate	engine/parameters.py	/^    transactions_todate: datetime = None$/;"	v	class:Parameters	typeref:typename:datetime
try_fix_dic	transactions/transactionhandlermanager.py	/^    def try_fix_dic(self,cur_action : Tuple[datetime,BuyDictItem],last_action :  Tuple[datetime,/;"	m	class:TransactionHandlerManager
try_to_use_cache	transactions/IBtransactionhandler.py	/^    def try_to_use_cache(self):$/;"	m	class:IBTransactionHandler
try_to_use_cache	transactions/transactionhandler.py	/^    def try_to_use_cache(self):$/;"	m	class:TrasnasctionHandler
type	engine/parameters.py	/^    type : Types =Types.VALUE$/;"	v	class:Parameters	typeref:typename:Types
type_unite_toggled	gui/formobserver.py	/^    def type_unite_toggled(self, name, value):$/;"	m	class:FormObserver
unite_by_group	engine/parameters.py	/^    unite_by_group : UniteType =UniteType.NONE$/;"	v	class:Parameters	typeref:typename:UniteType
unite_groups	processing/datagenerator.py	/^    def unite_groups(self, df):$/;"	m	class:DataGenerator
unrel_profit	input/inputdata.py	/^        def unrel_profit(self):$/;"	m	class:InputData
upd	input/inputsource.py	/^            def upd(v):$/;"	f	function:InputSource.resolve_symbols.fix_valid_exchanges	file:
update_curholding	input/inputprocessor.py	/^        def update_curholding():$/;"	f	member:InputProcessor.process_hist_internal	file:
update_from	engine/parameters.py	/^    def update_from(self,another):$/;"	f	function:paramaware	file:
update_from_datefields	gui/formobserver.py	/^    def update_from_datefields(self):$/;"	m	class:FormObserver
update_graph	engine/compareengine.py	/^    def update_graph(self, params: Parameters = Parameters()):$/;"	m	class:CompareEngine
update_graph	engine/compareengineinterface.py	/^    def update_graph(self, params):$/;"	m	class:CompareEngineInterface
update_graph	gui/formobserver.py	/^    def update_graph(self, reset_ranges : ResetRanges, force=False, after=None):$/;"	m	class:FormObserver
update_graph_list	gui/formobserver.py	/^    def update_graph_list(self):$/;"	m	class:GraphsHandler
update_limit	graph/graphgenerator.py	/^    def update_limit(self,ar,fig,ofig,lines):$/;"	m	class:GraphGenerator
update_obj	gui/daterangeslider.py	/^    def update_obj(self):$/;"	m	class:QDateRangeSlider
update_prop	gui/daterangeslider.py	/^    def update_prop(self):$/;"	m	class:QDateRangeSlider
update_range_num	gui/forminitializer.py	/^    def update_range_num(self,nuofoptions):$/;"	m	class:FormInitializer
update_rangeb	gui/forminitializer.py	/^    def update_rangeb(self,minmax):$/;"	m	class:FormInitializer
update_ranges	gui/forminitializer.py	/^    def update_ranges(self,reset_type=ResetRanges.IfAPROP):$/;"	m	class:FormInitializer
update_ranges	gui/forminitializerinterface.py	/^    def update_ranges(self, reset_type):$/;"	m	class:FormInitializerInterface
update_ranges	processing/datagenerator.py	/^    def update_ranges(self, df):$/;"	m	class:DataGenerator
update_shares	input/earningsproc.py	/^    def update_shares(self, l, t):$/;"	m	class:EarningProcessor
update_sizes	gui/formobserver.py	/^        def update_sizes():$/;"	f	member:FormObserver.change_mode	file:
update_status	gui/formobserver.py	/^    def update_status(self,text):$/;"	m	class:FormObserver
update_stock_list	gui/forminitializer.py	/^    def update_stock_list(self,isinitial=0,justorgs=False):$/;"	m	class:FormInitializer
update_stock_list	gui/formobserver.py	/^    def update_stock_list(self):$/;"	m	class:FormObserver
update_sym_property	transactions/transactionhandler.py	/^    def update_sym_property(self, symbol, value, prop='currency', updateanyway=True):$/;"	m	class:TrasnasctionHandler
update_task	gui/formobserver.py	/^    def update_task(self,params):$/;"	m	class:FormObserver
update_usable_symbols	input/inputprocessor.py	/^    def update_usable_symbols(self):$/;"	m	class:InputProcessor
uri	ibsrv.py	/^uri = daemon.register(IBSourceRem,objectId="aaa")   # register the greeting maker as a Pyro obje/;"	v
use_cache	engine/parameters.py	/^    use_cache : UseCache =UseCache.USEIFAVALIABLE$/;"	v	class:Parameters	typeref:typename:UseCache
use_ext	engine/parameters.py	/^    use_ext: bool = True$/;"	v	class:Parameters	typeref:typename:bool
use_groups	engine/parameters.py	/^    use_groups: bool =True$/;"	v	class:Parameters	typeref:typename:bool
use_groups	gui/formobserver.py	/^    def use_groups(self,val):$/;"	m	class:FormObserver
value	input/inputdata.py	/^        def value(self):$/;"	m	class:InputData
valuerange	engine/parameters.py	/^    valuerange : List[float] = ( (-1)* numpy.inf, numpy.inf)$/;"	v	class:Parameters	typeref:typename:List[float]
whatToShow	input/ibsource.py	/^    def whatToShow(self,contract :Contract):$/;"	m	class:IBSourceRem
window	gui/forminterface.py	/^        def window(self):$/;"	m	class:FormInterface
wrapper	input/ibsource.py	/^        def wrapper(fun,*args,**kw):$/;"	f	member:IBSource.__getattr__	file:
x	testit.py	/^def x():$/;"	f
y	testit.py	/^def y():$/;"	f
