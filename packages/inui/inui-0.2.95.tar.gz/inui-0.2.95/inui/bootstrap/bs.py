class GET_STARTED_WITH_BOOTSTRAP:
    """

    Get started with Bootstrap
    ==========================



    Bootstrap is a powerful, feature-packed frontend toolkit. Build anything—from prototype to production—in minutes.






     On this page


    **On this page**


    ---




    * [Quick start](#quick-start)
    * [CDN links](#cdn-links)
    * [Next steps](#next-steps)
    * [JS components](#js-components)
    * [Important globals](#important-globals)
            + [HTML5 doctype](#html5-doctype)
            + [Viewport meta](#viewport-meta)
            + [Box-sizing](#box-sizing)
            + [Reboot](#reboot)
    * [Community](#community)






    Quick start
    -----------


    Get started by including Bootstrap’s production-ready CSS and JavaScript via CDN without the need for any build steps. See it in practice with this [Bootstrap CodePen demo](https://codepen.io/team/bootstrap/pen/qBamdLj).




    1. **Create a new `index.html` file in your project root.** Include the `<meta name="viewport">` tag as well for [proper responsive behavior](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Viewport_meta_tag) in mobile devices.



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap demo</title>
     </head>
     <body>
     <h1>Hello, world!</h1>
     </body>
    </html>

    ```
    2. **Include Bootstrap’s CSS and JS.** Place the `<link>` tag in the `<head>` for our CSS, and the `<script>` tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing `</body>`. Learn more about our [CDN links](#cdn-links).



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap demo</title>
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
     </head>
     <body>
     <h1>Hello, world!</h1>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
     </body>
    </html>

    ```
    You can also include [Popper](https://popper.js.org/) and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.



    ```
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js" integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa" crossorigin="anonymous"></script>

    ```
    3. **Hello, world!** Open the page in your browser of choice to see your Bootstrapped page. Now you can start building with Bootstrap by creating your own [layout](https://getbootstrap.com/docs/5.3/layout/grid/), adding dozens of [components](https://getbootstrap.com/docs/5.3/components/buttons/), and utilizing [our official examples](https://getbootstrap.com/docs/5.3/examples/).


    CDN links
    ---------


    As reference, here are our primary CDN links.




    | Description | URL |
    | --- | --- |
    | CSS | `https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css` |
    | JS | `https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js` |


    You can also use the CDN to fetch any of our [additional builds listed in the Contents page](https://getbootstrap.com/docs/5.3/getting-started/contents/).


    Next steps
    ----------


    * Read a bit more about some [important global environment settings](#important-globals) that Bootstrap utilizes.
    * Read about what’s included in Bootstrap in our [contents section](https://getbootstrap.com/docs/5.3/getting-started/contents/) and the list of [components that require JavaScript](#js-components) below.
    * Need a little more power? Consider building with Bootstrap by [including the source files via package manager](https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers).
    * Looking to use Bootstrap as a module with `<script type="module">`? Please refer to our [using Bootstrap as a module](https://getbootstrap.com/docs/5.3/getting-started/javascript/#using-bootstrap-as-a-module) section.


    JS components
    -------------


    Curious which components explicitly require our JavaScript and Popper? Click the show components link below. If you’re at all unsure about the general page structure, keep reading for an example page template.



    Show components requiring JavaScript
    * Alerts for dismissing
    * Buttons for toggling states and checkbox/radio functionality
    * Carousel for all slide behaviors, controls, and indicators
    * Collapse for toggling visibility of content
    * Dropdowns for displaying and positioning (also requires [Popper](https://popper.js.org/))
    * Modals for displaying, positioning, and scroll behavior
    * Navbar for extending our Collapse and Offcanvas plugins to implement responsive behaviors
    * Navs with the Tab plugin for toggling content panes
    * Offcanvases for displaying, positioning, and scroll behavior
    * Scrollspy for scroll behavior and navigation updates
    * Toasts for displaying and dismissing
    * Tooltips and popovers for displaying and positioning (also requires [Popper](https://popper.js.org/))



    Important globals
    -----------------


    Bootstrap employs a handful of important global styles and settings, all of which are almost exclusively geared towards the *normalization* of cross browser styles. Let’s dive in.


    ### HTML5 doctype


    Bootstrap requires the use of the HTML5 doctype. Without it, you’ll see some funky and incomplete styling.



    ```
    <!doctype html>
    <html lang="en">
     ...
    </html>

    ```
    ### Viewport meta


    Bootstrap is developed *mobile first*, a strategy in which we optimize code for mobile devices first and then scale up components as necessary using CSS media queries. To ensure proper rendering and touch zooming for all devices, add the responsive viewport meta tag to your `<head>`.



    ```
    <meta name="viewport" content="width=device-width, initial-scale=1">

    ```
    You can see an example of this in action in the [quick start](#quick-start).


    ### Box-sizing


    For more straightforward sizing in CSS, we switch the global `box-sizing` value from `content-box` to `border-box`. This ensures `padding` does not affect the final computed width of an element, but it can cause problems with some third-party software like Google Maps and Google Custom Search Engine.


    On the rare occasion you need to override it, use something like the following:



    ```
    .selector-for-some-widget {
     box-sizing: content-box;
    }

    ```
    With the above snippet, nested elements—including generated content via `::before` and `::after`—will all inherit the specified `box-sizing` for that `.selector-for-some-widget`.


    Learn more about [box model and sizing at CSS Tricks](https://css-tricks.com/box-sizing/).


    ### Reboot


    For improved cross-browser rendering, we use [Reboot](https://getbootstrap.com/docs/5.3/content/reboot/) to correct inconsistencies across browsers and devices while providing slightly more opinionated resets to common HTML elements.


    Community
    ---------


    Stay up-to-date on the development of Bootstrap and reach out to the community with these helpful resources.


    * Read and subscribe to [The Official Bootstrap Blog](https://blog.getbootstrap.com/).
    * Ask and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).
    * Chat with fellow Bootstrappers in IRC. On the `irc.libera.chat` server, in the `#bootstrap` channel.
    * Implementation help may be found at Stack Overflow (tagged [`bootstrap-5`](https://stackoverflow.com/questions/tagged/bootstrap-5)).
    * Developers should use the keyword `bootstrap` on packages that modify or add to the functionality of Bootstrap when distributing through [npm](https://www.npmjs.com/search?q=keywords:bootstrap) or similar delivery mechanisms for maximum discoverability.


    You can also follow [@getbootstrap on Twitter](https://twitter.com/getbootstrap) for the latest gossip and awesome music videos.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class DOWNLOAD:
    """

    Download
    ========



    Download Bootstrap to get the compiled CSS and JavaScript, source code, or include it with your favorite package managers like npm, RubyGems, and more.






     On this page


    **On this page**


    ---




    * [Compiled CSS and JS](#compiled-css-and-js)
    * [Source files](#source-files)
    * [Examples](#examples)
    * [CDN via jsDelivr](#cdn-via-jsdelivr)
    * [Package managers](#package-managers)
            + [npm](#npm)
            + [yarn](#yarn)
            + [RubyGems](#rubygems)
            + [Composer](#composer)
            + [NuGet](#nuget)






    Compiled CSS and JS
    -------------------


    Download ready-to-use compiled code for **Bootstrap v5.3.1** to easily drop into your project, which includes:


    * Compiled and minified CSS bundles (see [CSS files comparison](https://getbootstrap.com/docs/5.3/getting-started/contents/#css-files))
    * Compiled and minified JavaScript plugins (see [JS files comparison](https://getbootstrap.com/docs/5.3/getting-started/contents/#js-files))


    This doesn’t include documentation, source files, or any optional JavaScript dependencies like Popper.


    [Download](https://github.com/twbs/bootstrap/releases/download/v5.3.1/bootstrap-5.3.1-dist.zip)


    Source files
    ------------


    Compile Bootstrap with your own asset pipeline by downloading our source Sass, JavaScript, and documentation files. This option requires some additional tooling:


    * [Sass compiler](https://getbootstrap.com/docs/5.3/getting-started/contribute/#sass) for compiling Sass source files into CSS files
    * [Autoprefixer](https://github.com/postcss/autoprefixer) for CSS vendor prefixing


    Should you require our full set of [build tools](https://getbootstrap.com/docs/5.3/getting-started/contribute/#tooling-setup), they are included for developing Bootstrap and its docs, but they’re likely unsuitable for your own purposes.


    [Download source](https://github.com/twbs/bootstrap/archive/v5.3.1.zip)


    Examples
    --------


    If you want to download and examine our [examples](https://getbootstrap.com/docs/5.3/examples/), you can grab the already built examples:


    [Download Examples](https://github.com/twbs/bootstrap/releases/download/v5.3.1/bootstrap-5.3.1-examples.zip)


    CDN via jsDelivr
    ----------------


    Skip the download with [jsDelivr](https://www.jsdelivr.com/) to deliver cached version of Bootstrap’s compiled CSS and JS to your project.



    ```
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>

    ```
    If you’re using our compiled JavaScript and prefer to include Popper separately, add Popper before our JS, via a CDN preferably.



    ```
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js" integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa" crossorigin="anonymous"></script>

    ```
    Package managers
    ----------------


    Pull in Bootstrap’s **source files** into nearly any project with some of the most popular package managers. No matter the package manager, Bootstrap will **require a [Sass compiler](https://getbootstrap.com/docs/5.3/getting-started/contribute/#sass) and [Autoprefixer](https://github.com/postcss/autoprefixer)** for a setup that matches our official compiled versions.


    ### npm


    Install Bootstrap in your Node.js powered apps with [the npm package](https://www.npmjs.com/package/bootstrap):



    ```
    npm install bootstrap@5.3.1

    ```
    `const bootstrap = require('bootstrap')` or `import bootstrap from 'bootstrap'` will load all of Bootstrap’s plugins onto a `bootstrap` object.
    The `bootstrap` module itself exports all of our plugins. You can manually load Bootstrap’s plugins individually by loading the `/js/dist/*.js` files under the package’s top-level directory.


    Bootstrap’s `package.json` contains some additional metadata under the following keys:


    * `sass` - path to Bootstrap’s main [Sass](https://sass-lang.com/) source file
    * `style` - path to Bootstrap’s non-minified CSS that’s been compiled using the default settings (no customization)



    **Get started with Bootstrap via npm with our starter project!** Head to the [Sass & JS example](https://github.com/twbs/examples/tree/main/sass-js) template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.

    ### yarn


    Install Bootstrap in your Node.js powered apps with [the yarn package](https://yarnpkg.com/en/package/bootstrap):



    ```
    yarn add bootstrap@5.3.1

    ```
    ### RubyGems


    Install Bootstrap in your Ruby apps using [Bundler](https://bundler.io/) (**recommended**) and [RubyGems](https://rubygems.org/) by adding the following line to your [`Gemfile`](https://bundler.io/gemfile.html):



    ```
    gem 'bootstrap', '~> 5.3.1'

    ```
    Alternatively, if you’re not using Bundler, you can install the gem by running this command:



    ```
    gem install bootstrap -v 5.3.1

    ```
    [See the gem’s README](https://github.com/twbs/bootstrap-rubygem/blob/main/README.md) for further details.


    ### Composer


    You can also install and manage Bootstrap’s Sass and JavaScript using [Composer](https://getcomposer.org/):



    ```
    composer require twbs/bootstrap:5.3.1

    ```
    ### NuGet


    If you develop in .NET Framework, you can also install and manage Bootstrap’s [CSS](https://www.nuget.org/packages/bootstrap/) or [Sass](https://www.nuget.org/packages/bootstrap.sass/) and JavaScript using [NuGet](https://www.nuget.org/). Newer projects should use [libman](https://docs.microsoft.com/en-us/aspnet/core/client-side/libman/) or another method as NuGet is designed for compiled code, not frontend assets.



    ```
    Install-Package bootstrap

    ```

    ```
    Install-Package bootstrap.sass

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CONTENTS:
    """

    Contents
    ========



    Discover what’s included in Bootstrap, including our compiled and source code flavors.






     On this page


    **On this page**


    ---




    * [Compiled Bootstrap](#compiled-bootstrap)
            + [CSS files](#css-files)
            + [JS files](#js-files)
    * [Bootstrap source code](#bootstrap-source-code)






    Compiled Bootstrap
    ------------------


    Once downloaded, unzip the compressed folder and you’ll see something like this:




    ```
    bootstrap/
    ├── css/
    │ ├── bootstrap-grid.css
    │ ├── bootstrap-grid.css.map
    │ ├── bootstrap-grid.min.css
    │ ├── bootstrap-grid.min.css.map
    │ ├── bootstrap-grid.rtl.css
    │ ├── bootstrap-grid.rtl.css.map
    │ ├── bootstrap-grid.rtl.min.css
    │ ├── bootstrap-grid.rtl.min.css.map
    │ ├── bootstrap-reboot.css
    │ ├── bootstrap-reboot.css.map
    │ ├── bootstrap-reboot.min.css
    │ ├── bootstrap-reboot.min.css.map
    │ ├── bootstrap-reboot.rtl.css
    │ ├── bootstrap-reboot.rtl.css.map
    │ ├── bootstrap-reboot.rtl.min.css
    │ ├── bootstrap-reboot.rtl.min.css.map
    │ ├── bootstrap-utilities.css
    │ ├── bootstrap-utilities.css.map
    │ ├── bootstrap-utilities.min.css
    │ ├── bootstrap-utilities.min.css.map
    │ ├── bootstrap-utilities.rtl.css
    │ ├── bootstrap-utilities.rtl.css.map
    │ ├── bootstrap-utilities.rtl.min.css
    │ ├── bootstrap-utilities.rtl.min.css.map
    │ ├── bootstrap.css
    │ ├── bootstrap.css.map
    │ ├── bootstrap.min.css
    │ ├── bootstrap.min.css.map
    │ ├── bootstrap.rtl.css
    │ ├── bootstrap.rtl.css.map
    │ ├── bootstrap.rtl.min.css
    │ └── bootstrap.rtl.min.css.map
    └── js/
     ├── bootstrap.bundle.js
     ├── bootstrap.bundle.js.map
     ├── bootstrap.bundle.min.js
     ├── bootstrap.bundle.min.js.map
     ├── bootstrap.esm.js
     ├── bootstrap.esm.js.map
     ├── bootstrap.esm.min.js
     ├── bootstrap.esm.min.js.map
     ├── bootstrap.js
     ├── bootstrap.js.map
     ├── bootstrap.min.js
     └── bootstrap.min.js.map

    ```
    This is the most basic form of Bootstrap: compiled files for quick drop-in usage in nearly any web project. We provide compiled CSS and JS (`bootstrap.*`), as well as compiled and minified CSS and JS (`bootstrap.min.*`). [Source maps](https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps) (`bootstrap.*.map`) are available for use with certain browsers’ developer tools. Bundled JS files (`bootstrap.bundle.js` and minified `bootstrap.bundle.min.js`) include [Popper](https://popper.js.org/).


    ### CSS files


    Bootstrap includes a handful of options for including some or all of our compiled CSS.




    | CSS files | Layout | Content | Components | Utilities |
    | --- | --- | --- | --- | --- |
    | `bootstrap.css` `bootstrap.min.css` `bootstrap.rtl.css` `bootstrap.rtl.min.css` | Included | Included | Included | Included |
    | `bootstrap-grid.css` `bootstrap-grid.rtl.css` `bootstrap-grid.min.css` `bootstrap-grid.rtl.min.css` | [Only grid system](https://getbootstrap.com/docs/5.3/layout/grid/) | — | — | [Only flex utilities](https://getbootstrap.com/docs/5.3/utilities/flex/) |
    | `bootstrap-utilities.css` `bootstrap-utilities.rtl.css` `bootstrap-utilities.min.css` `bootstrap-utilities.rtl.min.css` | — | — | — | Included |
    | `bootstrap-reboot.css` `bootstrap-reboot.rtl.css` `bootstrap-reboot.min.css` `bootstrap-reboot.rtl.min.css` | — | [Only Reboot](https://getbootstrap.com/docs/5.3/content/reboot/) | — | — |


    ### JS files


    Similarly, we have options for including some or all of our compiled JavaScript.




    | JS Files | Popper |
    | --- | --- |
    | `bootstrap.bundle.js` `bootstrap.bundle.min.js` | Included |
    | `bootstrap.js` `bootstrap.min.js` | – |


    Bootstrap source code
    ---------------------


    The Bootstrap source code download includes the compiled CSS and JavaScript assets, along with source Sass, JavaScript, and documentation. More specifically, it includes the following and more:



    ```
    bootstrap/
    ├── dist/
    │ ├── css/
    │ └── js/
    ├── site/
    │ └──content/
    │ └── docs/
    │ └── 5.3/
    │ └── examples/
    ├── js/
    └── scss/

    ```
    The `scss/` and `js/` are the source code for our CSS and JavaScript. The `dist/` folder includes everything listed in the compiled download section above. The `site/contenthttps://getbootstrap.com/docs/` folder includes the source code for our hosted documentation, including our live examples of Bootstrap usage.


    Beyond that, any other included file provides support for packages, license information, and development.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BROWSERS_AND_DEVICES:
    """

    Browsers and devices
    ====================



    Learn about the browsers and devices, from modern to old, that are supported by Bootstrap, including known quirks and bugs for each.






     On this page


    **On this page**


    ---




    * [Supported browsers](#supported-browsers)
            + [Mobile devices](#mobile-devices)
            + [Desktop browsers](#desktop-browsers)
    * [Internet Explorer](#internet-explorer)
    * [Modals and dropdowns on mobile](#modals-and-dropdowns-on-mobile)
            + [Overflow and scrolling](#overflow-and-scrolling)
            + [iOS text fields and scrolling](#ios-text-fields-and-scrolling)
            + [Navbar Dropdowns](#navbar-dropdowns)
    * [Browser zooming](#browser-zooming)
    * [Validators](#validators)






    Supported browsers
    ------------------


    Bootstrap supports the **latest, stable releases** of all major browsers and platforms.


    Alternative browsers which use the latest version of WebKit, Blink, or Gecko, whether directly or via the platform’s web view API, are not explicitly supported. However, Bootstrap should (in most cases) display and function correctly in these browsers as well. More specific support information is provided below.


    You can find our supported range of browsers and their versions [in our `.browserslistrc file`](https://github.com/twbs/bootstrap/blob/v5.3.1/.browserslistrc):



    ```
    # https://github.com/browserslist/browserslist#readme

    >= 0.5%
    last 2 major versions
    not dead
    Chrome >= 60
    Firefox >= 60
    Firefox ESR
    iOS >= 12
    Safari >= 12
    not Explorer <= 11

    ```
    We use [Autoprefixer](https://github.com/postcss/autoprefixer) to handle intended browser support via CSS prefixes, which uses [Browserslist](https://github.com/browserslist/browserslist) to manage these browser versions. Consult their documentation for how to integrate these tools into your projects.


    ### Mobile devices


    Generally speaking, Bootstrap supports the latest versions of each major platform’s default browsers. Note that proxy browsers (such as Opera Mini, Opera Mobile’s Turbo mode, UC Browser Mini, Amazon Silk) are not supported.




    |  | Chrome | Firefox | Safari | Android Browser & WebView |
    | --- | --- | --- | --- | --- |
    | **Android** | Supported | Supported | — | v6.0+ |
    | **iOS** | Supported | Supported | Supported | — |


    ### Desktop browsers


    Similarly, the latest versions of most desktop browsers are supported.




    |  | Chrome | Firefox | Microsoft Edge | Opera | Safari |
    | --- | --- | --- | --- | --- | --- |
    | **Mac** | Supported | Supported | Supported | Supported | Supported |
    | **Windows** | Supported | Supported | Supported | Supported | — |


    For Firefox, in addition to the latest normal stable release, we also support the latest [Extended Support Release (ESR)](https://www.mozilla.org/en-US/firefox/enterprise/) version of Firefox.


    Unofficially, Bootstrap should look and behave well enough in Chromium and Chrome for Linux, and Firefox for Linux, though they are not officially supported.


    Internet Explorer
    -----------------


    Internet Explorer is not supported. **If you require Internet Explorer support, please use Bootstrap v4.**


    Modals and dropdowns on mobile
    ------------------------------


    ### Overflow and scrolling


    Support for `overflow: hidden;` on the `<body>` element is quite limited in iOS and Android. To that end, when you scroll past the top or bottom of a modal in either of those devices’ browsers, the `<body>` content will begin to scroll. See [Chrome bug #175502](https://bugs.chromium.org/p/chromium/issues/detail?id=175502) (fixed in Chrome v40) and [WebKit bug #153852](https://bugs.webkit.org/show_bug.cgi?id=153852).


    ### iOS text fields and scrolling


    As of iOS 9.2, while a modal is open, if the initial touch of a scroll gesture is within the boundary of a textual `<input>` or a `<textarea>`, the `<body>` content underneath the modal will be scrolled instead of the modal itself. See [WebKit bug #153856](https://bugs.webkit.org/show_bug.cgi?id=153856).


    ### Navbar Dropdowns


    The `.dropdown-backdrop` element isn’t used on iOS in the nav because of the complexity of z-indexing. Thus, to close dropdowns in navbars, you must directly click the dropdown element (or [any other element which will fire a click event in iOS](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/API/Element/click_event#Safari_Mobile)).


    Browser zooming
    ---------------


    Page zooming inevitably presents rendering artifacts in some components, both in Bootstrap and the rest of the web. Depending on the issue, we may be able to fix it (search first and then open an issue if need be). However, we tend to ignore these as they often have no direct solution other than hacky workarounds.


    Validators
    ----------


    In order to provide the best possible experience to old and buggy browsers, Bootstrap uses [CSS browser hacks](http://browserhacks.com/) in several places to target special CSS to certain browser versions in order to work around bugs in the browsers themselves. These hacks understandably cause CSS validators to complain that they are invalid. In a couple places, we also use bleeding-edge CSS features that aren’t yet fully standardized, but these are used purely for progressive enhancement.


    These validation warnings don’t matter in practice since the non-hacky portion of our CSS does fully validate and the hacky portions don’t interfere with the proper functioning of the non-hacky portion, hence why we deliberately ignore these particular warnings.


    Our HTML docs likewise have some trivial and inconsequential HTML validation warnings due to our inclusion of a workaround for [a certain Firefox bug](https://bugzilla.mozilla.org/show_bug.cgi?id=654072).









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class JAVASCRIPT:
    """

    JavaScript
    ==========



    Bring Bootstrap to life with our optional JavaScript plugins. Learn about each plugin, our data and programmatic API options, and more.






     On this page


    **On this page**


    ---




    * [Individual or compiled](#individual-or-compiled)
    * [Usage with JavaScript frameworks](#usage-with-javascript-frameworks)
    * [Using Bootstrap as a module](#using-bootstrap-as-a-module)
    * [Dependencies](#dependencies)
    * [Data attributes](#data-attributes)
    * [Selectors](#selectors)
    * [Events](#events)
    * [Programmatic API](#programmatic-api)
            + [CSS selectors in constructors](#css-selectors-in-constructors)
            + [Asynchronous functions and transitions](#asynchronous-functions-and-transitions)
                    - [`dispose` method](#dispose-method)
            + [Default settings](#default-settings)
    * [Methods and properties](#methods-and-properties)
    * [Sanitizer](#sanitizer)
    * [Optionally using jQuery](#optionally-using-jquery)
            + [No conflict](#no-conflict)
            + [jQuery events](#jquery-events)
    * [Disabled JavaScript](#disabled-javascript)






    Individual or compiled
    ----------------------


    Plugins can be included individually (using Bootstrap’s individual `js/dist/*.js`), or all at once using `bootstrap.js` or the minified `bootstrap.min.js` (don’t include both).


    If you use a bundler (Webpack, Parcel, Vite…), you can use `/js/dist/*.js` files which are UMD ready.


    Usage with JavaScript frameworks
    --------------------------------


    While the Bootstrap CSS can be used with any framework, **the Bootstrap JavaScript is not fully compatible with JavaScript frameworks like React, Vue, and Angular** which assume full knowledge of the DOM. Both Bootstrap and the framework may attempt to mutate the same DOM element, resulting in bugs like dropdowns that are stuck in the “open” position.


    A better alternative for those using this type of frameworks is to use a framework-specific package **instead of** the Bootstrap JavaScript. Here are some of the most popular options:


    * React: [React Bootstrap](https://react-bootstrap.github.io/)

    **Try it yourself!** Download the source code and working demo for using Bootstrap with React, Next.js, and React Bootstrap from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/react-nextjs). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/react-nextjs?file=src%2Fpages%2Findex.tsx).
    * Vue: [BootstrapVue](https://bootstrap-vue.org/) (currently only supports Vue 2 and Bootstrap 4)
    * Angular: [ng-bootstrap](https://ng-bootstrap.github.io/)


    Using Bootstrap as a module
    ---------------------------



    **Try it yourself!** Download the source code and working demo for using Bootstrap as an ES module from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/sass-js-esm). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/sass-js-esm?file=index.html).

    We provide a version of Bootstrap built as `ESM` (`bootstrap.esm.js` and `bootstrap.esm.min.js`) which allows you to use Bootstrap as a module in the browser, if your [targeted browsers support it](https://caniuse.com/es6-module).




    ```
    <script type="module">
     import { Toast } from 'bootstrap.esm.min.js'

     Array.from(document.querySelectorAll('.toast'))
     .forEach(toastNode => new Toast(toastNode))
    </script>

    ```
    Compared to JS bundlers, using ESM in the browser requires you to use the full path and filename instead of the module name. [Read more about JS modules in the browser.](https://v8.dev/features/modules#specifiers) That’s why we use `'bootstrap.esm.min.js'` instead of `'bootstrap'` above. However, this is further complicated by our Popper dependency, which imports Popper into our JavaScript like so:




    ```
    import \* as Popper from "@popperjs/core"

    ```
    If you try this as-is, you’ll see an error in the console like the following:



    ```
    Uncaught TypeError: Failed to resolve module specifier "@popperjs/core". Relative references must start with either "/", "./", or "../".

    ```
    To fix this, you can use an `importmap` to resolve the arbitrary module names to complete paths. If your [targeted browsers](https://caniuse.com/?search=importmap) do not support `importmap`, you’ll need to use the [es-module-shims](https://github.com/guybedford/es-module-shims) project. Here’s how it works for Bootstrap and Popper:




    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
     <title>Hello, modularity!</title>
     </head>
     <body>
     <h1>Hello, modularity!</h1>
     <button id="popoverButton" type="button" class="btn btn-primary btn-lg" data-bs-toggle="popover" title="ESM in Browser" data-bs-content="Bang!">Custom popover</button>

     <script async src="https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js" crossorigin="anonymous"></script>
     <script type="importmap">
     {
     "imports": {
     "@popperjs/core": "https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/esm/popper.min.js",
     "bootstrap": "https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.esm.min.js"
     }
     }
     </script>
     <script type="module">
     import \* as bootstrap from 'bootstrap'

     new bootstrap.Popover(document.getElementById('popoverButton'))
     </script>
     </body>
    </html>

    ```
    Dependencies
    ------------


    Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.


    Our dropdowns, popovers, and tooltips also depend on [Popper](https://popper.js.org/).


    Data attributes
    ---------------


    Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to **only use one set of data attributes on a single element** (e.g., you cannot trigger a tooltip and modal from the same button.)


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.


    Selectors
    ---------


    We use the native `querySelector` and `querySelectorAll` methods to query DOM elements for performance reasons, so you must use [valid selectors](https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier). If you use special selectors like `collapse:Example`, be sure to escape them.


    Events
    ------


    Bootstrap provides custom events for most plugins’ unique actions. Generally, these come in an infinitive and past participle form - where the infinitive (ex. `show`) is triggered at the start of an event, and its past participle form (ex. `shown`) is triggered on the completion of an action.


    All infinitive events provide [`preventDefault()`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/API/Event/preventDefault) functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call `preventDefault()`.



    ```
    const myModal = document.querySelector('#myModal')

    myModal.addEventListener('show.bs.modal', event => {
     return event.preventDefault() // stops modal from being shown
    })

    ```
    Programmatic API
    ----------------


    All constructors accept an optional options object or nothing (which initiates a plugin with its default behavior):



    ```
    const myModalEl = document.querySelector('#myModal')
    const modal = new bootstrap.Modal(myModalEl) // initialized with defaults

    const configObject = { keyboard: false }
    const modal1 = new bootstrap.Modal(myModalEl, configObject) // initialized with no keyboard

    ```
    If you’d like to get a particular plugin instance, each plugin exposes a `getInstance` method. For example, to retrieve an instance directly from an element:



    ```
    bootstrap.Popover.getInstance(myPopoverEl)

    ```
    This method will return `null` if an instance is not initiated over the requested element.


    Alternatively, `getOrCreateInstance` can be used to get the instance associated with a DOM element, or create a new one in case it wasn’t initialized.



    ```
    bootstrap.Popover.getOrCreateInstance(myPopoverEl, configObject)

    ```
    In case an instance wasn’t initialized, it may accept and use an optional configuration object as second argument.


    ### CSS selectors in constructors


    In addition to the `getInstance` and `getOrCreateInstance` methods, all plugin constructors can accept a DOM element or a valid [CSS selector](#selectors) as the first argument. Plugin elements are found with the `querySelector` method since our plugins only support a single element.



    ```
    const modal = new bootstrap.Modal('#myModal')
    const dropdown = new bootstrap.Dropdown('[data-bs-toggle="dropdown"]')
    const offcanvas = bootstrap.Offcanvas.getInstance('#myOffcanvas')
    const alert = bootstrap.Alert.getOrCreateInstance('#myAlert')

    ```
    ### Asynchronous functions and transitions


    All programmatic API methods are **asynchronous** and return to the caller once the transition is started, but **before it ends**. In order to execute an action once the transition is complete, you can listen to the corresponding event.



    ```
    const myCollapseEl = document.querySelector('#myCollapse')

    myCollapseEl.addEventListener('shown.bs.collapse', event => {
     // Action to execute once the collapsible area is expanded
    })

    ```
    In addition, a method call on a **transitioning component will be ignored**.



    ```
    const myCarouselEl = document.querySelector('#myCarousel')
    const carousel = bootstrap.Carousel.getInstance(myCarouselEl) // Retrieve a Carousel instance

    myCarouselEl.addEventListener('slid.bs.carousel', event => {
     carousel.to('2') // Will slide to the slide 2 as soon as the transition to slide 1 is finished
    })

    carousel.to('1') // Will start sliding to the slide 1 and returns to the caller
    carousel.to('2') // !! Will be ignored, as the transition to the slide 1 is not finished !!

    ```
    #### `dispose` method


    While it may seem correct to use the `dispose` method immediately after `hide()`, it will lead to incorrect results. Here’s an example of the problem use:



    ```
    const myModal = document.querySelector('#myModal')
    myModal.hide() // it is asynchronous

    myModal.addEventListener('shown.bs.hidden', event => {
     myModal.dispose()
    })

    ```
    ### Default settings


    You can change the default settings for a plugin by modifying the plugin’s `Constructor.Default` object:



    ```
    // changes default for the modal plugin's `keyboard` option to false
    bootstrap.Modal.Default.keyboard = false

    ```
    Methods and properties
    ----------------------


    Every Bootstrap plugin exposes the following methods and static properties.




    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s modal. (Removes stored data on the DOM element) |
    | `getInstance` | *Static* method which allows you to get the modal instance associated with a DOM element. |
    | `getOrCreateInstance` | *Static* method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized. |




    | Static property | Description |
    | --- | --- |
    | `NAME` | Returns the plugin name. (Example: `bootstrap.Tooltip.NAME`) |
    | `VERSION` | The version of each of Bootstrap’s plugins can be accessed via the `VERSION` property of the plugin’s constructor (Example: `bootstrap.Tooltip.VERSION`) |


    Sanitizer
    ---------


    Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.


    The default `allowList` value is the following:




    [js/src/util/sanitizer.js](https://github.com/twbs/bootstrap/blob/v5.3.1/js/src/util/sanitizer.js)






    ```
    const ARIA\_ATTRIBUTE\_PATTERN = /^aria-[\w-]\*$/i

    export const DefaultAllowlist = {
     // Global attributes allowed on any supplied element below.
     '\*': ['class', 'dir', 'id', 'lang', 'role', ARIA\_ATTRIBUTE\_PATTERN],
     a: ['target', 'href', 'title', 'rel'],
     area: [],
     b: [],
     br: [],
     col: [],
     code: [],
     div: [],
     em: [],
     hr: [],
     h1: [],
     h2: [],
     h3: [],
     h4: [],
     h5: [],
     h6: [],
     i: [],
     img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
     li: [],
     ol: [],
     p: [],
     pre: [],
     s: [],
     small: [],
     span: [],
     sub: [],
     sup: [],
     strong: [],
     u: [],
     ul: []
    }

    ```

    If you want to add new values to this default `allowList` you can do the following:



    ```
    const myDefaultAllowList = bootstrap.Tooltip.Default.allowList

    // To allow table elements
    myDefaultAllowList.table = []

    // To allow td elements and data-bs-option attributes on td elements
    myDefaultAllowList.td = ['data-bs-option']

    // You can push your custom regex to validate your attributes.
    // Be careful about your regular expressions being too lax
    const myCustomRegex = /^data-my-app-[\w-]+/
    myDefaultAllowList['\*'].push(myCustomRegex)

    ```
    If you want to bypass our sanitizer because you prefer to use a dedicated library, for example [DOMPurify](https://www.npmjs.com/package/dompurify), you should do the following:



    ```
    const yourTooltipEl = document.querySelector('#yourTooltip')
    const tooltip = new bootstrap.Tooltip(yourTooltipEl, {
     sanitizeFn(content) {
     return DOMPurify.sanitize(content)
     }
    })

    ```
    Optionally using jQuery
    -----------------------


    **You don’t need jQuery in Bootstrap 5**, but it’s still possible to use our components with jQuery. If Bootstrap detects `jQuery` in the `window` object, it’ll add all of our components in jQuery’s plugin system. This allows you to do the following:



    ```
    // to enable tooltips with the default configuration
    $('[data-bs-toggle="tooltip"]').tooltip()

    // to initialize tooltips with given configuration
    $('[data-bs-toggle="tooltip"]').tooltip({
     boundary: 'clippingParents',
     customClass: 'myClass'
    })

    // to trigger the `show` method
    $('#myTooltip').tooltip('show')

    ```
    The same goes for our other components.


    ### No conflict


    Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call `.noConflict` on the plugin you wish to revert the value of.



    ```
    const bootstrapButton = $.fn.button.noConflict() // return $.fn.button to previously assigned value
    $.fn.bootstrapBtn = bootstrapButton // give $().bootstrapBtn the Bootstrap functionality

    ```
    Bootstrap does not officially support third-party JavaScript libraries like Prototype or jQuery UI. Despite `.noConflict` and namespaced events, there may be compatibility problems that you need to fix on your own.


    ### jQuery events


    Bootstrap will detect jQuery if `jQuery` is present in the `window` object and there is no `data-bs-no-jquery` attribute set on `<body>`. If jQuery is found, Bootstrap will emit events thanks to jQuery’s event system. So if you want to listen to Bootstrap’s events, you’ll have to use the jQuery methods (`.on`, `.one`) instead of `addEventListener`.



    ```
    $('#myTab a').on('shown.bs.tab', () => {
     // do something...
    })

    ```
    Disabled JavaScript
    -------------------


    Bootstrap’s plugins have no special fallback when JavaScript is disabled. If you care about the user experience in this case, use [`<noscript>`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Element/noscript) to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BOOTSTRAP_AND_WEBPACK:
    """

    Bootstrap and Webpack
    =====================



    The official guide for how to include and bundle Bootstrap’s CSS and JavaScript in your project using Webpack.






     On this page


    **On this page**


    ---




    * [Setup](#setup)
    * [Project structure](#project-structure)
    * [Configure Webpack](#configure-webpack)
    * [Import Bootstrap](#import-bootstrap)
    * [Production optimizations](#production-optimizations)
            + [Extracting CSS](#extracting-css)
            + [Extracting SVG files](#extracting-svg-files)






    ![](https://getbootstrap.com/docs/5.3/assets/img/guides/bootstrap-webpack.png)

    **Want to skip to the end?** Download the source code and working demo for this guide from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/webpack). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/webpack?file=index.html) for live editing.

    Setup
    -----


    We’re building a Webpack project with Bootstrap from scratch, so there are some prerequisites and up front steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.


    1. **Create a project folder and setup npm.** We’ll create the `my-project` folder and initialize npm with the `-y` argument to avoid it asking us all the interactive questions.



    ```
    mkdir my-project && cd my-project
    npm init -y

    ```
    2. **Install Webpack.** Next we need to install our Webpack development dependencies: `webpack` for the core of Webpack, `webpack-cli` so we can run Webpack commands from the terminal, and `webpack-dev-server` so we can run a local development server. Additionally, we’ll install `html-webpack-plugin` to be able to store our `index.html` in `src` directory instead of the default `dist` one. We use `--save-dev` to signal that these dependencies are only for development use and not for production.



    ```
    npm i --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin

    ```
    3. **Install Bootstrap.** Now we can install Bootstrap. We’ll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.



    ```
    npm i --save bootstrap @popperjs/core

    ```
    4. **Install additional dependencies.** In addition to Webpack and Bootstrap, we need a few more dependencies to properly import and bundle Bootstrap’s CSS and JS with Webpack. These include Sass, some loaders, and Autoprefixer.



    ```
    npm i --save-dev autoprefixer css-loader postcss-loader sass sass-loader style-loader

    ```


    Now that we have all the necessary dependencies installed, we can get to work creating the project files and importing Bootstrap.


    Project structure
    -----------------


    We’ve already created the `my-project` folder and initialized npm. Now we’ll also create our `src` and `dist` folders to round out the project structure. Run the following from `my-project`, or manually create the folder and file structure shown below.



    ```
    mkdir {src,src/js,src/scss}
    touch src/index.html src/js/main.js src/scss/styles.scss webpack.config.js

    ```
    When you’re done, your complete project should look like this:



    ```
    my-project/
    ├── src/
    │ ├── js/
    │ │ └── main.js
    │ ├── scss/
    │ │ └── styles.scss
    │ └── index.html
    ├── package-lock.json
    ├── package.json
    └── webpack.config.js

    ```
    At this point, everything is in the right place, but Webpack won’t work because we haven’t filled in our `webpack.config.js` yet.


    Configure Webpack
    -----------------


    With dependencies installed and our project folder ready for us to start coding, we can now configure Webpack and run our project locally.


    1. **Open `webpack.config.js` in your editor.** Since it’s blank, we’ll need to add some boilerplate config to it so we can start our server. This part of the config tells Webpack where to look for our project’s JavaScript, where to output the compiled code to (`dist`), and how the development server should behave (pulling from the `dist` folder with hot reload).



    ```
    'use strict'

    const path = require('path')
    const HtmlWebpackPlugin = require('html-webpack-plugin')

    module.exports = {
     mode: 'development',
     entry: './src/js/main.js',
     output: {
     filename: 'main.js',
     path: path.resolve(\_\_dirname, 'dist')
     },
     devServer: {
     static: path.resolve(\_\_dirname, 'dist'),
     port: 8080,
     hot: true
     },
     plugins: [
     new HtmlWebpackPlugin({ template: './src/index.html' })
     ]
    }

    ```
    2. **Next we fill in our `src/index.html`.** This is the HTML page Webpack will load in the browser to utilize the bundled CSS and JS we’ll add to it in later steps. Before we can do that, we have to give it something to render and include the `output` JS from the previous step.



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap w/ Webpack</title>
     </head>
     <body>
     <div class="container py-4 px-3 mx-auto">
     <h1>Hello, Bootstrap and Webpack!</h1>
     <button class="btn btn-primary">Primary button</button>
     </div>
     </body>
    </html>

    ```
    We’re including a little bit of Bootstrap styling here with the `div class="container"` and `<button>` so that we see when Bootstrap’s CSS is loaded by Webpack.
    3. **Now we need an npm script to run Webpack.** Open `package.json` and add the `start` script shown below (you should already have the test script). We’ll use this script to start our local Webpack dev server. You can also add a `build` script shown below to build your project.



    ```
    {
     // ...
     "scripts": {
     "start": "webpack serve",
     "build": "webpack build --mode=production",
     "test": "echo \"Error: no test specified\" && exit 1"
     },
     // ...
    }

    ```
    4. **And finally, we can start Webpack.** From the `my-project` folder in your terminal, run that newly added npm script:



    ```
    npm start

    ```
    ![Webpack dev server running](https://getbootstrap.com/docs/5.3/assets/img/guides/webpack-dev-server.png)


    In the next and final section to this guide, we’ll set up the Webpack loaders and import all of Bootstrap’s CSS and JavaScript.


    Import Bootstrap
    ----------------


    Importing Bootstrap into Webpack requires the loaders we installed in the first section. We’ve installed them with npm, but now Webpack needs to be configured to use them.


    1. **Set up the loaders in `webpack.config.js`.** Your configuration file is now complete and should match the snippet below. The only new part here is the `module` section.



    ```
    'use strict'

    const path = require('path')
    const autoprefixer = require('autoprefixer')
    const HtmlWebpackPlugin = require('html-webpack-plugin')

    module.exports = {
     mode: 'development',
     entry: './src/js/main.js',
     output: {
     filename: 'main.js',
     path: path.resolve(\_\_dirname, 'dist')
     },
     devServer: {
     static: path.resolve(\_\_dirname, 'dist'),
     port: 8080,
     hot: true
     },
     plugins: [
     new HtmlWebpackPlugin({ template: './src/index.html' })
     ],
     module: {
     rules: [
     {
     test: /\.(scss)$/,
     use: [
     {
     // Adds CSS to the DOM by injecting a `<style>` tag
     loader: 'style-loader'
     },
     {
     // Interprets `@import` and `url()` like `import/require()` and will resolve them
     loader: 'css-loader'
     },
     {
     // Loader for webpack to process CSS with PostCSS
     loader: 'postcss-loader',
     options: {
     postcssOptions: {
     plugins: [
     autoprefixer
     ]
     }
     }
     },
     {
     // Loads a SASS/SCSS file and compiles it to CSS
     loader: 'sass-loader'
     }
     ]
     }
     ]
     }
    }

    ```
    Here’s a recap of why we need all these loaders. `style-loader` injects the CSS into a `<style>` element in the `<head>` of the HTML page, `css-loader` helps with using `@import` and `url()`, `postcss-loader` is required for Autoprefixer, and `sass-loader` allows us to use Sass.
    2. **Now, let’s import Bootstrap’s CSS.** Add the following to `src/scss/styles.scss` to import all of Bootstrap’s source Sass.



    ```
    // Import all of Bootstrap's CSS
    @import "bootstrap/scss/bootstrap";

    ```
    *You can also import our stylesheets individually if you want. [Read our Sass import docs](https://getbootstrap.com/docs/5.3/customize/sass/#importing) for details.*
    3. **Next we load the CSS and import Bootstrap’s JavaScript.** Add the following to `src/js/main.js` to load the CSS and import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.




    ```
    // Import our custom CSS
    import '../scss/styles.scss'

    // Import all of Bootstrap's JS
    import \* as bootstrap from 'bootstrap'

    ```
    You can also import JavaScript plugins individually as needed to keep bundle sizes down:




    ```
    import Alert from 'bootstrap/js/dist/alert'

    // or, specify which plugins you need:
    import { Tooltip, Toast, Popover } from 'bootstrap'

    ```
    *[Read our JavaScript docs](https://getbootstrap.com/docs/5.3/getting-started/javascript/) for more information on how to use Bootstrap’s plugins.*
    4. **And you’re done! 🎉** With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this.


    ![Webpack dev server running with Bootstrap](https://getbootstrap.com/docs/5.3/assets/img/guides/webpack-dev-server-bootstrap.png)
    Now you can start adding any Bootstrap components you want to use. Be sure to [check out the complete Webpack example project](https://github.com/twbs/examples/tree/main/webpack) for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.


    Production optimizations
    ------------------------


    Depending on your setup, you may want to implement some additional security and speed optimizations useful for running the project in production. Note that these optimizations are not applied on [the Webpack example project](https://github.com/twbs/examples/tree/main/webpack) and are up to you to implement.


    ### Extracting CSS


    The `style-loader` we configured above conveniently emits CSS into the bundle so that manually loading a CSS file in `dist/index.html` isn’t necessary. This approach may not work with a strict Content Security Policy, however, and it may become a bottleneck in your application due to the large bundle size.


    To separate the CSS so that we can load it directly from `dist/index.html`, use the `mini-css-extract-loader` Webpack plugin.


    First, install the plugin:



    ```
    npm install --save-dev mini-css-extract-plugin

    ```
    Then instantiate and use the plugin in the Webpack configuration:



    ```
    --- a/webpack.config.js
    +++ b/webpack.config.js
    @@ -3,6 +3,7 @@
     const path = require('path')
     const autoprefixer = require('autoprefixer')
     const HtmlWebpackPlugin = require('html-webpack-plugin')
    +const miniCssExtractPlugin = require('mini-css-extract-plugin')

     module.exports = {
     mode: 'development',
    @@ -17,7 +18,8 @@ module.exports = {
     hot: true
     },
     plugins: [
    - new HtmlWebpackPlugin({ template: './src/index.html' })
    + new HtmlWebpackPlugin({ template: './src/index.html' }),
    + new miniCssExtractPlugin()
     ],
     module: {
     rules: [
    @@ -25,8 +27,8 @@ module.exports = {
     test: /\.(scss)$/,
     use: [
     {
    - // Adds CSS to the DOM by injecting a `<style>` tag
    - loader: 'style-loader'
    + // Extracts CSS for each JS file that includes CSS
    + loader: miniCssExtractPlugin.loader
     },
     {

    ```
    After running `npm run build` again, there will be a new file `dist/main.css`, which will contain all of the CSS imported by `src/js/main.js`. If you view `dist/index.html` in your browser now, the style will be missing, as it is now in `dist/main.css`. You can include the generated CSS in `dist/index.html` like this:



    ```
    --- a/dist/index.html
    +++ b/dist/index.html
    @@ -3,6 +3,7 @@
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
    + <link rel="stylesheet" href="./main.css">
     <title>Bootstrap w/ Webpack</title>
     </head>
     <body>

    ```
    ### Extracting SVG files


    Bootstrap’s CSS includes multiple references to SVG files via inline `data:` URIs. If you define a Content Security Policy for your project that blocks `data:` URIs for images, then these SVG files will not load. You can get around this problem by extracting the inline SVG files using Webpack’s asset modules feature.


    Configure Webpack to extract inline SVG files like this:



    ```
    --- a/webpack.config.js
    +++ b/webpack.config.js
    @@ -23,6 +23,14 @@ module.exports = {
     },
     module: {
     rules: [
    + {
    + mimetype: 'image/svg+xml',
    + scheme: 'data',
    + type: 'asset/resource',
    + generator: {
    + filename: 'icons/[hash].svg'
    + }
    + },
     {
     test: /\.(scss)$/,
     use: [

    ```
    After running `npm run build` again, you’ll find the SVG files extracted into `dist/icons` and properly referenced from CSS.




    ---


    *See something wrong or out of date here? Please [open an issue on GitHub](https://github.com/twbs/bootstrap/issues/new/choose). Need help troubleshooting? [Search or start a discussion](https://github.com/twbs/bootstrap/discussions) on GitHub.*









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BOOTSTRAP_AND_PARCEL:
    """

    Bootstrap and Parcel
    ====================



    The official guide for how to include and bundle Bootstrap’s CSS and JavaScript in your project using Parcel.






     On this page


    **On this page**


    ---




    * [Setup](#setup)
    * [Project structure](#project-structure)
    * [Configure Parcel](#configure-parcel)
    * [Import Bootstrap](#import-bootstrap)






    ![](https://getbootstrap.com/docs/5.3/assets/img/guides/bootstrap-parcel.png)

    **Want to skip to the end?** Download the source code and working demo for this guide from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/parcel). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/parcel?file=index.html) but not run it because Parcel isn’t currently supported there.

    Setup
    -----


    We’re building a Parcel project with Bootstrap from scratch, so there are some prerequisites and up front steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.


    1. **Create a project folder and setup npm.** We’ll create the `my-project` folder and initialize npm with the `-y` argument to avoid it asking us all the interactive questions.



    ```
    mkdir my-project && cd my-project
    npm init -y

    ```
    2. **Install Parcel.** Unlike our Webpack guide, there’s only a single build tool dependency here. Parcel will automatically install language transformers (like Sass) as it detects them. We use `--save-dev` to signal that this dependency is only for development use and not for production.



    ```
    npm i --save-dev parcel

    ```
    3. **Install Bootstrap.** Now we can install Bootstrap. We’ll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.



    ```
    npm i --save bootstrap @popperjs/core

    ```


    Now that we have all the necessary dependencies installed, we can get to work creating the project files and importing Bootstrap.


    Project structure
    -----------------


    We’ve already created the `my-project` folder and initialized npm. Now we’ll also create our `src` folder, stylesheet, and JavaScript file to round out the project structure. Run the following from `my-project`, or manually create the folder and file structure shown below.



    ```
    mkdir {src,src/js,src/scss}
    touch src/index.html src/js/main.js src/scss/styles.scss

    ```
    When you’re done, your complete project should look like this:



    ```
    my-project/
    ├── src/
    │ ├── js/
    │ │ └── main.js
    │ ├── scss/
    │ │ └── styles.scss
    │ └── index.html
    ├── package-lock.json
    └── package.json

    ```
    At this point, everything is in the right place, but Parcel needs an HTML page and npm script to start our server.


    Configure Parcel
    ----------------


    With dependencies installed and our project folder ready for us to start coding, we can now configure Parcel and run our project locally. Parcel itself requires no configuration file by design, but we do need an npm script and an HTML file to start our server.


    1. **Fill in the `src/index.html` file.** Parcel needs a page to render, so we use our `index.html` page to set up some basic HTML, including our CSS and JavaScript files.



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap w/ Parcel</title>
     <link rel="stylesheet" href="scss/styles.scss">
     <script type="module" src="js/main.js"></script>
     </head>
     <body>
     <div class="container py-4 px-3 mx-auto">
     <h1>Hello, Bootstrap and Parcel!</h1>
     <button class="btn btn-primary">Primary button</button>
     </div>
     </body>
    </html>

    ```
    We’re including a little bit of Bootstrap styling here with the `div class="container"` and `<button>` so that we see when Bootstrap’s CSS is loaded by Parcel.


    Parcel will automatically detect we’re using Sass and install the [Sass Parcel plugin](https://parceljs.org/languages/sass/) to support it. However, if you wish, you can also manually run `npm i --save-dev @parcel/transformer-sass`.
    2. **Add the Parcel npm scripts.** Open the `package.json` and add the following `start` script to the `scripts` object. We’ll use this script to start our Parcel development server and render the HTML file we created after it’s compiled into the `dist` directory.



    ```
    {
     // ...
     "scripts": {
     "start": "parcel serve src/index.html --public-url / --dist-dir dist",
     "test": "echo \"Error: no test specified\" && exit 1"
     },
     // ...
    }

    ```
    3. **And finally, we can start Parcel.** From the `my-project` folder in your terminal, run that newly added npm script:



    ```
    npm start

    ```
    ![Parcel dev server running](https://getbootstrap.com/docs/5.3/assets/img/guides/parcel-dev-server.png)


    In the next and final section to this guide, we’ll import all of Bootstrap’s CSS and JavaScript.


    Import Bootstrap
    ----------------


    Importing Bootstrap into Parcel requires two imports, one into our `styles.scss` and one into our `main.js`.


    1. **Import Bootstrap’s CSS.** Add the following to `src/scss/styles.scss` to import all of Bootstrap’s source Sass.



    ```
    // Import all of Bootstrap's CSS
    @import "bootstrap/scss/bootstrap";

    ```
    *You can also import our stylesheets individually if you want. [Read our Sass import docs](https://getbootstrap.com/docs/5.3/customize/sass/#importing) for details.*
    2. **Import Bootstrap’s JS.** Add the following to `src/js/main.js` to import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.




    ```
    // Import all of Bootstrap's JS
    import \* as bootstrap from 'bootstrap'

    ```
    You can also import JavaScript plugins individually as needed to keep bundle sizes down:




    ```
    import Alert from 'bootstrap/js/dist/alert'

    // or, specify which plugins you need:
    import { Tooltip, Toast, Popover } from 'bootstrap'

    ```
    *[Read our JavaScript docs](https://getbootstrap.com/docs/5.3/getting-started/javascript/) for more information on how to use Bootstrap’s plugins.*
    3. **And you’re done! 🎉** With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this.


    ![Parcel dev server running with Bootstrap](https://getbootstrap.com/docs/5.3/assets/img/guides/parcel-dev-server-bootstrap.png)
    Now you can start adding any Bootstrap components you want to use. Be sure to [check out the complete Parcel example project](https://github.com/twbs/examples/tree/main/parcel) for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.




    ---


    *See something wrong or out of date here? Please [open an issue on GitHub](https://github.com/twbs/bootstrap/issues/new/choose). Need help troubleshooting? [Search or start a discussion](https://github.com/twbs/bootstrap/discussions) on GitHub.*









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BOOTSTRAP_AND_VITE:
    """

    Bootstrap and Vite
    ==================



    The official guide for how to include and bundle Bootstrap’s CSS and JavaScript in your project using Vite.






     On this page


    **On this page**


    ---




    * [Setup](#setup)
    * [Project structure](#project-structure)
    * [Configure Vite](#configure-vite)
    * [Import Bootstrap](#import-bootstrap)






    ![](https://getbootstrap.com/docs/5.3/assets/img/guides/bootstrap-vite.png)

    **Want to skip to the end?** Download the source code and working demo for this guide from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/vite). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/vite?file=index.html) for live editing.

    Setup
    -----


    We’re building a Vite project with Bootstrap from scratch, so there are some prerequisites and up front steps before we can really get started. This guide requires you to have Node.js installed and some familiarity with the terminal.


    1. **Create a project folder and setup npm.** We’ll create the `my-project` folder and initialize npm with the `-y` argument to avoid it asking us all the interactive questions.



    ```
    mkdir my-project && cd my-project
    npm init -y

    ```
    2. **Install Vite.** Unlike our Webpack guide, there’s only a single build tool dependency here. We use `--save-dev` to signal that this dependency is only for development use and not for production.



    ```
    npm i --save-dev vite

    ```
    3. **Install Bootstrap.** Now we can install Bootstrap. We’ll also install Popper since our dropdowns, popovers, and tooltips depend on it for their positioning. If you don’t plan on using those components, you can omit Popper here.



    ```
    npm i --save bootstrap @popperjs/core

    ```
    4. **Install additional dependency.** In addition to Vite and Bootstrap, we need another dependency (Sass) to properly import and bundle Bootstrap’s CSS.



    ```
    npm i --save-dev sass

    ```


    Now that we have all the necessary dependencies installed and setup, we can get to work creating the project files and importing Bootstrap.


    Project structure
    -----------------


    We’ve already created the `my-project` folder and initialized npm. Now we’ll also create our `src` folder, stylesheet, and JavaScript file to round out the project structure. Run the following from `my-project`, or manually create the folder and file structure shown below.



    ```
    mkdir {src,src/js,src/scss}
    touch src/index.html src/js/main.js src/scss/styles.scss vite.config.js

    ```
    When you’re done, your complete project should look like this:



    ```
    my-project/
    ├── src/
    │ ├── js/
    │ │ └── main.js
    │ └── scss/
    │ | └── styles.scss
    | └── index.html
    ├── package-lock.json
    ├── package.json
    └── vite.config.js

    ```
    At this point, everything is in the right place, but Vite won’t work because we haven’t filled in our `vite.config.js` yet.


    Configure Vite
    --------------


    With dependencies installed and our project folder ready for us to start coding, we can now configure Vite and run our project locally.


    1. **Open `vite.config.js` in your editor.** Since it’s blank, we’ll need to add some boilerplate config to it so we can start our server. This part of the config tells Vite where to look for our project’s JavaScript and how the development server should behave (pulling from the `src` folder with hot reload).




    ```
    const path = require('path')

    export default {
     root: path.resolve(\_\_dirname, 'src'),
     build: {
     outDir: '../dist'
     },
     server: {
     port: 8080
     }
    }

    ```
    2. **Next we fill in `src/index.html`.** This is the HTML page Vite will load in the browser to utilize the bundled CSS and JS we’ll add to it in later steps.



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap w/ Vite</title>
     <script type="module" src="./js/main.js"></script>
     </head>
     <body>
     <div class="container py-4 px-3 mx-auto">
     <h1>Hello, Bootstrap and Vite!</h1>
     <button class="btn btn-primary">Primary button</button>
     </div>
     </body>
    </html>

    ```
    We’re including a little bit of Bootstrap styling here with the `div class="container"` and `<button>` so that we see when Bootstrap’s CSS is loaded by Vite.
    3. **Now we need an npm script to run Vite.** Open `package.json` and add the `start` script shown below (you should already have the test script). We’ll use this script to start our local Vite dev server.



    ```
    {
     // ...
     "scripts": {
     "start": "vite",
     "test": "echo \"Error: no test specified\" && exit 1"
     },
     // ...
    }

    ```
    4. **And finally, we can start Vite.** From the `my-project` folder in your terminal, run that newly added npm script:



    ```
    npm start

    ```
    ![Vite dev server running](https://getbootstrap.com/docs/5.3/assets/img/guides/vite-dev-server.png)


    In the next and final section to this guide, we’ll import all of Bootstrap’s CSS and JavaScript.


    Import Bootstrap
    ----------------


    1. **Import Bootstrap’s CSS.** Add the following to `src/scss/styles.scss` to import all of Bootstrap’s source Sass.



    ```
    // Import all of Bootstrap's CSS
    @import "bootstrap/scss/bootstrap";

    ```
    *You can also import our stylesheets individually if you want. [Read our Sass import docs](https://getbootstrap.com/docs/5.3/customize/sass/#importing) for details.*
    2. **Next we load the CSS and import Bootstrap’s JavaScript.** Add the following to `src/js/main.js` to load the CSS and import all of Bootstrap’s JS. Popper will be imported automatically through Bootstrap.




    ```
    // Import our custom CSS
    import '../scss/styles.scss'

    // Import all of Bootstrap's JS
    import \* as bootstrap from 'bootstrap'

    ```
    You can also import JavaScript plugins individually as needed to keep bundle sizes down:




    ```
    import Alert from 'bootstrap/js/dist/alert';

    // or, specify which plugins you need:
    import { Tooltip, Toast, Popover } from 'bootstrap';

    ```
    *[Read our JavaScript docs](https://getbootstrap.com/docs/5.3/getting-started/javascript/) for more information on how to use Bootstrap’s plugins.*
    3. **And you’re done! 🎉** With Bootstrap’s source Sass and JS fully loaded, your local development server should now look like this.


    ![Vite dev server running with Bootstrap](https://getbootstrap.com/docs/5.3/assets/img/guides/vite-dev-server-bootstrap.png)
    Now you can start adding any Bootstrap components you want to use. Be sure to [check out the complete Vite example project](https://github.com/twbs/examples/tree/main/vite) for how to include additional custom Sass and optimize your build by importing only the parts of Bootstrap’s CSS and JS that you need.




    ---


    *See something wrong or out of date here? Please [open an issue on GitHub](https://github.com/twbs/bootstrap/issues/new/choose). Need help troubleshooting? [Search or start a discussion](https://github.com/twbs/bootstrap/discussions) on GitHub.*









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ACCESSIBILITY:
    """

    Accessibility
    =============



    A brief overview of Bootstrap’s features and limitations for the creation of accessible content.






     On this page


    **On this page**


    ---




    * [Overview and limitations](#overview-and-limitations)
            + [Structural markup](#structural-markup)
            + [Interactive components](#interactive-components)
            + [Color contrast](#color-contrast)
            + [Visually hidden content](#visually-hidden-content)
            + [Reduced motion](#reduced-motion)
    * [Additional resources](#additional-resources)






    Bootstrap provides an easy-to-use framework of ready-made styles, layout tools, and interactive components, allowing developers to create websites and applications that are visually appealing, functionally rich, and accessible out of the box.


    Overview and limitations
    ------------------------


    The overall accessibility of any project built with Bootstrap depends in large part on the author’s markup, additional styling, and scripting they’ve included. However, provided that these have been implemented correctly, it should be perfectly possible to create websites and applications with Bootstrap that fulfill [WCAG 2.1](https://www.w3.org/TR/WCAG/) (A/AA/AAA), [Section 508](https://www.section508.gov/), and similar accessibility standards and requirements.


    ### Structural markup


    Bootstrap’s styling and layout can be applied to a wide range of markup structures. This documentation aims to provide developers with best practice examples to demonstrate the use of Bootstrap itself and illustrate appropriate semantic markup, including ways in which potential accessibility concerns can be addressed.


    ### Interactive components


    Bootstrap’s interactive components—such as modal dialogs, dropdown menus, and custom tooltips—are designed to work for touch, mouse, and keyboard users. Through the use of relevant [WAI-ARIA](https://www.w3.org/WAI/standards-guidelines/aria/) roles and attributes, these components should also be understandable and operable using assistive technologies (such as screen readers).


    Because Bootstrap’s components are purposely designed to be fairly generic, authors may need to include further ARIA roles and attributes, as well as JavaScript behavior, to more accurately convey the precise nature and functionality of their component. This is usually noted in the documentation.


    ### Color contrast


    Some combinations of colors that currently make up Bootstrap’s default palette—used throughout the framework for things such as button variations, alert variations, form validation indicators—may lead to *insufficient* color contrast (below the recommended [WCAG 2.1 text color contrast ratio of 4.5:1](https://www.w3.org/TR/WCAG/#contrast-minimum) and the [WCAG 2.1 non-text color contrast ratio of 3:1](https://www.w3.org/TR/WCAG/#non-text-contrast)), particularly when used against a light background. Authors are encouraged to test their specific uses of color and, where necessary, manually modify/extend these default colors to ensure adequate color contrast ratios.


    ### Visually hidden content


    Content which should be visually hidden, but remain accessible to assistive technologies such as screen readers, can be styled using the `.visually-hidden` class. This can be useful in situations where additional visual information or cues (such as meaning denoted through the use of color) need to also be conveyed to non-visual users.



    ```
    <p class="text-danger">
     <span class="visually-hidden">Danger: </span>
     This action is not reversible
    </p>

    ```
    For visually hidden interactive controls, such as traditional “skip” links, use the `.visually-hidden-focusable` class. This will ensure that the control becomes visible once focused (for sighted keyboard users). **Watch out, compared to the equivalent `.sr-only` and `.sr-only-focusable` classes in past versions, Bootstrap 5’s `.visually-hidden-focusable` is a standalone class, and must not be used in combination with the `.visually-hidden` class.**



    ```
    <a class="visually-hidden-focusable" href="#content">Skip to main content</a>

    ```
    ### Reduced motion


    Bootstrap includes support for the [`prefers-reduced-motion` media feature](https://www.w3.org/TR/mediaqueries-5/#prefers-reduced-motion). In browsers/environments that allow the user to specify their preference for reduced motion, most CSS transition effects in Bootstrap (for instance, when a modal dialog is opened or closed, or the sliding animation in carousels) will be disabled, and meaningful animations (such as spinners) will be slowed down.


    On browsers that support `prefers-reduced-motion`, and where the user has *not* explicitly signaled that they’d prefer reduced motion (i.e. where `prefers-reduced-motion: no-preference`), Bootstrap enables smooth scrolling using the `scroll-behavior` property.


    Additional resources
    --------------------


    * [Web Content Accessibility Guidelines (WCAG) 2.1](https://www.w3.org/TR/WCAG/)
    * [The A11Y Project](https://www.a11yproject.com/)
    * [MDN accessibility documentation](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/Accessibility)
    * [Tenon.io Accessibility Checker](https://tenon.io/)
    * [Color Contrast Analyser (CCA)](https://www.tpgi.com/color-contrast-checker/)
    * [“HTML Codesniffer” bookmarklet for identifying accessibility issues](https://github.com/squizlabs/HTML_CodeSniffer)
    * [Microsoft Accessibility Insights](https://accessibilityinsights.io/)
    * [Deque Axe testing tools](https://www.deque.com/axe/)
    * [Introduction to Web Accessibility](https://www.w3.org/WAI/fundamentals/accessibility-intro/)









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class RFS:
    """

    RFS
    ===



    Bootstrap’s resizing engine responsively scales common CSS properties to better utilize available space across viewports and devices.






     On this page


    **On this page**


    ---




    * [What is RFS?](#what-is-rfs)
    * [Using RFS](#using-rfs)
            + [Using the mixins](#using-the-mixins)
            + [Using the functions](#using-the-functions)
    * [Extended documentation](#extended-documentation)






    What is RFS?
    ------------


    Bootstrap’s side project [RFS](https://github.com/twbs/rfs/tree/v10.0.0) is a unit resizing engine which was initially developed to resize font sizes (hence its abbreviation for Responsive Font Sizes). Nowadays RFS is capable of rescaling most CSS properties with unit values like `margin`, `padding`, `border-radius`, or even `box-shadow`.


    The mechanism automatically calculates the appropriate values based on the dimensions of the browser viewport. It will be compiled into `calc()` functions with a mix of `rem` and viewport units to enable the responsive scaling behavior.


    Using RFS
    ---------


    The mixins are included in Bootstrap and are available once you include Bootstrap’s `scss`. RFS can also be [installed standalone](https://github.com/twbs/rfs/tree/v10.0.0#installation) if needed.


    ### Using the mixins


    The `rfs()` mixin has shorthands for `font-size`, `margin`, `margin-top`, `margin-right`, `margin-bottom`, `margin-left`, `padding`, `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`. See the example below for source Sass and compiled CSS.



    ```
    .title {
     @include font-size(4rem);
    }

    ```

    ```
    .title {
     font-size: calc(1.525rem + 3.3vw);
    }

    @media (min-width: 1200px) {
     .title {
     font-size: 4rem;
     }
    }

    ```
    Any other property can be passed to the `rfs()` mixin like this:



    ```
    .selector {
     @include rfs(4rem, border-radius);
    }

    ```
    `!important` can also just be added to whatever value you want:



    ```
    .selector {
     @include padding(2.5rem !important);
    }

    ```
    ### Using the functions


    When you don’t want to use the includes, there are also two functions:


    * `rfs-value()` converts a value into a `rem` value if a `px` value is passed, in other cases it returns the same result.
    * `rfs-fluid-value()` returns the fluid version of a value if the property needs rescaling.


    In this example, we use one of Bootstrap’s built-in [responsive breakpoint mixins](https://getbootstrap.com/docs/5.3/layout/breakpoints/) to only apply styling below the `lg` breakpoint.



    ```
    .selector {
     @include media-breakpoint-down(lg) {
     padding: rfs-fluid-value(2rem);
     font-size: rfs-fluid-value(1.125rem);
     }
    }

    ```

    ```
    @media (max-width: 991.98px) {
     .selector {
     padding: calc(1.325rem + 0.9vw);
     font-size: 1.125rem; /\* 1.125rem is small enough, so RFS won't rescale this \*/
     }
    }

    ```
    Extended documentation
    ----------------------


    RFS is a separate project under the Bootstrap organization. More about RFS and its configuration can be found on its [GitHub repository](https://github.com/twbs/rfs/tree/v10.0.0).









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class RTL:
    """

    RTL
    ===



    Learn how to enable support for right-to-left text in Bootstrap across our layout, components, and utilities.






     On this page


    **On this page**


    ---




    * [Get familiar](#get-familiar)
    * [Required HTML](#required-html)
            + [Starter template](#starter-template)
            + [RTL examples](#rtl-examples)
    * [Approach](#approach)
    * [Customize from source](#customize-from-source)
            + [Custom RTL values](#custom-rtl-values)
            + [Alternative font stack](#alternative-font-stack)
            + [LTR and RTL at the same time](#ltr-and-rtl-at-the-same-time)
    * [The breadcrumb case](#the-breadcrumb-case)
    * [Additional resources](#additional-resources)






    Get familiar
    ------------


    We recommend getting familiar with Bootstrap first by reading through our [Getting Started Introduction page](https://getbootstrap.com/docs/5.3/getting-started/introduction/). Once you’ve run through it, continue reading here for how to enable RTL.


    You may also want to read up on [the RTLCSS project](https://rtlcss.com/), as it powers our approach to RTL.



    **Bootstrap’s RTL feature is still experimental** and will evolve based on user feedback. Spotted something or have an improvement to suggest? [Open an issue](https://github.com/twbs/bootstrap/issues/new/choose), we’d love to get your insights.

    Required HTML
    -------------


    There are two strict requirements for enabling RTL in Bootstrap-powered pages.


    1. Set `dir="rtl"` on the `<html>` element.
    2. Add an appropriate `lang` attribute, like `lang="ar"`, on the `<html>` element.


    From there, you’ll need to include an RTL version of our CSS. For example, here’s the stylesheet for our compiled and minified CSS with RTL enabled:



    ```
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.rtl.min.css" integrity="sha384-PRrgQVJ8NNHGieOA1grGdCTIt4h21CzJs6SnWH4YMQ6G5F5+IEzOHz67L4SQaF0o" crossorigin="anonymous">

    ```
    ### Starter template


    You can see the above requirements reflected in this modified RTL starter template.



    ```
    <!doctype html>
    <html lang="ar" dir="rtl">
     <head>
     <!-- Required meta tags -->
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">

     <!-- Bootstrap CSS -->
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.rtl.min.css" integrity="sha384-PRrgQVJ8NNHGieOA1grGdCTIt4h21CzJs6SnWH4YMQ6G5F5+IEzOHz67L4SQaF0o" crossorigin="anonymous">

     <title>مرحبًا بالعالم!</title>
     </head>
     <body>
     <h1>مرحبًا بالعالم!</h1>

     <!-- Optional JavaScript; choose one of the two! -->

     <!-- Option 1: Bootstrap Bundle with Popper -->
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>

     <!-- Option 2: Separate Popper and Bootstrap JS -->
     <!--
     <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.min.js" integrity="sha384-Rx+T1VzGupg4BHQYs2gCW9It+akI2MM/mndMCy36UVfodzcJcF0GGLxZIzObiEfa" crossorigin="anonymous"></script>
     -->
     </body>
    </html>

    ```
    ### RTL examples


    Get started with one of our several [RTL examples](https://getbootstrap.com/docs/5.3/examples/#rtl).


    Approach
    --------


    Our approach to building RTL support into Bootstrap comes with two important decisions that impact how we write and use our CSS:


    1. **First, we decided to build it with the [RTLCSS](https://rtlcss.com/) project.** This gives us some powerful features for managing changes and overrides when moving from LTR to RTL. It also allows us to build two versions of Bootstrap from one codebase.
    2. **Second, we’ve renamed a handful of directional classes to adopt a logical properties approach.** Most of you have already interacted with logical properties thanks to our flex utilities—they replace direction properties like `left` and `right` in favor `start` and `end`. That makes the class names and values appropriate for LTR and RTL without any overhead.


    For example, instead of `.ml-3` for `margin-left`, use `.ms-3`.


    Working with RTL, through our source Sass or compiled CSS, shouldn’t be much different from our default LTR though.


    Customize from source
    ---------------------


    When it comes to [customization](https://getbootstrap.com/docs/5.3/customize/sass/), the preferred way is to take advantage of variables, maps, and mixins. This approach works the same for RTL, even if it’s post-processed from the compiled files, thanks to [how RTLCSS works](https://rtlcss.com/learn/getting-started/why-rtlcss/).


    ### Custom RTL values


    Using [RTLCSS value directives](https://rtlcss.com/learn/usage-guide/value-directives/), you can make a variable output a different value for RTL. For example, to decrease the weight for `$font-weight-bold` throughout the codebase, you may use the `/*rtl: {value}*/` syntax:



    ```
    $font-weight-bold: 700 #{/\* rtl:600 \*/} !default;

    ```
    Which would output to the following for our default CSS and RTL CSS:



    ```
    /\* bootstrap.css \*/
    dt {
     font-weight: 700 /\* rtl:600 \*/;
    }

    /\* bootstrap.rtl.css \*/
    dt {
     font-weight: 600;
    }

    ```
    ### Alternative font stack


    In the case you’re using a custom font, be aware that not all fonts support the non-Latin alphabet. To switch from Pan-European to Arabic family, you may need to use `/*rtl:insert: {value}*/` in your font stack to modify the names of font families.


    For example, to switch from `Helvetica Neue` font for LTR to `Helvetica Neue Arabic` for RTL, your Sass code could look like this:



    ```
    $font-family-sans-serif:
     Helvetica Neue #{"/\* rtl:insert:Arabic \*/"},
     // Cross-platform generic font family (default user interface font)
     system-ui,
     // Safari for macOS and iOS (San Francisco)
     -apple-system,
     // Chrome < 56 for macOS (San Francisco)
     BlinkMacSystemFont,
     // Windows
     "Segoe UI",
     // Android
     Roboto,
     // Basic web fallback
     Arial,
     // Linux
     "Noto Sans",
     // Sans serif fallback
     sans-serif,
     // Emoji fonts
     "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;

    ```
    ### LTR and RTL at the same time


    Need both LTR and RTL on the same page? Thanks to [RTLCSS String Maps](https://rtlcss.com/learn/usage-guide/string-map/), this is pretty straightforward. Wrap your `@import`s with a class, and set a custom rename rule for RTLCSS:



    ```
    /\* rtl:begin:options: {
     "autoRename": true,
     "stringMap":[ {
     "name": "ltr-rtl",
     "priority": 100,
     "search": ["ltr"],
     "replace": ["rtl"],
     "options": {
     "scope": "\*",
     "ignoreCase": false
     }
     } ]
    } \*/
    .ltr {
     @import "../node\_modules/bootstrap/scss/bootstrap";
    }
    /\*rtl:end:options\*/

    ```
    After running Sass then RTLCSS, each selector in your CSS files will be prepended by `.ltr`, and `.rtl` for RTL files. Now you’re able to use both files on the same page, and simply use `.ltr` or `.rtl` on your components wrappers to use one or the other direction.



    **Edge cases and known limitations** to consider when working with a combined LTR and RTL implementation:


    1. When switching `.ltr` and `.rtl`, make sure you add `dir` and `lang` attributes accordingly.
    2. Loading both files can be a real performance bottleneck: consider some [optimization](https://getbootstrap.com/docs/5.3/customize/optimize/), and maybe try to [load one of those files asynchronously](https://www.filamentgroup.com/lab/load-css-simpler/).
    3. Nesting styles this way will prevent our `form-validation-state()` mixin from working as intended, thus require you tweak it a bit by yourself. [See #31223](https://github.com/twbs/bootstrap/issues/31223).



    The breadcrumb case
    -------------------


    The [breadcrumb separator](https://getbootstrap.com/docs/5.3/components/breadcrumb//#changing-the-separator) is the only case requiring its own brand-new variable— namely `$breadcrumb-divider-flipped` —defaulting to `$breadcrumb-divider`.


    Additional resources
    --------------------


    * [RTLCSS](https://rtlcss.com/)
    * [RTL Styling 101](https://rtlstyling.com/posts/rtl-styling)









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CONTRIBUTE:
    """

    Contribute
    ==========



    Help develop Bootstrap with our documentation build scripts and tests.






     On this page


    **On this page**


    ---




    * [Tooling setup](#tooling-setup)
    * [Using npm scripts](#using-npm-scripts)
    * [Sass](#sass)
    * [Autoprefixer](#autoprefixer)
    * [RTLCSS](#rtlcss)
    * [Local documentation](#local-documentation)
    * [Troubleshooting](#troubleshooting)






    Tooling setup
    -------------


    Bootstrap uses [npm scripts](https://docs.npmjs.com/misc/scripts/) to build the documentation and compile source files. Our [package.json](https://github.com/twbs/bootstrap/blob/v5.3.1/package.json) houses these scripts for compiling code, running tests, and more. These aren’t intended for use outside our repository and documentation.


    To use our build system and run our documentation locally, you’ll need a copy of Bootstrap’s source files and Node. Follow these steps and you should be ready to rock:


    1. [Download and install Node.js](https://nodejs.org/en/download/), which we use to manage our dependencies.
    2. Either [download Bootstrap’s sources](https://github.com/twbs/bootstrap/archive/v5.3.1.zip) or fork and clone [Bootstrap’s repository](https://github.com/twbs/bootstrap).
    3. Navigate to the root `/bootstrap` directory and run `npm install` to install our local dependencies listed in [package.json](https://github.com/twbs/bootstrap/blob/v5.3.1/package.json).


    When completed, you’ll be able to run the various commands provided from the command line.


    Using npm scripts
    -----------------


    Our [package.json](https://github.com/twbs/bootstrap/blob/v5.3.1/package.json) includes numerous tasks for developing the project. Run `npm run` to see all the npm scripts in your terminal. **Primary tasks include:**




    | Task | Description |
    | --- | --- |
    | `npm start` | Compiles CSS and JavaScript, builds the documentation, and starts a local server. |
    | `npm run dist` | Creates the `dist/` directory with compiled files. Uses [Sass](https://sass-lang.com/), [Autoprefixer](https://github.com/postcss/autoprefixer), and [terser](https://github.com/terser/terser). |
    | `npm test` | Runs tests locally after running `npm run dist` |
    | `npm run docs-serve` | Builds and runs the documentation locally. |



    **Get started with Bootstrap via npm with our starter project!** Head to the [Sass & JS example](https://github.com/twbs/examples/tree/main/sass-js) template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.

    Sass
    ----


    Bootstrap uses [Dart Sass](https://sass-lang.com/dart-sass) for compiling our Sass source files into CSS files (included in our build process), and we recommend you do the same if you’re compiling Sass using your own asset pipeline. We previously used Node Sass for Bootstrap v4, but LibSass and packages built on top of it, including Node Sass, are now [deprecated](https://sass-lang.com/blog/libsass-is-deprecated).


    Dart Sass uses a rounding precision of 10 and for efficiency reasons does not allow adjustment of this value. We don’t lower this precision during further processing of our generated CSS, such as during minification, but if you chose to do so we recommend maintaining a precision of at least 6 to prevent issues with browser rounding.


    Autoprefixer
    ------------


    Bootstrap uses [Autoprefixer](https://github.com/postcss/autoprefixer) (included in our build process) to automatically add vendor prefixes to some CSS properties at build time. Doing so saves us time and code by allowing us to write key parts of our CSS a single time while eliminating the need for vendor mixins like those found in v3.


    We maintain the list of browsers supported through Autoprefixer in a separate file within our GitHub repository. See [.browserslistrc](https://github.com/twbs/bootstrap/blob/v5.3.1/.browserslistrc) for details.


    RTLCSS
    ------


    Bootstrap uses [RTLCSS](https://rtlcss.com/) to process compiled CSS and convert them to RTL – basically replacing horizontal direction aware properties (e.g. `padding-left`) with their opposite. It allows us only write our CSS a single time and make minor tweaks using RTLCSS [control](https://rtlcss.com/learn/usage-guide/control-directives/) and [value](https://rtlcss.com/learn/usage-guide/value-directives/) directives.


    Local documentation
    -------------------


    Running our documentation locally requires the use of Hugo, which gets installed via the [hugo-bin](https://www.npmjs.com/package/hugo-bin) npm package. Hugo is a blazingly fast and quite extensible static site generator that provides us: basic includes, Markdown-based files, templates, and more. Here’s how to get it started:


    1. Run through the [tooling setup](#tooling-setup) above to install all dependencies.
    2. From the root `/bootstrap` directory, run `npm run docs-serve` in the command line.
    3. Open `http://localhost:9001/` in your browser, and voilà.


    Learn more about using Hugo by reading its [documentation](https://gohugo.io/documentation/).


    Troubleshooting
    ---------------


    Should you encounter problems with installing dependencies, uninstall all previous dependency versions (global and local). Then, rerun `npm install`.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CUSTOMIZE:
    """

    Customize
    =========



    Learn how to theme, customize, and extend Bootstrap with Sass, a boatload of global options, an expansive color system, and more.







    [**Sass**
    Utilize our source Sass files to take advantage of variables, maps, mixins, and functions.](../sass/)


    [**Options**
    Customize Bootstrap with built-in variables to easily toggle global CSS preferences.](../options/)


    [**Color**
    Learn about and customize the color systems that support the entire toolkit.](../color/)


    [**Color modes**
    Explore our default light mode and the new dark mode, or create custom color modes yourself.](../color-modes/)


    [**Components**
    Learn how we build nearly all our components responsively and with base and modifier classes.](../components/)


    [**CSS variables**
    Use Bootstrap's CSS custom properties for fast and forward-looking design and development.](../css-variables/)


    [**Optimize**
    Keep your projects lean, responsive, and maintainable so you can deliver the best experience.](../optimize/)


    Overview
    --------


    There are multiple ways to customize Bootstrap. Your best path can depend on your project, the complexity of your build tools, the version of Bootstrap you’re using, browser support, and more.


    Our two preferred methods are:


    1. Using Bootstrap [via package manager](https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers) so you can use and extend our source files.
    2. Using Bootstrap’s compiled distribution files or [jsDelivr](https://getbootstrap.com/docs/5.3/getting-started/download/#cdn-via-jsdelivr) so you can add onto or override Bootstrap’s styles.


    While we cannot go into details here on how to use every package manager, we can give some guidance on [using Bootstrap with your own Sass compiler](https://getbootstrap.com/docs/5.3/customize/sass/).


    For those who want to use the distribution files, review the [getting started page](https://getbootstrap.com/docs/5.3/getting-started/introduction/) for how to include those files and an example HTML page. From there, consult the docs for the layout, components, and behaviors you’d like to use.


    As you familiarize yourself with Bootstrap, continue exploring this section for more details on how to utilize our global options, making use of and changing our color system, how we build our components, how to use our growing list of CSS custom properties, and how to optimize your code when building with Bootstrap.


    CSPs and embedded SVGs
    ----------------------


    Several Bootstrap components include embedded SVGs in our CSS to style components consistently and easily across browsers and devices. **For organizations with more strict CSP configurations**, we’ve documented all instances of our embedded SVGs (all of which are applied via `background-image`) so you can more thoroughly review your options.


    * [Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)
    * [Carousel controls](https://getbootstrap.com/docs/5.3/components/carousel/#with-controls)
    * [Close button](https://getbootstrap.com/docs/5.3/components/close-button/) (used in alerts and modals)
    * [Form checkboxes and radio buttons](https://getbootstrap.com/docs/5.3/forms/checks-radios/)
    * [Form switches](https://getbootstrap.com/docs/5.3/forms/checks-radios/#switches)
    * [Form validation icons](https://getbootstrap.com/docs/5.3/forms/validation/#server-side)
    * [Navbar toggle buttons](https://getbootstrap.com/docs/5.3/components/navbar/#responsive-behaviors)
    * [Select menus](https://getbootstrap.com/docs/5.3/forms/select/)


    Based on [community conversation](https://github.com/twbs/bootstrap/issues/25394), some options for addressing this in your own codebase include [replacing the URLs with locally hosted assets](https://getbootstrap.com/docs/5.3/getting-started/webpack/#extracting-svg-files), removing the images and using inline images (not possible in all components), and modifying your CSP. Our recommendation is to carefully review your own security policies and decide on the best path forward, if necessary.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SASS:
    """

    Sass
    ====



    Utilize our source Sass files to take advantage of variables, maps, mixins, and functions to help you build faster and customize your project.






     On this page


    **On this page**


    ---




    * [File structure](#file-structure)
    * [Importing](#importing)
    * [Compiling](#compiling)
    * [Including](#including)
    * [Variable defaults](#variable-defaults)
    * [Maps and loops](#maps-and-loops)
            + [Modify map](#modify-map)
            + [Add to map](#add-to-map)
            + [Remove from map](#remove-from-map)
    * [Required keys](#required-keys)
    * [Functions](#functions)
            + [Colors](#colors)
            + [Color contrast](#color-contrast)
            + [Escape SVG](#escape-svg)
            + [Add and Subtract functions](#add-and-subtract-functions)
    * [Mixins](#mixins)
            + [Color schemes](#color-schemes)






    Utilize our source Sass files to take advantage of variables, maps, mixins, and more.


    File structure
    --------------


    Whenever possible, avoid modifying Bootstrap’s core files. For Sass, that means creating your own stylesheet that imports Bootstrap so you can modify and extend it. Assuming you’re using a package manager like npm, you’ll have a file structure that looks like this:



    ```
    your-project/
    ├── scss/
    │ └── custom.scss
    └── node\_modules/
    │ └── bootstrap/
    │ ├── js/
    │ └── scss/
    └── index.html

    ```
    If you’ve downloaded our source files and aren’t using a package manager, you’ll want to manually create something similar to that structure, keeping Bootstrap’s source files separate from your own.



    ```
    your-project/
    ├── scss/
    │ └── custom.scss
    ├── bootstrap/
    │ ├── js/
    │ └── scss/
    └── index.html

    ```
    Importing
    ---------


    In your `custom.scss`, you’ll import Bootstrap’s source Sass files. You have two options: include all of Bootstrap, or pick the parts you need. We encourage the latter, though be aware there are some requirements and dependencies across our components. You also will need to include some JavaScript for our plugins.



    ```
    // Custom.scss
    // Option A: Include all of Bootstrap

    // Include any default variable overrides here (though functions won't be available)

    @import "../node\_modules/bootstrap/scss/bootstrap";

    // Then add additional custom code here

    ```

    ```
    // Custom.scss
    // Option B: Include parts of Bootstrap

    // 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
    @import "../node\_modules/bootstrap/scss/functions";

    // 2. Include any default variable overrides here

    // 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)
    @import "../node\_modules/bootstrap/scss/variables";
    @import "../node\_modules/bootstrap/scss/variables-dark";

    // 4. Include any default map overrides here

    // 5. Include remainder of required parts
    @import "../node\_modules/bootstrap/scss/maps";
    @import "../node\_modules/bootstrap/scss/mixins";
    @import "../node\_modules/bootstrap/scss/root";

    // 6. Optionally include any other parts as needed
    @import "../node\_modules/bootstrap/scss/utilities";
    @import "../node\_modules/bootstrap/scss/reboot";
    @import "../node\_modules/bootstrap/scss/type";
    @import "../node\_modules/bootstrap/scss/images";
    @import "../node\_modules/bootstrap/scss/containers";
    @import "../node\_modules/bootstrap/scss/grid";
    @import "../node\_modules/bootstrap/scss/helpers";

    // 7. Optionally include utilities API last to generate classes based on the Sass map in `\_utilities.scss`
    @import "../node\_modules/bootstrap/scss/utilities/api";

    // 8. Add additional custom code here

    ```
    With that setup in place, you can begin to modify any of the Sass variables and maps in your `custom.scss`. You can also start to add parts of Bootstrap under the `// Optional` section as needed. We suggest using the full import stack from our `bootstrap.scss` file as your starting point.


    Compiling
    ---------


    In order to use your custom Sass code as CSS in the browser, you need a Sass compiler. Sass ships as a CLI package, but you can also compile it with other build tools like [Gulp](https://gulpjs.com/) or [Webpack](https://webpack.js.org/), or with a GUI applications. Some IDEs also have Sass compilers built in or as downloadable extensions.


    We like to use the CLI to compile our Sass, but you can use whichever method you prefer. From the command line, run the following:



    ```
    # Install Sass globally
    npm install -g sass

    # Watch your custom Sass for changes and compile it to CSS
    sass --watch ./scss/custom.scss ./css/custom.css

    ```
    Learn more about your options at [sass-lang.com/install](https://sass-lang.com/install) and [compiling with VS Code](https://code.visualstudio.comhttps://getbootstrap.com/docs/languages/css#_transpiling-sass-and-less-into-css).



    **Using Bootstrap with another build tool?** Consider reading our guides for compiling with [Webpack](https://getbootstrap.com/docs/5.3/getting-started/webpack/), [Parcel](https://getbootstrap.com/docs/5.3/getting-started/parcel/), or [Vite](https://getbootstrap.com/docs/5.3/getting-started/vite/). We also have production-ready demos in [our examples repository on GitHub](https://github.com/twbs/examples).

    Including
    ---------


    Once your CSS is compiled, you can include it in your HTML files. Inside your `index.html` you’ll want to include your compiled CSS file. Be sure to update the path to your compiled CSS file if you’ve changed it.



    ```
    <!doctype html>
    <html lang="en">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Custom Bootstrap</title>
     <link href="/css/custom.css" rel="stylesheet">
     </head>
     <body>
     <h1>Hello, world!</h1>
     </body>
    </html>

    ```
    Variable defaults
    -----------------


    Every Sass variable in Bootstrap includes the `!default` flag allowing you to override the variable’s default value in your own Sass without modifying Bootstrap’s source code. Copy and paste variables as needed, modify their values, and remove the `!default` flag. If a variable has already been assigned, then it won’t be re-assigned by the default values in Bootstrap.


    You will find the complete list of Bootstrap’s variables in `scss/_variables.scss`. Some variables are set to `null`, these variables don’t output the property unless they are overridden in your configuration.


    Variable overrides must come after our functions are imported, but before the rest of the imports.


    Here’s an example that changes the `background-color` and `color` for the `<body>` when importing and compiling Bootstrap via npm:



    ```
    // Required
    @import "../node\_modules/bootstrap/scss/functions";

    // Default variable overrides
    $body-bg: #000;
    $body-color: #111;

    // Required
    @import "../node\_modules/bootstrap/scss/variables";
    @import "../node\_modules/bootstrap/scss/variables-dark";
    @import "../node\_modules/bootstrap/scss/maps";
    @import "../node\_modules/bootstrap/scss/mixins";
    @import "../node\_modules/bootstrap/scss/root";

    // Optional Bootstrap components here
    @import "../node\_modules/bootstrap/scss/reboot";
    @import "../node\_modules/bootstrap/scss/type";
    // etc

    ```
    Repeat as necessary for any variable in Bootstrap, including the global options below.



    **Get started with Bootstrap via npm with our starter project!** Head to the [Sass & JS example](https://github.com/twbs/examples/tree/main/sass-js) template repository to see how to build and customize Bootstrap in your own npm project. Includes Sass compiler, Autoprefixer, Stylelint, PurgeCSS, and Bootstrap Icons.

    Maps and loops
    --------------


    Bootstrap includes a handful of Sass maps, key value pairs that make it easier to generate families of related CSS. We use Sass maps for our colors, grid breakpoints, and more. Just like Sass variables, all Sass maps include the `!default` flag and can be overridden and extended.


    Some of our Sass maps are merged into empty ones by default. This is done to allow easy expansion of a given Sass map, but comes at the cost of making *removing* items from a map slightly more difficult.


    ### Modify map


    All variables in the `$theme-colors` map are defined as standalone variables. To modify an existing color in our `$theme-colors` map, add the following to your custom Sass file:



    ```
    $primary: #0074d9;
    $danger: #ff4136;

    ```
    Later on, these variables are set in Bootstrap’s `$theme-colors` map:



    ```
    $theme-colors: (
     "primary": $primary,
     "danger": $danger
    );

    ```
    ### Add to map


    Add new colors to `$theme-colors`, or any other map, by creating a new Sass map with your custom values and merging it with the original map. In this case, we’ll create a new `$custom-colors` map and merge it with `$theme-colors`.



    ```
    // Create your own map
    $custom-colors: (
     "custom-color": #900
    );

    // Merge the maps
    $theme-colors: map-merge($theme-colors, $custom-colors);

    ```
    ### Remove from map


    To remove colors from `$theme-colors`, or any other map, use `map-remove`. Be aware you must insert `$theme-colors` between our requirements just after its definition in `variables` and before its usage in `maps`:



    ```
    // Required
    @import "../node\_modules/bootstrap/scss/functions";
    @import "../node\_modules/bootstrap/scss/variables";
    @import "../node\_modules/bootstrap/scss/variables-dark";

    $theme-colors: map-remove($theme-colors, "info", "light", "dark");

    @import "../node\_modules/bootstrap/scss/maps";
    @import "../node\_modules/bootstrap/scss/mixins";
    @import "../node\_modules/bootstrap/scss/root";

    // Optional
    @import "../node\_modules/bootstrap/scss/reboot";
    @import "../node\_modules/bootstrap/scss/type";
    // etc

    ```
    Required keys
    -------------


    Bootstrap assumes the presence of some specific keys within Sass maps as we used and extend these ourselves. As you customize the included maps, you may encounter errors where a specific Sass map’s key is being used.


    For example, we use the `primary`, `success`, and `danger` keys from `$theme-colors` for links, buttons, and form states. Replacing the values of these keys should present no issues, but removing them may cause Sass compilation issues. In these instances, you’ll need to modify the Sass code that makes use of those values.


    Functions
    ---------


    ### Colors


    Next to the [Sass maps](https://getbootstrap.com/docs/5.3/customize/color/#color-sass-maps) we have, theme colors can also be used as standalone variables, like `$primary`.



    ```
    .custom-element {
     color: $gray-100;
     background-color: $dark;
    }

    ```
    You can lighten or darken colors with Bootstrap’s `tint-color()` and `shade-color()` functions. These functions will mix colors with black or white, unlike Sass’ native `lighten()` and `darken()` functions which will change the lightness by a fixed amount, which often doesn’t lead to the desired effect.




    [scss/\_functions.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_functions.scss)






    ```
    // Tint a color: mix a color with white
    @function tint-color($color, $weight) {
     @return mix(white, $color, $weight);
    }

    // Shade a color: mix a color with black
    @function shade-color($color, $weight) {
     @return mix(black, $color, $weight);
    }

    // Shade the color if the weight is positive, else tint it
    @function shift-color($color, $weight) {
     @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
    }

    ```

    In practice, you’d call the function and pass in the color and weight parameters.



    ```
    .custom-element {
     color: tint-color($primary, 10%);
    }

    .custom-element-2 {
     color: shade-color($danger, 30%);
    }

    ```
    ### Color contrast


    In order to meet the [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG/) contrast requirements, authors **must** provide a minimum [text color contrast of 4.5:1](https://www.w3.org/TR/WCAG/#contrast-minimum) and a minimum [non-text color contrast of 3:1](https://www.w3.org/TR/WCAG/#non-text-contrast), with very few exceptions.


    To help with this, we included the `color-contrast` function in Bootstrap. It uses the [WCAG contrast ratio algorithm](https://www.w3.org/TR/WCAG/#dfn-contrast-ratio) for calculating contrast thresholds based on [relative luminance](https://www.w3.org/TR/WCAG/#dfn-relative-luminance) in an `sRGB` color space to automatically return a light (`#fff`), dark (`#212529`) or black (`#000`) contrast color based on the specified base color. This function is especially useful for mixins or loops where you’re generating multiple classes.


    For example, to generate color swatches from our `$theme-colors` map:



    ```
    @each $color, $value in $theme-colors {
     .swatch-#{$color} {
     color: color-contrast($value);
     }
    }

    ```
    It can also be used for one-off contrast needs:



    ```
    .custom-element {
     color: color-contrast(#000); // returns `color: #fff`
    }

    ```
    You can also specify a base color with our color map functions:



    ```
    .custom-element {
     color: color-contrast($dark); // returns `color: #fff`
    }

    ```
    ### Escape SVG


    We use the `escape-svg` function to escape the `<`, `>` and `#` characters for SVG background images. When using the `escape-svg` function, data URIs must be quoted.


    ### Add and Subtract functions


    We use the `add` and `subtract` functions to wrap the CSS `calc` function. The primary purpose of these functions is to avoid errors when a “unitless” `0` value is passed into a `calc` expression. Expressions like `calc(10px - 0)` will return an error in all browsers, despite being mathematically correct.


    Example where the calc is valid:



    ```
    $border-radius: .25rem;
    $border-width: 1px;

    .element {
     // Output calc(.25rem - 1px) is valid
     border-radius: calc($border-radius - $border-width);
    }

    .element {
     // Output the same calc(.25rem - 1px) as above
     border-radius: subtract($border-radius, $border-width);
    }

    ```
    Example where the calc is invalid:



    ```
    $border-radius: .25rem;
    $border-width: 0;

    .element {
     // Output calc(.25rem - 0) is invalid
     border-radius: calc($border-radius - $border-width);
    }

    .element {
     // Output .25rem
     border-radius: subtract($border-radius, $border-width);
    }

    ```
    Mixins
    ------


    Our `scss/mixins/` directory has a ton of mixins that power parts of Bootstrap and can also be used across your own project.


    ### Color schemes


    A shorthand mixin for the `prefers-color-scheme` media query is available with support for `light`, `dark`, and custom color schemes. See [the color modes documentation](https://getbootstrap.com/docs/5.3/customize/color-modes/) for information on our color mode mixin.




    [scss/mixins/\_color-scheme.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_color-scheme.scss)






    ```
    @mixin color-scheme($name) {
     @media (prefers-color-scheme: #{$name}) {
     @content;
     }
    }

    ```


    ```
    .custom-element {
     @include color-scheme(dark) {
     // Insert dark mode styles here
     }

     @include color-scheme(custom-named-scheme) {
     // Insert custom color scheme styles here
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OPTIONS:
    """

    Options
    =======



    Quickly customize Bootstrap with built-in variables to easily toggle global CSS preferences for controlling style and behavior.





    Customize Bootstrap with our built-in custom variables file and easily toggle global CSS preferences with new `$enable-*` Sass variables. Override a variable’s value and recompile with `npm run test` as needed.


    You can find and customize these variables for key global options in Bootstrap’s `scss/_variables.scss` file.




    | Variable | Values | Description |
    | --- | --- | --- |
    | `$spacer` | `1rem` (default), or any value > 0 | Specifies the default spacer value to programmatically generate our [spacer utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/). |
    | `$enable-dark-mode` | `true` (default) or `false` | Enables built-in [dark mode support](https://getbootstrap.com/docs/5.3/customize/color-modes/#dark-mode) across the project and its components. |
    | `$enable-rounded` | `true` (default) or `false` | Enables predefined `border-radius` styles on various components. |
    | `$enable-shadows` | `true` or `false` (default) | Enables predefined decorative `box-shadow` styles on various components. Does not affect `box-shadow`s used for focus states. |
    | `$enable-gradients` | `true` or `false` (default) | Enables predefined gradients via `background-image` styles on various components. |
    | `$enable-transitions` | `true` (default) or `false` | Enables predefined `transition`s on various components. |
    | `$enable-reduced-motion` | `true` (default) or `false` | Enables the [`prefers-reduced-motion` media query](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion), which suppresses certain animations/transitions based on the users’ browser/operating system preferences. |
    | `$enable-grid-classes` | `true` (default) or `false` | Enables the generation of CSS classes for the grid system (e.g. `.row`, `.col-md-1`, etc.). |
    | `$enable-container-classes` | `true` (default) or `false` | Enables the generation of CSS classes for layout containers. (New in v5.2.0) |
    | `$enable-caret` | `true` (default) or `false` | Enables pseudo element caret on `.dropdown-toggle`. |
    | `$enable-button-pointers` | `true` (default) or `false` | Add “hand” cursor to non-disabled button elements. |
    | `$enable-rfs` | `true` (default) or `false` | Globally enables [RFS](https://getbootstrap.com/docs/5.3/getting-started/rfs/). |
    | `$enable-validation-icons` | `true` (default) or `false` | Enables `background-image` icons within textual inputs and some custom forms for validation states. |
    | `$enable-negative-margins` | `true` or `false` (default) | Enables the generation of [negative margin utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/#negative-margin). |
    | `$enable-deprecation-messages` | `true` (default) or `false` | Set to `false` to hide warnings when using any of the deprecated mixins and functions that are planned to be removed in `v6`. |
    | `$enable-important-utilities` | `true` (default) or `false` | Enables the `!important` suffix in utility classes. |
    | `$enable-smooth-scroll` | `true` (default) or `false` | Applies `scroll-behavior: smooth` globally, except for users asking for reduced motion through [`prefers-reduced-motion` media query](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion) |









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLOR:
    """

    Color
    =====



    Bootstrap is supported by an extensive color system that themes our styles and components. This enables more comprehensive customization and extension for any project.






     On this page


    **On this page**


    ---




    * [Colors](#colors)
            + [Using the new colors](#using-the-new-colors)
            + [Theme colors](#theme-colors)
            + [All colors](#all-colors)
            + [Notes on Sass](#notes-on-sass)
    * [Color Sass maps](#color-sass-maps)
            + [Example](#example)
    * [Generating utilities](#generating-utilities)






    Colors
    ------


    Added in v5.3.0
    Bootstrap’s color palette has continued to expand and become more nuanced in v5.3.0. We’ve added new variables for `secondary` and `tertiary` text and background colors, plus `{color}-bg-subtle`, `{color}-border-subtle`, and `{color}-text-emphasis` for our theme colors. These new colors are available through Sass and CSS variables (but not our color maps or utility classes) with the express goal of making it easier to customize across multiple colors modes like light and dark. These new variables are globally set on `:root` and are adapted for our new dark color mode while our original theme colors remain unchanged.


    Colors ending in `-rgb` provide the `red, green, blue` values for use in `rgb()` and `rgba()` color modes. For example, `rgba(var(--bs-secondary-bg-rgb), .5)`.



    **Heads up!** There’s some potential confusion with our new secondary and tertiary colors, and our existing secondary theme color, as well as our light and dark theme colors. Expect this to be ironed out in v6.



    | Description | Swatch | Variables |
    | --- | --- | --- |
    | **Body —** Default foreground (color) and background, including components.
      |   | `--bs-body-color``--bs-body-color-rgb` |
    |   | `--bs-body-bg``--bs-body-bg-rgb` |
    | **Secondary —** Use the `color` option for lighter text. Use the `bg` option for dividers and to indicate disabled component states.
      |   | `--bs-secondary-color``--bs-secondary-color-rgb` |
    |   | `--bs-secondary-bg``--bs-secondary-bg-rgb` |
    | **Tertiary —** Use the `color` option for even lighter text. Use the `bg` option to style backgrounds for hover states, accents, and wells.
      |   | `--bs-tertiary-color``--bs-tertiary-color-rgb` |
    |   | `--bs-tertiary-bg``--bs-tertiary-bg-rgb` |
    | **Emphasis —** For higher contrast text. Not applicable for backgrounds.
      |   | `--bs-emphasis-color``--bs-emphasis-color-rgb` |
    | **Border —** For component borders, dividers, and rules. Use `--bs-border-color-translucent` to blend with backgrounds with an `rgba()` value.
      |   | `--bs-border-color``--bs-border-color-rgb` |
    | **Primary —** Main theme color, used for hyperlinks, focus styles, and component and form active states.
      |   | `--bs-primary``--bs-primary-rgb` |
    |   | `--bs-primary-bg-subtle` |
    |   | `--bs-primary-border-subtle` |
    | Text | `--bs-primary-text-emphasis` |
    | **Success —** Theme color used for positive or successful actions and information.
      |   | `--bs-success``--bs-success-rgb` |
    |   | `--bs-success-bg-subtle` |
    |   | `--bs-success-border-subtle` |
    | Text | `--bs-success-text-emphasis` |
    | **Danger —** Theme color used for errors and dangerous actions.
      |   | `--bs-danger``--bs-danger-rgb` |
    |   | `--bs-danger-bg-subtle` |
    |   | `--bs-danger-border-subtle` |
    | Text | `--bs-danger-text-emphasis` |
    | **Warning —** Theme color used for non-destructive warning messages.
      |   | `--bs-warning``--bs-warning-rgb` |
    |   | `--bs-warning-bg-subtle` |
    |   | `--bs-warning-border-subtle` |
    | Text | `--bs-warning-text-emphasis` |
    | **Info —** Theme color used for neutral and informative content.
      |   | `--bs-info``--bs-info-rgb` |
    |   | `--bs-info-bg-subtle` |
    |   | `--bs-info-border-subtle` |
    | Text | `--bs-info-text-emphasis` |
    | **Light —** Additional theme option for less contrasting colors.
      |   | `--bs-light``--bs-light-rgb` |
    |   | `--bs-light-bg-subtle` |
    |   | `--bs-light-border-subtle` |
    | Text | `--bs-light-text-emphasis` |
    | **Dark —** Additional theme option for higher contrasting colors.
      |   | `--bs-dark``--bs-dark-rgb` |
    |   | `--bs-dark-bg-subtle` |
    |   | `--bs-dark-border-subtle` |
    | Text | `--bs-dark-text-emphasis` |


    ### Using the new colors


    These new colors are accessible via CSS variables and utility classes—like `--bs-primary-bg-subtle` and `.bg-primary-subtle`—allowing you to compose your own CSS rules with the variables, or to quickly apply styles via classes. The utilities are built with the color’s associated CSS variables, and since we customize those CSS variables for dark mode, they are also adaptive to color mode by default.




     Example element with utilities


    html









    ```
    <div class="p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3">
     Example element with utilities
    </div>
    ```

    ### Theme colors


    We use a subset of all colors to create a smaller color palette for generating color schemes, also available as Sass variables and a Sass map in Bootstrap’s `scss/_variables.scss` file.




    Primary


    Secondary


    Success


    Danger


    Warning


    Info


    Light


    Dark


    All these colors are available as a Sass map, `$theme-colors`.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $theme-colors: (
     "primary": $primary,
     "secondary": $secondary,
     "success": $success,
     "info": $info,
     "warning": $warning,
     "danger": $danger,
     "light": $light,
     "dark": $dark
    );

    ```

    Check out [our Sass maps and loops docs](https://getbootstrap.com/docs/5.3/customize/sass/#maps-and-loops) for how to modify these colors.


    ### All colors


    All Bootstrap colors are available as Sass variables and a Sass map in `scss/_variables.scss` file. To avoid increased file sizes, we don’t create text or background color classes for each of these variables. Instead, we choose a subset of these colors for a [theme palette](#theme-colors).


    Be sure to monitor contrast ratios as you customize colors. As shown below, we’ve added three contrast ratios to each of the main colors—one for the swatch’s current colors, one for against white, and one for against black.





    **$blue**
     #0d6efd

    $blue-100
    $blue-200
    $blue-300
    $blue-400
    $blue-500
    $blue-600
    $blue-700
    $blue-800
    $blue-900



    **$indigo**
     #6610f2

    $indigo-100
    $indigo-200
    $indigo-300
    $indigo-400
    $indigo-500
    $indigo-600
    $indigo-700
    $indigo-800
    $indigo-900



    **$purple**
     #6f42c1

    $purple-100
    $purple-200
    $purple-300
    $purple-400
    $purple-500
    $purple-600
    $purple-700
    $purple-800
    $purple-900



    **$pink**
     #d63384

    $pink-100
    $pink-200
    $pink-300
    $pink-400
    $pink-500
    $pink-600
    $pink-700
    $pink-800
    $pink-900



    **$red**
     #dc3545

    $red-100
    $red-200
    $red-300
    $red-400
    $red-500
    $red-600
    $red-700
    $red-800
    $red-900



    **$orange**
     #fd7e14

    $orange-100
    $orange-200
    $orange-300
    $orange-400
    $orange-500
    $orange-600
    $orange-700
    $orange-800
    $orange-900



    **$yellow**
     #ffc107

    $yellow-100
    $yellow-200
    $yellow-300
    $yellow-400
    $yellow-500
    $yellow-600
    $yellow-700
    $yellow-800
    $yellow-900



    **$green**
     #198754

    $green-100
    $green-200
    $green-300
    $green-400
    $green-500
    $green-600
    $green-700
    $green-800
    $green-900



    **$teal**
     #20c997

    $teal-100
    $teal-200
    $teal-300
    $teal-400
    $teal-500
    $teal-600
    $teal-700
    $teal-800
    $teal-900



    **$cyan**
     #0dcaf0

    $cyan-100
    $cyan-200
    $cyan-300
    $cyan-400
    $cyan-500
    $cyan-600
    $cyan-700
    $cyan-800
    $cyan-900



    **$gray-500**
     #adb5bd

    $gray-100
    $gray-200
    $gray-300
    $gray-400
    $gray-500
    $gray-600
    $gray-700
    $gray-800
    $gray-900



    **$black**
     #000


    **$white**
     #fff



    ### Notes on Sass


    Sass cannot programmatically generate variables, so we manually created variables for every tint and shade ourselves. We specify the midpoint value (e.g., `$blue-500`) and use custom color functions to tint (lighten) or shade (darken) our colors via Sass’s `mix()` color function.


    Using `mix()` is not the same as `lighten()` and `darken()`—the former blends the specified color with white or black, while the latter only adjusts the lightness value of each color. The result is a much more complete suite of colors, as [shown in this CodePen demo](https://codepen.io/emdeoh/pen/zYOQOPB).


    Our `tint-color()` and `shade-color()` functions use `mix()` alongside our `$theme-color-interval` variable, which specifies a stepped percentage value for each mixed color we produce. See the `scss/_functions.scss` and `scss/_variables.scss` files for the full source code.


    Color Sass maps
    ---------------


    Bootstrap’s source Sass files include three maps to help you quickly and easily loop over a list of colors and their hex values.


    * `$colors` lists all our available base (`500`) colors
    * `$theme-colors` lists all semantically named theme colors (shown below)
    * `$grays` lists all tints and shades of gray


    Within `scss/_variables.scss`, you’ll find Bootstrap’s color variables and Sass map. Here’s an example of the `$colors` Sass map:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $colors: (
     "blue": $blue,
     "indigo": $indigo,
     "purple": $purple,
     "pink": $pink,
     "red": $red,
     "orange": $orange,
     "yellow": $yellow,
     "green": $green,
     "teal": $teal,
     "cyan": $cyan,
     "black": $black,
     "white": $white,
     "gray": $gray-600,
     "gray-dark": $gray-800
    );

    ```

    Add, remove, or modify values within the map to update how they’re used in many other components. Unfortunately at this time, not *every* component utilizes this Sass map. Future updates will strive to improve upon this. Until then, plan on making use of the `${color}` variables and this Sass map.


    ### Example


    Here’s how you can use these in your Sass:



    ```
    .alpha { color: $purple; }
    .beta {
     color: $yellow-300;
     background-color: $indigo-900;
    }

    ```
    [Color](https://getbootstrap.com/docs/5.3/utilities/colors/) and [background](https://getbootstrap.com/docs/5.3/utilities/background/) utility classes are also available for setting `color` and `background-color` using the `500` color values.


    Generating utilities
    --------------------


    Added in v5.1.0
    Bootstrap doesn’t include `color` and `background-color` utilities for every color variable, but you can generate these yourself with our [utility API](https://getbootstrap.com/docs/5.3/utilities/api/) and our extended Sass maps added in v5.1.0.


    1. To start, make sure you’ve imported our functions, variables, mixins, and utilities.
    2. Use our `map-merge-multiple()` function to quickly merge multiple Sass maps together in a new map.
    3. Merge this new combined map to extend any utility with a `{color}-{level}` class name.


    Here’s an example that generates text color utilities (e.g., `.text-purple-500`) using the above steps.



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $all-colors: map-merge-multiple($blues, $indigos, $purples, $pinks, $reds, $oranges, $yellows, $greens, $teals, $cyans);

    $utilities: map-merge(
     $utilities,
     (
     "color": map-merge(
     map-get($utilities, "color"),
     (
     values: map-merge(
     map-get(map-get($utilities, "color"), "values"),
     (
     $all-colors
     ),
     ),
     ),
     ),
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    This will generate new `.text-{color}-{level}` utilities for every color and level. You can do the same for any other utility and property as well.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLOR_MODES:
    """

    Color modes
    ===========



    Bootstrap now supports color modes, or themes, as of v5.3.0. Explore our default light color mode and the new dark mode, or create your own using our styles as your template.






     On this page


    **On this page**


    ---




    * [Dark mode](#dark-mode)
    * [Example](#example)
    * [How it works](#how-it-works)
    * [Usage](#usage)
            + [Enable dark mode](#enable-dark-mode)
            + [Building with Sass](#building-with-sass)
    * [Custom color modes](#custom-color-modes)
    * [JavaScript](#javascript)
    * [Adding theme colors](#adding-theme-colors)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)







    **Try it yourself!** Download the source code and working demo for using Bootstrap with Stylelint, and the color modes from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/color-modes). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/color-modes?file=index.html).

    Dark mode
    ---------


    **Bootstrap now supports color modes, starting with dark mode!** With v5.3.0 you can implement your own color mode toggler (see below for an example from Bootstrap’s docs) and apply the different color modes as you see fit. We support a light mode (default) and now dark mode. Color modes can be toggled globally on the `<html>` element, or on specific components and elements, thanks to the `data-bs-theme` attribute.


    Alternatively, you can also switch to a media query implementation thanks to our color mode mixin—see [the usage section for details](#building-with-sass). Heads up though—this eliminates your ability to change themes on a per-component basis as shown below.


    Example
    -------


    For example, to change the color mode of a dropdown menu, add `data-bs-theme="light"` or `data-bs-theme="dark"` to the parent `.dropdown`. Now, no matter the global color mode, these dropdowns will display with the specified theme value.





     Default dropdown

    * [Action](#)
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





     Dark dropdown

    * [Action](#)
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    html









    ```
    <div class="dropdown" data-bs-theme="light">
     <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButtonLight" data-bs-toggle="dropdown" aria-expanded="false">
     Default dropdown
     </button>
     <ul class="dropdown-menu" aria-labelledby="dropdownMenuButtonLight">
     <li><a class="dropdown-item active" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>

    <div class="dropdown" data-bs-theme="dark">
     <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButtonDark" data-bs-toggle="dropdown" aria-expanded="false">
     Dark dropdown
     </button>
     <ul class="dropdown-menu" aria-labelledby="dropdownMenuButtonDark">
     <li><a class="dropdown-item active" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>
    ```

    How it works
    ------------


    * As shown above, color mode styles are controlled by the `data-bs-theme` attribute. This attribute can be applied to the `<html>` element, or to any other element or Bootstrap component. If applied to the `<html>` element, it will apply to everything. If applied to a component or element, it will be scoped to that specific component or element.
    * For each color mode you wish to support, you’ll need to add new overrides for the shared global CSS variables. We do this already in our `_root.scss` stylesheet for dark mode, with light mode being the default values. In writing color mode specific styles, use the mixin:



    ```
    // Color mode variables in \_root.scss
    @include color-mode(dark) {
     // CSS variable overrides here...
    }

    ```
    * We use a custom `_variables-dark.scss` to power those shared global CSS variable overrides for dark mode. This file isn’t required for your own custom color modes, but it’s required for our dark mode for two reasons. First, it’s better to have a single place to reset global colors. Second, some Sass variables had to be overridden for background images embedded in our CSS for accordions, form components, and more.


    Usage
    -----


    ### Enable dark mode


    Enable the built in dark color mode across your entire project by adding the `data-bs-theme="dark"` attribute to the `<html>` element. This will apply the dark color mode to all components and elements, other than those with a specific `data-bs-theme` attribute applied. Building on the [quick start template](https://getbootstrap.com/docs/5.3/getting-started/introduction/#quick-start):



    ```
    <!doctype html>
    <html lang="en" data-bs-theme="dark">
     <head>
     <meta charset="utf-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Bootstrap demo</title>
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
     </head>
     <body>
     <h1>Hello, world!</h1>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
     </body>
    </html>

    ```
    Bootstrap does not yet ship with a built-in color mode picker, but you can use the one from our own documentation if you like. [Learn more in the JavaScript section.](#javascript)


    ### Building with Sass


    Our new dark mode option is available to use for all users of Bootstrap, but it’s controlled via data attributes instead of media queries and does not automatically toggle your project’s color mode. You can disable our dark mode entirely via Sass by changing `$enable-dark-mode` to `false`.


    We use a custom Sass mixin, `color-mode()`, to help you control *how* color modes are applied. By default, we use a `data` attribute approach, allowing you to create more user-friendly experiences where your visitors can choose to have an automatic dark mode or control their preference (like in our own docs here). This is also an easy and scalable way to add different themes and more custom color modes beyond light and dark.


    In case you want to use media queries and only make color modes automatic, you can change the mixin’s default type via Sass variable. Consider the following snippet and its compiled CSS output.



    ```
    $color-mode-type: data;

    @include color-mode(dark) {
     .element {
     color: var(--bs-primary-text-emphasis);
     background-color: var(--bs-primary-bg-subtle);
     }
    }

    ```
    Outputs to:



    ```
    [data-bs-theme=dark] .element {
     color: var(--bs-primary-text-emphasis);
     background-color: var(--bs-primary-bg-subtle);
    }

    ```
    And when setting to `media-query`:



    ```
    $color-mode-type: media-query;

    @include color-mode(dark) {
     .element {
     color: var(--bs-primary-text-emphasis);
     background-color: var(--bs-primary-bg-subtle);
     }
    }

    ```
    Outputs to:



    ```
    @media (prefers-color-scheme: dark) {
     .element {
     color: var(--bs-primary-text-emphasis);
     background-color: var(--bs-primary-bg-subtle);
     }
    }

    ```
    Custom color modes
    ------------------


    While the primary use case for color modes is light and dark mode, custom color modes are also possible. Create your own `data-bs-theme` selector with a custom value as the name of your color mode, then modify our Sass and CSS variables as needed. We opted to create a separate `_variables-dark.scss` stylesheet to house Bootstrap’s dark mode specific Sass variables, but that’s not required for you.


    For example, you can create a “blue theme” with the selector `data-bs-theme="blue"`. In your custom Sass or CSS file, add the new selector and override any global or component CSS variables as needed. If you’re using Sass, you can also use Sass’s functions within your CSS variable overrides.




    [site/assets/scss/\_content.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/scss/_content.scss)






    ```
    [data-bs-theme="blue"] {
     --bs-body-color: var(--bs-white);
     --bs-body-color-rgb: #{to-rgb($white)};
     --bs-body-bg: var(--bs-blue);
     --bs-body-bg-rgb: #{to-rgb($blue)};
     --bs-tertiary-bg: #{$blue-600};

     .dropdown-menu {
     --bs-dropdown-bg: #{mix($blue-500, $blue-600)};
     --bs-dropdown-link-active-bg: #{$blue-700};
     }

     .btn-secondary {
     --bs-btn-bg: #{mix($gray-600, $blue-400, .5)};
     --bs-btn-border-color: #{rgba($white, .25)};
     --bs-btn-hover-bg: #{darken(mix($gray-600, $blue-400, .5), 5%)};
     --bs-btn-hover-border-color: #{rgba($white, .25)};
     --bs-btn-active-bg: #{darken(mix($gray-600, $blue-400, .5), 10%)};
     --bs-btn-active-border-color: #{rgba($white, .5)};
     --bs-btn-focus-border-color: #{rgba($white, .5)};
     --bs-btn-focus-box-shadow: 0 0 0 .25rem rgba(255, 255, 255, .2);
     }
    }

    ```


    Example blue theme
    Some paragraph text to show how the blue theme might look with written copy.




    ---




     Dropdown button

    * [Action](#)
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <div data-bs-theme="blue">
     ...
    </div>

    ```
    JavaScript
    ----------


    To allow visitors or users to toggle color modes, you’ll need to create a toggle element to control the `data-bs-theme` attribute on the root element, `<html>`. We’ve built a toggler in our documentation that initially defers to a user’s current system color mode, but provides an option to override that and pick a specific color mode.


    Here’s a look at the JavaScript that powers it. Feel free to inspect our own documentation navbar to see how it’s implemented using HTML and CSS from our own components. It is suggested to include the JavaScript at the top of your page to reduce potential screen flickering during reloading of your site. Note that if you decide to use media queries for your color modes, your JavaScript may need to be modified or removed if you prefer an implicit control.



    ```
    /\*!
     \* Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
     \* Copyright 2011-2023 The Bootstrap Authors
     \* Licensed under the Creative Commons Attribution 3.0 Unported License.
     \*/

    (() => {
     'use strict'

     const getStoredTheme = () => localStorage.getItem('theme')
     const setStoredTheme = theme => localStorage.setItem('theme', theme)

     const getPreferredTheme = () => {
     const storedTheme = getStoredTheme()
     if (storedTheme) {
     return storedTheme
     }

     return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
     }

     const setTheme = theme => {
     if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
     document.documentElement.setAttribute('data-bs-theme', 'dark')
     } else {
     document.documentElement.setAttribute('data-bs-theme', theme)
     }
     }

     setTheme(getPreferredTheme())

     const showActiveTheme = (theme, focus = false) => {
     const themeSwitcher = document.querySelector('#bd-theme')

     if (!themeSwitcher) {
     return
     }

     const themeSwitcherText = document.querySelector('#bd-theme-text')
     const activeThemeIcon = document.querySelector('.theme-icon-active use')
     const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
     const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')

     document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
     element.classList.remove('active')
     element.setAttribute('aria-pressed', 'false')
     })

     btnToActive.classList.add('active')
     btnToActive.setAttribute('aria-pressed', 'true')
     activeThemeIcon.setAttribute('href', svgOfActiveBtn)
     const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
     themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

     if (focus) {
     themeSwitcher.focus()
     }
     }

     window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
     const storedTheme = getStoredTheme()
     if (storedTheme !== 'light' && storedTheme !== 'dark') {
     setTheme(getPreferredTheme())
     }
     })

     window.addEventListener('DOMContentLoaded', () => {
     showActiveTheme(getPreferredTheme())

     document.querySelectorAll('[data-bs-theme-value]')
     .forEach(toggle => {
     toggle.addEventListener('click', () => {
     const theme = toggle.getAttribute('data-bs-theme-value')
     setStoredTheme(theme)
     setTheme(theme)
     showActiveTheme(theme, true)
     })
     })
     })
    })()
    ```

    Adding theme colors
    -------------------


    Adding a new color in `$theme-colors` is not enough for some of our components like [alerts](https://getbootstrap.com/docs/5.3/components/alerts/) and [list groups](https://getbootstrap.com/docs/5.3/components/list-group/). New colors must also be defined in `$theme-colors-text`, `$theme-colors-bg-subtle`, and `$theme-colors-border-subtle` for light theme; but also in `$theme-colors-text-dark`, `$theme-colors-bg-subtle-dark`, and `$theme-colors-border-subtle-dark` for dark theme.


    This is a manual process because Sass cannot generate its own Sass variables from an existing variable or map. In future versions of Bootstrap, we’ll revisit this setup to reduce the duplication.



    ```
    // Required
    @import "functions";
    @import "variables";
    @import "variables-dark";

    // Add a custom color to $theme-colors
    $custom-colors: (
     "custom-color": #712cf9
    );
    $theme-colors: map-merge($theme-colors, $custom-colors);

    @import "maps";
    @import "mixins";
    @import "utilities";

    // Add a custom color to new theme maps

    // Light mode
    $custom-colors-text: ("custom-color": #712cf9);
    $custom-colors-bg-subtle: ("custom-color": #e1d2fe);
    $custom-colors-border-subtle: ("custom-color": #bfa1fc);

    $theme-colors-text: map-merge($theme-colors-text, $custom-colors-text);
    $theme-colors-bg-subtle: map-merge($theme-colors-bg-subtle, $custom-colors-bg-subtle);
    $theme-colors-border-subtle: map-merge($theme-colors-border-subtle, $custom-colors-border-subtle);

    // Dark mode
    $custom-colors-text-dark: ("custom-color": #e1d2f2);
    $custom-colors-bg-subtle-dark: ("custom-color": #8951fa);
    $custom-colors-border-subtle-dark: ("custom-color": #e1d2f2);

    $theme-colors-text-dark: map-merge($theme-colors-text-dark, $custom-colors-text-dark);
    $theme-colors-bg-subtle-dark: map-merge($theme-colors-bg-subtle-dark, $custom-colors-bg-subtle-dark);
    $theme-colors-border-subtle-dark: map-merge($theme-colors-border-subtle-dark, $custom-colors-border-subtle-dark);

    // Remainder of Bootstrap imports
    @import "root";
    @import "reboot";
    // etc

    ```
    CSS
    ---


    ### Variables


    Dozens of root level CSS variables are repeated as overrides for dark mode. These are scoped to the color mode selector, which defaults to `data-bs-theme` but [can be configured](#building-with-sass) to use a `prefers-color-scheme` media query. Use these variables as a guideline for generating your own new color modes.




    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    --#{$prefix}body-color: #{$body-color-dark};
    --#{$prefix}body-color-rgb: #{to-rgb($body-color-dark)};
    --#{$prefix}body-bg: #{$body-bg-dark};
    --#{$prefix}body-bg-rgb: #{to-rgb($body-bg-dark)};

    --#{$prefix}emphasis-color: #{$body-emphasis-color-dark};
    --#{$prefix}emphasis-color-rgb: #{to-rgb($body-emphasis-color-dark)};

    --#{$prefix}secondary-color: #{$body-secondary-color-dark};
    --#{$prefix}secondary-color-rgb: #{to-rgb($body-secondary-color-dark)};
    --#{$prefix}secondary-bg: #{$body-secondary-bg-dark};
    --#{$prefix}secondary-bg-rgb: #{to-rgb($body-secondary-bg-dark)};

    --#{$prefix}tertiary-color: #{$body-tertiary-color-dark};
    --#{$prefix}tertiary-color-rgb: #{to-rgb($body-tertiary-color-dark)};
    --#{$prefix}tertiary-bg: #{$body-tertiary-bg-dark};
    --#{$prefix}tertiary-bg-rgb: #{to-rgb($body-tertiary-bg-dark)};

    @each $color, $value in $theme-colors-text-dark {
     --#{$prefix}#{$color}-text-emphasis: #{$value};
    }

    @each $color, $value in $theme-colors-bg-subtle-dark {
     --#{$prefix}#{$color}-bg-subtle: #{$value};
    }

    @each $color, $value in $theme-colors-border-subtle-dark {
     --#{$prefix}#{$color}-border-subtle: #{$value};
    }

    --#{$prefix}heading-color: #{$headings-color-dark};

    --#{$prefix}link-color: #{$link-color-dark};
    --#{$prefix}link-hover-color: #{$link-hover-color-dark};
    --#{$prefix}link-color-rgb: #{to-rgb($link-color-dark)};
    --#{$prefix}link-hover-color-rgb: #{to-rgb($link-hover-color-dark)};

    --#{$prefix}code-color: #{$code-color-dark};

    --#{$prefix}border-color: #{$border-color-dark};
    --#{$prefix}border-color-translucent: #{$border-color-translucent-dark};

    --#{$prefix}form-valid-color: #{$form-valid-color-dark};
    --#{$prefix}form-valid-border-color: #{$form-valid-border-color-dark};
    --#{$prefix}form-invalid-color: #{$form-invalid-color-dark};
    --#{$prefix}form-invalid-border-color: #{$form-invalid-border-color-dark};
    ```

    ### Sass variables


    CSS variables for our dark color mode are partially generated from dark mode specific Sass variables in `_variables-dark.scss`. This also includes some custom overrides for changing the colors of embedded SVGs used throughout our components.




    [scss/\_variables-dark.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables-dark.scss)






    ```
    $primary-text-emphasis-dark: tint-color($primary, 40%);
    $secondary-text-emphasis-dark: tint-color($secondary, 40%);
    $success-text-emphasis-dark: tint-color($success, 40%);
    $info-text-emphasis-dark: tint-color($info, 40%);
    $warning-text-emphasis-dark: tint-color($warning, 40%);
    $danger-text-emphasis-dark: tint-color($danger, 40%);
    $light-text-emphasis-dark: $gray-100;
    $dark-text-emphasis-dark: $gray-300;

    $primary-bg-subtle-dark: shade-color($primary, 80%);
    $secondary-bg-subtle-dark: shade-color($secondary, 80%);
    $success-bg-subtle-dark: shade-color($success, 80%);
    $info-bg-subtle-dark: shade-color($info, 80%);
    $warning-bg-subtle-dark: shade-color($warning, 80%);
    $danger-bg-subtle-dark: shade-color($danger, 80%);
    $light-bg-subtle-dark: $gray-800;
    $dark-bg-subtle-dark: mix($gray-800, $black);

    $primary-border-subtle-dark: shade-color($primary, 40%);
    $secondary-border-subtle-dark: shade-color($secondary, 40%);
    $success-border-subtle-dark: shade-color($success, 40%);
    $info-border-subtle-dark: shade-color($info, 40%);
    $warning-border-subtle-dark: shade-color($warning, 40%);
    $danger-border-subtle-dark: shade-color($danger, 40%);
    $light-border-subtle-dark: $gray-700;
    $dark-border-subtle-dark: $gray-800;

    $body-color-dark: $gray-300;
    $body-bg-dark: $gray-900;
    $body-secondary-color-dark: rgba($body-color-dark, .75);
    $body-secondary-bg-dark: $gray-800;
    $body-tertiary-color-dark: rgba($body-color-dark, .5);
    $body-tertiary-bg-dark: mix($gray-800, $gray-900, 50%);
    $body-emphasis-color-dark: $white;
    $border-color-dark: $gray-700;
    $border-color-translucent-dark: rgba($white, .15);
    $headings-color-dark: inherit;
    $link-color-dark: tint-color($primary, 40%);
    $link-hover-color-dark: shift-color($link-color-dark, -$link-shade-percentage);
    $code-color-dark: tint-color($code-color, 40%);


    //
    // Forms
    //

    $form-select-indicator-color-dark: $body-color-dark;
    $form-select-indicator-dark: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill='none' stroke='#{$form-select-indicator-color-dark}' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/></svg>");

    $form-switch-color-dark: rgba($white, .25);
    $form-switch-bg-image-dark: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-color-dark}'/></svg>");

    $form-valid-color-dark: $green-300;
    $form-valid-border-color-dark: $green-300;
    $form-invalid-color-dark: $red-300;
    $form-invalid-border-color-dark: $red-300;


    //
    // Accordion
    //

    $accordion-icon-color-dark: $primary-text-emphasis-dark;
    $accordion-icon-active-color-dark: $primary-text-emphasis-dark;

    $accordion-button-icon-dark: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-color-dark}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");
    $accordion-button-active-icon-dark: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-active-color-dark}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");

    ```

    ### Sass mixins


    Styles for dark mode, and any custom color modes you create, can be scoped appropriately to the `data-bs-theme` attribute selector or media query with the customizable `color-mode()` mixin. See the [Sass usage section](#building-with-sass) for more details.




    [scss/mixins/\_color-mode.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_color-mode.scss)






    ```
    @mixin color-mode($mode: light, $root: false) {
     @if $color-mode-type == "media-query" {
     @if $root == true {
     @media (prefers-color-scheme: $mode) {
     :root {
     @content;
     }
     }
     } @else {
     @media (prefers-color-scheme: $mode) {
     @content;
     }
     }
     } @else {
     [data-bs-theme="#{$mode}"] {
     @content;
     }
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COMPONENTS:
    """

    Components
    ==========



    Learn how and why we build nearly all our components responsively and with base and modifier classes.






     On this page


    **On this page**


    ---




    * [Base classes](#base-classes)
    * [Modifiers](#modifiers)
    * [Responsive](#responsive)
    * [Creating your own](#creating-your-own)






    Base classes
    ------------


    Bootstrap’s components are largely built with a base-modifier nomenclature. We group as many shared properties as possible into a base class, like `.btn`, and then group individual styles for each variant into modifier classes, like `.btn-primary` or `.btn-success`.


    To build our modifier classes, we use Sass’s `@each` loops to iterate over a Sass map. This is especially helpful for generating variants of a component by our `$theme-colors` and creating responsive variants for each breakpoint. As you customize these Sass maps and recompile, you’ll automatically see your changes reflected in these loops.


    Check out [our Sass maps and loops docs](https://getbootstrap.com/docs/5.3/customize/sass/#maps-and-loops) for how to customize these loops and extend Bootstrap’s base-modifier approach to your own code.


    Modifiers
    ---------


    Many of Bootstrap’s components are built with a base-modifier class approach. This means the bulk of the styling is contained to a base class (e.g., `.btn`) while style variations are confined to modifier classes (e.g., `.btn-danger`). These modifier classes are built from the `$theme-colors` map to make customizing the number and name of our modifier classes.


    Here are two examples of how we loop over the `$theme-colors` map to generate modifiers to the `.alert` and `.list-group` components.




    [scss/\_alert.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_alert.scss)






    ```
    // Generate contextual modifier classes for colorizing the alert
    @each $state in map-keys($theme-colors) {
     .alert-#{$state} {
     --#{$prefix}alert-color: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}alert-bg: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}alert-border-color: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}alert-link-color: var(--#{$prefix}#{$state}-text-emphasis);
     }
    }

    ```



    [scss/\_list-group.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_list-group.scss)






    ```
    // List group contextual variants
    //
    // Add modifier classes to change text and background color on individual items.
    // Organizationally, this must come after the `:hover` states.

    @each $state in map-keys($theme-colors) {
     .list-group-item-#{$state} {
     --#{$prefix}list-group-color: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}list-group-bg: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}list-group-border-color: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-action-hover-color: var(--#{$prefix}emphasis-color);
     --#{$prefix}list-group-action-hover-bg: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-action-active-color: var(--#{$prefix}emphasis-color);
     --#{$prefix}list-group-action-active-bg: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-active-color: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}list-group-active-bg: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}list-group-active-border-color: var(--#{$prefix}#{$state}-text-emphasis);
     }
    }

    ```

    Responsive
    ----------


    These Sass loops aren’t limited to color maps, either. You can also generate responsive variations of your components. Take for example our responsive alignment of the dropdowns where we mix an `@each` loop for the `$grid-breakpoints` Sass map with a media query include.




    [scss/\_dropdown.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_dropdown.scss)






    ```
    // We deliberately hardcode the `bs-` prefix because we check
    // this custom property in JS to determine Popper's positioning

    @each $breakpoint in map-keys($grid-breakpoints) {
     @include media-breakpoint-up($breakpoint) {
     $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

     .dropdown-menu#{$infix}-start {
     --bs-position: start;

     &[data-bs-popper] {
     right: auto;
     left: 0;
     }
     }

     .dropdown-menu#{$infix}-end {
     --bs-position: end;

     &[data-bs-popper] {
     right: 0;
     left: auto;
     }
     }
     }
    }

    ```

    Should you modify your `$grid-breakpoints`, your changes will apply to all the loops iterating over that map.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $grid-breakpoints: (
     xs: 0,
     sm: 576px,
     md: 768px,
     lg: 992px,
     xl: 1200px,
     xxl: 1400px
    );

    ```

    For more information and examples on how to modify our Sass maps and variables, please refer to [the CSS section of the Grid documentation](https://getbootstrap.com/docs/5.3/layout/grid/#css).


    Creating your own
    -----------------


    We encourage you to adopt these guidelines when building with Bootstrap to create your own components. We’ve extended this approach ourselves to the custom components in our documentation and examples. Components like our callouts are built just like our provided components with base and modifier classes.




    **This is a callout.** We built it custom for our docs so our messages to you stand out. It has three variants via modifier classes.



    ```
    <div class="callout">...</div>

    ```
    In your CSS, you’d have something like the following where the bulk of the styling is done via `.callout`. Then, the unique styles between each variant is controlled via modifier class.



    ```
    // Base class
    .callout {}

    // Modifier classes
    .callout-info {}
    .callout-warning {}
    .callout-danger {}

    ```
    For the callouts, that unique styling is just a `border-left-color`. When you combine that base class with one of those modifier classes, you get your complete component family:



    **This is an info callout.** Example text to show it in action.


    **This is a warning callout.** Example text to show it in action.


    **This is a danger callout.** Example text to show it in action.








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CSS_VARIABLES:
    """

    CSS variables
    =============



    Use Bootstrap’s CSS custom properties for fast and forward-looking design and development.






     On this page


    **On this page**


    ---




    * [Root variables](#root-variables)
            + [Default](#default)
            + [Dark mode](#dark-mode)
    * [Component variables](#component-variables)
    * [Prefix](#prefix)
    * [Examples](#examples)
    * [Focus variables](#focus-variables)
    * [Grid breakpoints](#grid-breakpoints)






    Bootstrap includes many [CSS custom properties (variables)](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Using_CSS_custom_properties) in its compiled CSS for real-time customization without the need to recompile Sass. These provide easy access to commonly used values like our theme colors, breakpoints, and primary font stacks when working in your browser’s inspector, a code sandbox, or general prototyping.


    **All our custom properties are prefixed with `bs-`** to avoid conflicts with third party CSS.


    Root variables
    --------------


    Here are the variables we include (note that the `:root` is required) that can be accessed anywhere Bootstrap’s CSS is loaded. They’re located in our `_root.scss` file and included in our compiled dist files.


    ### Default


    These CSS variables are available everywhere, regardless of color mode.



    ```
    :root,
    [data-bs-theme=light] {
     --bs-blue: #0d6efd;
     --bs-indigo: #6610f2;
     --bs-purple: #6f42c1;
     --bs-pink: #d63384;
     --bs-red: #dc3545;
     --bs-orange: #fd7e14;
     --bs-yellow: #ffc107;
     --bs-green: #198754;
     --bs-teal: #20c997;
     --bs-cyan: #0dcaf0;
     --bs-black: #000;
     --bs-white: #fff;
     --bs-gray: #6c757d;
     --bs-gray-dark: #343a40;
     --bs-gray-100: #f8f9fa;
     --bs-gray-200: #e9ecef;
     --bs-gray-300: #dee2e6;
     --bs-gray-400: #ced4da;
     --bs-gray-500: #adb5bd;
     --bs-gray-600: #6c757d;
     --bs-gray-700: #495057;
     --bs-gray-800: #343a40;
     --bs-gray-900: #212529;
     --bs-primary: #0d6efd;
     --bs-secondary: #6c757d;
     --bs-success: #198754;
     --bs-info: #0dcaf0;
     --bs-warning: #ffc107;
     --bs-danger: #dc3545;
     --bs-light: #f8f9fa;
     --bs-dark: #212529;
     --bs-primary-rgb: 13, 110, 253;
     --bs-secondary-rgb: 108, 117, 125;
     --bs-success-rgb: 25, 135, 84;
     --bs-info-rgb: 13, 202, 240;
     --bs-warning-rgb: 255, 193, 7;
     --bs-danger-rgb: 220, 53, 69;
     --bs-light-rgb: 248, 249, 250;
     --bs-dark-rgb: 33, 37, 41;
     --bs-primary-text-emphasis: #052c65;
     --bs-secondary-text-emphasis: #2b2f32;
     --bs-success-text-emphasis: #0a3622;
     --bs-info-text-emphasis: #055160;
     --bs-warning-text-emphasis: #664d03;
     --bs-danger-text-emphasis: #58151c;
     --bs-light-text-emphasis: #495057;
     --bs-dark-text-emphasis: #495057;
     --bs-primary-bg-subtle: #cfe2ff;
     --bs-secondary-bg-subtle: #e2e3e5;
     --bs-success-bg-subtle: #d1e7dd;
     --bs-info-bg-subtle: #cff4fc;
     --bs-warning-bg-subtle: #fff3cd;
     --bs-danger-bg-subtle: #f8d7da;
     --bs-light-bg-subtle: #fcfcfd;
     --bs-dark-bg-subtle: #ced4da;
     --bs-primary-border-subtle: #9ec5fe;
     --bs-secondary-border-subtle: #c4c8cb;
     --bs-success-border-subtle: #a3cfbb;
     --bs-info-border-subtle: #9eeaf9;
     --bs-warning-border-subtle: #ffe69c;
     --bs-danger-border-subtle: #f1aeb5;
     --bs-light-border-subtle: #e9ecef;
     --bs-dark-border-subtle: #adb5bd;
     --bs-white-rgb: 255, 255, 255;
     --bs-black-rgb: 0, 0, 0;
     --bs-font-sans-serif: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
     --bs-font-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
     --bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));
     --bs-body-font-family: var(--bs-font-sans-serif);
     --bs-body-font-size: 1rem;
     --bs-body-font-weight: 400;
     --bs-body-line-height: 1.5;
     --bs-body-color: #212529;
     --bs-body-color-rgb: 33, 37, 41;
     --bs-body-bg: #fff;
     --bs-body-bg-rgb: 255, 255, 255;
     --bs-emphasis-color: #000;
     --bs-emphasis-color-rgb: 0, 0, 0;
     --bs-secondary-color: rgba(33, 37, 41, 0.75);
     --bs-secondary-color-rgb: 33, 37, 41;
     --bs-secondary-bg: #e9ecef;
     --bs-secondary-bg-rgb: 233, 236, 239;
     --bs-tertiary-color: rgba(33, 37, 41, 0.5);
     --bs-tertiary-color-rgb: 33, 37, 41;
     --bs-tertiary-bg: #f8f9fa;
     --bs-tertiary-bg-rgb: 248, 249, 250;
     --bs-heading-color: inherit;
     --bs-link-color: #0d6efd;
     --bs-link-color-rgb: 13, 110, 253;
     --bs-link-decoration: underline;
     --bs-link-hover-color: #0a58ca;
     --bs-link-hover-color-rgb: 10, 88, 202;
     --bs-code-color: #d63384;
     --bs-highlight-bg: #fff3cd;
     --bs-border-width: 1px;
     --bs-border-style: solid;
     --bs-border-color: #dee2e6;
     --bs-border-color-translucent: rgba(0, 0, 0, 0.175);
     --bs-border-radius: 0.375rem;
     --bs-border-radius-sm: 0.25rem;
     --bs-border-radius-lg: 0.5rem;
     --bs-border-radius-xl: 1rem;
     --bs-border-radius-xxl: 2rem;
     --bs-border-radius-2xl: var(--bs-border-radius-xxl);
     --bs-border-radius-pill: 50rem;
     --bs-box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
     --bs-box-shadow-sm: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
     --bs-box-shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);
     --bs-box-shadow-inset: inset 0 1px 2px rgba(0, 0, 0, 0.075);
     --bs-focus-ring-width: 0.25rem;
     --bs-focus-ring-opacity: 0.25;
     --bs-focus-ring-color: rgba(13, 110, 253, 0.25);
     --bs-form-valid-color: #198754;
     --bs-form-valid-border-color: #198754;
     --bs-form-invalid-color: #dc3545;
     --bs-form-invalid-border-color: #dc3545;
    }

    ```
    ### Dark mode


    These variables are scoped to our built-in dark mode.



    ```
    [data-bs-theme=dark] {
     color-scheme: dark;
     --bs-body-color: #dee2e6;
     --bs-body-color-rgb: 222, 226, 230;
     --bs-body-bg: #212529;
     --bs-body-bg-rgb: 33, 37, 41;
     --bs-emphasis-color: #fff;
     --bs-emphasis-color-rgb: 255, 255, 255;
     --bs-secondary-color: rgba(222, 226, 230, 0.75);
     --bs-secondary-color-rgb: 222, 226, 230;
     --bs-secondary-bg: #343a40;
     --bs-secondary-bg-rgb: 52, 58, 64;
     --bs-tertiary-color: rgba(222, 226, 230, 0.5);
     --bs-tertiary-color-rgb: 222, 226, 230;
     --bs-tertiary-bg: #2b3035;
     --bs-tertiary-bg-rgb: 43, 48, 53;
     --bs-primary-text-emphasis: #6ea8fe;
     --bs-secondary-text-emphasis: #a7acb1;
     --bs-success-text-emphasis: #75b798;
     --bs-info-text-emphasis: #6edff6;
     --bs-warning-text-emphasis: #ffda6a;
     --bs-danger-text-emphasis: #ea868f;
     --bs-light-text-emphasis: #f8f9fa;
     --bs-dark-text-emphasis: #dee2e6;
     --bs-primary-bg-subtle: #031633;
     --bs-secondary-bg-subtle: #161719;
     --bs-success-bg-subtle: #051b11;
     --bs-info-bg-subtle: #032830;
     --bs-warning-bg-subtle: #332701;
     --bs-danger-bg-subtle: #2c0b0e;
     --bs-light-bg-subtle: #343a40;
     --bs-dark-bg-subtle: #1a1d20;
     --bs-primary-border-subtle: #084298;
     --bs-secondary-border-subtle: #41464b;
     --bs-success-border-subtle: #0f5132;
     --bs-info-border-subtle: #087990;
     --bs-warning-border-subtle: #997404;
     --bs-danger-border-subtle: #842029;
     --bs-light-border-subtle: #495057;
     --bs-dark-border-subtle: #343a40;
     --bs-heading-color: inherit;
     --bs-link-color: #6ea8fe;
     --bs-link-hover-color: #8bb9fe;
     --bs-link-color-rgb: 110, 168, 254;
     --bs-link-hover-color-rgb: 139, 185, 254;
     --bs-code-color: #e685b5;
     --bs-border-color: #495057;
     --bs-border-color-translucent: rgba(255, 255, 255, 0.15);
     --bs-form-valid-color: #75b798;
     --bs-form-valid-border-color: #75b798;
     --bs-form-invalid-color: #ea868f;
     --bs-form-invalid-border-color: #ea868f;
    }

    ```
    Component variables
    -------------------


    Bootstrap 5 is increasingly making use of custom properties as local variables for various components. This way we reduce our compiled CSS, ensure styles aren’t inherited in places like nested tables, and allow some basic restyling and extending of Bootstrap components after Sass compilation.


    Have a look at our table documentation for some [insight into how we’re using CSS variables](https://getbootstrap.com/docs/5.3/content/tables/#how-do-the-variants-and-accented-tables-work). Our [navbars also use CSS variables](https://getbootstrap.com/docs/5.3/components/navbar/#css) as of v5.2.0. We’re also using CSS variables across our grids—primarily for gutters the [new opt-in CSS grid](https://getbootstrap.com/docs/5.3/layout/css-grid/)—with more component usage coming in the future.


    Whenever possible, we’ll assign CSS variables at the base component level (e.g., `.navbar` for navbar and its sub-components). This reduces guessing on where and how to customize, and allows for easy modifications by our team in future updates.


    Prefix
    ------


    Most CSS variables use a prefix to avoid collisions with your own codebase. This prefix is in addition to the `--` that’s required on every CSS variable.


    Customize the prefix via the `$prefix` Sass variable. By default, it’s set to `bs-` (note the trailing dash).


    Examples
    --------


    CSS variables offer similar flexibility to Sass’s variables, but without the need for compilation before being served to the browser. For example, here we’re resetting our page’s font and link styles with CSS variables.



    ```
    body {
     font: 1rem/1.5 var(--bs-font-sans-serif);
    }
    a {
     color: var(--bs-blue);
    }

    ```
    Focus variables
    ---------------


    Added in v5.3.0
    Bootstrap provides custom `:focus` styles using a combination of Sass and CSS variables that can be optionally added to specific components and elements. We do not yet globally override all `:focus` styles.


    In our Sass, we set default values that can be customized before compiling.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $focus-ring-width: .25rem;
    $focus-ring-opacity: .25;
    $focus-ring-color: rgba($primary, $focus-ring-opacity);
    $focus-ring-blur: 0;
    $focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;

    ```

    Those variables are then reassigned to `:root` level CSS variables that can be customized in real-time, including with options for `x` and `y` offsets (which default to their fallback value of `0`).




    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    --#{$prefix}focus-ring-width: #{$focus-ring-width};
    --#{$prefix}focus-ring-opacity: #{$focus-ring-opacity};
    --#{$prefix}focus-ring-color: #{$focus-ring-color};
    ```

    Grid breakpoints
    ----------------


    While we include our grid breakpoints as CSS variables (except for `xs`), be aware that **CSS variables do not work in media queries**. This is by design in the CSS spec for variables, but may change in coming years with support for `env()` variables. Check out [this Stack Overflow answer](https://stackoverflow.com/a/47212942) for some helpful links. In the meantime, you can use these variables in other CSS situations, as well as in your JavaScript.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OPTIMIZE:
    """

    Optimize
    ========



    Keep your projects lean, responsive, and maintainable so you can deliver the best experience and focus on more important jobs.






     On this page


    **On this page**


    ---




    * [Lean Sass imports](#lean-sass-imports)
    * [Lean JavaScript](#lean-javascript)
    * [Autoprefixer .browserslistrc](#autoprefixer-browserslistrc)
    * [Unused CSS](#unused-css)
    * [Minify and gzip](#minify-and-gzip)
    * [Non-blocking files](#non-blocking-files)
    * [Always use HTTPS](#always-use-https)






    Lean Sass imports
    -----------------


    When using Sass in your asset pipeline, make sure you optimize Bootstrap by only `@import`ing the components you need. Your largest optimizations will likely come from the `Layout & Components` section of our `bootstrap.scss`.




    [scss/bootstrap.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/bootstrap.scss)






    ```
    // Configuration
    @import "functions";
    @import "variables";
    @import "variables-dark";
    @import "maps";
    @import "mixins";
    @import "utilities";

    // Layout & components
    @import "root";
    @import "reboot";
    @import "type";
    @import "images";
    @import "containers";
    @import "grid";
    @import "tables";
    @import "forms";
    @import "buttons";
    @import "transitions";
    @import "dropdown";
    @import "button-group";
    @import "nav";
    @import "navbar";
    @import "card";
    @import "accordion";
    @import "breadcrumb";
    @import "pagination";
    @import "badge";
    @import "alert";
    @import "progress";
    @import "list-group";
    @import "close";
    @import "toasts";
    @import "modal";
    @import "tooltip";
    @import "popover";
    @import "carousel";
    @import "spinners";
    @import "offcanvas";
    @import "placeholders";

    // Helpers
    @import "helpers";

    // Utilities
    @import "utilities/api";

    ```

    If you’re not using a component, comment it out or delete it entirely. For example, if you’re not using the carousel, remove that import to save some file size in your compiled CSS. Keep in mind there are some dependencies across Sass imports that may make it more difficult to omit a file.


    Lean JavaScript
    ---------------


    Bootstrap’s JavaScript includes every component in our primary dist files (`bootstrap.js` and `bootstrap.min.js`), and even our primary dependency (Popper) with our bundle files (`bootstrap.bundle.js` and `bootstrap.bundle.min.js`). While you’re customizing via Sass, be sure to remove related JavaScript.


    For instance, assuming you’re using your own JavaScript bundler like Webpack, Parcel, or Vite, you’d only import the JavaScript you plan on using. In the example below, we show how to just include our modal JavaScript:




    ```
    // Import just what we need

    // import 'bootstrap/js/dist/alert';
    // import 'bootstrap/js/dist/button';
    // import 'bootstrap/js/dist/carousel';
    // import 'bootstrap/js/dist/collapse';
    // import 'bootstrap/js/dist/dropdown';
    import 'bootstrap/js/dist/modal';
    // import 'bootstrap/js/dist/offcanvas';
    // import 'bootstrap/js/dist/popover';
    // import 'bootstrap/js/dist/scrollspy';
    // import 'bootstrap/js/dist/tab';
    // import 'bootstrap/js/dist/toast';
    // import 'bootstrap/js/dist/tooltip';

    ```
    This way, you’re not including any JavaScript you don’t intend to use for components like buttons, carousels, and tooltips. If you’re importing dropdowns, tooltips or popovers, be sure to list the Popper dependency in your `package.json` file.



    **Heads up!** Files in `bootstrap/js/dist` use the **default export**. To use them, do the following:




    ```
    import Modal from 'bootstrap/js/dist/modal'
    const modal = new Modal(document.getElementById('myModal'))

    ```


    Autoprefixer .browserslistrc
    ----------------------------


    Bootstrap depends on Autoprefixer to automatically add browser prefixes to certain CSS properties. Prefixes are dictated by our `.browserslistrc` file, found in the root of the Bootstrap repo. Customizing this list of browsers and recompiling the Sass will automatically remove some CSS from your compiled CSS, if there are vendor prefixes unique to that browser or version.


    Unused CSS
    ----------


    *Help wanted with this section, please consider opening a PR. Thanks!*


    While we don’t have a prebuilt example for using [PurgeCSS](https://github.com/FullHuman/purgecss) with Bootstrap, there are some helpful articles and walkthroughs that the community has written. Here are some options:


    * <https://medium.com/dwarves-foundation/remove-unused-css-styles-from-bootstrap-using-purgecss-88395a2c5772>
    * <https://lukelowrey.com/automatically-removeunused-css-from-bootstrap-or-other-frameworks/>


    Lastly, this [CSS Tricks article on unused CSS](https://css-tricks.com/how-do-you-remove-unused-css-from-a-site/) shows how to use PurgeCSS and other similar tools.


    Minify and gzip
    ---------------


    Whenever possible, be sure to compress all the code you serve to your visitors. If you’re using Bootstrap dist files, try to stick to the minified versions (indicated by the `.min.css` and `.min.js` extensions). If you’re building Bootstrap from the source with your own build system, be sure to implement your own minifiers for HTML, CSS, and JS.


    Non-blocking files
    ------------------


    While minifying and using compression might seem like enough, making your files non-blocking ones is also a big step in making your site well-optimized and fast enough.


    If you are using a [Lighthouse](https://developer.chrome.comhttps://getbootstrap.com/docs/lighthouse/overview/) plugin in Google Chrome, you may have stumbled over FCP. [The First Contentful Paint](https://web.dev/fcp/) metric measures the time from when the page starts loading to when any part of the page’s content is rendered on the screen.


    You can improve FCP by deferring non-critical JavaScript or CSS. What does that mean? Simply, JavaScript or stylesheets that don’t need to be present on the first paint of your page should be marked with `async` or `defer` attributes.


    This ensures that the less important resources are loaded later and not blocking the first paint. On the other hand, critical resources can be included as inline scripts or styles.


    If you want to learn more about this, there are already a lot of great articles about it:


    * <https://web.dev/render-blocking-resources/>
    * <https://web.dev/defer-non-critical-css/>


    Always use HTTPS
    ----------------


    Your website should only be available over HTTPS connections in production. HTTPS improves the security, privacy, and availability of all sites, and [there is no such thing as non-sensitive web traffic](https://https.cio.gov/everything/). The steps to configure your website to be served exclusively over HTTPS vary widely depending on your architecture and web hosting provider, and thus are beyond the scope of these docs.


    Sites served over HTTPS should also access all stylesheets, scripts, and other assets over HTTPS connections. Otherwise, you’ll be sending users [mixed active content](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/Security/Mixed_content), leading to potential vulnerabilities where a site can be compromised by altering a dependency. This can lead to security issues and in-browser warnings displayed to users. Whether you’re getting Bootstrap from a CDN or serving it yourself, ensure that you only access it over HTTPS connections.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BREAKPOINTS:
    """

    Breakpoints
    ===========



    Breakpoints are customizable widths that determine how your responsive layout behaves across device or viewport sizes in Bootstrap.






     On this page


    **On this page**


    ---




    * [Core concepts](#core-concepts)
    * [Available breakpoints](#available-breakpoints)
    * [Media queries](#media-queries)
            + [Min-width](#min-width)
            + [Max-width](#max-width)
            + [Single breakpoint](#single-breakpoint)
            + [Between breakpoints](#between-breakpoints)






    Core concepts
    -------------


    * **Breakpoints are the building blocks of responsive design.** Use them to control when your layout can be adapted at a particular viewport or device size.
    * **Use media queries to architect your CSS by breakpoint.** Media queries are a feature of CSS that allow you to conditionally apply styles based on a set of browser and operating system parameters. We most commonly use `min-width` in our media queries.
    * **Mobile first, responsive design is the goal.** Bootstrap’s CSS aims to apply the bare minimum of styles to make a layout work at the smallest breakpoint, and then layers on styles to adjust that design for larger devices. This optimizes your CSS, improves rendering time, and provides a great experience for your visitors.


    Available breakpoints
    ---------------------


    Bootstrap includes six default breakpoints, sometimes referred to as *grid tiers*, for building responsively. These breakpoints can be customized if you’re using our source Sass files.




    | Breakpoint | Class infix | Dimensions |
    | --- | --- | --- |
    | Extra small | *None* | <576px |
    | Small | `sm` | ≥576px |
    | Medium | `md` | ≥768px |
    | Large | `lg` | ≥992px |
    | Extra large | `xl` | ≥1200px |
    | Extra extra large | `xxl` | ≥1400px |


    Each breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions—they don’t specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.


    These breakpoints are customizable via Sass—you’ll find them in a Sass map in our `_variables.scss` stylesheet.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $grid-breakpoints: (
     xs: 0,
     sm: 576px,
     md: 768px,
     lg: 992px,
     xl: 1200px,
     xxl: 1400px
    );

    ```

    For more information and examples on how to modify our Sass maps and variables, please refer to [the CSS section of the Grid documentation](https://getbootstrap.com/docs/5.3/layout/grid/#css).


    Media queries
    -------------


    Since Bootstrap is developed to be mobile first, we use a handful of [media queries](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Media_Queries/Using_media_queries) to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.


    ### Min-width


    Bootstrap primarily uses the following media query ranges—or breakpoints—in our source Sass files for our layout, grid system, and components.



    ```
    // Source mixins

    // No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) { ... }`
    @include media-breakpoint-up(sm) { ... }
    @include media-breakpoint-up(md) { ... }
    @include media-breakpoint-up(lg) { ... }
    @include media-breakpoint-up(xl) { ... }
    @include media-breakpoint-up(xxl) { ... }

    // Usage

    // Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint
    .custom-class {
     display: none;
    }
    @include media-breakpoint-up(sm) {
     .custom-class {
     display: block;
     }
    }

    ```
    These Sass mixins translate in our compiled CSS using the values declared in our Sass variables. For example:



    ```
    // X-Small devices (portrait phones, less than 576px)
    // No media query for `xs` since this is the default in Bootstrap

    // Small devices (landscape phones, 576px and up)
    @media (min-width: 576px) { ... }

    // Medium devices (tablets, 768px and up)
    @media (min-width: 768px) { ... }

    // Large devices (desktops, 992px and up)
    @media (min-width: 992px) { ... }

    // X-Large devices (large desktops, 1200px and up)
    @media (min-width: 1200px) { ... }

    // XX-Large devices (larger desktops, 1400px and up)
    @media (min-width: 1400px) { ... }

    ```
    ### Max-width


    We occasionally use media queries that go in the other direction (the given screen size *or smaller*):



    ```
    // No media query necessary for xs breakpoint as it's effectively `@media (max-width: 0) { ... }`
    @include media-breakpoint-down(sm) { ... }
    @include media-breakpoint-down(md) { ... }
    @include media-breakpoint-down(lg) { ... }
    @include media-breakpoint-down(xl) { ... }
    @include media-breakpoint-down(xxl) { ... }

    // Example: Style from medium breakpoint and down
    @include media-breakpoint-down(md) {
     .custom-class {
     display: block;
     }
    }

    ```
    These mixins take those declared breakpoints, subtract `.02px` from them, and use them as our `max-width` values. For example:



    ```
    // `xs` returns only a ruleset and no media query
    // ... { ... }

    // `sm` applies to x-small devices (portrait phones, less than 576px)
    @media (max-width: 575.98px) { ... }

    // `md` applies to small devices (landscape phones, less than 768px)
    @media (max-width: 767.98px) { ... }

    // `lg` applies to medium devices (tablets, less than 992px)
    @media (max-width: 991.98px) { ... }

    // `xl` applies to large devices (desktops, less than 1200px)
    @media (max-width: 1199.98px) { ... }

    // `xxl` applies to x-large devices (large desktops, less than 1400px)
    @media (max-width: 1399.98px) { ... }

    ```

    **Why subtract .02px?** Browsers don’t currently support [range context queries](https://www.w3.org/TR/mediaqueries-4/#range-context), so we work around the limitations of [`min-` and `max-` prefixes](https://www.w3.org/TR/mediaqueries-4/#mq-min-max) and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision.

    ### Single breakpoint


    There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.



    ```
    @include media-breakpoint-only(xs) { ... }
    @include media-breakpoint-only(sm) { ... }
    @include media-breakpoint-only(md) { ... }
    @include media-breakpoint-only(lg) { ... }
    @include media-breakpoint-only(xl) { ... }
    @include media-breakpoint-only(xxl) { ... }

    ```
    For example the `@include media-breakpoint-only(md) { ... }` will result in :



    ```
    @media (min-width: 768px) and (max-width: 991.98px) { ... }

    ```
    ### Between breakpoints


    Similarly, media queries may span multiple breakpoint widths:



    ```
    @include media-breakpoint-between(md, xl) { ... }

    ```
    Which results in:



    ```
    // Example
    // Apply styles starting from medium devices and up to extra large devices
    @media (min-width: 768px) and (max-width: 1199.98px) { ... }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    XSMALL = "   "
    SMALL = " sm "
    sm = " sm "
    MEDIUM = " md "
    md = " md "
    LARGE = " lg "
    lg = " lg "
    EXTRALARGE = " xl "
    xl = " xl "
    EXTRAEXTRALARGE = " xxl "


class CONTAINERS:
    """

    Containers
    ==========



    Containers are a fundamental building block of Bootstrap that contain, pad, and align your content within a given device or viewport.






     On this page


    **On this page**


    ---




    * [How they work](#how-they-work)
    * [Default container](#default-container)
    * [Responsive containers](#responsive-containers)
    * [Fluid containers](#fluid-containers)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)






    How they work
    -------------


    Containers are the most basic layout element in Bootstrap and are **required when using our default grid system**. Containers are used to contain, pad, and (sometimes) center the content within them. While containers *can* be nested, most layouts do not require a nested container.


    Bootstrap comes with three different containers:


    * `.container`, which sets a `max-width` at each responsive breakpoint
    * `.container-{breakpoint}`, which is `width: 100%` until the specified breakpoint
    * `.container-fluid`, which is `width: 100%` at all breakpoints


    The table below illustrates how each container’s `max-width` compares to the original `.container` and `.container-fluid` across each breakpoint.


    See them in action and compare them in our [Grid example](https://getbootstrap.com/docs/5.3/examples/grid/#containers).




    |  | Extra small<576px | Small≥576px | Medium≥768px | Large≥992px | X-Large≥1200px | XX-Large≥1400px |
    | --- | --- | --- | --- | --- | --- | --- |
    | `.container` | 100% | 540px | 720px | 960px | 1140px | 1320px |
    | `.container-sm` | 100% | 540px | 720px | 960px | 1140px | 1320px |
    | `.container-md` | 100% | 100% | 720px | 960px | 1140px | 1320px |
    | `.container-lg` | 100% | 100% | 100% | 960px | 1140px | 1320px |
    | `.container-xl` | 100% | 100% | 100% | 100% | 1140px | 1320px |
    | `.container-xxl` | 100% | 100% | 100% | 100% | 100% | 1320px |
    | `.container-fluid` | 100% | 100% | 100% | 100% | 100% | 100% |


    Default container
    -----------------


    Our default `.container` class is a responsive, fixed-width container, meaning its `max-width` changes at each breakpoint.



    ```
    <div class="container">
     <!-- Content here -->
    </div>

    ```
    Responsive containers
    ---------------------


    Responsive containers allow you to specify a class that is 100% wide until the specified breakpoint is reached, after which we apply `max-width`s for each of the higher breakpoints. For example, `.container-sm` is 100% wide to start until the `sm` breakpoint is reached, where it will scale up with `md`, `lg`, `xl`, and `xxl`.



    ```
    <div class="container-sm">100% wide until small breakpoint</div>
    <div class="container-md">100% wide until medium breakpoint</div>
    <div class="container-lg">100% wide until large breakpoint</div>
    <div class="container-xl">100% wide until extra large breakpoint</div>
    <div class="container-xxl">100% wide until extra extra large breakpoint</div>

    ```
    Fluid containers
    ----------------


    Use `.container-fluid` for a full width container, spanning the entire width of the viewport.



    ```
    <div class="container-fluid">
     ...
    </div>

    ```
    CSS
    ---


    ### Sass variables


    As shown above, Bootstrap generates a series of predefined container classes to help you build the layouts you desire. You may customize these predefined container classes by modifying the Sass map (found in `_variables.scss`) that powers them:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $container-max-widths: (
     sm: 540px,
     md: 720px,
     lg: 960px,
     xl: 1140px,
     xxl: 1320px
    );

    ```

    For more information and examples on how to modify our Sass maps and variables, please refer to [the Sass section of the Grid documentation](https://getbootstrap.com/docs/5.3/layout/grid/#css).


    ### Sass mixins


    In addition to customizing the Sass, you can also create your own containers with our Sass mixin.



    ```
    // Source mixin
    @mixin make-container($padding-x: $container-padding-x) {
     width: 100%;
     padding-right: $padding-x;
     padding-left: $padding-x;
     margin-right: auto;
     margin-left: auto;
    }

    // Usage
    .custom-container {
     @include make-container();
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    CONTAINER = " container "
    CONTAINER_SM = " container-sm "
    CONTAINER_MD = " container-md "
    CONTAINER_LG = " container-lg "
    CONTAINER_XL = " container-xl "
    CONTAINER_XXL = " container-xxl "
    CONTAINER_FLUID = " container-fluid "

    sm = CONTAINER_SM
    md = CONTAINER_MD
    lg = CONTAINER_LG
    xl = CONTAINER_XL
    xxl = CONTAINER_XXL
    fluid = CONTAINER_FLUID


class GRID_SYSTEM:
    """

    Grid system
    ===========



    Use our powerful mobile-first flexbox grid to build layouts of all shapes and sizes thanks to a twelve column system, six default responsive tiers, Sass variables and mixins, and dozens of predefined classes.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [How it works](#how-it-works)
    * [Grid options](#grid-options)
    * [Auto-layout columns](#auto-layout-columns)
            + [Equal-width](#equal-width)
            + [Setting one column width](#setting-one-column-width)
            + [Variable width content](#variable-width-content)
    * [Responsive classes](#responsive-classes)
            + [All breakpoints](#all-breakpoints)
            + [Stacked to horizontal](#stacked-to-horizontal)
            + [Mix and match](#mix-and-match)
            + [Row columns](#row-columns)
    * [Nesting](#nesting)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
            + [Example usage](#example-usage)
    * [Customizing the grid](#customizing-the-grid)
            + [Columns and gutters](#columns-and-gutters)
            + [Grid tiers](#grid-tiers)






    Example
    -------


    Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content. It’s built with [flexbox](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox) and is fully responsive. Below is an example and an in-depth explanation for how the grid system comes together.



    **New to or unfamiliar with flexbox?** [Read this CSS Tricks flexbox guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background) for background, terminology, guidelines, and code snippets.





     Column


     Column


     Column




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col">
     Column
     </div>
     <div class="col">
     Column
     </div>
     <div class="col">
     Column
     </div>
     </div>
    </div>
    ```

    The above example creates three equal-width columns across all devices and viewports using our predefined grid classes. Those columns are centered in the page with the parent `.container`.


    How it works
    ------------


    Breaking it down, here’s how the grid system comes together:


    * **Our grid supports [six responsive breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/).** Breakpoints are based on `min-width` media queries, meaning they affect that breakpoint and all those above it (e.g., `.col-sm-4` applies to `sm`, `md`, `lg`, `xl`, and `xxl`). This means you can control container and column sizing and behavior by each breakpoint.
    * **Containers center and horizontally pad your content.** Use `.container` for a responsive pixel width, `.container-fluid` for `width: 100%` across all viewports and devices, or a responsive container (e.g., `.container-md`) for a combination of fluid and pixel widths.
    * **Rows are wrappers for columns.** Each column has horizontal `padding` (called a gutter) for controlling the space between them. This `padding` is then counteracted on the rows with negative margins to ensure the content in your columns is visually aligned down the left side. Rows also support modifier classes to [uniformly apply column sizing](#row-columns) and [gutter classes](https://getbootstrap.com/docs/5.3/layout/gutters/) to change the spacing of your content.
    * **Columns are incredibly flexible.** There are 12 template columns available per row, allowing you to create different combinations of elements that span any number of columns. Column classes indicate the number of template columns to span (e.g., `col-4` spans four). `width`s are set in percentages so you always have the same relative sizing.
    * **Gutters are also responsive and customizable.** [Gutter classes are available](https://getbootstrap.com/docs/5.3/layout/gutters/) across all breakpoints, with all the same sizes as our [margin and padding spacing](https://getbootstrap.com/docs/5.3/utilities/spacing/). Change horizontal gutters with `.gx-*` classes, vertical gutters with `.gy-*`, or all gutters with `.g-*` classes. `.g-0` is also available to remove gutters.
    * **Sass variables, maps, and mixins power the grid.** If you don’t want to use the predefined grid classes in Bootstrap, you can use our [grid’s source Sass](#sass-variables) to create your own with more semantic markup. We also include some CSS custom properties to consume these Sass variables for even greater flexibility for you.


    Be aware of the limitations and [bugs around flexbox](https://github.com/philipwalton/flexbugs), like the [inability to use some HTML elements as flex containers](https://github.com/philipwalton/flexbugs#flexbug-9).


    Grid options
    ------------


    Bootstrap’s grid system can adapt across all six default breakpoints, and any breakpoints you customize. The six default grid tiers are as follows:


    * Extra small (xs)
    * Small (sm)
    * Medium (md)
    * Large (lg)
    * Extra large (xl)
    * Extra extra large (xxl)


    As noted above, each of these breakpoints have their own container, unique class prefix, and modifiers. Here’s how the grid changes across these breakpoints:





    |  |
     xs
    <576px |
     sm
    ≥576px |
     md
    ≥768px |
     lg
    ≥992px |
     xl
    ≥1200px |
     xxl
    ≥1400px |
    | --- | --- | --- | --- | --- | --- | --- |
    | Container `max-width` | None (auto) | 540px | 720px | 960px | 1140px | 1320px |
    | Class prefix | `.col-` | `.col-sm-` | `.col-md-` | `.col-lg-` | `.col-xl-` | `.col-xxl-` |
    | # of columns | 12 |
    | Gutter width | 1.5rem (.75rem on left and right) |
    | Custom gutters | [Yes](https://getbootstrap.com/docs/5.3/layout/gutters/) |
    | Nestable | [Yes](#nesting) |
    | Column ordering | [Yes](https://getbootstrap.com/docs/5.3/layout/columns/#reordering) |



    Auto-layout columns
    -------------------


    Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like `.col-sm-6`.


    ### Equal-width


    For example, here are two grid layouts that apply to every device and viewport, from `xs` to `xxl`. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.






     1 of 2


     2 of 2




     1 of 3


     2 of 3


     3 of 3




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col">
     1 of 2
     </div>
     <div class="col">
     2 of 2
     </div>
     </div>
     <div class="row">
     <div class="col">
     1 of 3
     </div>
     <div class="col">
     2 of 3
     </div>
     <div class="col">
     3 of 3
     </div>
     </div>
    </div>
    ```

    ### Setting one column width


    Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column.






     1 of 3


     2 of 3 (wider)


     3 of 3




     1 of 3


     2 of 3 (wider)


     3 of 3




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col">
     1 of 3
     </div>
     <div class="col-6">
     2 of 3 (wider)
     </div>
     <div class="col">
     3 of 3
     </div>
     </div>
     <div class="row">
     <div class="col">
     1 of 3
     </div>
     <div class="col-5">
     2 of 3 (wider)
     </div>
     <div class="col">
     3 of 3
     </div>
     </div>
    </div>
    ```

    ### Variable width content


    Use `col-{breakpoint}-auto` classes to size columns based on the natural width of their content.






     1 of 3


     Variable width content


     3 of 3




     1 of 3


     Variable width content


     3 of 3




    html









    ```
    <div class="container text-center">
     <div class="row justify-content-md-center">
     <div class="col col-lg-2">
     1 of 3
     </div>
     <div class="col-md-auto">
     Variable width content
     </div>
     <div class="col col-lg-2">
     3 of 3
     </div>
     </div>
     <div class="row">
     <div class="col">
     1 of 3
     </div>
     <div class="col-md-auto">
     Variable width content
     </div>
     <div class="col col-lg-2">
     3 of 3
     </div>
     </div>
    </div>
    ```

    Responsive classes
    ------------------


    Bootstrap’s grid includes six tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.


    ### All breakpoints


    For grids that are the same from the smallest of devices to the largest, use the `.col` and `.col-*` classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to `.col`.





    col
    col
    col
    col


    col-8
    col-4



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col">col</div>
     <div class="col">col</div>
     <div class="col">col</div>
     <div class="col">col</div>
     </div>
     <div class="row">
     <div class="col-8">col-8</div>
     <div class="col-4">col-4</div>
     </div>
    </div>
    ```

    ### Stacked to horizontal


    Using a single set of `.col-sm-*` classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (`sm`).





    col-sm-8
    col-sm-4


    col-sm
    col-sm
    col-sm



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-sm-8">col-sm-8</div>
     <div class="col-sm-4">col-sm-4</div>
     </div>
     <div class="row">
     <div class="col-sm">col-sm</div>
     <div class="col-sm">col-sm</div>
     <div class="col-sm">col-sm</div>
     </div>
    </div>
    ```

    ### Mix and match


    Don’t want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works.






    .col-md-8
    .col-6 .col-md-4



    .col-6 .col-md-4
    .col-6 .col-md-4
    .col-6 .col-md-4



    .col-6
    .col-6



    html









    ```
    <div class="container text-center">
     <!-- Stack the columns on mobile by making one full-width and the other half-width -->
     <div class="row">
     <div class="col-md-8">.col-md-8</div>
     <div class="col-6 col-md-4">.col-6 .col-md-4</div>
     </div>

     <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
     <div class="row">
     <div class="col-6 col-md-4">.col-6 .col-md-4</div>
     <div class="col-6 col-md-4">.col-6 .col-md-4</div>
     <div class="col-6 col-md-4">.col-6 .col-md-4</div>
     </div>

     <!-- Columns are always 50% wide, on mobile and desktop -->
     <div class="row">
     <div class="col-6">.col-6</div>
     <div class="col-6">.col-6</div>
     </div>
    </div>
    ```

    ### Row columns


    Use the responsive `.row-cols-*` classes to quickly set the number of columns that best render your content and layout. Whereas normal `.col-*` classes apply to the individual columns (e.g., `.col-md-4`), the row columns classes are set on the parent `.row` as a shortcut. With `.row-cols-auto` you can give the columns their natural width.


    Use these row columns classes to quickly create basic grid layouts or to control your card layouts.





    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-2">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```




    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-3">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```




    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-auto">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```




    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-4">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```




    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-4">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col-6">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```




    Column
    Column
    Column
    Column



    html









    ```
    <div class="container text-center">
     <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4">
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     <div class="col">Column</div>
     </div>
    </div>
    ```

    You can also use the accompanying Sass mixin, `row-cols()`:



    ```
    .element {
     // Three columns to start
     @include row-cols(3);

     // Five columns from medium breakpoint up
     @include media-breakpoint-up(md) {
     @include row-cols(5);
     }
    }

    ```
    Nesting
    -------


    To nest your content with the default grid, add a new `.row` and set of `.col-sm-*` columns within an existing `.col-sm-*` column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).






     Level 1: .col-sm-3




     Level 2: .col-8 .col-sm-6


     Level 2: .col-4 .col-sm-6






    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-sm-3">
     Level 1: .col-sm-3
     </div>
     <div class="col-sm-9">
     <div class="row">
     <div class="col-8 col-sm-6">
     Level 2: .col-8 .col-sm-6
     </div>
     <div class="col-4 col-sm-6">
     Level 2: .col-4 .col-sm-6
     </div>
     </div>
     </div>
     </div>
    </div>
    ```

    CSS
    ---


    When using Bootstrap’s source Sass files, you have the option of using Sass variables and mixins to create custom, semantic, and responsive page layouts. Our predefined grid classes use these same variables and mixins to provide a whole suite of ready-to-use classes for fast responsive layouts.


    ### Sass variables


    Variables and maps determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.



    ```
    $grid-columns: 12;
    $grid-gutter-width: 1.5rem;
    $grid-row-columns: 6;

    ```


    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $grid-breakpoints: (
     xs: 0,
     sm: 576px,
     md: 768px,
     lg: 992px,
     xl: 1200px,
     xxl: 1400px
    );

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $container-max-widths: (
     sm: 540px,
     md: 720px,
     lg: 960px,
     xl: 1140px,
     xxl: 1320px
    );

    ```

    ### Sass mixins


    Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.



    ```
    // Creates a wrapper for a series of columns
    @include make-row();

    // Make the element grid-ready (applying everything but the width)
    @include make-col-ready();

    // Without optional size values, the mixin will create equal columns (similar to using .col)
    @include make-col();
    @include make-col($size, $columns: $grid-columns);

    // Offset with margins
    @include make-col-offset($size, $columns: $grid-columns);

    ```
    ### Example usage


    You can modify the variables to your own custom values, or just use the mixins with their default values. Here’s an example of using the default settings to create a two-column layout with a gap between.



    ```
    .example-container {
     @include make-container();
     // Make sure to define this width after the mixin to override
     // `width: 100%` generated by `make-container()`
     width: 800px;
    }

    .example-row {
     @include make-row();
    }

    .example-content-main {
     @include make-col-ready();

     @include media-breakpoint-up(sm) {
     @include make-col(6);
     }
     @include media-breakpoint-up(lg) {
     @include make-col(8);
     }
    }

    .example-content-secondary {
     @include make-col-ready();

     @include media-breakpoint-up(sm) {
     @include make-col(6);
     }
     @include media-breakpoint-up(lg) {
     @include make-col(4);
     }
    }

    ```



    Main content
    Secondary content



    html









    ```
    <div class="example-container">
     <div class="example-row">
     <div class="example-content-main">Main content</div>
     <div class="example-content-secondary">Secondary content</div>
     </div>
    </div>
    ```

    Customizing the grid
    --------------------


    Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.


    ### Columns and gutters


    The number of grid columns can be modified via Sass variables. `$grid-columns` is used to generate the widths (in percent) of each individual column while `$grid-gutter-width` sets the width for the column gutters. `$grid-row-columns` is used to set the maximum number of columns of `.row-cols-*`, any number over this limit is ignored.



    ```
    $grid-columns: 12 !default;
    $grid-gutter-width: 1.5rem !default;
    $grid-row-columns: 6 !default;

    ```
    ### Grid tiers


    Moving beyond the columns themselves, you may also customize the number of grid tiers. If you wanted just four grid tiers, you’d update the `$grid-breakpoints` and `$container-max-widths` to something like this:



    ```
    $grid-breakpoints: (
     xs: 0,
     sm: 480px,
     md: 768px,
     lg: 1024px
    );

    $container-max-widths: (
     sm: 420px,
     md: 720px,
     lg: 960px
    );

    ```
    When making any changes to the Sass variables or maps, you’ll need to save your changes and recompile. Doing so will output a brand-new set of predefined grid classes for column widths, offsets, and ordering. Responsive visibility utilities will also be updated to use the custom breakpoints. Make sure to set grid values in `px` (not `rem`, `em`, or `%`).









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLUMNS:
    """

    Columns
    =======



    Learn how to modify columns with a handful of options for alignment, ordering, and offsetting thanks to our flexbox grid system. Plus, see how to use column classes to manage widths of non-grid elements.






     On this page


    **On this page**


    ---




    * [How they work](#how-they-work)
    * [Alignment](#alignment)
            + [Vertical alignment](#vertical-alignment)
            + [Horizontal alignment](#horizontal-alignment)
            + [Column wrapping](#column-wrapping)
            + [Column breaks](#column-breaks)
    * [Reordering](#reordering)
            + [Order classes](#order-classes)
            + [Offsetting columns](#offsetting-columns)
                    - [Offset classes](#offset-classes)
                    - [Margin utilities](#margin-utilities)
    * [Standalone column classes](#standalone-column-classes)







    **Heads up!** Be sure to [read the Grid page](https://getbootstrap.com/docs/5.3/layout/grid/) first before diving into how to modify and customize your grid columns.

    How they work
    -------------


    * **Columns build on the grid’s flexbox architecture.** Flexbox means we have options for changing individual columns and [modifying groups of columns at the row level](https://getbootstrap.com/docs/5.3/layout/grid/#row-columns). You choose how columns grow, shrink, or otherwise change.
    * **When building grid layouts, all content goes in columns.** The hierarchy of Bootstrap’s grid goes from [container](https://getbootstrap.com/docs/5.3/layout/containers/) to row to column to your content. On rare occasions, you may combine content and column, but be aware there can be unintended consequences.
    * **Bootstrap includes predefined classes for creating fast, responsive layouts.** With [six breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/) and a dozen columns at each grid tier, we have dozens of classes already built for you to create your desired layouts. This can be disabled via Sass if you wish.


    Alignment
    ---------


    Use flexbox alignment utilities to vertically and horizontally align columns.


    ### Vertical alignment


    Change the vertical alignment with any of the responsive `align-items-*` classes.






     One of three columns


     One of three columns


     One of three columns




    html









    ```
    <div class="container text-center">
     <div class="row align-items-start">
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     </div>
    </div>
    ```





     One of three columns


     One of three columns


     One of three columns




    html









    ```
    <div class="container text-center">
     <div class="row align-items-center">
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     </div>
    </div>
    ```





     One of three columns


     One of three columns


     One of three columns




    html









    ```
    <div class="container text-center">
     <div class="row align-items-end">
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     <div class="col">
     One of three columns
     </div>
     </div>
    </div>
    ```

    Or, change the alignment of each column individually with any of the responsive `.align-self-*` classes.






     One of three columns


     One of three columns


     One of three columns




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col align-self-start">
     One of three columns
     </div>
     <div class="col align-self-center">
     One of three columns
     </div>
     <div class="col align-self-end">
     One of three columns
     </div>
     </div>
    </div>
    ```

    ### Horizontal alignment


    Change the horizontal alignment with any of the responsive `justify-content-*` classes.






     One of two columns


     One of two columns




     One of two columns


     One of two columns




     One of two columns


     One of two columns




     One of two columns


     One of two columns




     One of two columns


     One of two columns




     One of two columns


     One of two columns




    html









    ```
    <div class="container text-center">
     <div class="row justify-content-start">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
     <div class="row justify-content-center">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
     <div class="row justify-content-end">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
     <div class="row justify-content-around">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
     <div class="row justify-content-between">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
     <div class="row justify-content-evenly">
     <div class="col-4">
     One of two columns
     </div>
     <div class="col-4">
     One of two columns
     </div>
     </div>
    </div>
    ```

    ### Column wrapping


    If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.





    .col-9
    .col-4
    Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
    .col-6
    Subsequent columns continue along the new line.



    html









    ```
    <div class="container">
     <div class="row">
     <div class="col-9">.col-9</div>
     <div class="col-4">.col-4<br>Since 9 + 4 = 13 &gt; 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.</div>
     <div class="col-6">.col-6<br>Subsequent columns continue along the new line.</div>
     </div>
    </div>
    ```

    ### Column breaks


    Breaking columns to a new line in flexbox requires a small hack: add an element with `width: 100%` wherever you want to wrap your columns to a new line. Normally this is accomplished with multiple `.row`s, but not every implementation method can account for this.





    .col-6 .col-sm-3
    .col-6 .col-sm-3


    .col-6 .col-sm-3
    .col-6 .col-sm-3



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-6 col-sm-3">.col-6 .col-sm-3</div>
     <div class="col-6 col-sm-3">.col-6 .col-sm-3</div>

     <!-- Force next columns to break to new line -->
     <div class="w-100"></div>

     <div class="col-6 col-sm-3">.col-6 .col-sm-3</div>
     <div class="col-6 col-sm-3">.col-6 .col-sm-3</div>
     </div>
    </div>
    ```

    You may also apply this break at specific breakpoints with our [responsive display utilities](https://getbootstrap.com/docs/5.3/utilities/display/).





    .col-6 .col-sm-4
    .col-6 .col-sm-4


    .col-6 .col-sm-4
    .col-6 .col-sm-4



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-6 col-sm-4">.col-6 .col-sm-4</div>
     <div class="col-6 col-sm-4">.col-6 .col-sm-4</div>

     <!-- Force next columns to break to new line at md breakpoint and up -->
     <div class="w-100 d-none d-md-block"></div>

     <div class="col-6 col-sm-4">.col-6 .col-sm-4</div>
     <div class="col-6 col-sm-4">.col-6 .col-sm-4</div>
     </div>
    </div>
    ```

    Reordering
    ----------


    ### Order classes


    Use `.order-` classes for controlling the **visual order** of your content. These classes are responsive, so you can set the `order` by breakpoint (e.g., `.order-1.order-md-2`). Includes support for `1` through `5` across all six grid tiers. If you need more `.order-*` classes, you can modify the default number via Sass variable.






     First in DOM, no order applied


     Second in DOM, with a larger order


     Third in DOM, with an order of 1




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col">
     First in DOM, no order applied
     </div>
     <div class="col order-5">
     Second in DOM, with a larger order
     </div>
     <div class="col order-1">
     Third in DOM, with an order of 1
     </div>
     </div>
    </div>
    ```

    There are also responsive `.order-first` and `.order-last` classes that change the `order` of an element by applying `order: -1` and `order: 6`, respectively. These classes can also be intermixed with the numbered `.order-*` classes as needed.






     First in DOM, ordered last


     Second in DOM, unordered


     Third in DOM, ordered first




    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col order-last">
     First in DOM, ordered last
     </div>
     <div class="col">
     Second in DOM, unordered
     </div>
     <div class="col order-first">
     Third in DOM, ordered first
     </div>
     </div>
    </div>
    ```

    ### Offsetting columns


    You can offset grid columns in two ways: our responsive `.offset-` grid classes and our [margin utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/). Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.


    #### Offset classes


    Move columns to the right using `.offset-md-*` classes. These classes increase the left margin of a column by `*` columns. For example, `.offset-md-4` moves `.col-md-4` over four columns.





    .col-md-4
    .col-md-4 .offset-md-4


    .col-md-3 .offset-md-3
    .col-md-3 .offset-md-3


    .col-md-6 .offset-md-3



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-md-4">.col-md-4</div>
     <div class="col-md-4 offset-md-4">.col-md-4 .offset-md-4</div>
     </div>
     <div class="row">
     <div class="col-md-3 offset-md-3">.col-md-3 .offset-md-3</div>
     <div class="col-md-3 offset-md-3">.col-md-3 .offset-md-3</div>
     </div>
     <div class="row">
     <div class="col-md-6 offset-md-3">.col-md-6 .offset-md-3</div>
     </div>
    </div>
    ```

    In addition to column clearing at responsive breakpoints, you may need to reset offsets. See this in action in [the grid example](https://getbootstrap.com/docs/5.3/examples/grid/).





    .col-sm-5 .col-md-6
    .col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0


    .col-sm-6 .col-md-5 .col-lg-6
    .col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-sm-5 col-md-6">.col-sm-5 .col-md-6</div>
     <div class="col-sm-5 offset-sm-2 col-md-6 offset-md-0">.col-sm-5 .offset-sm-2 .col-md-6 .offset-md-0</div>
     </div>
     <div class="row">
     <div class="col-sm-6 col-md-5 col-lg-6">.col-sm-6 .col-md-5 .col-lg-6</div>
     <div class="col-sm-6 col-md-5 offset-md-2 col-lg-6 offset-lg-0">.col-sm-6 .col-md-5 .offset-md-2 .col-lg-6 .offset-lg-0</div>
     </div>
    </div>
    ```

    #### Margin utilities


    With the move to flexbox in v4, you can use margin utilities like `.me-auto` to force sibling columns away from one another.





    .col-md-4
    .col-md-4 .ms-auto


    .col-md-3 .ms-md-auto
    .col-md-3 .ms-md-auto


    .col-auto .me-auto
    .col-auto



    html









    ```
    <div class="container text-center">
     <div class="row">
     <div class="col-md-4">.col-md-4</div>
     <div class="col-md-4 ms-auto">.col-md-4 .ms-auto</div>
     </div>
     <div class="row">
     <div class="col-md-3 ms-md-auto">.col-md-3 .ms-md-auto</div>
     <div class="col-md-3 ms-md-auto">.col-md-3 .ms-md-auto</div>
     </div>
     <div class="row">
     <div class="col-auto me-auto">.col-auto .me-auto</div>
     <div class="col-auto">.col-auto</div>
     </div>
    </div>
    ```

    Standalone column classes
    -------------------------


    The `.col-*` classes can also be used outside a `.row` to give an element a specific width. Whenever column classes are used as non-direct children of a row, the paddings are omitted.




     .col-3: width of 25%


     .col-sm-9: width of 75% above sm breakpoint


    html









    ```
    <div class="col-3 p-3 mb-2">
     .col-3: width of 25%
    </div>

    <div class="col-sm-9 p-3">
     .col-sm-9: width of 75% above sm breakpoint
    </div>
    ```

    The classes can be used together with utilities to create responsive floated images. Make sure to wrap the content in a [`.clearfix`](https://getbootstrap.com/docs/5.3/helpers/clearfix/) wrapper to clear the float if the text is shorter.




    PlaceholderResponsive floated image

     A paragraph of placeholder text. We're using it here to show the use of the clearfix class. We're adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.




     As you can see the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.




     And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there's none of that here.





    html









    ```
    <div class="clearfix">
     <img src="..." class="col-md-6 float-md-end mb-3 ms-md-3" alt="...">

     <p>
     A paragraph of placeholder text. We're using it here to show the use of the clearfix class. We're adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.
     </p>

     <p>
     As you can see the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.
     </p>

     <p>
     And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there's none of that here.
     </p>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    COL = " col "
    ROW = " row "

    @staticmethod
    def col(num: int) -> str:
        return f" col-{num} "

    @staticmethod
    def col_sm(num: int) -> str:
        return f" col-sm-{num} "

    JUSTIFY_CONTENT_START = " justify-content-start "
    JUSTIFY_CONTENT_CENTER = " justify-content-center "
    JUSTIFY_CONTENT_END = " justify-content-end "
    jcs = JUSTIFY_CONTENT_START
    jcc = JUSTIFY_CONTENT_CENTER
    jce = JUSTIFY_CONTENT_END
    ALIGN_ITEMS_START = " align-items-start "
    ALIGN_ITEMS_CENTER = " align-items-center "
    ALIGN_ITEMS_END = " align-items-end "
    ais = ALIGN_ITEMS_START
    aic = ALIGN_ITEMS_CENTER
    aie = ALIGN_ITEMS_END
    ALIGN_SELF_START = " align-self-start "
    ALIGN_SELF_CENTER = " align-self-center "
    ALIGN_SELF_END = " align-self-end "
    ass = ALIGN_SELF_START
    asc = ALIGN_SELF_CENTER
    ase = ALIGN_SELF_END

    @staticmethod
    def order(num: int) -> str:
        return f" order-{num} "

    ORDER_LAST = " order-last "
    ORDER_FIRST = " order-first "

    @staticmethod
    def order_sm(num: int) -> str:
        return f" order-sm-{num} "

    @staticmethod
    def order_md(num: int) -> str:
        return f" order-md-{num} "

    @staticmethod
    def col_md(num: int) -> str:
        return f" col-md-{num} "

    @staticmethod
    def col_lg(num: int) -> str:
        return f" col-lg-{num} "

    @staticmethod
    def col_xl(num: int) -> str:
        return f" col-xl{num} "

    @staticmethod
    def col_xxl(num: int) -> str:
        return f" col-xxl{num} "

    @staticmethod
    def order_sm(num: int) -> str:
        return f" order-sm-{num} "

    @staticmethod
    def order_lg(num: int) -> str:
        return f" order-lg-{num} "

    @staticmethod
    def order_xl(num: int) -> str:
        return f" order-xl{num} "

    @staticmethod
    def order_xxl(num: int) -> str:
        return f" order-xxl{num} "

    @staticmethod
    def offset_sm(num: int) -> str:
        return f" offset-sm-{num} "

    @staticmethod
    def offset_lg(num: int) -> str:
        return f" offset-lg-{num} "

    @staticmethod
    def offset_xl(num: int) -> str:
        return f" offset-xl{num} "

    @staticmethod
    def offset_xxl(num: int) -> str:
        return f" offset-xxl{num} "

    @staticmethod
    def offset_md(num: int) -> str:
        return f" offset-md{num} "

    @staticmethod
    def ms_sm(num: int) -> str:
        return f" ms-sm-{num} "

    @staticmethod
    def ms_lg(num: int) -> str:
        return f" ms-lg-{num} "

    @staticmethod
    def ms_xl(num: int) -> str:
        return f" ms-xl{num} "

    @staticmethod
    def ms_xxl(num: int) -> str:
        return f" ms-xxl{num} "

    @staticmethod
    def ms_md(num: int) -> str:
        return f" ms-md{num} "

    @staticmethod
    def me_sm(num: int) -> str:
        return f" me-sm-{num} "

    @staticmethod
    def me_lg(num: int) -> str:
        return f" me-lg-{num} "

    @staticmethod
    def me_xl(num: int) -> str:
        return f" me-xl{num} "

    @staticmethod
    def me_xxl(num: int) -> str:
        return f" me-xxl{num} "

    @staticmethod
    def me_md(num: int) -> str:
        return f" me-md{num} "

    CLEARFIX = " clearfix "
    COL_AUTO = " col_auto "


class GUTTERS:
    """

    Gutters
    =======



    Gutters are the padding between your columns, used to responsively space and align content in the Bootstrap grid system.






     On this page


    **On this page**


    ---




    * [How they work](#how-they-work)
    * [Horizontal gutters](#horizontal-gutters)
    * [Vertical gutters](#vertical-gutters)
    * [Horizontal & vertical gutters](#horizontal--vertical-gutters)
    * [Row columns gutters](#row-columns-gutters)
    * [No gutters](#no-gutters)
    * [Change the gutters](#change-the-gutters)






    How they work
    -------------


    * **Gutters are the gaps between column content, created by horizontal `padding`.** We set `padding-right` and `padding-left` on each column, and use negative `margin` to offset that at the start and end of each row to align content.
    * **Gutters start at `1.5rem` (`24px`) wide.** This allows us to match our grid to the [padding and margin spacers](https://getbootstrap.com/docs/5.3/utilities/spacing/) scale.
    * **Gutters can be responsively adjusted.** Use breakpoint-specific gutter classes to modify horizontal gutters, vertical gutters, and all gutters.


    Horizontal gutters
    ------------------


    `.gx-*` classes can be used to control the horizontal gutter widths. The `.container` or `.container-fluid` parent may need to be adjusted if larger gutters are used too to avoid unwanted overflow, using a matching padding utility. For example, in the following example we’ve increased the padding with `.px-4`:






    Custom column padding


    Custom column padding




    html









    ```
    <div class="container px-4 text-center">
     <div class="row gx-5">
     <div class="col">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col">
     <div class="p-3">Custom column padding</div>
     </div>
     </div>
    </div>
    ```

    An alternative solution is to add a wrapper around the `.row` with the `.overflow-hidden` class:






    Custom column padding


    Custom column padding




    html









    ```
    <div class="container overflow-hidden text-center">
     <div class="row gx-5">
     <div class="col">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col">
     <div class="p-3">Custom column padding</div>
     </div>
     </div>
    </div>
    ```

    Vertical gutters
    ----------------


    `.gy-*` classes can be used to control the vertical gutter widths within a row when columns wrap to new lines. Like the horizontal gutters, the vertical gutters can cause some overflow below the `.row` at the end of a page. If this occurs, you add a wrapper around `.row` with the `.overflow-hidden` class:






    Custom column padding


    Custom column padding


    Custom column padding


    Custom column padding




    html









    ```
    <div class="container overflow-hidden text-center">
     <div class="row gy-5">
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     </div>
    </div>
    ```

    Horizontal & vertical gutters
    -----------------------------


    Use `.g-*` classes to control the horizontal and vertical grid gutters. In the example below, we use a smaller gutter width, so there isn’t a need for the `.overflow-hidden` wrapper class.






    Custom column padding


    Custom column padding


    Custom column padding


    Custom column padding




    html









    ```
    <div class="container text-center">
     <div class="row g-2">
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     <div class="col-6">
     <div class="p-3">Custom column padding</div>
     </div>
     </div>
    </div>
    ```

    Row columns gutters
    -------------------


    Gutter classes can also be added to [row columns](https://getbootstrap.com/docs/5.3/layout/grid/#row-columns). In the following example, we use responsive row columns and responsive gutter classes.






    Row column


    Row column


    Row column


    Row column


    Row column


    Row column


    Row column


    Row column


    Row column


    Row column




    html









    ```
    <div class="container text-center">
     <div class="row row-cols-2 row-cols-lg-5 g-2 g-lg-3">
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     <div class="col">
     <div class="p-3">Row column</div>
     </div>
     </div>
    </div>
    ```

    No gutters
    ----------


    The gutters between columns in our predefined grid classes can be removed with `.g-0`. This removes the negative `margin`s from `.row` and the horizontal `padding` from all immediate children columns.


    **Need an edge-to-edge design?** Drop the parent `.container` or `.container-fluid` and add `.mx-0` to the `.row` to prevent overflow.


    In practice, here’s how it looks. Note you can continue to use this with all other predefined grid classes (including column widths, responsive tiers, reorders, and more).




    .col-sm-6 .col-md-8
    .col-6 .col-md-4


    html









    ```
    <div class="row g-0 text-center">
     <div class="col-sm-6 col-md-8">.col-sm-6 .col-md-8</div>
     <div class="col-6 col-md-4">.col-6 .col-md-4</div>
    </div>
    ```

    Change the gutters
    ------------------


    Classes are built from the `$gutters` Sass map which is inherited from the `$spacers` Sass map.



    ```
    $grid-gutter-width: 1.5rem;
    $gutters: (
     0: 0,
     1: $spacer \* .25,
     2: $spacer \* .5,
     3: $spacer,
     4: $spacer \* 1.5,
     5: $spacer \* 3,
    );

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    @staticmethod
    def gx(num: int) -> str:
        return f" gx-{num} "

    @staticmethod
    def gy(num: int) -> str:
        return f" gy-{num} "

    @staticmethod
    def g(num: int) -> str:
        return f" g-{num} "

    @staticmethod
    def g_sm(num: int) -> str:
        return f" g-sm-{num} "

    @staticmethod
    def g_md(num: int) -> str:
        return f" g-md-{num} "

    @staticmethod
    def g_lg(num: int) -> str:
        return f" g-lg-{num} "

    @staticmethod
    def g_xl(num: int) -> str:
        return f" g-xl-{num} "

    @staticmethod
    def g_xxl(num: int) -> str:
        return f" g-xxl-{num} "

    OVERFLOW_HIDDEN = " overflow-hidden "


class UTILITIES_FOR_LAYOUT:
    """

    Utilities for layout
    ====================



    For faster mobile-friendly and responsive development, Bootstrap includes dozens of utility classes for showing, hiding, aligning, and spacing content.






     On this page


    **On this page**


    ---




    * [Changing `display`](#changing-display)
    * [Flexbox options](#flexbox-options)
    * [Margin and padding](#margin-and-padding)
    * [Toggle `visibility`](#toggle-visibility)






    Changing `display`
    ------------------


    Use our [display utilities](https://getbootstrap.com/docs/5.3/utilities/display/) for responsively toggling common values of the `display` property. Mix it with our grid system, content, or components to show or hide them across specific viewports.


    Flexbox options
    ---------------


    Bootstrap is built with flexbox, but not every element’s `display` has been changed to `display: flex` as this would add many unnecessary overrides and unexpectedly change key browser behaviors. Most of [our components](https://getbootstrap.com/docs/5.3/components/alerts/) are built with flexbox enabled.


    Should you need to add `display: flex` to an element, do so with `.d-flex` or one of the responsive variants (e.g., `.d-sm-flex`). You’ll need this class or `display` value to allow the use of our extra [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/) for sizing, alignment, spacing, and more.


    Margin and padding
    ------------------


    Use the `margin` and `padding` [spacing utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/) to control how elements and components are spaced and sized. Bootstrap includes a six-level scale for spacing utilities, based on a `1rem` value default `$spacer` variable. Choose values for all viewports (e.g., `.me-3` for `margin-right: 1rem` in LTR), or pick responsive variants to target specific viewports (e.g., `.me-md-3` for `margin-right: 1rem` —in LTR— starting at the `md` breakpoint).


    Toggle `visibility`
    -------------------


    When toggling `display` isn’t needed, you can toggle the `visibility` of an element with our [visibility utilities](https://getbootstrap.com/docs/5.3/utilities/visibility/). Invisible elements will still affect the layout of the page, but are visually hidden from visitors.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class Z_INDEX:
    """

    Z-index
    =======



    While not a part of Bootstrap’s grid system, z-indexes play an important part in how our components overlay and interact with one another.





    Several Bootstrap components utilize `z-index`, the CSS property that helps control layout by providing a third axis to arrange content. We utilize a default z-index scale in Bootstrap that’s been designed to properly layer navigation, tooltips and popovers, modals, and more.


    These higher values start at an arbitrary number, high and specific enough to ideally avoid conflicts. We need a standard set of these across our layered components—tooltips, popovers, navbars, dropdowns, modals—so we can be reasonably consistent in the behaviors. There’s no reason we couldn’t have used `100`+ or `500`+.


    We don’t encourage customization of these individual values; should you change one, you likely need to change them all.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $zindex-dropdown: 1000;
    $zindex-sticky: 1020;
    $zindex-fixed: 1030;
    $zindex-offcanvas-backdrop: 1040;
    $zindex-offcanvas: 1045;
    $zindex-modal-backdrop: 1050;
    $zindex-modal: 1055;
    $zindex-popover: 1070;
    $zindex-tooltip: 1080;
    $zindex-toast: 1090;

    ```

    To handle overlapping borders within components (e.g., buttons and inputs in input groups), we use low single digit `z-index` values of `1`, `2`, and `3` for default, hover, and active states. On hover/focus/active, we bring a particular element to the forefront with a higher `z-index` value to show their border over the sibling elements.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CSS_GRID:
    """

    CSS Grid
    ========



    Learn how to enable, use, and customize our alternate layout system built on CSS Grid with examples and code snippets.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Key differences](#key-differences)
    * [Examples](#examples)
            + [Three columns](#three-columns)
            + [Responsive](#responsive)
    * [Wrapping](#wrapping)
    * [Starts](#starts)
    * [Auto columns](#auto-columns)
    * [Nesting](#nesting)
    * [Customizing](#customizing)
            + [No grid classes](#no-grid-classes)
            + [Columns and gaps](#columns-and-gaps)
            + [Adding rows](#adding-rows)
            + [Gaps](#gaps)
    * [Sass](#sass)






    Bootstrap’s default grid system represents the culmination of over a decade of CSS layout techniques, tried and tested by millions of people. But, it was also created without many of the modern CSS features and techniques we’re seeing in browsers like the new CSS Grid.



    **Heads up—our CSS Grid system is experimental and opt-in as of v5.1.0!** We included it in our documentation’s CSS to demonstrate it for you, but it’s disabled by default. Keep reading to learn how to enable it in your projects.

    How it works
    ------------


    With Bootstrap 5, we’ve added the option to enable a separate grid system that’s built on CSS Grid, but with a Bootstrap twist. You still get classes you can apply on a whim to build responsive layouts, but with a different approach under the hood.


    * **CSS Grid is opt-in.** Disable the default grid system by setting `$enable-grid-classes: false` and enable the CSS Grid by setting `$enable-cssgrid: true`. Then, recompile your Sass.
    * **Replace instances of `.row` with `.grid`.** The `.grid` class sets `display: grid` and creates a `grid-template` that you build on with your HTML.
    * **Replace `.col-*` classes with `.g-col-*` classes.** This is because our CSS Grid columns use the `grid-column` property instead of `width`.
    * **Columns and gutter sizes are set via CSS variables.** Set these on the parent `.grid` and customize however you want, inline or in a stylesheet, with `--bs-columns` and `--bs-gap`.


    In the future, Bootstrap will likely shift to a hybrid solution as the `gap` property has achieved nearly full browser support for flexbox.


    Key differences
    ---------------


    Compared to the default grid system:


    * Flex utilities don’t affect the CSS Grid columns in the same way.
    * Gaps replaces gutters. The `gap` property replaces the horizontal `padding` from our default grid system and functions more like `margin`.
    * As such, unlike `.row`s, `.grid`s have no negative margins and margin utilities cannot be used to change the grid gutters. Grid gaps are applied horizontally and vertically by default. See the [customizing section](#customizing) for more details.
    * Inline and custom styles should be viewed as replacements for modifier classes (e.g., `style="--bs-columns: 3;"` vs `class="row-cols-3"`).
    * Nesting works similarly, but may require you to reset your column counts on each instance of a nested `.grid`. See the [nesting section](#nesting) for details.


    Examples
    --------


    ### Three columns


    Three equal-width columns across all viewports and devices can be created by using the `.g-col-4` classes. Add [responsive classes](#responsive) to change the layout by viewport size.




    .g-col-4
    .g-col-4
    .g-col-4


    html









    ```
    <div class="grid text-center">
     <div class="g-col-4">.g-col-4</div>
     <div class="g-col-4">.g-col-4</div>
     <div class="g-col-4">.g-col-4</div>
    </div>
    ```

    ### Responsive


    Use responsive classes to adjust your layout across viewports. Here we start with two columns on the narrowest viewports, and then grow to three columns on medium viewports and above.




    .g-col-6 .g-col-md-4
    .g-col-6 .g-col-md-4
    .g-col-6 .g-col-md-4


    html









    ```
    <div class="grid text-center">
     <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
     <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
     <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
    </div>
    ```

    Compare that to this two column layout at all viewports.




    .g-col-6
    .g-col-6


    html









    ```
    <div class="grid text-center">
     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>
    </div>
    ```

    Wrapping
    --------


    Grid items automatically wrap to the next line when there’s no more room horizontally. Note that the `gap` applies to horizontal and vertical gaps between grid items.




    .g-col-6
    .g-col-6
    .g-col-6
    .g-col-6


    html









    ```
    <div class="grid text-center">
     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>

     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>
    </div>
    ```

    Starts
    ------


    Start classes aim to replace our default grid’s offset classes, but they’re not entirely the same. CSS Grid creates a grid template through styles that tell browsers to “start at this column” and “end at this column.” Those properties are `grid-column-start` and `grid-column-end`. Start classes are shorthand for the former. Pair them with the column classes to size and align your columns however you need. Start classes begin at `1` as `0` is an invalid value for these properties.




    .g-col-3 .g-start-2
    .g-col-4 .g-start-6


    html









    ```
    <div class="grid text-center">
     <div class="g-col-3 g-start-2">.g-col-3 .g-start-2</div>
     <div class="g-col-4 g-start-6">.g-col-4 .g-start-6</div>
    </div>
    ```

    Auto columns
    ------------


    When there are no classes on the grid items (the immediate children of a `.grid`), each grid item will automatically be sized to one column.




    1
    1
    1
    1
    1
    1
    1
    1
    1
    1
    1
    1


    html









    ```
    <div class="grid text-center">
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
    </div>
    ```

    This behavior can be mixed with grid column classes.




    .g-col-6
    1
    1
    1
    1
    1
    1


    html









    ```
    <div class="grid text-center">
     <div class="g-col-6">.g-col-6</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
     <div>1</div>
    </div>
    ```

    Nesting
    -------


    Similar to our default grid system, our CSS Grid allows for easy nesting of `.grid`s. However, unlike the default, this grid inherits changes in the rows, columns, and gaps. Consider the example below:


    * We override the default number of columns with a local CSS variable: `--bs-columns: 3`.
    * In the first auto-column, the column count is inherited and each column is one-third of the available width.
    * In the second auto-column, we’ve reset the column count on the nested `.grid` to 12 (our default).
    * The third auto-column has no nested content.


    In practice this allows for more complex and custom layouts when compared to our default grid system.





     First auto-column

    Auto-column
    Auto-column



     Second auto-column

    6 of 12
    4 of 12
    2 of 12


    Third auto-column


    html









    ```
    <div class="grid text-center" style="--bs-columns: 3;">
     <div>
     First auto-column
     <div class="grid">
     <div>Auto-column</div>
     <div>Auto-column</div>
     </div>
     </div>
     <div>
     Second auto-column
     <div class="grid" style="--bs-columns: 12;">
     <div class="g-col-6">6 of 12</div>
     <div class="g-col-4">4 of 12</div>
     <div class="g-col-2">2 of 12</div>
     </div>
     </div>
     <div>Third auto-column</div>
    </div>
    ```

    Customizing
    -----------


    Customize the number of columns, the number of rows, and the width of the gaps with local CSS variables.




    | Variable | Fallback value | Description |
    | --- | --- | --- |
    | `--bs-rows` | `1` | The number of rows in your grid template |
    | `--bs-columns` | `12` | The number of columns in your grid template |
    | `--bs-gap` | `1.5rem` | The size of the gap between columns (vertical and horizontal) |


    These CSS variables have no default value; instead, they apply fallback values that are used *until* a local instance is provided. For example, we use `var(--bs-rows, 1)` for our CSS Grid rows, which ignores `--bs-rows` because that hasn’t been set anywhere yet. Once it is, the `.grid` instance will use that value instead of the fallback value of `1`.


    ### No grid classes


    Immediate children elements of `.grid` are grid items, so they’ll be sized without explicitly adding a `.g-col` class.




    Auto-column
    Auto-column
    Auto-column


    html









    ```
    <div class="grid text-center" style="--bs-columns: 3;">
     <div>Auto-column</div>
     <div>Auto-column</div>
     <div>Auto-column</div>
    </div>
    ```

    ### Columns and gaps


    Adjust the number of columns and the gap.




    .g-col-2
    .g-col-2


    html









    ```
    <div class="grid text-center" style="--bs-columns: 4; --bs-gap: 5rem;">
     <div class="g-col-2">.g-col-2</div>
     <div class="g-col-2">.g-col-2</div>
    </div>
    ```



    .g-col-6
    .g-col-4


    html









    ```
    <div class="grid text-center" style="--bs-columns: 10; --bs-gap: 1rem;">
     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-4">.g-col-4</div>
    </div>
    ```

    ### Adding rows


    Adding more rows and changing the placement of columns:




    Auto-column
    Auto-column
    Auto-column


    html









    ```
    <div class="grid text-center" style="--bs-rows: 3; --bs-columns: 3;">
     <div>Auto-column</div>
     <div class="g-start-2" style="grid-row: 2">Auto-column</div>
     <div class="g-start-3" style="grid-row: 3">Auto-column</div>
    </div>
    ```

    ### Gaps


    Change the vertical gaps only by modifying the `row-gap`. Note that we use `gap` on `.grid`s, but `row-gap` and `column-gap` can be modified as needed.




    .g-col-6
    .g-col-6
    .g-col-6
    .g-col-6


    html









    ```
    <div class="grid text-center" style="row-gap: 0;">
     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>

     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>
    </div>
    ```

    Because of that, you can have different vertical and horizontal `gap`s, which can take a single value (all sides) or a pair of values (vertical and horizontal). This can be applied with an inline style for `gap`, or with our `--bs-gap` CSS variable.




    .g-col-6
    .g-col-6
    .g-col-6
    .g-col-6


    html









    ```
    <div class="grid text-center" style="--bs-gap: .25rem 1rem;">
     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>

     <div class="g-col-6">.g-col-6</div>
     <div class="g-col-6">.g-col-6</div>
    </div>
    ```

    Sass
    ----


    One limitation of the CSS Grid is that our default classes are still generated by two Sass variables, `$grid-columns` and `$grid-gutter-width`. This effectively predetermines the number of classes generated in our compiled CSS. You have two options here:


    * Modify those default Sass variables and recompile your CSS.
    * Use inline or custom styles to augment the provided classes.


    For example, you can increase the column count and change the gap size, and then size your “columns” with a mix of inline styles and predefined CSS Grid column classes (e.g., `.g-col-4`).




    14 columns
    .g-col-4


    html









    ```
    <div class="grid text-center" style="--bs-columns: 18; --bs-gap: .5rem;">
     <div style="grid-column: span 14;">14 columns</div>
     <div class="g-col-4">.g-col-4</div>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class REBOOT:
    """

    Reboot
    ======



    Reboot, a collection of element-specific CSS changes in a single file, kickstart Bootstrap to provide an elegant, consistent, and simple baseline to build upon.






     On this page


    **On this page**


    ---




    * [Approach](#approach)
    * [CSS variables](#css-variables)
    * [Page defaults](#page-defaults)
    * [Native font stack](#native-font-stack)
    * [Headings](#headings)
    * [Paragraphs](#paragraphs)
    * [Links](#links)
    * [Horizontal rules](#horizontal-rules)
    * [Lists](#lists)
    * [Inline code](#inline-code)
    * [Code blocks](#code-blocks)
    * [Variables](#variables)
    * [User input](#user-input)
    * [Sample output](#sample-output)
    * [Tables](#tables)
    * [Forms](#forms)
            + [Pointers on buttons](#pointers-on-buttons)
    * [Misc elements](#misc-elements)
            + [Address](#address)
            + [Blockquote](#blockquote)
            + [Inline elements](#inline-elements)
            + [Summary](#summary)
    * [HTML5 `[hidden]` attribute](#html5-hidden-attribute)






    Approach
    --------


    Reboot builds upon Normalize, providing many HTML elements with somewhat opinionated styles using only element selectors. Additional styling is done only with classes. For example, we reboot some `<table>` styles for a simpler baseline and later provide `.table`, `.table-bordered`, and more.


    Here are our guidelines and reasons for choosing what to override in Reboot:


    * Update some browser default values to use `rem`s instead of `em`s for scalable component spacing.
    * Avoid `margin-top`. Vertical margins can collapse, yielding unexpected results. More importantly though, a single direction of `margin` is a simpler mental model.
    * For easier scaling across device sizes, block elements should use `rem`s for `margin`s.
    * Keep declarations of `font`-related properties to a minimum, using `inherit` whenever possible.


    CSS variables
    -------------


    Added in v5.2.0
    With v5.1.1, we standardized our required `@import`s across all our CSS bundles (including `bootstrap.css`, `bootstrap-reboot.css`, and `bootstrap-grid.css`) to include `_root.scss`. This adds `:root` level CSS variables to all bundles, regardless of how many of them are used in that bundle. Ultimately Bootstrap 5 will continue to see more [CSS variables](https://getbootstrap.com/docs/5.3/customize/css-variables/) added over time, in order to provide more real-time customization without the need to always recompile Sass. Our approach is to take our source Sass variables and transform them into CSS variables. That way, even if you don’t use CSS variables, you still have all the power of Sass. **This is still in-progress and will take time to fully implement.**


    For example, consider these `:root` CSS variables for common `<body>` styles:




    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    @if $font-size-root != null {
     --#{$prefix}root-font-size: #{$font-size-root};
    }
    --#{$prefix}body-font-family: #{inspect($font-family-base)};
    @include rfs($font-size-base, --#{$prefix}body-font-size);
    --#{$prefix}body-font-weight: #{$font-weight-base};
    --#{$prefix}body-line-height: #{$line-height-base};
    @if $body-text-align != null {
     --#{$prefix}body-text-align: #{$body-text-align};
    }

    --#{$prefix}body-color: #{$body-color};
    --#{$prefix}body-color-rgb: #{to-rgb($body-color)};
    --#{$prefix}body-bg: #{$body-bg};
    --#{$prefix}body-bg-rgb: #{to-rgb($body-bg)};

    --#{$prefix}emphasis-color: #{$body-emphasis-color};
    --#{$prefix}emphasis-color-rgb: #{to-rgb($body-emphasis-color)};

    --#{$prefix}secondary-color: #{$body-secondary-color};
    --#{$prefix}secondary-color-rgb: #{to-rgb($body-secondary-color)};
    --#{$prefix}secondary-bg: #{$body-secondary-bg};
    --#{$prefix}secondary-bg-rgb: #{to-rgb($body-secondary-bg)};

    --#{$prefix}tertiary-color: #{$body-tertiary-color};
    --#{$prefix}tertiary-color-rgb: #{to-rgb($body-tertiary-color)};
    --#{$prefix}tertiary-bg: #{$body-tertiary-bg};
    --#{$prefix}tertiary-bg-rgb: #{to-rgb($body-tertiary-bg)};
    ```

    In practice, those variables are then applied in Reboot like so:




    [scss/\_reboot.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_reboot.scss)






    ```
    body {
     margin: 0; // 1
     font-family: var(--#{$prefix}body-font-family);
     @include font-size(var(--#{$prefix}body-font-size));
     font-weight: var(--#{$prefix}body-font-weight);
     line-height: var(--#{$prefix}body-line-height);
     color: var(--#{$prefix}body-color);
     text-align: var(--#{$prefix}body-text-align);
     background-color: var(--#{$prefix}body-bg); // 2
     -webkit-text-size-adjust: 100%; // 3
     -webkit-tap-highlight-color: rgba($black, 0); // 4
    }

    ```

    Which allows you to make real-time customizations however you like:



    ```
    <body style="--bs-body-color: #333;">
     <!-- ... -->
    </body>

    ```
    Page defaults
    -------------


    The `<html>` and `<body>` elements are updated to provide better page-wide defaults. More specifically:


    * The `box-sizing` is globally set on every element—including `*::before` and `*::after`, to `border-box`. This ensures that the declared width of element is never exceeded due to padding or border.
            + No base `font-size` is declared on the `<html>`, but `16px` is assumed (the browser default). `font-size: 1rem` is applied on the `<body>` for easy responsive type-scaling via media queries while respecting user preferences and ensuring a more accessible approach. This browser default can be overridden by modifying the `$font-size-root` variable.
    * The `<body>` also sets a global `font-family`, `font-weight`, `line-height`, and `color`. This is inherited later by some form elements to prevent font inconsistencies.
    * For safety, the `<body>` has a declared `background-color`, defaulting to `#fff`.


    Native font stack
    -----------------


    Bootstrap utilizes a “native font stack” or “system font stack” for optimum text rendering on every device and OS. These system fonts have been designed specifically with today’s devices in mind, with improved rendering on screens, variable font support, and more. Read more about [native font stacks in this *Smashing Magazine* article](https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/).



    ```
    $font-family-sans-serif:
     // Cross-platform generic font family (default user interface font)
     system-ui,
     // Safari for macOS and iOS (San Francisco)
     -apple-system,
     // Windows
     "Segoe UI",
     // Android
     Roboto,
     // older macOS and iOS
     "Helvetica Neue"
     // Linux
     "Noto Sans",
     "Liberation Sans",
     // Basic web fallback
     Arial,
     // Sans serif fallback
     sans-serif,
     // Emoji fonts
     "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;

    ```
    Note that because the font stack includes emoji fonts, many common symbol/dingbat Unicode characters will be rendered as multicolored pictographs. Their appearance will vary, depending on the style used in the browser/platform’s native emoji font, and they won’t be affected by any CSS `color` styles.


    This `font-family` is applied to the `<body>` and automatically inherited globally throughout Bootstrap. To switch the global `font-family`, update `$font-family-base` and recompile Bootstrap.


    Headings
    --------


    All heading elements—`<h1>`—`<h6>` have their `margin-top` removed, `margin-bottom: .5rem` set, and `line-height` tightened. While headings inherit their `color` by default, you can also override it via optional CSS variable, `--bs-heading-color`.




    | Heading | Example |
    | --- | --- |
    | `<h1></h1>` | h1. Bootstrap heading |
    | `<h2></h2>` | h2. Bootstrap heading |
    | `<h3></h3>` | h3. Bootstrap heading |
    | `<h4></h4>` | h4. Bootstrap heading |
    | `<h5></h5>` | h5. Bootstrap heading |
    | `<h6></h6>` | h6. Bootstrap heading |


    Paragraphs
    ----------


    All `<p>` elements have their `margin-top` removed and `margin-bottom: 1rem` set for easy spacing.



    This is an example paragraph.



    html









    ```
    <p>This is an example paragraph.</p>
    ```

    Links
    -----


    Links have a default `color` and underline applied. While links change on `:hover`, they don’t change based on whether someone `:visited` the link. They also receive no special `:focus` styles.



    [This is an example link](#)

    html









    ```
    <a href="#">This is an example link</a>
    ```

    As of v5.3.x, link `color` is set using `rgba()` and new `-rgb` CSS variables, allowing for easy customization of link color opacity. Change the link color opacity with the `--bs-link-opacity` CSS variable:



    [This is an example link](#)

    html









    ```
    <a href="#" style="--bs-link-opacity: .5">This is an example link</a>
    ```

    Placeholder links—those without an `href`—are targeted with a more specific selector and have their `color` and `text-decoration` reset to their default values.



    This is a placeholder link

    html









    ```
    <a>This is a placeholder link</a>
    ```

    Horizontal rules
    ----------------


    The `<hr>` element has been simplified. Similar to browser defaults, `<hr>`s are styled via `border-top`, have a default `opacity: .25`, and automatically inherit their `border-color` via `color`, including when `color` is set via the parent. They can be modified with text, border, and opacity utilities.





    ---





    ---





    ---




    ---



    html









    ```
    <hr>

    <div class="text-success">
     <hr>
    </div>

    <hr class="border border-danger border-2 opacity-50">
    <hr class="border border-primary border-3 opacity-75">
    ```

    Lists
    -----


    All lists—`<ul>`, `<ol>`, and `<dl>`—have their `margin-top` removed and a `margin-bottom: 1rem`. Nested lists have no `margin-bottom`. We’ve also reset the `padding-left` on `<ul>` and `<ol>` elements.



    * All lists have their top margin removed
    * And their bottom margin normalized
    * Nested lists have no bottom margin
            + This way they have a more even appearance
            + Particularly when followed by more list items
    * The left padding has also been reset


    1. Here’s an ordered list
    2. With a few list items
    3. It has the same overall look
    4. As the previous unordered list



    For simpler styling, clear hierarchy, and better spacing, description lists have updated `margin`s. `<dd>`s reset `margin-left` to `0` and add `margin-bottom: .5rem`. `<dt>`s are **bolded**.




    Description lists
    A description list is perfect for defining terms.
    Term
    Definition for the term.
    A second definition for the same term.
    Another term
    Definition for this other term.


    Inline code
    -----------


    Wrap inline snippets of code with `<code>`. Be sure to escape HTML angle brackets.



    For example, `<section>` should be wrapped as inline.

    html









    ```
    For example, <code>&lt;section&gt;</code> should be wrapped as inline.
    ```

    Code blocks
    -----------


    Use `<pre>`s for multiple lines of code. Once again, be sure to escape any angle brackets in the code for proper rendering. The `<pre>` element is reset to remove its `margin-top` and use `rem` units for its `margin-bottom`.




    ```
    <p>Sample text here...</p>
    <p>And another line of sample text here...</p>

    ```


    html









    ```
    <pre><code>&lt;p&gt;Sample text here...&lt;/p&gt;
    &lt;p&gt;And another line of sample text here...&lt;/p&gt;
    </code></pre>
    ```

    Variables
    ---------


    For indicating variables use the `<var>` tag.



    y = mx + b

    html









    ```
    <var>y</var> = <var>m</var><var>x</var> + <var>b</var>
    ```

    User input
    ----------


    Use the `<kbd>` to indicate input that is typically entered via keyboard.



    To switch directories, type `cd` followed by the name of the directory.

    To edit settings, press ``Ctrl` + `,``

    html









    ```
    To switch directories, type <kbd>cd</kbd> followed by the name of the directory.<br>
    To edit settings, press <kbd><kbd>Ctrl</kbd> + <kbd>,</kbd></kbd>
    ```

    Sample output
    -------------


    For indicating sample output from a program use the `<samp>` tag.



    `This text is meant to be treated as sample output from a computer program.`

    html









    ```
    <samp>This text is meant to be treated as sample output from a computer program.</samp>
    ```

    Tables
    ------


    Tables are slightly adjusted to style `<caption>`s, collapse borders, and ensure consistent `text-align` throughout. Additional changes for borders, padding, and more come with [the `.table` class](https://getbootstrap.com/docs/5.3/content/tables/).






     This is an example table, and this is its caption to describe the contents.
     | Table heading | Table heading | Table heading | Table heading |
    | --- | --- | --- | --- |
    | Table cell | Table cell | Table cell | Table cell |
    | Table cell | Table cell | Table cell | Table cell |
    | Table cell | Table cell | Table cell | Table cell |



    html









    ```
    <table>
     <caption>
     This is an example table, and this is its caption to describe the contents.
     </caption>
     <thead>
     <tr>
     <th>Table heading</th>
     <th>Table heading</th>
     <th>Table heading</th>
     <th>Table heading</th>
     </tr>
     </thead>
     <tbody>
     <tr>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     </tr>
     <tr>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     </tr>
     <tr>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     <td>Table cell</td>
     </tr>
     </tbody>
    </table>
    ```

    Forms
    -----


    Various form elements have been rebooted for simpler base styles. Here are some of the most notable changes:


    * `<fieldset>`s have no borders, padding, or margin so they can be easily used as wrappers for individual inputs or groups of inputs.
    * `<legend>`s, like fieldsets, have also been restyled to be displayed as a heading of sorts.
    * `<label>`s are set to `display: inline-block` to allow `margin` to be applied.
    * `<input>`s, `<select>`s, `<textarea>`s, and `<button>`s are mostly addressed by Normalize, but Reboot removes their `margin` and sets `line-height: inherit`, too.
    * `<textarea>`s are modified to only be resizable vertically as horizontal resizing often “breaks” page layout.
    * `<button>`s and `<input>` button elements have `cursor: pointer` when `:not(:disabled)`.


    These changes, and more, are demonstrated below.



    Some date inputs types are [not fully supported](https://caniuse.com/input-datetime) by the latest versions of Safari and Firefox.



    Example legend

    Example input





    Example email





    Example telephone





    Example url





    Example number





    Example search





    Example range





    Example file input





    Example select

    Choose...

    Option 1
    Option 2
    Option 3


    Option 4
    Option 5
    Option 6








     Check this checkbox







     Option one is this and that



     Option two is something else that's also super long to demonstrate the wrapping of these fancy form controls.



     Option three is disabled





    Example textarea





    Example date





    Example time





    Example password





    Example datetime-local





    Example week





    Example month





    Example color





    Example output
    100




    Button submit







    Button submit








    ### Pointers on buttons


    Reboot includes an enhancement for `role="button"` to change the default cursor to `pointer`. Add this attribute to elements to help indicate elements are interactive. This role isn’t necessary for `<button>` elements, which get their own `cursor` change.



    Non-button element button

    html









    ```
    <span role="button" tabindex="0">Non-button element button</span>
    ```

    Misc elements
    -------------


    ### Address


    The `<address>` element is updated to reset the browser default `font-style` from `italic` to `normal`. `line-height` is also now inherited, and `margin-bottom: 1rem` has been added. `<address>`s are for presenting contact information for the nearest ancestor (or an entire body of work). Preserve formatting by ending lines with `<br>`.




    **ACME Corporation**

     1123 Fictional St,

     San Francisco, CA 94103

    P: (123) 456-7890


    **Full Name**

    [first.last@example.com](mailto:first.last@example.com)


    ### Blockquote


    The default `margin` on blockquotes is `1em 40px`, so we reset that to `0 0 1rem` for something more consistent with other elements.




    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    >


    Someone famous in Source Title



    ### Inline elements


    The `<abbr>` element receives basic styling to make it stand out amongst paragraph text.



     The HTML abbreviation element.

    ### Summary


    The default `cursor` on summary is `text`, so we reset that to `pointer` to convey that the element can be interacted with by clicking on it.




    Some details
    More info about the details.




    Even more details
    Here are even more details about the details.




    HTML5 `[hidden]` attribute
    --------------------------


    HTML5 adds [a new global attribute named `[hidden]`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Global_attributes/hidden), which is styled as `display: none` by default. Borrowing an idea from [PureCSS](https://purecss.io/), we improve upon this default by making `[hidden] { display: none !important; }` to help prevent its `display` from getting accidentally overridden.



    ```
    <input type="text" hidden>

    ```

    Since `[hidden]` is not compatible with jQuery’s `$(...).hide()` and `$(...).show()` methods, we don’t specifically endorse `[hidden]` over other techniques for managing the `display` of elements.

    To merely toggle the visibility of an element, meaning its `display` is not modified and the element can still affect the flow of the document, use [the `.invisible` class](https://getbootstrap.com/docs/5.3/utilities/visibility/) instead.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TYPOGRAPHY:
    """

    Typography
    ==========



    Documentation and examples for Bootstrap typography, including global settings, headings, body text, lists, and more.






     On this page


    **On this page**


    ---




    * [Global settings](#global-settings)
    * [Headings](#headings)
            + [Customizing headings](#customizing-headings)
    * [Display headings](#display-headings)
    * [Lead](#lead)
    * [Inline text elements](#inline-text-elements)
    * [Text utilities](#text-utilities)
    * [Abbreviations](#abbreviations)
    * [Blockquotes](#blockquotes)
            + [Naming a source](#naming-a-source)
            + [Alignment](#alignment)
    * [Lists](#lists)
            + [Unstyled](#unstyled)
            + [Inline](#inline)
            + [Description list alignment](#description-list-alignment)
    * [Responsive font sizes](#responsive-font-sizes)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)






    Global settings
    ---------------


    Bootstrap sets basic global display, typography, and link styles. When more control is needed, check out the [textual utility classes](https://getbootstrap.com/docs/5.3/utilities/text/).


    * Use a [native font stack](https://getbootstrap.com/docs/5.3/content/reboot/#native-font-stack) that selects the best `font-family` for each OS and device.
    * For a more inclusive and accessible type scale, we use the browser’s default root `font-size` (typically 16px) so visitors can customize their browser defaults as needed.
    * Use the `$font-family-base`, `$font-size-base`, and `$line-height-base` attributes as our typographic base applied to the `<body>`.
    * Set the global link color via `$link-color`.
    * Use `$body-bg` to set a `background-color` on the `<body>` (`#fff` by default).


    These styles can be found within `_reboot.scss`, and the global variables are defined in `_variables.scss`. Make sure to set `$font-size-base` in `rem`.


    Headings
    --------


    All HTML headings, `<h1>` through `<h6>`, are available.




    | Heading | Example |
    | --- | --- |
    | `<h1></h1>` | h1. Bootstrap heading |
    | `<h2></h2>` | h2. Bootstrap heading |
    | `<h3></h3>` | h3. Bootstrap heading |
    | `<h4></h4>` | h4. Bootstrap heading |
    | `<h5></h5>` | h5. Bootstrap heading |
    | `<h6></h6>` | h6. Bootstrap heading |



    ```
    <h1>h1. Bootstrap heading</h1>
    <h2>h2. Bootstrap heading</h2>
    <h3>h3. Bootstrap heading</h3>
    <h4>h4. Bootstrap heading</h4>
    <h5>h5. Bootstrap heading</h5>
    <h6>h6. Bootstrap heading</h6>

    ```
    `.h1` through `.h6` classes are also available, for when you want to match the font styling of a heading but cannot use the associated HTML element.



    h1. Bootstrap heading


    h2. Bootstrap heading


    h3. Bootstrap heading


    h4. Bootstrap heading


    h5. Bootstrap heading


    h6. Bootstrap heading



    html









    ```
    <p class="h1">h1. Bootstrap heading</p>
    <p class="h2">h2. Bootstrap heading</p>
    <p class="h3">h3. Bootstrap heading</p>
    <p class="h4">h4. Bootstrap heading</p>
    <p class="h5">h5. Bootstrap heading</p>
    <p class="h6">h6. Bootstrap heading</p>
    ```

    ### Customizing headings


    Use the included utility classes to recreate the small secondary heading text from Bootstrap 3.



    ###
     Fancy display heading
     With faded secondary text



    html









    ```
    <h3>
     Fancy display heading
     <small class="text-body-secondary">With faded secondary text</small>
    </h3>
    ```

    Display headings
    ----------------


    Traditional heading elements are designed to work best in the meat of your page content. When you need a heading to stand out, consider using a **display heading**—a larger, slightly more opinionated heading style.



    Display 1
    Display 2
    Display 3
    Display 4
    Display 5
    Display 6


    ```
    <h1 class="display-1">Display 1</h1>
    <h1 class="display-2">Display 2</h1>
    <h1 class="display-3">Display 3</h1>
    <h1 class="display-4">Display 4</h1>
    <h1 class="display-5">Display 5</h1>
    <h1 class="display-6">Display 6</h1>

    ```
    Display headings are configured via the `$display-font-sizes` Sass map and two variables, `$display-font-weight` and `$display-line-height`.


    Display headings are customizable via two variables, `$display-font-family` and `$display-font-style`.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $display-font-sizes: (
     1: 5rem,
     2: 4.5rem,
     3: 4rem,
     4: 3.5rem,
     5: 3rem,
     6: 2.5rem
    );

    $display-font-family: null;
    $display-font-style: null;
    $display-font-weight: 300;
    $display-line-height: $headings-line-height;

    ```

    Lead
    ----


    Make a paragraph stand out by adding `.lead`.




     This is a lead paragraph. It stands out from regular paragraphs.




    html









    ```
    <p class="lead">
     This is a lead paragraph. It stands out from regular paragraphs.
    </p>
    ```

    Inline text elements
    --------------------


    Styling for common inline HTML5 elements.



    You can use the mark tag to highlight text.


    ~~This line of text is meant to be treated as deleted text.~~


    ~~This line of text is meant to be treated as no longer accurate.~~


    This line of text is meant to be treated as an addition to the document.


    This line of text will render as underlined.


    This line of text is meant to be treated as fine print.


    **This line rendered as bold text.**


    *This line rendered as italicized text.*



    html









    ```
    <p>You can use the mark tag to <mark>highlight</mark> text.</p>
    <p><del>This line of text is meant to be treated as deleted text.</del></p>
    <p><s>This line of text is meant to be treated as no longer accurate.</s></p>
    <p><ins>This line of text is meant to be treated as an addition to the document.</ins></p>
    <p><u>This line of text will render as underlined.</u></p>
    <p><small>This line of text is meant to be treated as fine print.</small></p>
    <p><strong>This line rendered as bold text.</strong></p>
    <p><em>This line rendered as italicized text.</em></p>
    ```

    Beware that those tags should be used for semantic purpose:


    * `<mark>` represents text which is marked or highlighted for reference or notation purposes.
    * `<small>` represents side-comments and small print, like copyright and legal text.
    * `<s>` represents element that are no longer relevant or no longer accurate.
    * `<u>` represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation.


    If you want to style your text, you should use the following classes instead:


    * `.mark` will apply the same styles as `<mark>`.
    * `.small` will apply the same styles as `<small>`.
    * `.text-decoration-underline` will apply the same styles as `<u>`.
    * `.text-decoration-line-through` will apply the same styles as `<s>`.


    While not shown above, feel free to use `<b>` and `<i>` in HTML5. `<b>` is meant to highlight words or phrases without conveying additional importance, while `<i>` is mostly for voice, technical terms, etc.


    Text utilities
    --------------


    Change text alignment, transform, style, weight, line-height, decoration and color with our [text utilities](https://getbootstrap.com/docs/5.3/utilities/text/) and [color utilities](https://getbootstrap.com/docs/5.3/utilities/colors/).


    Abbreviations
    -------------


    Stylized implementation of HTML’s `<abbr>` element for abbreviations and acronyms to show the expanded version on hover. Abbreviations have a default underline and gain a help cursor to provide additional context on hover and to users of assistive technologies.


    Add `.initialism` to an abbreviation for a slightly smaller font-size.



    attr


    HTML



    html









    ```
    <p><abbr title="attribute">attr</abbr></p>
    <p><abbr title="HyperText Markup Language" class="initialism">HTML</abbr></p>
    ```

    Blockquotes
    -----------


    For quoting blocks of content from another source within your document. Wrap `<blockquote class="blockquote">` around any HTML as the quote.




    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    >



    html









    ```
    <blockquote class="blockquote">
     <p>A well-known quote, contained in a blockquote element.</p>
    </blockquote>
    ```

    ### Naming a source


    The HTML spec requires that blockquote attribution be placed outside the `<blockquote>`. When providing attribution, wrap your `<blockquote>` in a `<figure>` and use a `<figcaption>` or a block level element (e.g., `<p>`) with the `.blockquote-footer` class. Be sure to wrap the name of the source work in `<cite>` as well.





    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    >



     Someone famous in Source Title



    html









    ```
    <figure>
     <blockquote class="blockquote">
     <p>A well-known quote, contained in a blockquote element.</p>
     </blockquote>
     <figcaption class="blockquote-footer">
     Someone famous in <cite title="Source Title">Source Title</cite>
     </figcaption>
    </figure>
    ```

    ### Alignment


    Use text utilities as needed to change the alignment of your blockquote.





    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    >



     Someone famous in Source Title



    html









    ```
    <figure class="text-center">
     <blockquote class="blockquote">
     <p>A well-known quote, contained in a blockquote element.</p>
     </blockquote>
     <figcaption class="blockquote-footer">
     Someone famous in <cite title="Source Title">Source Title</cite>
     </figcaption>
    </figure>
    ```




    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    >



     Someone famous in Source Title



    html









    ```
    <figure class="text-end">
     <blockquote class="blockquote">
     <p>A well-known quote, contained in a blockquote element.</p>
     </blockquote>
     <figcaption class="blockquote-footer">
     Someone famous in <cite title="Source Title">Source Title</cite>
     </figcaption>
    </figure>
    ```

    Lists
    -----


    ### Unstyled


    Remove the default `list-style` and left margin on list items (immediate children only). **This only applies to immediate children list items**, meaning you will need to add the class for any nested lists as well.



    * This is a list.
    * It appears completely unstyled.
    * Structurally, it's still a list.
    * However, this style only applies to immediate child elements.
    * Nested lists:
            + are unaffected by this style
            + will still show a bullet
            + and have appropriate left margin
    * This may still come in handy in some situations.



    html









    ```
    <ul class="list-unstyled">
     <li>This is a list.</li>
     <li>It appears completely unstyled.</li>
     <li>Structurally, it's still a list.</li>
     <li>However, this style only applies to immediate child elements.</li>
     <li>Nested lists:
     <ul>
     <li>are unaffected by this style</li>
     <li>will still show a bullet</li>
     <li>and have appropriate left margin</li>
     </ul>
     </li>
     <li>This may still come in handy in some situations.</li>
    </ul>
    ```

    ### Inline


    Remove a list’s bullets and apply some light `margin` with a combination of two classes, `.list-inline` and `.list-inline-item`.



    * This is a list item.
    * And another one.
    * But they're displayed inline.



    html









    ```
    <ul class="list-inline">
     <li class="list-inline-item">This is a list item.</li>
     <li class="list-inline-item">And another one.</li>
     <li class="list-inline-item">But they're displayed inline.</li>
    </ul>
    ```

    ### Description list alignment


    Align terms and descriptions horizontally by using our grid system’s predefined classes (or semantic mixins). For longer terms, you can optionally add a `.text-truncate` class to truncate the text with an ellipsis.




    Description lists
    A description list is perfect for defining terms.
    Term

    Definition for the term.


    And some more placeholder definition text.



    Another term
    This definition is short, so no extra paragraphs or anything.
    Truncated term is truncated
    This can be useful when space is tight. Adds an ellipsis at the end.
    Nesting


    Nested definition list
    I heard you like definition lists. Let me put a definition list inside your definition list.




    html









    ```
    <dl class="row">
     <dt class="col-sm-3">Description lists</dt>
     <dd class="col-sm-9">A description list is perfect for defining terms.</dd>

     <dt class="col-sm-3">Term</dt>
     <dd class="col-sm-9">
     <p>Definition for the term.</p>
     <p>And some more placeholder definition text.</p>
     </dd>

     <dt class="col-sm-3">Another term</dt>
     <dd class="col-sm-9">This definition is short, so no extra paragraphs or anything.</dd>

     <dt class="col-sm-3 text-truncate">Truncated term is truncated</dt>
     <dd class="col-sm-9">This can be useful when space is tight. Adds an ellipsis at the end.</dd>

     <dt class="col-sm-3">Nesting</dt>
     <dd class="col-sm-9">
     <dl class="row">
     <dt class="col-sm-4">Nested definition list</dt>
     <dd class="col-sm-8">I heard you like definition lists. Let me put a definition list inside your definition list.</dd>
     </dl>
     </dd>
    </dl>
    ```

    Responsive font sizes
    ---------------------


    In Bootstrap 5, we’ve enabled responsive font sizes by default, allowing text to scale more naturally across device and viewport sizes. Have a look at the [RFS page](https://getbootstrap.com/docs/5.3/getting-started/rfs/) to find out how this works.


    CSS
    ---


    ### Sass variables


    Headings have some dedicated variables for sizing and spacing.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $headings-margin-bottom: $spacer \* .5;
    $headings-font-family: null;
    $headings-font-style: null;
    $headings-font-weight: 500;
    $headings-line-height: 1.2;
    $headings-color: inherit;

    ```

    Miscellaneous typography elements covered here and in [Reboot](https://getbootstrap.com/docs/5.3/content/reboot/) also have dedicated variables.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $lead-font-size: $font-size-base \* 1.25;
    $lead-font-weight: 300;

    $small-font-size: .875em;

    $sub-sup-font-size: .75em;

    // fusv-disable
    $text-muted: var(--#{$prefix}secondary-color); // Deprecated in 5.3.0
    // fusv-enable

    $initialism-font-size: $small-font-size;

    $blockquote-margin-y: $spacer;
    $blockquote-font-size: $font-size-base \* 1.25;
    $blockquote-footer-color: $gray-600;
    $blockquote-footer-font-size: $small-font-size;

    $hr-margin-y: $spacer;
    $hr-color: inherit;

    // fusv-disable
    $hr-bg-color: null; // Deprecated in v5.2.0
    $hr-height: null; // Deprecated in v5.2.0
    // fusv-enable

    $hr-border-color: null; // Allows for inherited colors
    $hr-border-width: var(--#{$prefix}border-width);
    $hr-opacity: .25;

    $vr-border-width: var(--#{$prefix}border-width);

    $legend-margin-bottom: .5rem;
    $legend-font-size: 1.5rem;
    $legend-font-weight: null;

    $dt-font-weight: $font-weight-bold;

    $list-inline-padding: .5rem;

    $mark-padding: .1875em;
    $mark-bg: $yellow-100;

    ```

    ### Sass mixins


    There are no dedicated mixins for typography, but Bootstrap does use [Responsive Font Sizing (RFS)](https://getbootstrap.com/docs/5.3/getting-started/rfs/).









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    H1 = " h1 "
    H2 = " h2 "
    H3 = " h3 "
    H4 = " h4 "
    H5 = " h5 "
    H6 = " h6 "
    TEXT_MUTED = " text-muted "
    DISPlAY = " display "
    DISPlAY1 = " display1 "
    DISPlAY2 = " display2 "
    DISPlAY3 = " display3 "
    DISPlAY4 = " display4 "
    DISPlAY5 = " display5 "
    DISPlAY5 = " display6 "
    LEAD = " lead "
    BLOCKQUOTE = " blockquote "
    BLOCKQUOTE_FOOTER = " blockquote-footer "
    LIST_UNSTYLED = " list-unstyled "
    LIST_INLINE = " list-inline "
    LIST_INLINE_ITEM = " list-inline-item "
    TEXT_TRUNCATE = " text-truncate "


class IMAGES:
    """

    Images
    ======



    Documentation and examples for opting images into responsive behavior (so they never become wider than their parent) and add lightweight styles to them—all via classes.






     On this page


    **On this page**


    ---




    * [Responsive images](#responsive-images)
    * [Image thumbnails](#image-thumbnails)
    * [Aligning images](#aligning-images)
    * [Picture](#picture)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Responsive images
    -----------------


    Images in Bootstrap are made responsive with `.img-fluid`. This applies `max-width: 100%;` and `height: auto;` to the image so that it scales with the parent width.



    PlaceholderResponsive image

    html









    ```
    <img src="..." class="img-fluid" alt="...">
    ```

    Image thumbnails
    ----------------


    In addition to our [border-radius utilities](https://getbootstrap.com/docs/5.3/utilities/borders/), you can use `.img-thumbnail` to give an image a rounded 1px border appearance.



    A generic square placeholder image with a white border around it, making it resemble a photograph taken with an old instant camera200x200

    html









    ```
    <img src="..." class="img-thumbnail" alt="...">
    ```

    Aligning images
    ---------------


    Align images with the [helper float classes](https://getbootstrap.com/docs/5.3/utilities/float/) or [text alignment classes](https://getbootstrap.com/docs/5.3/utilities/text/#text-alignment). `block`-level images can be centered using [the `.mx-auto` margin utility class](https://getbootstrap.com/docs/5.3/utilities/spacing/#horizontal-centering).



    Placeholder200x200
    Placeholder200x200

    html









    ```
    <img src="..." class="rounded float-start" alt="...">
    <img src="..." class="rounded float-end" alt="...">
    ```


    Placeholder200x200

    html









    ```
    <img src="..." class="rounded mx-auto d-block" alt="...">
    ```



    Placeholder200x200


    html









    ```
    <div class="text-center">
     <img src="..." class="rounded" alt="...">
    </div>
    ```

    Picture
    -------


    If you are using the `<picture>` element to specify multiple `<source>` elements for a specific `<img>`, make sure to add the `.img-*` classes to the `<img>` and not to the `<picture>` tag.



    ```
    <picture>
     <source srcset="..." type="image/svg+xml">
     <img src="..." class="img-fluid img-thumbnail" alt="...">
    </picture>

    ```
    CSS
    ---


    ### Sass variables


    Variables are available for image thumbnails.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $thumbnail-padding: .25rem;
    $thumbnail-bg: var(--#{$prefix}body-bg);
    $thumbnail-border-width: var(--#{$prefix}border-width);
    $thumbnail-border-color: var(--#{$prefix}border-color);
    $thumbnail-border-radius: var(--#{$prefix}border-radius);
    $thumbnail-box-shadow: var(--#{$prefix}box-shadow-sm);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    IMAGE_FLUID = " image-fluid "
    IMAGE_THUMBNAIL = " img-thumbnail "
    ROUNDED = " rounded "
    FLOAT_START = " float-start "
    FLOAT_END = " float-end "
    TEXT_CENTER = " text-center "
    TEXT_START = " text-start "
    TEXT_END = " text-end "


class TABLES:
    """

    Tables
    ======



    Documentation and examples for opt-in styling of tables (given their prevalent use in JavaScript plugins) with Bootstrap.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Variants](#variants)
    * [Accented tables](#accented-tables)
            + [Striped rows](#striped-rows)
            + [Striped columns](#striped-columns)
            + [Hoverable rows](#hoverable-rows)
            + [Active tables](#active-tables)
    * [How do the variants and accented tables work?](#how-do-the-variants-and-accented-tables-work)
    * [Table borders](#table-borders)
            + [Bordered tables](#bordered-tables)
            + [Tables without borders](#tables-without-borders)
    * [Small tables](#small-tables)
    * [Table group dividers](#table-group-dividers)
    * [Vertical alignment](#vertical-alignment)
    * [Nesting](#nesting)
    * [How nesting works](#how-nesting-works)
    * [Anatomy](#anatomy)
            + [Table head](#table-head)
            + [Table foot](#table-foot)
            + [Captions](#captions)
    * [Responsive tables](#responsive-tables)
            + [Always responsive](#always-responsive)
            + [Breakpoint specific](#breakpoint-specific)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass loops](#sass-loops)
            + [Customizing](#customizing)






    Overview
    --------


    Due to the widespread use of `<table>` elements across third-party widgets like calendars and date pickers, Bootstrap’s tables are **opt-in**. Add the base class `.table` to any `<table>`, then extend with our optional modifier classes or custom styles. All table styles are not inherited in Bootstrap, meaning any nested tables can be styled independent from the parent.


    Using the most basic table markup, here’s how `.table`-based tables look in Bootstrap.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table">
     <thead>
     <tr>
     <th scope="col">#</th>
     <th scope="col">First</th>
     <th scope="col">Last</th>
     <th scope="col">Handle</th>
     </tr>
     </thead>
     <tbody>
     <tr>
     <th scope="row">1</th>
     <td>Mark</td>
     <td>Otto</td>
     <td>@mdo</td>
     </tr>
     <tr>
     <th scope="row">2</th>
     <td>Jacob</td>
     <td>Thornton</td>
     <td>@fat</td>
     </tr>
     <tr>
     <th scope="row">3</th>
     <td colspan="2">Larry the Bird</td>
     <td>@twitter</td>
     </tr>
     </tbody>
    </table>
    ```

    Variants
    --------


    Use contextual classes to color tables, table rows or individual cells.



    **Heads up!** Because of the more complicated CSS used to generate our table variants, they most likely won’t see color mode adaptive styling until v6.




    | Class | Heading | Heading |
    | --- | --- | --- |
    | Default | Cell | Cell |
    | Primary | Cell | Cell |
    | Secondary | Cell | Cell |
    | Success | Cell | Cell |
    | Danger | Cell | Cell |
    | Warning | Cell | Cell |
    | Info | Cell | Cell |
    | Light | Cell | Cell |
    | Dark | Cell | Cell |




    ```
    <!-- On tables -->
    <table class="table-primary">...</table>
    <table class="table-secondary">...</table>
    <table class="table-success">...</table>
    <table class="table-danger">...</table>
    <table class="table-warning">...</table>
    <table class="table-info">...</table>
    <table class="table-light">...</table>
    <table class="table-dark">...</table>

    <!-- On rows -->
    <tr class="table-primary">...</tr>
    <tr class="table-secondary">...</tr>
    <tr class="table-success">...</tr>
    <tr class="table-danger">...</tr>
    <tr class="table-warning">...</tr>
    <tr class="table-info">...</tr>
    <tr class="table-light">...</tr>
    <tr class="table-dark">...</tr>

    <!-- On cells (`td` or `th`) -->
    <tr>
     <td class="table-primary">...</td>
     <td class="table-secondary">...</td>
     <td class="table-success">...</td>
     <td class="table-danger">...</td>
     <td class="table-warning">...</td>
     <td class="table-info">...</td>
     <td class="table-light">...</td>
     <td class="table-dark">...</td>
    </tr>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Accented tables
    ---------------


    ### Striped rows


    Use `.table-striped` to add zebra-striping to any table row within the `<tbody>`.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-striped">
     ...
    </table>
    ```

    ### Striped columns


    Use `.table-striped-columns` to add zebra-striping to any table column.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-striped-columns">
     ...
    </table>
    ```

    These classes can also be added to table variants:





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-dark table-striped">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-dark table-striped-columns">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-success table-striped">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-success table-striped-columns">
     ...
    </table>
    ```

    ### Hoverable rows


    Add `.table-hover` to enable a hover state on table rows within a `<tbody>`.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-hover">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-dark table-hover">
     ...
    </table>
    ```

    These hoverable rows can also be combined with the striped rows variant:





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-striped table-hover">
     ...
    </table>
    ```

    ### Active tables


    Highlight a table row or cell by adding a `.table-active` class.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |




    ```
    <table class="table">
     <thead>
     ...
     </thead>
     <tbody>
     <tr class="table-active">
     ...
     </tr>
     <tr>
     ...
     </tr>
     <tr>
     <th scope="row">3</th>
     <td colspan="2" class="table-active">Larry the Bird</td>
     <td>@twitter</td>
     </tr>
     </tbody>
    </table>

    ```



    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |




    ```
    <table class="table table-dark">
     <thead>
     ...
     </thead>
     <tbody>
     <tr class="table-active">
     ...
     </tr>
     <tr>
     ...
     </tr>
     <tr>
     <th scope="row">3</th>
     <td colspan="2" class="table-active">Larry the Bird</td>
     <td>@twitter</td>
     </tr>
     </tbody>
    </table>

    ```
    How do the variants and accented tables work?
    ---------------------------------------------


    For the accented tables ([striped rows](#striped-rows), [striped columns](#striped-columns), [hoverable rows](#hoverable-rows), and [active tables](#active-tables)), we used some techniques to make these effects work for all our [table variants](#variants):


    * We start by setting the background of a table cell with the `--bs-table-bg` custom property. All table variants then set that custom property to colorize the table cells. This way, we don’t get into trouble if semi-transparent colors are used as table backgrounds.
    * Then we add an inset box shadow on the table cells with `box-shadow: inset 0 0 0 9999px var(--bs-table-bg-state, var(--bs-table-bg-type, var(--bs-table-accent-bg)));` to layer on top of any specified `background-color`. It uses custom cascade to override the `box-shadow`, regardless the CSS specificity. Because we use a huge spread and no blur, the color will be monotone. Since `--bs-table-accent-bg` is set to `transparent` by default, we don’t have a default box shadow.
    * When either `.table-striped`, `.table-striped-columns`, `.table-hover` or `.table-active` classes are added, either `--bs-table-bg-type` or `--bs-table-bg-state` (by default set to `initial`) are set to a semitransparent color (`--bs-table-striped-bg`, `--bs-table-active-bg` or `--bs-table-hover-bg`) to colorize the background and override default `--bs-table-accent-bg`.
    * For each table variant, we generate a `--bs-table-accent-bg` color with the highest contrast depending on that color. For example, the accent color for `.table-primary` is darker while `.table-dark` has a lighter accent color.
    * Text and border colors are generated the same way, and their colors are inherited by default.


    Behind the scenes it looks like this:




    [scss/mixins/\_table-variants.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_table-variants.scss)






    ```
    @mixin table-variant($state, $background) {
     .table-#{$state} {
     $color: color-contrast(opaque($body-bg, $background));
     $hover-bg: mix($color, $background, percentage($table-hover-bg-factor));
     $striped-bg: mix($color, $background, percentage($table-striped-bg-factor));
     $active-bg: mix($color, $background, percentage($table-active-bg-factor));
     $table-border-color: mix($color, $background, percentage($table-border-factor));

     --#{$prefix}table-color: #{$color};
     --#{$prefix}table-bg: #{$background};
     --#{$prefix}table-border-color: #{$table-border-color};
     --#{$prefix}table-striped-bg: #{$striped-bg};
     --#{$prefix}table-striped-color: #{color-contrast($striped-bg)};
     --#{$prefix}table-active-bg: #{$active-bg};
     --#{$prefix}table-active-color: #{color-contrast($active-bg)};
     --#{$prefix}table-hover-bg: #{$hover-bg};
     --#{$prefix}table-hover-color: #{color-contrast($hover-bg)};

     color: var(--#{$prefix}table-color);
     border-color: var(--#{$prefix}table-border-color);
     }
    }

    ```

    Table borders
    -------------


    ### Bordered tables


    Add `.table-bordered` for borders on all sides of the table and cells.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-bordered">
     ...
    </table>
    ```

    [Border color utilities](https://getbootstrap.com/docs/5.3/utilities/borders/#border-color) can be added to change colors:





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-bordered border-primary">
     ...
    </table>
    ```

    ### Tables without borders


    Add `.table-borderless` for a table without borders.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-borderless">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-dark table-borderless">
     ...
    </table>
    ```

    Small tables
    ------------


    Add `.table-sm` to make any `.table` more compact by cutting all cell `padding` in half.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-sm">
     ...
    </table>
    ```




    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    ```
    <table class="table table-dark table-sm">
     ...
    </table>
    ```

    Table group dividers
    --------------------


    Add a thicker border, darker between table groups—`<thead>`, `<tbody>`, and `<tfoot>`—with `.table-group-divider`. Customize the color by changing the `border-top-color` (which we don’t currently provide a utility class for at this time).





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |



    html









    ```
    <table class="table">
     <thead>
     <tr>
     <th scope="col">#</th>
     <th scope="col">First</th>
     <th scope="col">Last</th>
     <th scope="col">Handle</th>
     </tr>
     </thead>
     <tbody class="table-group-divider">
     <tr>
     <th scope="row">1</th>
     <td>Mark</td>
     <td>Otto</td>
     <td>@mdo</td>
     </tr>
     <tr>
     <th scope="row">2</th>
     <td>Jacob</td>
     <td>Thornton</td>
     <td>@fat</td>
     </tr>
     <tr>
     <th scope="row">3</th>
     <td colspan="2">Larry the Bird</td>
     <td>@twitter</td>
     </tr>
     </tbody>
    </table>
    ```

    Vertical alignment
    ------------------


    Table cells of `<thead>` are always vertical aligned to the bottom. Table cells in `<tbody>` inherit their alignment from `<table>` and are aligned to the top by default. Use the [vertical align](https://getbootstrap.com/docs/5.3/utilities/vertical-align/) classes to re-align where needed.






    | Heading 1 | Heading 2 | Heading 3 | Heading 4 |
    | --- | --- | --- | --- |
    | This cell inherits `vertical-align: middle;` from the table | This cell inherits `vertical-align: middle;` from the table | This cell inherits `vertical-align: middle;` from the table | This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells. |
    | This cell inherits `vertical-align: bottom;` from the table row | This cell inherits `vertical-align: bottom;` from the table row | This cell inherits `vertical-align: bottom;` from the table row | This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells. |
    | This cell inherits `vertical-align: middle;` from the table | This cell inherits `vertical-align: middle;` from the table | This cell is aligned to the top. | This here is some placeholder text, intended to take up quite a bit of vertical space, to demonstrate how the vertical alignment works in the preceding cells. |





    ```
    <div class="table-responsive">
     <table class="table align-middle">
     <thead>
     <tr>
     ...
     </tr>
     </thead>
     <tbody>
     <tr>
     ...
     </tr>
     <tr class="align-bottom">
     ...
     </tr>
     <tr>
     <td>...</td>
     <td>...</td>
     <td class="align-top">This cell is aligned to the top.</td>
     <td>...</td>
     </tr>
     </tbody>
     </table>
    </div>

    ```
    Nesting
    -------


    Border styles, active styles, and table variants are not inherited by nested tables.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    |

    | Header | Header | Header |
    | --- | --- | --- |
    | A | First | Last |
    | B | First | Last |
    | C | First | Last |

     |
    | 3 | Larry | the Bird | @twitter |




    ```
    <table class="table table-striped table-bordered">
     <thead>
     ...
     </thead>
     <tbody>
     ...
     <tr>
     <td colspan="4">
     <table class="table mb-0">
     ...
     </table>
     </td>
     </tr>
     ...
     </tbody>
    </table>

    ```
    How nesting works
    -----------------


    To prevent *any* styles from leaking to nested tables, we use the child combinator (`>`) selector in our CSS. Since we need to target all the `td`s and `th`s in the `thead`, `tbody`, and `tfoot`, our selector would look pretty long without it. As such, we use the rather odd looking `.table > :not(caption) > * > *` selector to target all `td`s and `th`s of the `.table`, but none of any potential nested tables.


    Note that if you add `<tr>`s as direct children of a table, those `<tr>` will be wrapped in a `<tbody>` by default, thus making our selectors work as intended.


    Anatomy
    -------


    ### Table head


    Similar to tables and dark tables, use the modifier classes `.table-light` or `.table-dark` to make `<thead>`s appear light or dark gray.





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry | the Bird | @twitter |




    ```
    <table class="table">
     <thead class="table-light">
     ...
     </thead>
     <tbody>
     ...
     </tbody>
    </table>

    ```



    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry | the Bird | @twitter |




    ```
    <table class="table">
     <thead class="table-dark">
     ...
     </thead>
     <tbody>
     ...
     </tbody>
    </table>

    ```
    ### Table foot





    | # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry | the Bird | @twitter |
    | Footer | Footer | Footer | Footer |




    ```
    <table class="table">
     <thead>
     ...
     </thead>
     <tbody>
     ...
     </tbody>
     <tfoot>
     ...
     </tfoot>
    </table>

    ```
    ### Captions


    A `<caption>` functions like a heading for a table. It helps users with screen readers to find a table and understand what it’s about and decide if they want to read it.





    List of users| # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry the Bird | @twitter |




    ```
    <table class="table table-sm">
     <caption>List of users</caption>
     <thead>
     ...
     </thead>
     <tbody>
     ...
     </tbody>
    </table>

    ```
    You can also put the `<caption>` on the top of the table with `.caption-top`.





    List of users| # | First | Last | Handle |
    | --- | --- | --- | --- |
    | 1 | Mark | Otto | @mdo |
    | 2 | Jacob | Thornton | @fat |
    | 3 | Larry | the Bird | @twitter |



    html









    ```
    <table class="table caption-top">
     <caption>List of users</caption>
     <thead>
     <tr>
     <th scope="col">#</th>
     <th scope="col">First</th>
     <th scope="col">Last</th>
     <th scope="col">Handle</th>
     </tr>
     </thead>
     <tbody>
     <tr>
     <th scope="row">1</th>
     <td>Mark</td>
     <td>Otto</td>
     <td>@mdo</td>
     </tr>
     <tr>
     <th scope="row">2</th>
     <td>Jacob</td>
     <td>Thornton</td>
     <td>@fat</td>
     </tr>
     <tr>
     <th scope="row">3</th>
     <td>Larry</td>
     <td>the Bird</td>
     <td>@twitter</td>
     </tr>
     </tbody>
    </table>
    ```

    Responsive tables
    -----------------


    Responsive tables allow tables to be scrolled horizontally with ease. Make any table responsive across all viewports by wrapping a `.table` with `.table-responsive`. Or, pick a maximum breakpoint with which to have a responsive table up to by using `.table-responsive{-sm|-md|-lg|-xl|-xxl}`.



    ##### Vertical clipping/truncation


    Responsive tables make use of `overflow-y: hidden`, which clips off any content that goes beyond the bottom or top edges of the table. In particular, this can clip off dropdown menus and other third-party widgets.



    ### Always responsive


    Across every breakpoint, use `.table-responsive` for horizontally scrolling tables.






    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |





    ```
    <div class="table-responsive">
     <table class="table">
     ...
     </table>
    </div>

    ```
    ### Breakpoint specific


    Use `.table-responsive{-sm|-md|-lg|-xl|-xxl}` as needed to create responsive tables up to a particular breakpoint. From that breakpoint and up, the table will behave normally and not scroll horizontally.


    **These tables may appear broken until their responsive styles apply at specific viewport widths.**






    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |








    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |








    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |








    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |








    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |








    | # | Heading | Heading | Heading | Heading | Heading | Heading | Heading | Heading |
    | --- | --- | --- | --- | --- | --- | --- | --- | --- |
    | 1 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 2 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |
    | 3 | Cell | Cell | Cell | Cell | Cell | Cell | Cell | Cell |





    ```
    <div class="table-responsive">
     <table class="table">
     ...
     </table>
    </div>

    <div class="table-responsive-sm">
     <table class="table">
     ...
     </table>
    </div>

    <div class="table-responsive-md">
     <table class="table">
     ...
     </table>
    </div>

    <div class="table-responsive-lg">
     <table class="table">
     ...
     </table>
    </div>

    <div class="table-responsive-xl">
     <table class="table">
     ...
     </table>
    </div>

    <div class="table-responsive-xxl">
     <table class="table">
     ...
     </table>
    </div>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $table-cell-padding-y: .5rem;
    $table-cell-padding-x: .5rem;
    $table-cell-padding-y-sm: .25rem;
    $table-cell-padding-x-sm: .25rem;

    $table-cell-vertical-align: top;

    $table-color: var(--#{$prefix}body-color);
    $table-bg: var(--#{$prefix}body-bg);
    $table-accent-bg: transparent;

    $table-th-font-weight: null;

    $table-striped-color: $table-color;
    $table-striped-bg-factor: .05;
    $table-striped-bg: rgba($black, $table-striped-bg-factor);

    $table-active-color: $table-color;
    $table-active-bg-factor: .1;
    $table-active-bg: rgba($black, $table-active-bg-factor);

    $table-hover-color: $table-color;
    $table-hover-bg-factor: .075;
    $table-hover-bg: rgba($black, $table-hover-bg-factor);

    $table-border-factor: .1;
    $table-border-width: var(--#{$prefix}border-width);
    $table-border-color: var(--#{$prefix}border-color);

    $table-striped-order: odd;
    $table-striped-columns-order: even;

    $table-group-separator-color: currentcolor;

    $table-caption-color: var(--#{$prefix}secondary-color);

    $table-bg-scale: -80%;

    ```

    ### Sass loops




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $table-variants: (
     "primary": shift-color($primary, $table-bg-scale),
     "secondary": shift-color($secondary, $table-bg-scale),
     "success": shift-color($success, $table-bg-scale),
     "info": shift-color($info, $table-bg-scale),
     "warning": shift-color($warning, $table-bg-scale),
     "danger": shift-color($danger, $table-bg-scale),
     "light": $light,
     "dark": $dark,
    );

    ```

    ### Customizing


    * The factor variables (`$table-striped-bg-factor`, `$table-active-bg-factor` & `$table-hover-bg-factor`) are used to determine the contrast in table variants.
    * Apart from the light & dark table variants, theme colors are lightened by the `$table-bg-scale` variable.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    TABLE = " table "
    TABLE_DARK = " table-dark "
    TABLE_PRIMARY = " table-primary "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "
    TABLE_ = " table- "


class FIGURES:
    """

    Figures
    =======



    Documentation and examples for displaying related images and text with the figure component in Bootstrap.






     On this page


    **On this page**


    ---




    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Anytime you need to display a piece of content—like an image with an optional caption, consider using a `<figure>`.


    Use the included `.figure`, `.figure-img` and `.figure-caption` classes to provide some baseline styles for the HTML5 `<figure>` and `<figcaption>` elements. Images in figures have no explicit size, so be sure to add the `.img-fluid` class to your `<img>` to make it responsive.




    Placeholder400x300
    A caption for the above image.


    html









    ```
    <figure class="figure">
     <img src="..." class="figure-img img-fluid rounded" alt="...">
     <figcaption class="figure-caption">A caption for the above image.</figcaption>
    </figure>
    ```

    Aligning the figure’s caption is easy with our [text utilities](https://getbootstrap.com/docs/5.3/utilities/text/#text-alignment).




    Placeholder400x300
    A caption for the above image.


    html









    ```
    <figure class="figure">
     <img src="..." class="figure-img img-fluid rounded" alt="...">
     <figcaption class="figure-caption text-end">A caption for the above image.</figcaption>
    </figure>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $figure-caption-font-size: $small-font-size;
    $figure-caption-color: var(--#{$prefix}secondary-color);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FORMS:
    """

    Forms
    =====



    Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Disabled forms](#disabled-forms)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Sass variables](#sass-variables)








    [**Form control**
    Style textual inputs and textareas with support for multiple states.](../form-control/)


    [**Select**
    Improve browser default select elements with a custom initial appearance.](../select/)


    [**Checks & radios**
    Use our custom radio buttons and checkboxes in forms for selecting input options.](../checks-radios/)


    [**Range**
    Replace browser default range inputs with our custom version.](../range/)


    [**Input group**
    Attach labels and buttons to your inputs for increased semantic value.](../input-group/)


    [**Floating labels**
    Create beautifully simple form labels that float over your input fields.](../floating-labels/)


    [**Layout**
    Create inline, horizontal, or complex grid-based layouts with your forms.](../layout/)


    [**Validation**
    Validate your forms with custom or native validation behaviors and styles.](../validation/)


    Overview
    --------


    Bootstrap’s form controls expand on [our Rebooted form styles](https://getbootstrap.com/docs/5.3/content/reboot/#forms) with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.


    Be sure to use an appropriate `type` attribute on all inputs (e.g., `email` for email address or `number` for numerical information) to take advantage of newer input controls like email verification, number selection, and more.


    Here’s a quick example to demonstrate Bootstrap’s form styles. Keep reading for documentation on required classes, form layout, and more.





    Email address

    We'll never share your email with anyone else.


    Password




    Check me out

    Submit


    html









    ```
    <form>
     <div class="mb-3">
     <label for="exampleInputEmail1" class="form-label">Email address</label>
     <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
     <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
     </div>
     <div class="mb-3">
     <label for="exampleInputPassword1" class="form-label">Password</label>
     <input type="password" class="form-control" id="exampleInputPassword1">
     </div>
     <div class="mb-3 form-check">
     <input type="checkbox" class="form-check-input" id="exampleCheck1">
     <label class="form-check-label" for="exampleCheck1">Check me out</label>
     </div>
     <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    ```

    Disabled forms
    --------------


    Add the `disabled` boolean attribute on an input to prevent user interactions and make it appear lighter.



    ```
    <input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>

    ```
    Add the `disabled` attribute to a `<fieldset>` to disable all the controls within. Browsers treat all native form controls (`<input>`, `<select>`, and `<button>` elements) inside a `<fieldset disabled>` as disabled, preventing both keyboard and mouse interactions on them.


    However, if your form also includes custom button-like elements such as `<a class="btn btn-*">...</a>`, these will only be given a style of `pointer-events: none`, meaning they are still focusable and operable using the keyboard. In this case, you must manually modify these controls by adding `tabindex="-1"` to prevent them from receiving focus and `aria-disabled="disabled"` to signal their state to assistive technologies.





    Disabled fieldset example

    Disabled input



    Disabled select menu

    Disabled select






     Can't check this



    Submit



    html









    ```
    <form>
     <fieldset disabled>
     <legend>Disabled fieldset example</legend>
     <div class="mb-3">
     <label for="disabledTextInput" class="form-label">Disabled input</label>
     <input type="text" id="disabledTextInput" class="form-control" placeholder="Disabled input">
     </div>
     <div class="mb-3">
     <label for="disabledSelect" class="form-label">Disabled select menu</label>
     <select id="disabledSelect" class="form-select">
     <option>Disabled select</option>
     </select>
     </div>
     <div class="mb-3">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="disabledFieldsetCheck" disabled>
     <label class="form-check-label" for="disabledFieldsetCheck">
     Can't check this
     </label>
     </div>
     </div>
     <button type="submit" class="btn btn-primary">Submit</button>
     </fieldset>
    </form>
    ```

    Accessibility
    -------------


    Ensure that all form controls have an appropriate accessible name so that their purpose can be conveyed to users of assistive technologies. The simplest way to achieve this is to use a `<label>` element, or—in the case of buttons—to include sufficiently descriptive text as part of the `<button>...</button>` content.


    For situations where it’s not possible to include a visible `<label>` or appropriate text content, there are alternative ways of still providing an accessible name, such as:


    * `<label>` elements hidden using the `.visually-hidden` class
    * Pointing to an existing element that can act as a label using `aria-labelledby`
    * Providing a `title` attribute
    * Explicitly setting the accessible name on an element using `aria-label`


    If none of these are present, assistive technologies may resort to using the `placeholder` attribute as a fallback for the accessible name on `<input>` and `<textarea>` elements. The examples in this section provide a few suggested, case-specific approaches.


    While using visually hidden content (`.visually-hidden`, `aria-label`, and even `placeholder` content, which disappears once a form field has content) will benefit assistive technology users, a lack of visible label text may still be problematic for certain users. Some form of visible label is generally the best approach, both for accessibility and usability.


    CSS
    ---


    Many form variables are set at a general level to be re-used and extended by individual form components. You’ll see these most often as `$input-btn-*` and `$input-*` variables.


    ### Sass variables


    `$input-btn-*` variables are shared global variables between our [buttons](https://getbootstrap.com/docs/5.3/components/buttons/) and our form components. You’ll find these frequently reassigned as values to other component-specific variables.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $input-btn-padding-y: .375rem;
    $input-btn-padding-x: .75rem;
    $input-btn-font-family: null;
    $input-btn-font-size: $font-size-base;
    $input-btn-line-height: $line-height-base;

    $input-btn-focus-width: $focus-ring-width;
    $input-btn-focus-color-opacity: $focus-ring-opacity;
    $input-btn-focus-color: $focus-ring-color;
    $input-btn-focus-blur: $focus-ring-blur;
    $input-btn-focus-box-shadow: $focus-ring-box-shadow;

    $input-btn-padding-y-sm: .25rem;
    $input-btn-padding-x-sm: .5rem;
    $input-btn-font-size-sm: $font-size-sm;

    $input-btn-padding-y-lg: .5rem;
    $input-btn-padding-x-lg: 1rem;
    $input-btn-font-size-lg: $font-size-lg;

    $input-btn-border-width: var(--#{$prefix}border-width);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FORM_CONTROLS:
    """

    Form controls
    =============



    Give textual form controls like `<input>`s and `<textarea>`s an upgrade with custom styles, sizing, focus states, and more.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Sizing](#sizing)
    * [Form text](#form-text)
    * [Disabled](#disabled)
    * [Readonly](#readonly)
    * [Readonly plain text](#readonly-plain-text)
    * [File input](#file-input)
    * [Color](#color)
    * [Datalists](#datalists)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Example
    -------


    Form controls are styled with a mix of Sass and CSS variables, allowing them to adapt to color modes and support any customization method.




    Email address



    Example textarea



    html









    ```
    <div class="mb-3">
     <label for="exampleFormControlInput1" class="form-label">Email address</label>
     <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
    </div>
    <div class="mb-3">
     <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label>
     <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
    </div>
    ```

    Sizing
    ------


    Set heights using classes like `.form-control-lg` and `.form-control-sm`.







    html









    ```
    <input class="form-control form-control-lg" type="text" placeholder=".form-control-lg" aria-label=".form-control-lg example">
    <input class="form-control" type="text" placeholder="Default input" aria-label="default input example">
    <input class="form-control form-control-sm" type="text" placeholder=".form-control-sm" aria-label=".form-control-sm example">
    ```

    Form text
    ---------


    Block-level or inline-level form text can be created using `.form-text`.



    Form text should be explicitly associated with the form control it relates to using the `aria-describedby` attribute. This will ensure that assistive technologies—such as screen readers—will announce this form text when the user focuses or enters the control.

    Form text below inputs can be styled with `.form-text`. If a block-level element will be used, a top margin is added for easy spacing from the inputs above.



    Password


     Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.


    html









    ```
    <label for="inputPassword5" class="form-label">Password</label>
    <input type="password" id="inputPassword5" class="form-control" aria-describedby="passwordHelpBlock">
    <div id="passwordHelpBlock" class="form-text">
     Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
    </div>
    ```

    Inline text can use any typical inline HTML element (be it a `<span>`, `<small>`, or something else) with nothing more than the `.form-text` class.





    Password






     Must be 8-20 characters long.




    html









    ```
    <div class="row g-3 align-items-center">
     <div class="col-auto">
     <label for="inputPassword6" class="col-form-label">Password</label>
     </div>
     <div class="col-auto">
     <input type="password" id="inputPassword6" class="form-control" aria-describedby="passwordHelpInline">
     </div>
     <div class="col-auto">
     <span id="passwordHelpInline" class="form-text">
     Must be 8-20 characters long.
     </span>
     </div>
    </div>
    ```

    Disabled
    --------


    Add the `disabled` boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.






    html









    ```
    <input class="form-control" type="text" placeholder="Disabled input" aria-label="Disabled input example" disabled>
    <input class="form-control" type="text" value="Disabled readonly input" aria-label="Disabled input example" disabled readonly>
    ```

    Readonly
    --------


    Add the `readonly` boolean attribute on an input to prevent modification of the input’s value. `readonly` inputs can still be focused and selected, while `disabled` inputs cannot.





    html









    ```
    <input class="form-control" type="text" value="Readonly input here..." aria-label="readonly input example" readonly>
    ```

    Readonly plain text
    -------------------


    If you want to have `<input readonly>` elements in your form styled as plain text, replace `.form-control` with `.form-control-plaintext` to remove the default form field styling and preserve the correct `margin` and `padding`.




    Email





    Password





    html









    ```
     <div class="mb-3 row">
     <label for="staticEmail" class="col-sm-2 col-form-label">Email</label>
     <div class="col-sm-10">
     <input type="text" readonly class="form-control-plaintext" id="staticEmail" value="email@example.com">
     </div>
     </div>
     <div class="mb-3 row">
     <label for="inputPassword" class="col-sm-2 col-form-label">Password</label>
     <div class="col-sm-10">
     <input type="password" class="form-control" id="inputPassword">
     </div>
     </div>
    ```




    Email



    Password



    Confirm identity



    html









    ```
    <form class="row g-3">
     <div class="col-auto">
     <label for="staticEmail2" class="visually-hidden">Email</label>
     <input type="text" readonly class="form-control-plaintext" id="staticEmail2" value="email@example.com">
     </div>
     <div class="col-auto">
     <label for="inputPassword2" class="visually-hidden">Password</label>
     <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
     </div>
     <div class="col-auto">
     <button type="submit" class="btn btn-primary mb-3">Confirm identity</button>
     </div>
    </form>
    ```

    File input
    ----------




    Default file input example



    Multiple files input example



    Disabled file input example



    Small file input example



    Large file input example



    html









    ```
    <div class="mb-3">
     <label for="formFile" class="form-label">Default file input example</label>
     <input class="form-control" type="file" id="formFile">
    </div>
    <div class="mb-3">
     <label for="formFileMultiple" class="form-label">Multiple files input example</label>
     <input class="form-control" type="file" id="formFileMultiple" multiple>
    </div>
    <div class="mb-3">
     <label for="formFileDisabled" class="form-label">Disabled file input example</label>
     <input class="form-control" type="file" id="formFileDisabled" disabled>
    </div>
    <div class="mb-3">
     <label for="formFileSm" class="form-label">Small file input example</label>
     <input class="form-control form-control-sm" id="formFileSm" type="file">
    </div>
    <div>
     <label for="formFileLg" class="form-label">Large file input example</label>
     <input class="form-control form-control-lg" id="formFileLg" type="file">
    </div>
    ```

    Color
    -----


    Set the `type="color"` and add `.form-control-color` to the `<input>`. We use the modifier class to set fixed `height`s and override some inconsistencies between browsers.



    Color picker


    html









    ```
    <label for="exampleColorInput" class="form-label">Color picker</label>
    <input type="color" class="form-control form-control-color" id="exampleColorInput" value="#563d7c" title="Choose your color">
    ```

    Datalists
    ---------


    Datalists allow you to create a group of `<option>`s that can be accessed (and autocompleted) from within an `<input>`. These are similar to `<select>` elements, but come with more menu styling limitations and differences. While most browsers and operating systems include some support for `<datalist>` elements, their styling is inconsistent at best.


    Learn more about [support for datalist elements](https://caniuse.com/datalist).



    Datalist example









    html









    ```
    <label for="exampleDataList" class="form-label">Datalist example</label>
    <input class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Type to search...">
    <datalist id="datalistOptions">
     <option value="San Francisco">
     <option value="New York">
     <option value="Seattle">
     <option value="Los Angeles">
     <option value="Chicago">
    </datalist>
    ```

    CSS
    ---


    ### Sass variables


    `$input-*` are shared across most of our form controls (and not buttons).




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $input-padding-y: $input-btn-padding-y;
    $input-padding-x: $input-btn-padding-x;
    $input-font-family: $input-btn-font-family;
    $input-font-size: $input-btn-font-size;
    $input-font-weight: $font-weight-base;
    $input-line-height: $input-btn-line-height;

    $input-padding-y-sm: $input-btn-padding-y-sm;
    $input-padding-x-sm: $input-btn-padding-x-sm;
    $input-font-size-sm: $input-btn-font-size-sm;

    $input-padding-y-lg: $input-btn-padding-y-lg;
    $input-padding-x-lg: $input-btn-padding-x-lg;
    $input-font-size-lg: $input-btn-font-size-lg;

    $input-bg: var(--#{$prefix}body-bg);
    $input-disabled-color: null;
    $input-disabled-bg: var(--#{$prefix}secondary-bg);
    $input-disabled-border-color: null;

    $input-color: var(--#{$prefix}body-color);
    $input-border-color: var(--#{$prefix}border-color);
    $input-border-width: $input-btn-border-width;
    $input-box-shadow: $box-shadow-inset;

    $input-border-radius: var(--#{$prefix}border-radius);
    $input-border-radius-sm: var(--#{$prefix}border-radius-sm);
    $input-border-radius-lg: var(--#{$prefix}border-radius-lg);

    $input-focus-bg: $input-bg;
    $input-focus-border-color: tint-color($component-active-bg, 50%);
    $input-focus-color: $input-color;
    $input-focus-width: $input-btn-focus-width;
    $input-focus-box-shadow: $input-btn-focus-box-shadow;

    $input-placeholder-color: var(--#{$prefix}secondary-color);
    $input-plaintext-color: var(--#{$prefix}body-color);

    $input-height-border: calc(#{$input-border-width} \* 2); // stylelint-disable-line function-disallowed-list

    $input-height-inner: add($input-line-height \* 1em, $input-padding-y \* 2);
    $input-height-inner-half: add($input-line-height \* .5em, $input-padding-y);
    $input-height-inner-quarter: add($input-line-height \* .25em, $input-padding-y \* .5);

    $input-height: add($input-line-height \* 1em, add($input-padding-y \* 2, $input-height-border, false));
    $input-height-sm: add($input-line-height \* 1em, add($input-padding-y-sm \* 2, $input-height-border, false));
    $input-height-lg: add($input-line-height \* 1em, add($input-padding-y-lg \* 2, $input-height-border, false));

    $input-transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    $form-color-width: 3rem;

    ```

    `$form-label-*` and `$form-text-*` are for our `<label>`s and `.form-text` component.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-label-margin-bottom: .5rem;
    $form-label-font-size: null;
    $form-label-font-style: null;
    $form-label-font-weight: null;
    $form-label-color: null;

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-text-margin-top: .25rem;
    $form-text-font-size: $small-font-size;
    $form-text-font-style: null;
    $form-text-font-weight: null;
    $form-text-color: var(--#{$prefix}secondary-color);

    ```

    `$form-file-*` are for file input.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-file-button-color: $input-color;
    $form-file-button-bg: var(--#{$prefix}tertiary-bg);
    $form-file-button-hover-bg: var(--#{$prefix}secondary-bg);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SELECT:
    """

    Select
    ======



    Customize the native `<select>`s with custom CSS that changes the element’s initial appearance.






     On this page


    **On this page**


    ---




    * [Default](#default)
    * [Sizing](#sizing)
    * [Disabled](#disabled)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Default
    -------


    Custom `<select>` menus need only a custom class, `.form-select` to trigger the custom styles. Custom styles are limited to the `<select>`’s initial appearance and cannot modify the `<option>`s due to browser limitations.




    Open this select menu
    One
    Two
    Three


    html









    ```
    <select class="form-select" aria-label="Default select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>
    ```

    Sizing
    ------


    You may also choose from small and large custom selects to match our similarly sized text inputs.




    Open this select menu
    One
    Two
    Three


    Open this select menu
    One
    Two
    Three


    html









    ```
    <select class="form-select form-select-lg mb-3" aria-label="Large select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>

    <select class="form-select form-select-sm" aria-label="Small select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>
    ```

    The `multiple` attribute is also supported:




    Open this select menu
    One
    Two
    Three


    html









    ```
    <select class="form-select" multiple aria-label="Multiple select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>
    ```

    As is the `size` attribute:




    Open this select menu
    One
    Two
    Three


    html









    ```
    <select class="form-select" size="3" aria-label="Size 3 select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>
    ```

    Disabled
    --------


    Add the `disabled` boolean attribute on a select to give it a grayed out appearance and remove pointer events.




    Open this select menu
    One
    Two
    Three


    html









    ```
    <select class="form-select" aria-label="Disabled select example" disabled>
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
    </select>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-select-padding-y: $input-padding-y;
    $form-select-padding-x: $input-padding-x;
    $form-select-font-family: $input-font-family;
    $form-select-font-size: $input-font-size;
    $form-select-indicator-padding: $form-select-padding-x \* 3; // Extra padding for background-image
    $form-select-font-weight: $input-font-weight;
    $form-select-line-height: $input-line-height;
    $form-select-color: $input-color;
    $form-select-bg: $input-bg;
    $form-select-disabled-color: null;
    $form-select-disabled-bg: $input-disabled-bg;
    $form-select-disabled-border-color: $input-disabled-border-color;
    $form-select-bg-position: right $form-select-padding-x center;
    $form-select-bg-size: 16px 12px; // In pixels because image dimensions
    $form-select-indicator-color: $gray-800;
    $form-select-indicator: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill='none' stroke='#{$form-select-indicator-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/></svg>");

    $form-select-feedback-icon-padding-end: $form-select-padding-x \* 2.5 + $form-select-indicator-padding;
    $form-select-feedback-icon-position: center right $form-select-indicator-padding;
    $form-select-feedback-icon-size: $input-height-inner-half $input-height-inner-half;

    $form-select-border-width: $input-border-width;
    $form-select-border-color: $input-border-color;
    $form-select-border-radius: $input-border-radius;
    $form-select-box-shadow: $box-shadow-inset;

    $form-select-focus-border-color: $input-focus-border-color;
    $form-select-focus-width: $input-focus-width;
    $form-select-focus-box-shadow: 0 0 0 $form-select-focus-width $input-btn-focus-color;

    $form-select-padding-y-sm: $input-padding-y-sm;
    $form-select-padding-x-sm: $input-padding-x-sm;
    $form-select-font-size-sm: $input-font-size-sm;
    $form-select-border-radius-sm: $input-border-radius-sm;

    $form-select-padding-y-lg: $input-padding-y-lg;
    $form-select-padding-x-lg: $input-padding-x-lg;
    $form-select-font-size-lg: $input-font-size-lg;
    $form-select-border-radius-lg: $input-border-radius-lg;

    $form-select-transition: $input-transition;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CHECKS_AND_RADIOS:
    """

    Checks and radios
    =================



    Create consistent cross-browser and cross-device checkboxes and radios with our completely rewritten checks component.






     On this page


    **On this page**


    ---




    * [Approach](#approach)
    * [Checks](#checks)
            + [Indeterminate](#indeterminate)
            + [Disabled](#disabled)
    * [Radios](#radios)
            + [Disabled](#disabled-1)
    * [Switches](#switches)
    * [Default (stacked)](#default-stacked)
    * [Inline](#inline)
    * [Reverse](#reverse)
    * [Without labels](#without-labels)
    * [Toggle buttons](#toggle-buttons)
            + [Checkbox toggle buttons](#checkbox-toggle-buttons)
            + [Radio toggle buttons](#radio-toggle-buttons)
            + [Outlined styles](#outlined-styles)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Approach
    --------


    Browser default checkboxes and radios are replaced with the help of `.form-check`, a series of classes for both input types that improves the layout and behavior of their HTML elements, that provide greater customization and cross browser consistency. Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many.


    Structurally, our `<input>`s and `<label>`s are sibling elements as opposed to an `<input>` within a `<label>`. This is slightly more verbose as you must specify `id` and `for` attributes to relate the `<input>` and `<label>`. We use the sibling selector (`~`) for all our `<input>` states, like `:checked` or `:disabled`. When combined with the `.form-check-label` class, we can easily style the text for each item based on the `<input>`’s state.


    Our checks use custom Bootstrap icons to indicate checked or indeterminate states.


    Checks
    ------






     Default checkbox





     Checked checkbox



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
     <label class="form-check-label" for="flexCheckDefault">
     Default checkbox
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" checked>
     <label class="form-check-label" for="flexCheckChecked">
     Checked checkbox
     </label>
    </div>
    ```

    ### Indeterminate


    Checkboxes can utilize the `:indeterminate` pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it).






     Indeterminate checkbox



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckIndeterminate">
     <label class="form-check-label" for="flexCheckIndeterminate">
     Indeterminate checkbox
     </label>
    </div>
    ```

    ### Disabled


    Add the `disabled` attribute and the associated `<label>`s are automatically styled to match with a lighter color to help indicate the input’s state.






     Disabled indeterminate checkbox





     Disabled checkbox





     Disabled checked checkbox



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckIndeterminateDisabled" disabled>
     <label class="form-check-label" for="flexCheckIndeterminateDisabled">
     Disabled indeterminate checkbox
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckDisabled" disabled>
     <label class="form-check-label" for="flexCheckDisabled">
     Disabled checkbox
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="flexCheckCheckedDisabled" checked disabled>
     <label class="form-check-label" for="flexCheckCheckedDisabled">
     Disabled checked checkbox
     </label>
    </div>
    ```

    Radios
    ------






     Default radio





     Default checked radio



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
     <label class="form-check-label" for="flexRadioDefault1">
     Default radio
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
     <label class="form-check-label" for="flexRadioDefault2">
     Default checked radio
     </label>
    </div>
    ```

    ### Disabled


    Add the `disabled` attribute and the associated `<label>`s are automatically styled to match with a lighter color to help indicate the input’s state.






     Disabled radio





     Disabled checked radio



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="radio" name="flexRadioDisabled" id="flexRadioDisabled" disabled>
     <label class="form-check-label" for="flexRadioDisabled">
     Disabled radio
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="radio" name="flexRadioDisabled" id="flexRadioCheckedDisabled" checked disabled>
     <label class="form-check-label" for="flexRadioCheckedDisabled">
     Disabled checked radio
     </label>
    </div>
    ```

    Switches
    --------


    A switch has the markup of a custom checkbox but uses the `.form-switch` class to render a toggle switch. Consider using `role="switch"` to more accurately convey the nature of the control to assistive technologies that support this role. In older assistive technologies, it will simply be announced as a regular checkbox as a fallback. Switches also support the `disabled` attribute.





    Default switch checkbox input



    Checked switch checkbox input



    Disabled switch checkbox input



    Disabled checked switch checkbox input


    html









    ```
    <div class="form-check form-switch">
     <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
     <label class="form-check-label" for="flexSwitchCheckDefault">Default switch checkbox input</label>
    </div>
    <div class="form-check form-switch">
     <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" checked>
     <label class="form-check-label" for="flexSwitchCheckChecked">Checked switch checkbox input</label>
    </div>
    <div class="form-check form-switch">
     <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDisabled" disabled>
     <label class="form-check-label" for="flexSwitchCheckDisabled">Disabled switch checkbox input</label>
    </div>
    <div class="form-check form-switch">
     <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckCheckedDisabled" checked disabled>
     <label class="form-check-label" for="flexSwitchCheckCheckedDisabled">Disabled checked switch checkbox input</label>
    </div>
    ```

    Default (stacked)
    -----------------


    By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with `.form-check`.






     Default checkbox





     Disabled checkbox



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="defaultCheck1">
     <label class="form-check-label" for="defaultCheck1">
     Default checkbox
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="defaultCheck2" disabled>
     <label class="form-check-label" for="defaultCheck2">
     Disabled checkbox
     </label>
    </div>
    ```





     Default radio





     Second default radio





     Disabled radio



    html









    ```
    <div class="form-check">
     <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" checked>
     <label class="form-check-label" for="exampleRadios1">
     Default radio
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
     <label class="form-check-label" for="exampleRadios2">
     Second default radio
     </label>
    </div>
    <div class="form-check">
     <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3" disabled>
     <label class="form-check-label" for="exampleRadios3">
     Disabled radio
     </label>
    </div>
    ```

    Inline
    ------


    Group checkboxes or radios on the same horizontal row by adding `.form-check-inline` to any `.form-check`.





    1



    2



    3 (disabled)


    html









    ```
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1">
     <label class="form-check-label" for="inlineCheckbox1">1</label>
    </div>
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2">
     <label class="form-check-label" for="inlineCheckbox2">2</label>
    </div>
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="option3" disabled>
     <label class="form-check-label" for="inlineCheckbox3">3 (disabled)</label>
    </div>
    ```




    1



    2



    3 (disabled)


    html









    ```
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1">
     <label class="form-check-label" for="inlineRadio1">1</label>
    </div>
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2">
     <label class="form-check-label" for="inlineRadio2">2</label>
    </div>
    <div class="form-check form-check-inline">
     <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio3" value="option3" disabled>
     <label class="form-check-label" for="inlineRadio3">3 (disabled)</label>
    </div>
    ```

    Reverse
    -------


    Put your checkboxes, radios, and switches on the opposite side with the `.form-check-reverse` modifier class.






     Reverse checkbox





     Disabled reverse checkbox




    Reverse switch checkbox input


    html









    ```
    <div class="form-check form-check-reverse">
     <input class="form-check-input" type="checkbox" value="" id="reverseCheck1">
     <label class="form-check-label" for="reverseCheck1">
     Reverse checkbox
     </label>
    </div>
    <div class="form-check form-check-reverse">
     <input class="form-check-input" type="checkbox" value="" id="reverseCheck2" disabled>
     <label class="form-check-label" for="reverseCheck2">
     Disabled reverse checkbox
     </label>
    </div>

    <div class="form-check form-switch form-check-reverse">
     <input class="form-check-input" type="checkbox" id="flexSwitchCheckReverse">
     <label class="form-check-label" for="flexSwitchCheckReverse">Reverse switch checkbox input</label>
    </div>
    ```

    Without labels
    --------------


    Omit the wrapping `.form-check` for checkboxes and radios that have no label text. Remember to still provide some form of accessible name for assistive technologies (for instance, using `aria-label`). See the [forms overview accessibility](https://getbootstrap.com/docs/5.3/forms/overview/#accessibility) section for details.










    html









    ```
    <div>
     <input class="form-check-input" type="checkbox" id="checkboxNoLabel" value="" aria-label="...">
    </div>

    <div>
     <input class="form-check-input" type="radio" name="radioNoLabel" id="radioNoLabel1" value="" aria-label="...">
    </div>
    ```

    Toggle buttons
    --------------


    Create button-like checkboxes and radio buttons by using `.btn` styles rather than `.form-check-label` on the `<label>` elements. These toggle buttons can further be grouped in a [button group](https://getbootstrap.com/docs/5.3/components/button-group/) if needed.


    ### Checkbox toggle buttons




    Single toggle

    Checked

    Disabled

    html









    ```
    <input type="checkbox" class="btn-check" id="btn-check" autocomplete="off">
    <label class="btn btn-primary" for="btn-check">Single toggle</label>

    <input type="checkbox" class="btn-check" id="btn-check-2" checked autocomplete="off">
    <label class="btn btn-primary" for="btn-check-2">Checked</label>

    <input type="checkbox" class="btn-check" id="btn-check-3" autocomplete="off" disabled>
    <label class="btn btn-primary" for="btn-check-3">Disabled</label>
    ```



    Single toggle

    Checked

    Disabled

    html









    ```
    <input type="checkbox" class="btn-check" id="btn-check-4" autocomplete="off">
    <label class="btn" for="btn-check-4">Single toggle</label>

    <input type="checkbox" class="btn-check" id="btn-check-5" checked autocomplete="off">
    <label class="btn" for="btn-check-5">Checked</label>

    <input type="checkbox" class="btn-check" id="btn-check-6" autocomplete="off" disabled>
    <label class="btn" for="btn-check-6">Disabled</label>
    ```


    Visually, these checkbox toggle buttons are identical to the [button plugin toggle buttons](https://getbootstrap.com/docs/5.3/components/buttons/#button-plugin). However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as “checked”/“not checked” (since, despite their appearance, they are fundamentally still checkboxes), whereas the button plugin toggle buttons will be announced as “button”/“button pressed”. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.

    ### Radio toggle buttons




    Checked

    Radio

    Disabled

    Radio

    html









    ```
    <input type="radio" class="btn-check" name="options" id="option1" autocomplete="off" checked>
    <label class="btn btn-secondary" for="option1">Checked</label>

    <input type="radio" class="btn-check" name="options" id="option2" autocomplete="off">
    <label class="btn btn-secondary" for="option2">Radio</label>

    <input type="radio" class="btn-check" name="options" id="option3" autocomplete="off" disabled>
    <label class="btn btn-secondary" for="option3">Disabled</label>

    <input type="radio" class="btn-check" name="options" id="option4" autocomplete="off">
    <label class="btn btn-secondary" for="option4">Radio</label>
    ```



    Checked

    Radio

    Disabled

    Radio

    html









    ```
    <input type="radio" class="btn-check" name="options-base" id="option5" autocomplete="off" checked>
    <label class="btn" for="option5">Checked</label>

    <input type="radio" class="btn-check" name="options-base" id="option6" autocomplete="off">
    <label class="btn" for="option6">Radio</label>

    <input type="radio" class="btn-check" name="options-base" id="option7" autocomplete="off" disabled>
    <label class="btn" for="option7">Disabled</label>

    <input type="radio" class="btn-check" name="options-base" id="option8" autocomplete="off">
    <label class="btn" for="option8">Radio</label>
    ```

    ### Outlined styles


    Different variants of `.btn`, such at the various outlined styles, are supported.




    Single toggle


    Checked


    Checked success radio

    Danger radio

    html









    ```
    <input type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off">
    <label class="btn btn-outline-primary" for="btn-check-outlined">Single toggle</label><br>

    <input type="checkbox" class="btn-check" id="btn-check-2-outlined" checked autocomplete="off">
    <label class="btn btn-outline-secondary" for="btn-check-2-outlined">Checked</label><br>

    <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" autocomplete="off" checked>
    <label class="btn btn-outline-success" for="success-outlined">Checked success radio</label>

    <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" autocomplete="off">
    <label class="btn btn-outline-danger" for="danger-outlined">Danger radio</label>
    ```

    CSS
    ---


    ### Sass variables


    Variables for checks:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-check-input-width: 1em;
    $form-check-min-height: $font-size-base \* $line-height-base;
    $form-check-padding-start: $form-check-input-width + .5em;
    $form-check-margin-bottom: .125rem;
    $form-check-label-color: null;
    $form-check-label-cursor: null;
    $form-check-transition: null;

    $form-check-input-active-filter: brightness(90%);

    $form-check-input-bg: $input-bg;
    $form-check-input-border: var(--#{$prefix}border-width) solid var(--#{$prefix}border-color);
    $form-check-input-border-radius: .25em;
    $form-check-radio-border-radius: 50%;
    $form-check-input-focus-border: $input-focus-border-color;
    $form-check-input-focus-box-shadow: $focus-ring-box-shadow;

    $form-check-input-checked-color: $component-active-color;
    $form-check-input-checked-bg-color: $component-active-bg;
    $form-check-input-checked-border-color: $form-check-input-checked-bg-color;
    $form-check-input-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-checked-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/></svg>");
    $form-check-radio-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='2' fill='#{$form-check-input-checked-color}'/></svg>");

    $form-check-input-indeterminate-color: $component-active-color;
    $form-check-input-indeterminate-bg-color: $component-active-bg;
    $form-check-input-indeterminate-border-color: $form-check-input-indeterminate-bg-color;
    $form-check-input-indeterminate-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-indeterminate-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/></svg>");

    $form-check-input-disabled-opacity: .5;
    $form-check-label-disabled-opacity: $form-check-input-disabled-opacity;
    $form-check-btn-check-disabled-opacity: $btn-disabled-opacity;

    $form-check-inline-margin-end: 1rem;

    ```

    Variables for switches:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-switch-color: rgba($black, .25);
    $form-switch-width: 2em;
    $form-switch-padding-start: $form-switch-width + .5em;
    $form-switch-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-color}'/></svg>");
    $form-switch-border-radius: $form-switch-width;
    $form-switch-transition: background-position .15s ease-in-out;

    $form-switch-focus-color: $input-focus-border-color;
    $form-switch-focus-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-focus-color}'/></svg>");

    $form-switch-checked-color: $component-active-color;
    $form-switch-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-checked-color}'/></svg>");
    $form-switch-checked-bg-position: right center;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class RANGE:
    """

    Range
    =====



    Use our custom range inputs for consistent cross-browser styling and built-in customization.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Disabled](#disabled)
    * [Min and max](#min-and-max)
    * [Steps](#steps)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Overview
    --------


    Create custom `<input type="range">` controls with `.form-range`. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only Firefox supports “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.



    Example range


    html









    ```
    <label for="customRange1" class="form-label">Example range</label>
    <input type="range" class="form-range" id="customRange1">
    ```

    Disabled
    --------


    Add the `disabled` boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.



    Disabled range


    html









    ```
    <label for="disabledRange" class="form-label">Disabled range</label>
    <input type="range" class="form-range" id="disabledRange" disabled>
    ```

    Min and max
    -----------


    Range inputs have implicit values for `min` and `max`—`0` and `100`, respectively. You may specify new values for those using the `min` and `max` attributes.



    Example range


    html









    ```
    <label for="customRange2" class="form-label">Example range</label>
    <input type="range" class="form-range" min="0" max="5" id="customRange2">
    ```

    Steps
    -----


    By default, range inputs “snap” to integer values. To change this, you can specify a `step` value. In the example below, we double the number of steps by using `step="0.5"`.



    Example range


    html









    ```
    <label for="customRange3" class="form-label">Example range</label>
    <input type="range" class="form-range" min="0" max="5" step="0.5" id="customRange3">
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-range-track-width: 100%;
    $form-range-track-height: .5rem;
    $form-range-track-cursor: pointer;
    $form-range-track-bg: var(--#{$prefix}tertiary-bg);
    $form-range-track-border-radius: 1rem;
    $form-range-track-box-shadow: $box-shadow-inset;

    $form-range-thumb-width: 1rem;
    $form-range-thumb-height: $form-range-thumb-width;
    $form-range-thumb-bg: $component-active-bg;
    $form-range-thumb-border: 0;
    $form-range-thumb-border-radius: 1rem;
    $form-range-thumb-box-shadow: 0 .1rem .25rem rgba($black, .1);
    $form-range-thumb-focus-box-shadow: 0 0 0 1px $body-bg, $input-focus-box-shadow;
    $form-range-thumb-focus-box-shadow-width: $input-focus-width; // For focus box shadow issue in Edge
    $form-range-thumb-active-bg: tint-color($component-active-bg, 70%);
    $form-range-thumb-disabled-bg: var(--#{$prefix}secondary-color);
    $form-range-thumb-transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class INPUT_GROUP:
    """

    Input group
    ===========



    Easily extend form controls by adding text, buttons, or button groups on either side of textual inputs, custom selects, and custom file inputs.






     On this page


    **On this page**


    ---




    * [Basic example](#basic-example)
    * [Wrapping](#wrapping)
    * [Sizing](#sizing)
    * [Checkboxes and radios](#checkboxes-and-radios)
    * [Multiple inputs](#multiple-inputs)
    * [Multiple addons](#multiple-addons)
    * [Button addons](#button-addons)
    * [Buttons with dropdowns](#buttons-with-dropdowns)
    * [Segmented buttons](#segmented-buttons)
    * [Custom forms](#custom-forms)
            + [Custom select](#custom-select)
            + [Custom file input](#custom-file-input)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Basic example
    -------------


    Place one add-on or button on either side of an input. You may also place one on both sides of an input. Remember to place `<label>`s outside the input group.




    @




    @example.com


    Your vanity URL

    https://example.com/users/


    Example help text goes outside the input group.


    $

    .00



    @



    With textarea



    html









    ```
    <div class="input-group mb-3">
     <span class="input-group-text" id="basic-addon1">@</span>
     <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1">
    </div>

    <div class="input-group mb-3">
     <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="basic-addon2">
     <span class="input-group-text" id="basic-addon2">@example.com</span>
    </div>

    <div class="mb-3">
     <label for="basic-url" class="form-label">Your vanity URL</label>
     <div class="input-group">
     <span class="input-group-text" id="basic-addon3">https://example.com/users/</span>
     <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3 basic-addon4">
     </div>
     <div class="form-text" id="basic-addon4">Example help text goes outside the input group.</div>
    </div>

    <div class="input-group mb-3">
     <span class="input-group-text">$</span>
     <input type="text" class="form-control" aria-label="Amount (to the nearest dollar)">
     <span class="input-group-text">.00</span>
    </div>

    <div class="input-group mb-3">
     <input type="text" class="form-control" placeholder="Username" aria-label="Username">
     <span class="input-group-text">@</span>
     <input type="text" class="form-control" placeholder="Server" aria-label="Server">
    </div>

    <div class="input-group">
     <span class="input-group-text">With textarea</span>
     <textarea class="form-control" aria-label="With textarea"></textarea>
    </div>
    ```

    Wrapping
    --------


    Input groups wrap by default via `flex-wrap: wrap` in order to accommodate custom form field validation within an input group. You may disable this with `.flex-nowrap`.




    @



    html









    ```
    <div class="input-group flex-nowrap">
     <span class="input-group-text" id="addon-wrapping">@</span>
     <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="addon-wrapping">
    </div>
    ```

    Sizing
    ------


    Add the relative form sizing classes to the `.input-group` itself and contents within will automatically resize—no need for repeating the form control size classes on each element.


    **Sizing on the individual input group elements isn’t supported.**




    Small



    Default



    Large



    html









    ```
    <div class="input-group input-group-sm mb-3">
     <span class="input-group-text" id="inputGroup-sizing-sm">Small</span>
     <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
    </div>

    <div class="input-group mb-3">
     <span class="input-group-text" id="inputGroup-sizing-default">Default</span>
     <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
    </div>

    <div class="input-group input-group-lg">
     <span class="input-group-text" id="inputGroup-sizing-lg">Large</span>
     <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
    </div>
    ```

    Checkboxes and radios
    ---------------------


    Place any checkbox or radio option within an input group’s addon instead of text. We recommend adding `.mt-0` to the `.form-check-input` when there’s no visible text next to the input.
















    html









    ```
    <div class="input-group mb-3">
     <div class="input-group-text">
     <input class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
     </div>
     <input type="text" class="form-control" aria-label="Text input with checkbox">
    </div>

    <div class="input-group">
     <div class="input-group-text">
     <input class="form-check-input mt-0" type="radio" value="" aria-label="Radio button for following text input">
     </div>
     <input type="text" class="form-control" aria-label="Text input with radio button">
    </div>
    ```

    Multiple inputs
    ---------------


    While multiple `<input>`s are supported visually, validation styles are only available for input groups with a single `<input>`.




    First and last name




    html









    ```
    <div class="input-group">
     <span class="input-group-text">First and last name</span>
     <input type="text" aria-label="First name" class="form-control">
     <input type="text" aria-label="Last name" class="form-control">
    </div>
    ```

    Multiple addons
    ---------------


    Multiple add-ons are supported and can be mixed with checkbox and radio input versions.




    $
    0.00




    $
    0.00


    html









    ```
    <div class="input-group mb-3">
     <span class="input-group-text">$</span>
     <span class="input-group-text">0.00</span>
     <input type="text" class="form-control" aria-label="Dollar amount (with dot and two decimal places)">
    </div>

    <div class="input-group">
     <input type="text" class="form-control" aria-label="Dollar amount (with dot and two decimal places)">
     <span class="input-group-text">$</span>
     <span class="input-group-text">0.00</span>
    </div>
    ```

    Button addons
    -------------




    Button




    Button


    Button
    Button




    Button
    Button


    html









    ```
    <div class="input-group mb-3">
     <button class="btn btn-outline-secondary" type="button" id="button-addon1">Button</button>
     <input type="text" class="form-control" placeholder="" aria-label="Example text with button addon" aria-describedby="button-addon1">
    </div>

    <div class="input-group mb-3">
     <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="button-addon2">
     <button class="btn btn-outline-secondary" type="button" id="button-addon2">Button</button>
    </div>

    <div class="input-group mb-3">
     <button class="btn btn-outline-secondary" type="button">Button</button>
     <button class="btn btn-outline-secondary" type="button">Button</button>
     <input type="text" class="form-control" placeholder="" aria-label="Example text with two button addons">
    </div>

    <div class="input-group">
     <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username with two button addons">
     <button class="btn btn-outline-secondary" type="button">Button</button>
     <button class="btn btn-outline-secondary" type="button">Button</button>
    </div>
    ```

    Buttons with dropdowns
    ----------------------




    Dropdown
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)






    Dropdown
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Dropdown
    * [Action before](#)
    * [Another action before](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)



    Dropdown
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    html









    ```
    <div class="input-group mb-3">
     <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     <input type="text" class="form-control" aria-label="Text input with dropdown button">
    </div>

    <div class="input-group mb-3">
     <input type="text" class="form-control" aria-label="Text input with dropdown button">
     <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>
     <ul class="dropdown-menu dropdown-menu-end">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>

    <div class="input-group">
     <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action before</a></li>
     <li><a class="dropdown-item" href="#">Another action before</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     <input type="text" class="form-control" aria-label="Text input with 2 dropdown buttons">
     <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>
     <ul class="dropdown-menu dropdown-menu-end">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>
    ```

    Segmented buttons
    -----------------




    Action

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)






    Action

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    html









    ```
    <div class="input-group mb-3">
     <button type="button" class="btn btn-outline-secondary">Action</button>
     <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     <input type="text" class="form-control" aria-label="Text input with segmented dropdown button">
    </div>

    <div class="input-group">
     <input type="text" class="form-control" aria-label="Text input with segmented dropdown button">
     <button type="button" class="btn btn-outline-secondary">Action</button>
     <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu dropdown-menu-end">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>
    ```

    Custom forms
    ------------


    Input groups include support for custom selects and custom file inputs. Browser default versions of these are not supported.


    ### Custom select




    Options

    Choose...
    One
    Two
    Three




    Choose...
    One
    Two
    Three

    Options


    Button

    Choose...
    One
    Two
    Three




    Choose...
    One
    Two
    Three

    Button


    html









    ```
    <div class="input-group mb-3">
     <label class="input-group-text" for="inputGroupSelect01">Options</label>
     <select class="form-select" id="inputGroupSelect01">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
    </div>

    <div class="input-group mb-3">
     <select class="form-select" id="inputGroupSelect02">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <label class="input-group-text" for="inputGroupSelect02">Options</label>
    </div>

    <div class="input-group mb-3">
     <button class="btn btn-outline-secondary" type="button">Button</button>
     <select class="form-select" id="inputGroupSelect03" aria-label="Example select with button addon">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
    </div>

    <div class="input-group">
     <select class="form-select" id="inputGroupSelect04" aria-label="Example select with button addon">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <button class="btn btn-outline-secondary" type="button">Button</button>
    </div>
    ```

    ### Custom file input




    Upload




    Upload


    Button




    Button


    html









    ```
    <div class="input-group mb-3">
     <label class="input-group-text" for="inputGroupFile01">Upload</label>
     <input type="file" class="form-control" id="inputGroupFile01">
    </div>

    <div class="input-group mb-3">
     <input type="file" class="form-control" id="inputGroupFile02">
     <label class="input-group-text" for="inputGroupFile02">Upload</label>
    </div>

    <div class="input-group mb-3">
     <button class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon03">Button</button>
     <input type="file" class="form-control" id="inputGroupFile03" aria-describedby="inputGroupFileAddon03" aria-label="Upload">
    </div>

    <div class="input-group">
     <input type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
     <button class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">Button</button>
    </div>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $input-group-addon-padding-y: $input-padding-y;
    $input-group-addon-padding-x: $input-padding-x;
    $input-group-addon-font-weight: $input-font-weight;
    $input-group-addon-color: $input-color;
    $input-group-addon-bg: var(--#{$prefix}tertiary-bg);
    $input-group-addon-border-color: $input-border-color;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FLOATING_LABELS:
    """

    Floating labels
    ===============



    Create beautifully simple form labels that float over your input fields.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Textareas](#textareas)
    * [Selects](#selects)
    * [Disabled](#disabled)
    * [Readonly plaintext](#readonly-plaintext)
    * [Input groups](#input-groups)
    * [Layout](#layout)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    Example
    -------


    Wrap a pair of `<input class="form-control">` and `<label>` elements in `.form-floating` to enable floating labels with Bootstrap’s textual form fields. A `placeholder` is required on each `<input>` as our method of CSS-only floating labels uses the `:placeholder-shown` pseudo-element. Also note that the `<input>` must come first so we can utilize a sibling selector (e.g., `~`).





    Email address



    Password


    html









    ```
    <div class="form-floating mb-3">
     <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com">
     <label for="floatingInput">Email address</label>
    </div>
    <div class="form-floating">
     <input type="password" class="form-control" id="floatingPassword" placeholder="Password">
     <label for="floatingPassword">Password</label>
    </div>
    ```

    When there’s a `value` already defined, `<label>`s will automatically adjust to their floated position.





    Input with value


    html









    ```
    <form class="form-floating">
     <input type="email" class="form-control" id="floatingInputValue" placeholder="name@example.com" value="test@example.com">
     <label for="floatingInputValue">Input with value</label>
    </form>
    ```

    Form validation styles also work as expected.





    Invalid input


    html









    ```
    <form class="form-floating">
     <input type="email" class="form-control is-invalid" id="floatingInputInvalid" placeholder="name@example.com" value="test@example.com">
     <label for="floatingInputInvalid">Invalid input</label>
    </form>
    ```

    Textareas
    ---------


    By default, `<textarea>`s with `.form-control` will be the same height as `<input>`s.





    Comments


    html









    ```
    <div class="form-floating">
     <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea"></textarea>
     <label for="floatingTextarea">Comments</label>
    </div>
    ```

    To set a custom height on your `<textarea>`, do not use the `rows` attribute. Instead, set an explicit `height` (either inline or via custom CSS).





    Comments


    html









    ```
    <div class="form-floating">
     <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 100px"></textarea>
     <label for="floatingTextarea2">Comments</label>
    </div>
    ```

    Selects
    -------


    Other than `.form-control`, floating labels are only available on `.form-select`s. They work in the same way, but unlike `<input>`s, they’ll always show the `<label>` in its floated state. **Selects with `size` and `multiple` are not supported.**





    Open this select menu
    One
    Two
    Three

    Works with selects


    html









    ```
    <div class="form-floating">
     <select class="form-select" id="floatingSelect" aria-label="Floating label select example">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <label for="floatingSelect">Works with selects</label>
    </div>
    ```

    Disabled
    --------


    Add the `disabled` boolean attribute on an input, a textarea or a select to give it a grayed out appearance, remove pointer events, and prevent focusing.





    Email address



    Comments


    Disabled textarea with some text inside
    Comments



    Open this select menu
    One
    Two
    Three

    Works with selects


    html









    ```
    <div class="form-floating mb-3">
     <input type="email" class="form-control" id="floatingInputDisabled" placeholder="name@example.com" disabled>
     <label for="floatingInputDisabled">Email address</label>
    </div>
    <div class="form-floating mb-3">
     <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextareaDisabled" disabled></textarea>
     <label for="floatingTextareaDisabled">Comments</label>
    </div>
    <div class="form-floating mb-3">
     <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2Disabled" style="height: 100px" disabled>Disabled textarea with some text inside</textarea>
     <label for="floatingTextarea2Disabled">Comments</label>
    </div>
    <div class="form-floating">
     <select class="form-select" id="floatingSelectDisabled" aria-label="Floating label disabled select example" disabled>
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <label for="floatingSelectDisabled">Works with selects</label>
    </div>
    ```

    Readonly plaintext
    ------------------


    Floating labels also support `.form-control-plaintext`, which can be helpful for toggling from an editable `<input>` to a plaintext value without affecting the page layout.





    Empty input



    Input with value


    html









    ```
    <div class="form-floating mb-3">
     <input type="email" readonly class="form-control-plaintext" id="floatingEmptyPlaintextInput" placeholder="name@example.com">
     <label for="floatingEmptyPlaintextInput">Empty input</label>
    </div>
    <div class="form-floating mb-3">
     <input type="email" readonly class="form-control-plaintext" id="floatingPlaintextInput" placeholder="name@example.com" value="name@example.com">
     <label for="floatingPlaintextInput">Input with value</label>
    </div>
    ```

    Input groups
    ------------


    Floating labels also support `.input-group`.




    @


    Username



    html









    ```
    <div class="input-group mb-3">
     <span class="input-group-text">@</span>
     <div class="form-floating">
     <input type="text" class="form-control" id="floatingInputGroup1" placeholder="Username">
     <label for="floatingInputGroup1">Username</label>
     </div>
    </div>
    ```

    When using `.input-group` and `.form-floating` along with form validation, the `-feedback` should be placed outside of the `.form-floating`, but inside of the `.input-group`. This means that the feedback will need to be shown using javascript.




    @


    Username


     Please choose a username.



    html









    ```
    <div class="input-group has-validation">
     <span class="input-group-text">@</span>
     <div class="form-floating is-invalid">
     <input type="text" class="form-control is-invalid" id="floatingInputGroup2" placeholder="Username" required>
     <label for="floatingInputGroup2">Username</label>
     </div>
     <div class="invalid-feedback">
     Please choose a username.
     </div>
    </div>
    ```

    Layout
    ------


    When working with the Bootstrap grid system, be sure to place form elements within column classes.







    Email address





    Open this select menu
    One
    Two
    Three

    Works with selects




    html









    ```
    <div class="row g-2">
     <div class="col-md">
     <div class="form-floating">
     <input type="email" class="form-control" id="floatingInputGrid" placeholder="name@example.com" value="mdo@example.com">
     <label for="floatingInputGrid">Email address</label>
     </div>
     </div>
     <div class="col-md">
     <div class="form-floating">
     <select class="form-select" id="floatingSelectGrid">
     <option selected>Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <label for="floatingSelectGrid">Works with selects</label>
     </div>
     </div>
    </div>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-floating-height: add(3.5rem, $input-height-border);
    $form-floating-line-height: 1.25;
    $form-floating-padding-x: $input-padding-x;
    $form-floating-padding-y: 1rem;
    $form-floating-input-padding-t: 1.625rem;
    $form-floating-input-padding-b: .625rem;
    $form-floating-label-height: 1.5em;
    $form-floating-label-opacity: .65;
    $form-floating-label-transform: scale(.85) translateY(-.5rem) translateX(.15rem);
    $form-floating-label-disabled-color: $gray-600;
    $form-floating-transition: opacity .1s ease-in-out, transform .1s ease-in-out;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class LAYOUT:
    """

    Layout
    ======



    Give your forms some structure—from inline to horizontal to custom grid implementations—with our form layout options.






     On this page


    **On this page**


    ---




    * [Forms](#forms)
    * [Utilities](#utilities)
    * [Form grid](#form-grid)
    * [Gutters](#gutters)
    * [Horizontal form](#horizontal-form)
            + [Horizontal form label sizing](#horizontal-form-label-sizing)
    * [Column sizing](#column-sizing)
    * [Auto-sizing](#auto-sizing)
    * [Inline forms](#inline-forms)






    Forms
    -----


    Every group of form fields should reside in a `<form>` element. Bootstrap provides no default styling for the `<form>` element, but there are some powerful browser features that are provided by default.


    * New to browser forms? Consider reviewing [the MDN form docs](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Element/form) for an overview and complete list of available attributes.
    * `<button>`s within a `<form>` default to `type="submit"`, so strive to be specific and always include a `type`.


    Since Bootstrap applies `display: block` and `width: 100%` to almost all our form controls, forms will by default stack vertically. Additional classes can be used to vary this layout on a per-form basis.


    Utilities
    ---------


    [Margin utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/) are the easiest way to add some structure to forms. They provide basic grouping of labels, controls, optional form text, and form validation messaging. We recommend sticking to `margin-bottom` utilities, and using a single direction throughout the form for consistency.


    Feel free to build your forms however you like, with `<fieldset>`s, `<div>`s, or nearly any other element.




    Example label



    Another label



    html









    ```
    <div class="mb-3">
     <label for="formGroupExampleInput" class="form-label">Example label</label>
     <input type="text" class="form-control" id="formGroupExampleInput" placeholder="Example input placeholder">
    </div>
    <div class="mb-3">
     <label for="formGroupExampleInput2" class="form-label">Another label</label>
     <input type="text" class="form-control" id="formGroupExampleInput2" placeholder="Another input placeholder">
    </div>
    ```

    Form grid
    ---------


    More complex forms can be built using our grid classes. Use these for form layouts that require multiple columns, varied widths, and additional alignment options. **Requires the `$enable-grid-classes` Sass variable to be enabled** (on by default).












    html









    ```
    <div class="row">
     <div class="col">
     <input type="text" class="form-control" placeholder="First name" aria-label="First name">
     </div>
     <div class="col">
     <input type="text" class="form-control" placeholder="Last name" aria-label="Last name">
     </div>
    </div>
    ```

    Gutters
    -------


    By adding [gutter modifier classes](https://getbootstrap.com/docs/5.3/layout/gutters/), you can have control over the gutter width in as well the inline as block direction. **Also requires the `$enable-grid-classes` Sass variable to be enabled** (on by default).












    html









    ```
    <div class="row g-3">
     <div class="col">
     <input type="text" class="form-control" placeholder="First name" aria-label="First name">
     </div>
     <div class="col">
     <input type="text" class="form-control" placeholder="Last name" aria-label="Last name">
     </div>
    </div>
    ```

    More complex layouts can also be created with the grid system.





    Email



    Password



    Address



    Address 2



    City



    State

    Choose...
    ...



    Zip






     Check me out




    Sign in



    html









    ```
    <form class="row g-3">
     <div class="col-md-6">
     <label for="inputEmail4" class="form-label">Email</label>
     <input type="email" class="form-control" id="inputEmail4">
     </div>
     <div class="col-md-6">
     <label for="inputPassword4" class="form-label">Password</label>
     <input type="password" class="form-control" id="inputPassword4">
     </div>
     <div class="col-12">
     <label for="inputAddress" class="form-label">Address</label>
     <input type="text" class="form-control" id="inputAddress" placeholder="1234 Main St">
     </div>
     <div class="col-12">
     <label for="inputAddress2" class="form-label">Address 2</label>
     <input type="text" class="form-control" id="inputAddress2" placeholder="Apartment, studio, or floor">
     </div>
     <div class="col-md-6">
     <label for="inputCity" class="form-label">City</label>
     <input type="text" class="form-control" id="inputCity">
     </div>
     <div class="col-md-4">
     <label for="inputState" class="form-label">State</label>
     <select id="inputState" class="form-select">
     <option selected>Choose...</option>
     <option>...</option>
     </select>
     </div>
     <div class="col-md-2">
     <label for="inputZip" class="form-label">Zip</label>
     <input type="text" class="form-control" id="inputZip">
     </div>
     <div class="col-12">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="gridCheck">
     <label class="form-check-label" for="gridCheck">
     Check me out
     </label>
     </div>
     </div>
     <div class="col-12">
     <button type="submit" class="btn btn-primary">Sign in</button>
     </div>
    </form>
    ```

    Horizontal form
    ---------------


    Create horizontal forms with the grid by adding the `.row` class to form groups and using the `.col-*-*` classes to specify the width of your labels and controls. Be sure to add `.col-form-label` to your `<label>`s as well so they’re vertically centered with their associated form controls.


    At times, you maybe need to use margin or padding utilities to create that perfect alignment you need. For example, we’ve removed the `padding-top` on our stacked radio inputs label to better align the text baseline.





    Email





    Password





    Radios




     First radio





     Second radio





     Third disabled radio









     Example checkbox




    Sign in


    html









    ```
    <form>
     <div class="row mb-3">
     <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
     <div class="col-sm-10">
     <input type="email" class="form-control" id="inputEmail3">
     </div>
     </div>
     <div class="row mb-3">
     <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
     <div class="col-sm-10">
     <input type="password" class="form-control" id="inputPassword3">
     </div>
     </div>
     <fieldset class="row mb-3">
     <legend class="col-form-label col-sm-2 pt-0">Radios</legend>
     <div class="col-sm-10">
     <div class="form-check">
     <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios1" value="option1" checked>
     <label class="form-check-label" for="gridRadios1">
     First radio
     </label>
     </div>
     <div class="form-check">
     <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="option2">
     <label class="form-check-label" for="gridRadios2">
     Second radio
     </label>
     </div>
     <div class="form-check disabled">
     <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios3" value="option3" disabled>
     <label class="form-check-label" for="gridRadios3">
     Third disabled radio
     </label>
     </div>
     </div>
     </fieldset>
     <div class="row mb-3">
     <div class="col-sm-10 offset-sm-2">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="gridCheck1">
     <label class="form-check-label" for="gridCheck1">
     Example checkbox
     </label>
     </div>
     </div>
     </div>
     <button type="submit" class="btn btn-primary">Sign in</button>
    </form>
    ```

    ### Horizontal form label sizing


    Be sure to use `.col-form-label-sm` or `.col-form-label-lg` to your `<label>`s or `<legend>`s to correctly follow the size of `.form-control-lg` and `.form-control-sm`.




    Email





    Email





    Email





    html









    ```
    <div class="row mb-3">
     <label for="colFormLabelSm" class="col-sm-2 col-form-label col-form-label-sm">Email</label>
     <div class="col-sm-10">
     <input type="email" class="form-control form-control-sm" id="colFormLabelSm" placeholder="col-form-label-sm">
     </div>
    </div>
    <div class="row mb-3">
     <label for="colFormLabel" class="col-sm-2 col-form-label">Email</label>
     <div class="col-sm-10">
     <input type="email" class="form-control" id="colFormLabel" placeholder="col-form-label">
     </div>
    </div>
    <div class="row">
     <label for="colFormLabelLg" class="col-sm-2 col-form-label col-form-label-lg">Email</label>
     <div class="col-sm-10">
     <input type="email" class="form-control form-control-lg" id="colFormLabelLg" placeholder="col-form-label-lg">
     </div>
    </div>
    ```

    Column sizing
    -------------


    As shown in the previous examples, our grid system allows you to place any number of `.col`s within a `.row`. They’ll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining `.col`s equally split the rest, with specific column classes like `.col-sm-7`.















    html









    ```
    <div class="row g-3">
     <div class="col-sm-7">
     <input type="text" class="form-control" placeholder="City" aria-label="City">
     </div>
     <div class="col-sm">
     <input type="text" class="form-control" placeholder="State" aria-label="State">
     </div>
     <div class="col-sm">
     <input type="text" class="form-control" placeholder="Zip" aria-label="Zip">
     </div>
    </div>
    ```

    Auto-sizing
    -----------


    The example below uses a flexbox utility to vertically center the contents and changes `.col` to `.col-auto` so that your columns only take up as much space as needed. Put another way, the column sizes itself based on the contents.





    Name



    Username

    @




    Preference

    Choose...
    One
    Two
    Three






     Remember me




    Submit



    html









    ```
    <form class="row gy-2 gx-3 align-items-center">
     <div class="col-auto">
     <label class="visually-hidden" for="autoSizingInput">Name</label>
     <input type="text" class="form-control" id="autoSizingInput" placeholder="Jane Doe">
     </div>
     <div class="col-auto">
     <label class="visually-hidden" for="autoSizingInputGroup">Username</label>
     <div class="input-group">
     <div class="input-group-text">@</div>
     <input type="text" class="form-control" id="autoSizingInputGroup" placeholder="Username">
     </div>
     </div>
     <div class="col-auto">
     <label class="visually-hidden" for="autoSizingSelect">Preference</label>
     <select class="form-select" id="autoSizingSelect">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     </div>
     <div class="col-auto">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="autoSizingCheck">
     <label class="form-check-label" for="autoSizingCheck">
     Remember me
     </label>
     </div>
     </div>
     <div class="col-auto">
     <button type="submit" class="btn btn-primary">Submit</button>
     </div>
    </form>
    ```

    You can then remix that once again with size-specific column classes.





    Name



    Username

    @




    Preference

    Choose...
    One
    Two
    Three






     Remember me




    Submit



    html









    ```
    <form class="row gx-3 gy-2 align-items-center">
     <div class="col-sm-3">
     <label class="visually-hidden" for="specificSizeInputName">Name</label>
     <input type="text" class="form-control" id="specificSizeInputName" placeholder="Jane Doe">
     </div>
     <div class="col-sm-3">
     <label class="visually-hidden" for="specificSizeInputGroupUsername">Username</label>
     <div class="input-group">
     <div class="input-group-text">@</div>
     <input type="text" class="form-control" id="specificSizeInputGroupUsername" placeholder="Username">
     </div>
     </div>
     <div class="col-sm-3">
     <label class="visually-hidden" for="specificSizeSelect">Preference</label>
     <select class="form-select" id="specificSizeSelect">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     </div>
     <div class="col-auto">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="autoSizingCheck2">
     <label class="form-check-label" for="autoSizingCheck2">
     Remember me
     </label>
     </div>
     </div>
     <div class="col-auto">
     <button type="submit" class="btn btn-primary">Submit</button>
     </div>
    </form>
    ```

    Inline forms
    ------------


    Use the `.row-cols-*` classes to create responsive horizontal layouts. By adding [gutter modifier classes](https://getbootstrap.com/docs/5.3/layout/gutters/), we’ll have gutters in horizontal and vertical directions. On narrow mobile viewports, the `.col-12` helps stack the form controls and more. The `.align-items-center` aligns the form elements to the middle, making the `.form-check` align properly.





    Username

    @




    Preference

    Choose...
    One
    Two
    Three






     Remember me




    Submit



    html









    ```
    <form class="row row-cols-lg-auto g-3 align-items-center">
     <div class="col-12">
     <label class="visually-hidden" for="inlineFormInputGroupUsername">Username</label>
     <div class="input-group">
     <div class="input-group-text">@</div>
     <input type="text" class="form-control" id="inlineFormInputGroupUsername" placeholder="Username">
     </div>
     </div>

     <div class="col-12">
     <label class="visually-hidden" for="inlineFormSelectPref">Preference</label>
     <select class="form-select" id="inlineFormSelectPref">
     <option selected>Choose...</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     </div>

     <div class="col-12">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" id="inlineFormCheck">
     <label class="form-check-label" for="inlineFormCheck">
     Remember me
     </label>
     </div>
     </div>

     <div class="col-12">
     <button type="submit" class="btn btn-primary">Submit</button>
     </div>
    </form>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class VALIDATION:
    """

    Validation
    ==========



    Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Custom styles](#custom-styles)
    * [Browser defaults](#browser-defaults)
    * [Server-side](#server-side)
    * [Supported elements](#supported-elements)
    * [Tooltips](#tooltips)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
            + [Sass maps](#sass-maps)
            + [Sass loops](#sass-loops)
            + [Customizing](#customizing)







    We are aware that currently the client-side custom validation styles and tooltips are not accessible, since they are not exposed to assistive technologies. While we work on a solution, we’d recommend either using the server-side option or the default browser validation method.

    How it works
    ------------


    Here’s how form validation works with Bootstrap:


    * HTML form validation is applied via CSS’s two pseudo-classes, `:invalid` and `:valid`. It applies to `<input>`, `<select>`, and `<textarea>` elements.
    * Bootstrap scopes the `:invalid` and `:valid` styles to parent `.was-validated` class, usually applied to the `<form>`. Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted).
    * To reset the appearance of the form (for instance, in the case of dynamic form submissions using Ajax), remove the `.was-validated` class from the `<form>` again after submission.
    * As a fallback, `.is-invalid` and `.is-valid` classes may be used instead of the pseudo-classes for [server-side validation](#server-side). They do not require a `.was-validated` parent class.
    * Due to constraints in how CSS works, we cannot (at present) apply styles to a `<label>` that comes before a form control in the DOM without the help of custom JavaScript.
    * All modern browsers support the [constraint validation API](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#the-constraint-validation-api), a series of JavaScript methods for validating form controls.
    * Feedback messages may utilize the [browser defaults](#browser-defaults) (different for each browser, and unstylable via CSS) or our custom feedback styles with additional HTML and CSS.
    * You may provide custom validity messages with `setCustomValidity` in JavaScript.


    With that in mind, consider the following demos for our custom form validation styles, optional server-side classes, and browser defaults.


    Custom styles
    -------------


    For custom Bootstrap form validation messages, you’ll need to add the `novalidate` boolean attribute to your `<form>`. This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you’ll see the `:invalid` and `:valid` styles applied to your form controls.


    Custom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback. Background icons for `<select>`s are only available with `.form-select`, and not `.form-control`.





    First name


     Looks good!



    Last name


     Looks good!



    Username

    @


     Please choose a username.




    City


     Please provide a valid city.



    State

    Choose...
    ...


     Please select a valid state.



    Zip


     Please provide a valid zip.






     Agree to terms and conditions


     You must agree before submitting.




    Submit form



    html









    ```
    <form class="row g-3 needs-validation" novalidate>
     <div class="col-md-4">
     <label for="validationCustom01" class="form-label">First name</label>
     <input type="text" class="form-control" id="validationCustom01" value="Mark" required>
     <div class="valid-feedback">
     Looks good!
     </div>
     </div>
     <div class="col-md-4">
     <label for="validationCustom02" class="form-label">Last name</label>
     <input type="text" class="form-control" id="validationCustom02" value="Otto" required>
     <div class="valid-feedback">
     Looks good!
     </div>
     </div>
     <div class="col-md-4">
     <label for="validationCustomUsername" class="form-label">Username</label>
     <div class="input-group has-validation">
     <span class="input-group-text" id="inputGroupPrepend">@</span>
     <input type="text" class="form-control" id="validationCustomUsername" aria-describedby="inputGroupPrepend" required>
     <div class="invalid-feedback">
     Please choose a username.
     </div>
     </div>
     </div>
     <div class="col-md-6">
     <label for="validationCustom03" class="form-label">City</label>
     <input type="text" class="form-control" id="validationCustom03" required>
     <div class="invalid-feedback">
     Please provide a valid city.
     </div>
     </div>
     <div class="col-md-3">
     <label for="validationCustom04" class="form-label">State</label>
     <select class="form-select" id="validationCustom04" required>
     <option selected disabled value="">Choose...</option>
     <option>...</option>
     </select>
     <div class="invalid-feedback">
     Please select a valid state.
     </div>
     </div>
     <div class="col-md-3">
     <label for="validationCustom05" class="form-label">Zip</label>
     <input type="text" class="form-control" id="validationCustom05" required>
     <div class="invalid-feedback">
     Please provide a valid zip.
     </div>
     </div>
     <div class="col-12">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="invalidCheck" required>
     <label class="form-check-label" for="invalidCheck">
     Agree to terms and conditions
     </label>
     <div class="invalid-feedback">
     You must agree before submitting.
     </div>
     </div>
     </div>
     <div class="col-12">
     <button class="btn btn-primary" type="submit">Submit form</button>
     </div>
    </form>
    ```


    ```
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (() => {
     'use strict'

     // Fetch all the forms we want to apply custom Bootstrap validation styles to
     const forms = document.querySelectorAll('.needs-validation')

     // Loop over them and prevent submission
     Array.from(forms).forEach(form => {
     form.addEventListener('submit', event => {
     if (!form.checkValidity()) {
     event.preventDefault()
     event.stopPropagation()
     }

     form.classList.add('was-validated')
     }, false)
     })
    })()
    ```

    Browser defaults
    ----------------


    Not interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you’ll see a slightly different style of feedback.


    While these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.





    First name



    Last name



    Username

    @




    City



    State

    Choose...
    ...



    Zip






     Agree to terms and conditions




    Submit form



    html









    ```
    <form class="row g-3">
     <div class="col-md-4">
     <label for="validationDefault01" class="form-label">First name</label>
     <input type="text" class="form-control" id="validationDefault01" value="Mark" required>
     </div>
     <div class="col-md-4">
     <label for="validationDefault02" class="form-label">Last name</label>
     <input type="text" class="form-control" id="validationDefault02" value="Otto" required>
     </div>
     <div class="col-md-4">
     <label for="validationDefaultUsername" class="form-label">Username</label>
     <div class="input-group">
     <span class="input-group-text" id="inputGroupPrepend2">@</span>
     <input type="text" class="form-control" id="validationDefaultUsername" aria-describedby="inputGroupPrepend2" required>
     </div>
     </div>
     <div class="col-md-6">
     <label for="validationDefault03" class="form-label">City</label>
     <input type="text" class="form-control" id="validationDefault03" required>
     </div>
     <div class="col-md-3">
     <label for="validationDefault04" class="form-label">State</label>
     <select class="form-select" id="validationDefault04" required>
     <option selected disabled value="">Choose...</option>
     <option>...</option>
     </select>
     </div>
     <div class="col-md-3">
     <label for="validationDefault05" class="form-label">Zip</label>
     <input type="text" class="form-control" id="validationDefault05" required>
     </div>
     <div class="col-12">
     <div class="form-check">
     <input class="form-check-input" type="checkbox" value="" id="invalidCheck2" required>
     <label class="form-check-label" for="invalidCheck2">
     Agree to terms and conditions
     </label>
     </div>
     </div>
     <div class="col-12">
     <button class="btn btn-primary" type="submit">Submit form</button>
     </div>
    </form>
    ```

    Server-side
    -----------


    We recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with `.is-invalid` and `.is-valid`. Note that `.invalid-feedback` is also supported with these classes.


    For invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using `aria-describedby` (noting that this attribute allows more than one `id` to be referenced, in case the field already points to additional form text).


    To fix [issues with border radius](https://github.com/twbs/bootstrap/issues/25110), input groups require an additional `.has-validation` class.





    First name


     Looks good!



    Last name


     Looks good!



    Username

    @


     Please choose a username.




    City


     Please provide a valid city.



    State

    Choose...
    ...


     Please select a valid state.



    Zip


     Please provide a valid zip.






     Agree to terms and conditions


     You must agree before submitting.




    Submit form



    html









    ```
    <form class="row g-3">
     <div class="col-md-4">
     <label for="validationServer01" class="form-label">First name</label>
     <input type="text" class="form-control is-valid" id="validationServer01" value="Mark" required>
     <div class="valid-feedback">
     Looks good!
     </div>
     </div>
     <div class="col-md-4">
     <label for="validationServer02" class="form-label">Last name</label>
     <input type="text" class="form-control is-valid" id="validationServer02" value="Otto" required>
     <div class="valid-feedback">
     Looks good!
     </div>
     </div>
     <div class="col-md-4">
     <label for="validationServerUsername" class="form-label">Username</label>
     <div class="input-group has-validation">
     <span class="input-group-text" id="inputGroupPrepend3">@</span>
     <input type="text" class="form-control is-invalid" id="validationServerUsername" aria-describedby="inputGroupPrepend3 validationServerUsernameFeedback" required>
     <div id="validationServerUsernameFeedback" class="invalid-feedback">
     Please choose a username.
     </div>
     </div>
     </div>
     <div class="col-md-6">
     <label for="validationServer03" class="form-label">City</label>
     <input type="text" class="form-control is-invalid" id="validationServer03" aria-describedby="validationServer03Feedback" required>
     <div id="validationServer03Feedback" class="invalid-feedback">
     Please provide a valid city.
     </div>
     </div>
     <div class="col-md-3">
     <label for="validationServer04" class="form-label">State</label>
     <select class="form-select is-invalid" id="validationServer04" aria-describedby="validationServer04Feedback" required>
     <option selected disabled value="">Choose...</option>
     <option>...</option>
     </select>
     <div id="validationServer04Feedback" class="invalid-feedback">
     Please select a valid state.
     </div>
     </div>
     <div class="col-md-3">
     <label for="validationServer05" class="form-label">Zip</label>
     <input type="text" class="form-control is-invalid" id="validationServer05" aria-describedby="validationServer05Feedback" required>
     <div id="validationServer05Feedback" class="invalid-feedback">
     Please provide a valid zip.
     </div>
     </div>
     <div class="col-12">
     <div class="form-check">
     <input class="form-check-input is-invalid" type="checkbox" value="" id="invalidCheck3" aria-describedby="invalidCheck3Feedback" required>
     <label class="form-check-label" for="invalidCheck3">
     Agree to terms and conditions
     </label>
     <div id="invalidCheck3Feedback" class="invalid-feedback">
     You must agree before submitting.
     </div>
     </div>
     </div>
     <div class="col-12">
     <button class="btn btn-primary" type="submit">Submit form</button>
     </div>
    </form>
    ```

    Supported elements
    ------------------


    Validation styles are available for the following form controls and components:


    * `<input>`s and `<textarea>`s with `.form-control` (including up to one `.form-control` in input groups)
    * `<select>`s with `.form-select`
    * `.form-check`s





    Textarea


     Please enter a message in the textarea.




    Check this checkbox
    Example invalid feedback text



    Toggle this radio



    Or toggle this other radio
    More example invalid feedback text



    Open this select menu
    One
    Two
    Three

    Example invalid select feedback



    Example invalid form file feedback


    Submit form



    html









    ```
    <form class="was-validated">
     <div class="mb-3">
     <label for="validationTextarea" class="form-label">Textarea</label>
     <textarea class="form-control" id="validationTextarea" placeholder="Required example textarea" required></textarea>
     <div class="invalid-feedback">
     Please enter a message in the textarea.
     </div>
     </div>

     <div class="form-check mb-3">
     <input type="checkbox" class="form-check-input" id="validationFormCheck1" required>
     <label class="form-check-label" for="validationFormCheck1">Check this checkbox</label>
     <div class="invalid-feedback">Example invalid feedback text</div>
     </div>

     <div class="form-check">
     <input type="radio" class="form-check-input" id="validationFormCheck2" name="radio-stacked" required>
     <label class="form-check-label" for="validationFormCheck2">Toggle this radio</label>
     </div>
     <div class="form-check mb-3">
     <input type="radio" class="form-check-input" id="validationFormCheck3" name="radio-stacked" required>
     <label class="form-check-label" for="validationFormCheck3">Or toggle this other radio</label>
     <div class="invalid-feedback">More example invalid feedback text</div>
     </div>

     <div class="mb-3">
     <select class="form-select" required aria-label="select example">
     <option value="">Open this select menu</option>
     <option value="1">One</option>
     <option value="2">Two</option>
     <option value="3">Three</option>
     </select>
     <div class="invalid-feedback">Example invalid select feedback</div>
     </div>

     <div class="mb-3">
     <input type="file" class="form-control" aria-label="file example" required>
     <div class="invalid-feedback">Example invalid form file feedback</div>
     </div>

     <div class="mb-3">
     <button class="btn btn-primary" type="submit" disabled>Submit form</button>
     </div>
    </form>
    ```

    Tooltips
    --------


    If your form layout allows it, you can swap the `.{valid|invalid}-feedback` classes for `.{valid|invalid}-tooltip` classes to display validation feedback in a styled tooltip. Be sure to have a parent with `position: relative` on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.





    First name


     Looks good!



    Last name


     Looks good!



    Username

    @


     Please choose a unique and valid username.




    City


     Please provide a valid city.



    State

    Choose...
    ...


     Please select a valid state.



    Zip


     Please provide a valid zip.



    Submit form



    html









    ```
    <form class="row g-3 needs-validation" novalidate>
     <div class="col-md-4 position-relative">
     <label for="validationTooltip01" class="form-label">First name</label>
     <input type="text" class="form-control" id="validationTooltip01" value="Mark" required>
     <div class="valid-tooltip">
     Looks good!
     </div>
     </div>
     <div class="col-md-4 position-relative">
     <label for="validationTooltip02" class="form-label">Last name</label>
     <input type="text" class="form-control" id="validationTooltip02" value="Otto" required>
     <div class="valid-tooltip">
     Looks good!
     </div>
     </div>
     <div class="col-md-4 position-relative">
     <label for="validationTooltipUsername" class="form-label">Username</label>
     <div class="input-group has-validation">
     <span class="input-group-text" id="validationTooltipUsernamePrepend">@</span>
     <input type="text" class="form-control" id="validationTooltipUsername" aria-describedby="validationTooltipUsernamePrepend" required>
     <div class="invalid-tooltip">
     Please choose a unique and valid username.
     </div>
     </div>
     </div>
     <div class="col-md-6 position-relative">
     <label for="validationTooltip03" class="form-label">City</label>
     <input type="text" class="form-control" id="validationTooltip03" required>
     <div class="invalid-tooltip">
     Please provide a valid city.
     </div>
     </div>
     <div class="col-md-3 position-relative">
     <label for="validationTooltip04" class="form-label">State</label>
     <select class="form-select" id="validationTooltip04" required>
     <option selected disabled value="">Choose...</option>
     <option>...</option>
     </select>
     <div class="invalid-tooltip">
     Please select a valid state.
     </div>
     </div>
     <div class="col-md-3 position-relative">
     <label for="validationTooltip05" class="form-label">Zip</label>
     <input type="text" class="form-control" id="validationTooltip05" required>
     <div class="invalid-tooltip">
     Please provide a valid zip.
     </div>
     </div>
     <div class="col-12">
     <button class="btn btn-primary" type="submit">Submit form</button>
     </div>
    </form>
    ```

    CSS
    ---


    ### Variables


    Added in v5.3.0
    As part of Bootstrap’s evolving CSS variables approach, forms now use local CSS variables for validation for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    --#{$prefix}form-valid-color: #{$form-valid-color};
    --#{$prefix}form-valid-border-color: #{$form-valid-border-color};
    --#{$prefix}form-invalid-color: #{$form-invalid-color};
    --#{$prefix}form-invalid-border-color: #{$form-invalid-border-color};
    ```

    These variables are also color mode adaptive, meaning they change color while in dark mode.


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-feedback-margin-top: $form-text-margin-top;
    $form-feedback-font-size: $form-text-font-size;
    $form-feedback-font-style: $form-text-font-style;
    $form-feedback-valid-color: $success;
    $form-feedback-invalid-color: $danger;

    $form-feedback-icon-valid-color: $form-feedback-valid-color;
    $form-feedback-icon-valid: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='#{$form-feedback-icon-valid-color}' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/></svg>");
    $form-feedback-icon-invalid-color: $form-feedback-invalid-color;
    $form-feedback-icon-invalid: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='#{$form-feedback-icon-invalid-color}'><circle cx='6' cy='6' r='4.5'/><path stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/><circle cx='6' cy='8.2' r='.6' fill='#{$form-feedback-icon-invalid-color}' stroke='none'/></svg>");

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-valid-color: $form-feedback-valid-color;
    $form-valid-border-color: $form-feedback-valid-color;
    $form-invalid-color: $form-feedback-invalid-color;
    $form-invalid-border-color: $form-feedback-invalid-color;

    ```



    [scss/\_variables-dark.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables-dark.scss)






    ```
    $form-valid-color-dark: $green-300;
    $form-valid-border-color-dark: $green-300;
    $form-invalid-color-dark: $red-300;
    $form-invalid-border-color-dark: $red-300;

    ```

    ### Sass mixins


    Two mixins are combined, through our [loop](#sass-loops), to generate our form validation feedback styles.




    [scss/mixins/\_forms.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_forms.scss)






    ```
    @mixin form-validation-state-selector($state) {
     @if ($state == "valid" or $state == "invalid") {
     .was-validated #{if(&, "&", "")}:#{$state},
     #{if(&, "&", "")}.is-#{$state} {
     @content;
     }
     } @else {
     #{if(&, "&", "")}.is-#{$state} {
     @content;
     }
     }
    }

    @mixin form-validation-state(
     $state,
     $color,
     $icon,
     $tooltip-color: color-contrast($color),
     $tooltip-bg-color: rgba($color, $form-feedback-tooltip-opacity),
     $focus-box-shadow: 0 0 $input-btn-focus-blur $input-focus-width rgba($color, $input-btn-focus-color-opacity),
     $border-color: $color
    ) {
     .#{$state}-feedback {
     display: none;
     width: 100%;
     margin-top: $form-feedback-margin-top;
     @include font-size($form-feedback-font-size);
     font-style: $form-feedback-font-style;
     color: $color;
     }

     .#{$state}-tooltip {
     position: absolute;
     top: 100%;
     z-index: 5;
     display: none;
     max-width: 100%; // Contain to parent when possible
     padding: $form-feedback-tooltip-padding-y $form-feedback-tooltip-padding-x;
     margin-top: .1rem;
     @include font-size($form-feedback-tooltip-font-size);
     line-height: $form-feedback-tooltip-line-height;
     color: $tooltip-color;
     background-color: $tooltip-bg-color;
     @include border-radius($form-feedback-tooltip-border-radius);
     }

     @include form-validation-state-selector($state) {
     ~ .#{$state}-feedback,
     ~ .#{$state}-tooltip {
     display: block;
     }
     }

     .form-control {
     @include form-validation-state-selector($state) {
     border-color: $border-color;

     @if $enable-validation-icons {
     padding-right: $input-height-inner;
     background-image: escape-svg($icon);
     background-repeat: no-repeat;
     background-position: right $input-height-inner-quarter center;
     background-size: $input-height-inner-half $input-height-inner-half;
     }

     &:focus {
     border-color: $border-color;
     box-shadow: $focus-box-shadow;
     }
     }
     }

     // stylelint-disable-next-line selector-no-qualifying-type
     textarea.form-control {
     @include form-validation-state-selector($state) {
     @if $enable-validation-icons {
     padding-right: $input-height-inner;
     background-position: top $input-height-inner-quarter right $input-height-inner-quarter;
     }
     }
     }

     .form-select {
     @include form-validation-state-selector($state) {
     border-color: $border-color;

     @if $enable-validation-icons {
     &:not([multiple]):not([size]),
     &:not([multiple])[size="1"] {
     --#{$prefix}form-select-bg-icon: #{escape-svg($icon)};
     padding-right: $form-select-feedback-icon-padding-end;
     background-position: $form-select-bg-position, $form-select-feedback-icon-position;
     background-size: $form-select-bg-size, $form-select-feedback-icon-size;
     }
     }

     &:focus {
     border-color: $border-color;
     box-shadow: $focus-box-shadow;
     }
     }
     }

     .form-control-color {
     @include form-validation-state-selector($state) {
     @if $enable-validation-icons {
     width: add($form-color-width, $input-height-inner);
     }
     }
     }

     .form-check-input {
     @include form-validation-state-selector($state) {
     border-color: $border-color;

     &:checked {
     background-color: $color;
     }

     &:focus {
     box-shadow: $focus-box-shadow;
     }

     ~ .form-check-label {
     color: $color;
     }
     }
     }
     .form-check-inline .form-check-input {
     ~ .#{$state}-feedback {
     margin-left: .5em;
     }
     }

     .input-group {
     > .form-control:not(:focus),
     > .form-select:not(:focus),
     > .form-floating:not(:focus-within) {
     @include form-validation-state-selector($state) {
     @if $state == "valid" {
     z-index: 3;
     } @else if $state == "invalid" {
     z-index: 4;
     }
     }
     }
     }
    }

    ```

    ### Sass maps


    This is the validation Sass map from `_variables.scss`. Override or extend this to generate different or additional states.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $form-validation-states: (
     "valid": (
     "color": var(--#{$prefix}form-valid-color),
     "icon": $form-feedback-icon-valid,
     "tooltip-color": #fff,
     "tooltip-bg-color": var(--#{$prefix}success),
     "focus-box-shadow": 0 0 $input-btn-focus-blur $input-focus-width rgba(var(--#{$prefix}success-rgb), $input-btn-focus-color-opacity),
     "border-color": var(--#{$prefix}form-valid-border-color),
     ),
     "invalid": (
     "color": var(--#{$prefix}form-invalid-color),
     "icon": $form-feedback-icon-invalid,
     "tooltip-color": #fff,
     "tooltip-bg-color": var(--#{$prefix}danger),
     "focus-box-shadow": 0 0 $input-btn-focus-blur $input-focus-width rgba(var(--#{$prefix}danger-rgb), $input-btn-focus-color-opacity),
     "border-color": var(--#{$prefix}form-invalid-border-color),
     )
    );

    ```

    Maps of `$form-validation-states` can contain three optional parameters to override tooltips and focus styles.


    ### Sass loops


    Used to iterate over `$form-validation-states` map values to generate our validation styles. Any modifications to the above Sass map will be reflected in your compiled CSS via this loop.




    [scss/forms/\_validation.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/forms/_validation.scss)






    ```
    @each $state, $data in $form-validation-states {
     @include form-validation-state($state, $data...);
    }

    ```

    ### Customizing


    Validation states can be customized via Sass with the `$form-validation-states` map. Located in our `_variables.scss` file, this Sass map is how we generate the default `valid`/`invalid` validation states. Included is a nested map for customizing each state’s color, icon, tooltip color, and focus shadow. While no other states are supported by browsers, those using custom styles can easily add more complex form feedback.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ACCORDION:
    """

    Accordion
    =========



    Build vertically collapsing accordions in combination with our Collapse JavaScript plugin.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Example](#example)
            + [Flush](#flush)
            + [Always open](#always-open)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)






    How it works
    ------------


    The accordion uses [collapse](https://getbootstrap.com/docs/5.3/components/collapse/) internally to make it collapsible. To render an accordion that’s expanded, add the `.open` class on the `.accordion`.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Example
    -------


    Click the accordions below to expand/collapse the accordion content.







     Accordion Item #1
    --------------------




    **This is the first item's accordion body.** It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.






     Accordion Item #2
    --------------------




    **This is the second item's accordion body.** It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.






     Accordion Item #3
    --------------------




    **This is the third item's accordion body.** It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.





    html









    ```
    <div class="accordion" id="accordionExample">
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
     Accordion Item #1
     </button>
     </h2>
     <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
     <div class="accordion-body">
     <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
     Accordion Item #2
     </button>
     </h2>
     <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
     <div class="accordion-body">
     <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
     Accordion Item #3
     </button>
     </h2>
     <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
     <div class="accordion-body">
     <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
    </div>
    ```

    ### Flush


    Add `.accordion-flush` to remove some borders and rounded corners to render accordions edge-to-edge with their parent container.







     Accordion Item #1
    --------------------



    Placeholder content for this accordion, which is intended to demonstrate the `.accordion-flush` class. This is the first item's accordion body.





     Accordion Item #2
    --------------------



    Placeholder content for this accordion, which is intended to demonstrate the `.accordion-flush` class. This is the second item's accordion body. Let's imagine this being filled with some actual content.





     Accordion Item #3
    --------------------



    Placeholder content for this accordion, which is intended to demonstrate the `.accordion-flush` class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.




    html









    ```
    <div class="accordion accordion-flush" id="accordionFlushExample">
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
     Accordion Item #1
     </button>
     </h2>
     <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
     <div class="accordion-body">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the first item's accordion body.</div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
     Accordion Item #2
     </button>
     </h2>
     <div id="flush-collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
     <div class="accordion-body">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the second item's accordion body. Let's imagine this being filled with some actual content.</div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseThree" aria-expanded="false" aria-controls="flush-collapseThree">
     Accordion Item #3
     </button>
     </h2>
     <div id="flush-collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
     <div class="accordion-body">Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.</div>
     </div>
     </div>
    </div>
    ```

    ### Always open


    Omit the `data-bs-parent` attribute on each `.accordion-collapse` to make accordion items stay open when another item is opened.







     Accordion Item #1
    --------------------




    **This is the first item's accordion body.** It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.






     Accordion Item #2
    --------------------




    **This is the second item's accordion body.** It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.






     Accordion Item #3
    --------------------




    **This is the third item's accordion body.** It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the `.accordion-body`, though the transition does limit overflow.





    html









    ```
    <div class="accordion" id="accordionPanelsStayOpenExample">
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
     Accordion Item #1
     </button>
     </h2>
     <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show">
     <div class="accordion-body">
     <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
     Accordion Item #2
     </button>
     </h2>
     <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse">
     <div class="accordion-body">
     <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
     <div class="accordion-item">
     <h2 class="accordion-header">
     <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
     Accordion Item #3
     </button>
     </h2>
     <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse">
     <div class="accordion-body">
     <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
     </div>
     </div>
     </div>
    </div>
    ```

    Accessibility
    -------------


    Please read the [collapse accessibility section](https://getbootstrap.com/docs/5.3/components/collapse/#accessibility) for more information.


    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, accordions now use local CSS variables on `.accordion` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_accordion.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_accordion.scss)






    ```
    --#{$prefix}accordion-color: #{$accordion-color};
    --#{$prefix}accordion-bg: #{$accordion-bg};
    --#{$prefix}accordion-transition: #{$accordion-transition};
    --#{$prefix}accordion-border-color: #{$accordion-border-color};
    --#{$prefix}accordion-border-width: #{$accordion-border-width};
    --#{$prefix}accordion-border-radius: #{$accordion-border-radius};
    --#{$prefix}accordion-inner-border-radius: #{$accordion-inner-border-radius};
    --#{$prefix}accordion-btn-padding-x: #{$accordion-button-padding-x};
    --#{$prefix}accordion-btn-padding-y: #{$accordion-button-padding-y};
    --#{$prefix}accordion-btn-color: #{$accordion-button-color};
    --#{$prefix}accordion-btn-bg: #{$accordion-button-bg};
    --#{$prefix}accordion-btn-icon: #{escape-svg($accordion-button-icon)};
    --#{$prefix}accordion-btn-icon-width: #{$accordion-icon-width};
    --#{$prefix}accordion-btn-icon-transform: #{$accordion-icon-transform};
    --#{$prefix}accordion-btn-icon-transition: #{$accordion-icon-transition};
    --#{$prefix}accordion-btn-active-icon: #{escape-svg($accordion-button-active-icon)};
    --#{$prefix}accordion-btn-focus-border-color: #{$accordion-button-focus-border-color};
    --#{$prefix}accordion-btn-focus-box-shadow: #{$accordion-button-focus-box-shadow};
    --#{$prefix}accordion-body-padding-x: #{$accordion-body-padding-x};
    --#{$prefix}accordion-body-padding-y: #{$accordion-body-padding-y};
    --#{$prefix}accordion-active-color: #{$accordion-button-active-color};
    --#{$prefix}accordion-active-bg: #{$accordion-button-active-bg};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $accordion-padding-y: 1rem;
    $accordion-padding-x: 1.25rem;
    $accordion-color: var(--#{$prefix}body-color);
    $accordion-bg: var(--#{$prefix}body-bg);
    $accordion-border-width: var(--#{$prefix}border-width);
    $accordion-border-color: var(--#{$prefix}border-color);
    $accordion-border-radius: var(--#{$prefix}border-radius);
    $accordion-inner-border-radius: subtract($accordion-border-radius, $accordion-border-width);

    $accordion-body-padding-y: $accordion-padding-y;
    $accordion-body-padding-x: $accordion-padding-x;

    $accordion-button-padding-y: $accordion-padding-y;
    $accordion-button-padding-x: $accordion-padding-x;
    $accordion-button-color: var(--#{$prefix}body-color);
    $accordion-button-bg: var(--#{$prefix}accordion-bg);
    $accordion-transition: $btn-transition, border-radius .15s ease;
    $accordion-button-active-bg: var(--#{$prefix}primary-bg-subtle);
    $accordion-button-active-color: var(--#{$prefix}primary-text-emphasis);

    $accordion-button-focus-border-color: $input-focus-border-color;
    $accordion-button-focus-box-shadow: $btn-focus-box-shadow;

    $accordion-icon-width: 1.25rem;
    $accordion-icon-color: $body-color;
    $accordion-icon-active-color: $primary-text-emphasis;
    $accordion-icon-transition: transform .2s ease-in-out;
    $accordion-icon-transform: rotate(-180deg);

    $accordion-button-icon: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-color}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");
    $accordion-button-active-icon: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-active-color}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>");

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ALERTS:
    """

    Alerts
    ======



    Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.






     On this page


    **On this page**


    ---




    * [Examples](#examples)
            + [Live example](#live-example)
            + [Link color](#link-color)
            + [Additional content](#additional-content)
            + [Icons](#icons)
            + [Dismissing](#dismissing)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
            + [Sass loops](#sass-loops)
    * [JavaScript behavior](#javascript-behavior)
            + [Initialize](#initialize)
            + [Triggers](#triggers)
            + [Methods](#methods)
            + [Events](#events)






    Examples
    --------


    Alerts are available for any length of text, as well as an optional close button. For proper styling, use one of the eight **required** contextual classes (e.g., `.alert-success`). For inline dismissal, use the [alerts JavaScript plugin](#dismissing).



    **Heads up!** As of v5.3.0, the `alert-variant()` Sass mixin is deprecated. Alert variants now have their CSS variables overridden in [a Sass loop](#sass-loops).



     A simple primary alert—check it out!


     A simple secondary alert—check it out!


     A simple success alert—check it out!


     A simple danger alert—check it out!


     A simple warning alert—check it out!


     A simple info alert—check it out!


     A simple light alert—check it out!


     A simple dark alert—check it out!


    html









    ```
    <div class="alert alert-primary" role="alert">
     A simple primary alert—check it out!
    </div>
    <div class="alert alert-secondary" role="alert">
     A simple secondary alert—check it out!
    </div>
    <div class="alert alert-success" role="alert">
     A simple success alert—check it out!
    </div>
    <div class="alert alert-danger" role="alert">
     A simple danger alert—check it out!
    </div>
    <div class="alert alert-warning" role="alert">
     A simple warning alert—check it out!
    </div>
    <div class="alert alert-info" role="alert">
     A simple info alert—check it out!
    </div>
    <div class="alert alert-light" role="alert">
     A simple light alert—check it out!
    </div>
    <div class="alert alert-dark" role="alert">
     A simple dark alert—check it out!
    </div>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    ### Live example


    Click the button below to show an alert (hidden with inline styles to start), then dismiss (and destroy) it with the built-in close button.




    Show live alert

    html









    ```
    <div id="liveAlertPlaceholder"></div>
    <button type="button" class="btn btn-primary" id="liveAlertBtn">Show live alert</button>
    ```

    We use the following JavaScript to trigger our live alert demo:




    [site/assets/js/snippets.js](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/js/snippets.js)






    ```
    const alertPlaceholder = document.getElementById('liveAlertPlaceholder')
    const appendAlert = (message, type) => {
     const wrapper = document.createElement('div')
     wrapper.innerHTML = [
     `<div class="alert alert-${type} alert-dismissible" role="alert">`,
     ` <div>${message}</div>`,
     ' <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
     '</div>'
     ].join('')

     alertPlaceholder.append(wrapper)
    }

    const alertTrigger = document.getElementById('liveAlertBtn')
    if (alertTrigger) {
     alertTrigger.addEventListener('click', () => {
     appendAlert('Nice, you triggered this alert message!', 'success')
     })
    }
    ```

    ### Link color


    Use the `.alert-link` utility class to quickly provide matching colored links within any alert.




     A simple primary alert with [an example link](#). Give it a click if you like.


     A simple secondary alert with [an example link](#). Give it a click if you like.


     A simple success alert with [an example link](#). Give it a click if you like.


     A simple danger alert with [an example link](#). Give it a click if you like.


     A simple warning alert with [an example link](#). Give it a click if you like.


     A simple info alert with [an example link](#). Give it a click if you like.


     A simple light alert with [an example link](#). Give it a click if you like.


     A simple dark alert with [an example link](#). Give it a click if you like.


    html









    ```
    <div class="alert alert-primary" role="alert">
     A simple primary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-secondary" role="alert">
     A simple secondary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-success" role="alert">
     A simple success alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-danger" role="alert">
     A simple danger alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-warning" role="alert">
     A simple warning alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-info" role="alert">
     A simple info alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-light" role="alert">
     A simple light alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    <div class="alert alert-dark" role="alert">
     A simple dark alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>
    ```

    ### Additional content


    Alerts can also contain additional HTML elements like headings, paragraphs and dividers.




    #### Well done!


    Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.




    ---


    Whenever you need to, be sure to use margin utilities to keep things nice and tidy.




    html









    ```
    <div class="alert alert-success" role="alert">
     <h4 class="alert-heading">Well done!</h4>
     <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
     <hr>
     <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
    </div>
    ```

    ### Icons


    Similarly, you can use [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/) and [Bootstrap Icons](https://icons.getbootstrap.com/) to create alerts with icons. Depending on your icons and content, you may want to add more utilities or custom styles.








     An example alert with an icon



    html









    ```
    <div class="alert alert-primary d-flex align-items-center" role="alert">
     <svg xmlns="http://www.w3.org/2000/svg" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
     <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
     </svg>
     <div>
     An example alert with an icon
     </div>
    </div>
    ```

    Need more than one icon for your alerts? Consider using more Bootstrap Icons and making a local SVG sprite like so to easily reference the same icons repeatedly.

















     An example alert with an icon





     An example success alert with an icon





     An example warning alert with an icon





     An example danger alert with an icon



    html









    ```
    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
     <symbol id="check-circle-fill" viewBox="0 0 16 16">
     <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
     </symbol>
     <symbol id="info-fill" viewBox="0 0 16 16">
     <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
     </symbol>
     <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
     <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
     </symbol>
    </svg>

    <div class="alert alert-primary d-flex align-items-center" role="alert">
     <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg>
     <div>
     An example alert with an icon
     </div>
    </div>
    <div class="alert alert-success d-flex align-items-center" role="alert">
     <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>
     <div>
     An example success alert with an icon
     </div>
    </div>
    <div class="alert alert-warning d-flex align-items-center" role="alert">
     <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
     <div>
     An example warning alert with an icon
     </div>
    </div>
    <div class="alert alert-danger d-flex align-items-center" role="alert">
     <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill"/></svg>
     <div>
     An example danger alert with an icon
     </div>
    </div>
    ```

    ### Dismissing


    Using the alert JavaScript plugin, it’s possible to dismiss any alert inline. Here’s how:


    * Be sure you’ve loaded the alert plugin, or the compiled Bootstrap JavaScript.
    * Add a [close button](https://getbootstrap.com/docs/5.3/components/close-button/) and the `.alert-dismissible` class, which adds extra padding to the right of the alert and positions the close button.
    * On the close button, add the `data-bs-dismiss="alert"` attribute, which triggers the JavaScript functionality. Be sure to use the `<button>` element with it for proper behavior across all devices.
    * To animate alerts when dismissing them, be sure to add the `.fade` and `.show` classes.


    You can see this in action with a live demo:




    **Holy guacamole!** You should check in on some of those fields below.



    html









    ```
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
     <strong>Holy guacamole!</strong> You should check in on some of those fields below.
     <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    ```


    When an alert is dismissed, the element is completely removed from the page structure. If a keyboard user dismisses the alert using the close button, their focus will suddenly be lost and, depending on the browser, reset to the start of the page/document. For this reason, we recommend including additional JavaScript that listens for the `closed.bs.alert` event and programmatically sets `focus()` to the most appropriate location in the page. If you’re planning to move focus to a non-interactive element that normally does not receive focus, make sure to add `tabindex="-1"` to the element.

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, alerts now use local CSS variables on `.alert` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_alert.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_alert.scss)






    ```
    --#{$prefix}alert-bg: transparent;
    --#{$prefix}alert-padding-x: #{$alert-padding-x};
    --#{$prefix}alert-padding-y: #{$alert-padding-y};
    --#{$prefix}alert-margin-bottom: #{$alert-margin-bottom};
    --#{$prefix}alert-color: inherit;
    --#{$prefix}alert-border-color: transparent;
    --#{$prefix}alert-border: #{$alert-border-width} solid var(--#{$prefix}alert-border-color);
    --#{$prefix}alert-border-radius: #{$alert-border-radius};
    --#{$prefix}alert-link-color: inherit;
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $alert-padding-y: $spacer;
    $alert-padding-x: $spacer;
    $alert-margin-bottom: 1rem;
    $alert-border-radius: var(--#{$prefix}border-radius);
    $alert-link-font-weight: $font-weight-bold;
    $alert-border-width: var(--#{$prefix}border-width);
    $alert-dismissible-padding-r: $alert-padding-x \* 3; // 3x covers width of x plus default padding on either side

    ```

    ### Sass mixins


    Deprecated in v5.3.0
    Used in combination with `$theme-colors` to create contextual modifier classes for our alerts.




    [scss/mixins/\_alert.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_alert.scss)






    ```
    @mixin alert-variant($background, $border, $color) {
     --#{$prefix}alert-color: #{$color};
     --#{$prefix}alert-bg: #{$background};
     --#{$prefix}alert-border-color: #{$border};
     --#{$prefix}alert-link-color: #{shade-color($color, 20%)};

     @if $enable-gradients {
     background-image: var(--#{$prefix}gradient);
     }

     .alert-link {
     color: var(--#{$prefix}alert-link-color);
     }
    }

    ```

    ### Sass loops


    Loop that generates the modifier classes with the `alert-variant()` mixin.




    [scss/\_alert.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_alert.scss)






    ```
    // Generate contextual modifier classes for colorizing the alert
    @each $state in map-keys($theme-colors) {
     .alert-#{$state} {
     --#{$prefix}alert-color: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}alert-bg: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}alert-border-color: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}alert-link-color: var(--#{$prefix}#{$state}-text-emphasis);
     }
    }

    ```

    JavaScript behavior
    -------------------


    ### Initialize


    Initialize elements as alerts



    ```
    const alertList = document.querySelectorAll('.alert')
    const alerts = [...alertList].map(element => new bootstrap.Alert(element))

    ```

    For the sole purpose of dismissing an alert, it isn’t necessary to initialize the component manually via the JS API. By making use of `data-bs-dismiss="alert"`, the component will be initialized automatically and properly dismissed.


    See the [triggers](#triggers) section for more details.



    ### Triggers


    Dismissal can be achieved with the `data-bs-dismiss` attribute on a button **within the alert** as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>

    ```
    or on a button **outside the alert** using the additional `data-bs-target` as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="alert" data-bs-target="#my-alert" aria-label="Close"></button>

    ```
    **Note that closing an alert will remove it from the DOM.**


    ### Methods


    You can create an alert instance with the alert constructor, for example:



    ```
    const bsAlert = new bootstrap.Alert('#myAlert')

    ```
    This makes an alert listen for click events on descendant elements which have the `data-bs-dismiss="alert"` attribute. (Not necessary when using the data-api’s auto-initialization.)




    | Method | Description |
    | --- | --- |
    | `close` | Closes an alert by removing it from the DOM. If the `.fade` and `.show` classes are present on the element, the alert will fade out before it is removed. |
    | `dispose` | Destroys an element’s alert. (Removes stored data on the DOM element) |
    | `getInstance` | Static method which allows you to get the alert instance associated to a DOM element. For example: `bootstrap.Alert.getInstance(alert)`. |
    | `getOrCreateInstance` | Static method which returns an alert instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Alert.getOrCreateInstance(element)`. |


    Basic usage:



    ```
    const alert = bootstrap.Alert.getOrCreateInstance('#myAlert')
    alert.close()

    ```
    ### Events


    Bootstrap’s alert plugin exposes a few events for hooking into alert functionality.




    | Event | Description |
    | --- | --- |
    | `close.bs.alert` | Fires immediately when the `close` instance method is called. |
    | `closed.bs.alert` | Fired when the alert has been closed and CSS transitions have completed. |



    ```
    const myAlert = document.getElementById('myAlert')
    myAlert.addEventListener('closed.bs.alert', event => {
     // do something, for instance, explicitly move focus to the most appropriate element,
     // so it doesn't get lost/reset to the start of the page
     // document.getElementById('...').focus()
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BADGES:
    """

    Badges
    ======



    Documentation and examples for badges, our small count and labeling component.






     On this page


    **On this page**


    ---




    * [Examples](#examples)
            + [Headings](#headings)
            + [Buttons](#buttons)
            + [Positioned](#positioned)
    * [Background colors](#background-colors)
    * [Pill badges](#pill-badges)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)






    Examples
    --------


    Badges scale to match the size of the immediate parent element by using relative font sizing and `em` units. As of v5, badges no longer have focus or hover styles for links.


    ### Headings



    Example heading New
    ===================


    Example heading New
    -------------------


    ### Example heading New


    #### Example heading New


    ##### Example heading New


    ###### Example heading New



    html









    ```
    <h1>Example heading <span class="badge bg-secondary">New</span></h1>
    <h2>Example heading <span class="badge bg-secondary">New</span></h2>
    <h3>Example heading <span class="badge bg-secondary">New</span></h3>
    <h4>Example heading <span class="badge bg-secondary">New</span></h4>
    <h5>Example heading <span class="badge bg-secondary">New</span></h5>
    <h6>Example heading <span class="badge bg-secondary">New</span></h6>
    ```

    ### Buttons


    Badges can be used as part of links or buttons to provide a counter.




     Notifications 4


    html









    ```
    <button type="button" class="btn btn-primary">
     Notifications <span class="badge text-bg-secondary">4</span>
    </button>
    ```

    Note that depending on how they are used, badges may be confusing for users of screen readers and similar assistive technologies. While the styling of badges provides a visual cue as to their purpose, these users will simply be presented with the content of the badge. Depending on the specific situation, these badges may seem like random additional words or numbers at the end of a sentence, link, or button.


    Unless the context is clear (as with the “Notifications” example, where it is understood that the “4” is the number of notifications), consider including additional context with a visually hidden piece of additional text.


    ### Positioned


    Use utilities to modify a `.badge` and position it in the corner of a link or button.




     Inbox

     99+
     unread messages



    html









    ```
    <button type="button" class="btn btn-primary position-relative">
     Inbox
     <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
     99+
     <span class="visually-hidden">unread messages</span>
     </span>
    </button>
    ```

    You can also replace the `.badge` class with a few more utilities without a count for a more generic indicator.




     Profile

    New alerts



    html









    ```
    <button type="button" class="btn btn-primary position-relative">
     Profile
     <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
     <span class="visually-hidden">New alerts</span>
     </span>
    </button>
    ```

    Background colors
    -----------------


    Added in v5.2.0
    Set a `background-color` with contrasting foreground `color` with [our `.text-bg-{color}` helpers](https://getbootstrap.com/docs/5.3/helpers/color-background/). Previously it was required to manually pair your choice of [`.text-{color}`](https://getbootstrap.com/docs/5.3/utilities/colors/) and [`.bg-{color}`](https://getbootstrap.com/docs/5.3/utilities/background/) utilities for styling, which you still may use if you prefer.



    Primary
    Secondary
    Success
    Danger
    Warning
    Info
    Light
    Dark

    html









    ```
    <span class="badge text-bg-primary">Primary</span>
    <span class="badge text-bg-secondary">Secondary</span>
    <span class="badge text-bg-success">Success</span>
    <span class="badge text-bg-danger">Danger</span>
    <span class="badge text-bg-warning">Warning</span>
    <span class="badge text-bg-info">Info</span>
    <span class="badge text-bg-light">Light</span>
    <span class="badge text-bg-dark">Dark</span>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Pill badges
    -----------


    Use the `.rounded-pill` utility class to make badges more rounded with a larger `border-radius`.



    Primary
    Secondary
    Success
    Danger
    Warning
    Info
    Light
    Dark

    html









    ```
    <span class="badge rounded-pill text-bg-primary">Primary</span>
    <span class="badge rounded-pill text-bg-secondary">Secondary</span>
    <span class="badge rounded-pill text-bg-success">Success</span>
    <span class="badge rounded-pill text-bg-danger">Danger</span>
    <span class="badge rounded-pill text-bg-warning">Warning</span>
    <span class="badge rounded-pill text-bg-info">Info</span>
    <span class="badge rounded-pill text-bg-light">Light</span>
    <span class="badge rounded-pill text-bg-dark">Dark</span>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, badges now use local CSS variables on `.badge` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_badge.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_badge.scss)






    ```
    --#{$prefix}badge-padding-x: #{$badge-padding-x};
    --#{$prefix}badge-padding-y: #{$badge-padding-y};
    @include rfs($badge-font-size, --#{$prefix}badge-font-size);
    --#{$prefix}badge-font-weight: #{$badge-font-weight};
    --#{$prefix}badge-color: #{$badge-color};
    --#{$prefix}badge-border-radius: #{$badge-border-radius};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $badge-font-size: .75em;
    $badge-font-weight: $font-weight-bold;
    $badge-color: $white;
    $badge-padding-y: .35em;
    $badge-padding-x: .65em;
    $badge-border-radius: var(--#{$prefix}border-radius);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BREADCRUMB:
    """

    Breadcrumb
    ==========



    Indicate the current page’s location within a navigational hierarchy that automatically adds separators via CSS.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Dividers](#dividers)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)






    Example
    -------


    Use an ordered or unordered list with linked list items to create a minimally styled breadcrumb. Use our utilities to add additional styles as desired.




    1. Home




    1. [Home](#)
    2. Library




    1. [Home](#)
    2. [Library](#)
    3. Data




    html









    ```
    <nav aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item active" aria-current="page">Home</li>
     </ol>
    </nav>

    <nav aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item"><a href="#">Home</a></li>
     <li class="breadcrumb-item active" aria-current="page">Library</li>
     </ol>
    </nav>

    <nav aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item"><a href="#">Home</a></li>
     <li class="breadcrumb-item"><a href="#">Library</a></li>
     <li class="breadcrumb-item active" aria-current="page">Data</li>
     </ol>
    </nav>
    ```

    Dividers
    --------


    Dividers are automatically added in CSS through [`::before`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/::before) and [`content`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/content). They can be changed by modifying a local CSS custom property `--bs-breadcrumb-divider`, or through the `$breadcrumb-divider` Sass variable — and `$breadcrumb-divider-flipped` for its RTL counterpart, if needed. We default to our Sass variable, which is set as a fallback to the custom property. This way, you get a global divider that you can override without recompiling CSS at any time.




    1. [Home](#)
    2. Library




    html









    ```
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item"><a href="#">Home</a></li>
     <li class="breadcrumb-item active" aria-current="page">Library</li>
     </ol>
    </nav>
    ```

    When modifying via Sass, the [quote](https://sass-lang.com/documentation/modules/string#quote) function is required to generate the quotes around a string. For example, using `>` as the divider, you can use this:



    ```
    $breadcrumb-divider: quote(">");

    ```
    It’s also possible to use an **embedded SVG icon**. Apply it via our CSS custom property, or use the Sass variable.



    **Inlined SVG requires properly escaped characters.** Some reserved characters, such as `<`, `>` and `#`, must be URL-encoded or escaped. We do this with the `$breadcrumb-divider` variable using our [`escape-svg()` Sass function](https://getbootstrap.com/docs/5.3/customize/sass/#escape-svg). When customizing the CSS variable, you must handle this yourself. Read [Kevin Weber’s explanations on CodePen](https://codepen.io/kevinweber/pen/dXWoRw) for more info.



    1. [Home](#)
    2. Library




    html









    ```
    <nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item"><a href="#">Home</a></li>
     <li class="breadcrumb-item active" aria-current="page">Library</li>
     </ol>
    </nav>
    ```


    ```
    $breadcrumb-divider: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='8'><path d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='#{$breadcrumb-divider-color}'/></svg>");

    ```
    You can also remove the divider setting `--bs-breadcrumb-divider: '';` (empty strings in CSS custom properties counts as a value), or setting the Sass variable to `$breadcrumb-divider: none;`.




    1. [Home](#)
    2. Library




    html









    ```
    <nav style="--bs-breadcrumb-divider: '';" aria-label="breadcrumb">
     <ol class="breadcrumb">
     <li class="breadcrumb-item"><a href="#">Home</a></li>
     <li class="breadcrumb-item active" aria-current="page">Library</li>
     </ol>
    </nav>
    ```


    ```
    $breadcrumb-divider: none;

    ```
    Accessibility
    -------------


    Since breadcrumbs provide a navigation, it’s a good idea to add a meaningful label such as `aria-label="breadcrumb"` to describe the type of navigation provided in the `<nav>` element, as well as applying an `aria-current="page"` to the last item of the set to indicate that it represents the current page.


    For more information, see the [ARIA Authoring Practices Guide breadcrumb pattern](https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/).


    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, breadcrumbs now use local CSS variables on `.breadcrumb` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_breadcrumb.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_breadcrumb.scss)






    ```
    --#{$prefix}breadcrumb-padding-x: #{$breadcrumb-padding-x};
    --#{$prefix}breadcrumb-padding-y: #{$breadcrumb-padding-y};
    --#{$prefix}breadcrumb-margin-bottom: #{$breadcrumb-margin-bottom};
    @include rfs($breadcrumb-font-size, --#{$prefix}breadcrumb-font-size);
    --#{$prefix}breadcrumb-bg: #{$breadcrumb-bg};
    --#{$prefix}breadcrumb-border-radius: #{$breadcrumb-border-radius};
    --#{$prefix}breadcrumb-divider-color: #{$breadcrumb-divider-color};
    --#{$prefix}breadcrumb-item-padding-x: #{$breadcrumb-item-padding-x};
    --#{$prefix}breadcrumb-item-active-color: #{$breadcrumb-active-color};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $breadcrumb-font-size: null;
    $breadcrumb-padding-y: 0;
    $breadcrumb-padding-x: 0;
    $breadcrumb-item-padding-x: .5rem;
    $breadcrumb-margin-bottom: 1rem;
    $breadcrumb-bg: null;
    $breadcrumb-divider-color: var(--#{$prefix}secondary-color);
    $breadcrumb-active-color: var(--#{$prefix}secondary-color);
    $breadcrumb-divider: quote("/");
    $breadcrumb-divider-flipped: $breadcrumb-divider;
    $breadcrumb-border-radius: null;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BUTTONS:
    """

    Buttons
    =======



    Use Bootstrap’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.






     On this page


    **On this page**


    ---




    * [Base class](#base-class)
    * [Variants](#variants)
    * [Disable text wrapping](#disable-text-wrapping)
    * [Button tags](#button-tags)
    * [Outline buttons](#outline-buttons)
    * [Sizes](#sizes)
    * [Disabled state](#disabled-state)
            + [Link functionality caveat](#link-functionality-caveat)
    * [Block buttons](#block-buttons)
    * [Button plugin](#button-plugin)
            + [Toggle states](#toggle-states)
            + [Methods](#methods)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
            + [Sass loops](#sass-loops)






    Base class
    ----------


    Bootstrap has a base `.btn` class that sets up basic styles such as padding and content alignment. By default, `.btn` controls have a transparent border and background color, and lack any explicit focus and hover styles.



    Base class

    html









    ```
    <button type="button" class="btn">Base class</button>
    ```

    The `.btn` class is intended to be used in conjunction with our button variants, or to serve as a basis for your own custom styles.



    If you are using the `.btn` class on its own, remember to at least define some explicit `:focus` and/or `:focus-visible` styles.

    Variants
    --------


    Bootstrap includes several button variants, each serving its own semantic purpose, with a few extras thrown in for more control.



    Primary
    Secondary
    Success
    Danger
    Warning
    Info
    Light
    Dark
    Link

    html









    ```
    <button type="button" class="btn btn-primary">Primary</button>
    <button type="button" class="btn btn-secondary">Secondary</button>
    <button type="button" class="btn btn-success">Success</button>
    <button type="button" class="btn btn-danger">Danger</button>
    <button type="button" class="btn btn-warning">Warning</button>
    <button type="button" class="btn btn-info">Info</button>
    <button type="button" class="btn btn-light">Light</button>
    <button type="button" class="btn btn-dark">Dark</button>

    <button type="button" class="btn btn-link">Link</button>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Disable text wrapping
    ---------------------


    If you don’t want the button text to wrap, you can add the `.text-nowrap` class to the button. In Sass, you can set `$btn-white-space: nowrap` to disable text wrapping for each button.


    Button tags
    -----------


    The `.btn` classes are designed to be used with the `<button>` element. However, you can also use these classes on `<a>` or `<input>` elements (though some browsers may apply a slightly different rendering).


    When using button classes on `<a>` elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a `role="button"` to appropriately convey their purpose to assistive technologies such as screen readers.



    [Link](#)
    Button




    html









    ```
    <a class="btn btn-primary" href="#" role="button">Link</a>
    <button class="btn btn-primary" type="submit">Button</button>
    <input class="btn btn-primary" type="button" value="Input">
    <input class="btn btn-primary" type="submit" value="Submit">
    <input class="btn btn-primary" type="reset" value="Reset">
    ```

    Outline buttons
    ---------------


    In need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the `.btn-outline-*` ones to remove all background images and colors on any button.



    Primary
    Secondary
    Success
    Danger
    Warning
    Info
    Light
    Dark

    html









    ```
    <button type="button" class="btn btn-outline-primary">Primary</button>
    <button type="button" class="btn btn-outline-secondary">Secondary</button>
    <button type="button" class="btn btn-outline-success">Success</button>
    <button type="button" class="btn btn-outline-danger">Danger</button>
    <button type="button" class="btn btn-outline-warning">Warning</button>
    <button type="button" class="btn btn-outline-info">Info</button>
    <button type="button" class="btn btn-outline-light">Light</button>
    <button type="button" class="btn btn-outline-dark">Dark</button>
    ```


    Some of the button styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.

    Sizes
    -----


    Fancy larger or smaller buttons? Add `.btn-lg` or `.btn-sm` for additional sizes.



    Large button
    Large button

    html









    ```
    <button type="button" class="btn btn-primary btn-lg">Large button</button>
    <button type="button" class="btn btn-secondary btn-lg">Large button</button>
    ```


    Small button
    Small button

    html









    ```
    <button type="button" class="btn btn-primary btn-sm">Small button</button>
    <button type="button" class="btn btn-secondary btn-sm">Small button</button>
    ```

    You can even roll your own custom sizing with CSS variables:




     Custom button


    html









    ```
    <button type="button" class="btn btn-primary"
     style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
     Custom button
    </button>
    ```

    Disabled state
    --------------


    Make buttons look inactive by adding the `disabled` boolean attribute to any `<button>` element. Disabled buttons have `pointer-events: none` applied to, preventing hover and active states from triggering.



    Primary button
    Button
    Primary button
    Button

    html









    ```
    <button type="button" class="btn btn-primary" disabled>Primary button</button>
    <button type="button" class="btn btn-secondary" disabled>Button</button>
    <button type="button" class="btn btn-outline-primary" disabled>Primary button</button>
    <button type="button" class="btn btn-outline-secondary" disabled>Button</button>
    ```

    Disabled buttons using the `<a>` element behave a bit different:


    * `<a>`s don’t support the `disabled` attribute, so you must add the `.disabled` class to make it visually appear disabled.
    * Some future-friendly styles are included to disable all `pointer-events` on anchor buttons.
    * Disabled buttons using `<a>` should include the `aria-disabled="true"` attribute to indicate the state of the element to assistive technologies.
    * Disabled buttons using `<a>` *should not* include the `href` attribute.



    Primary link
    Link

    html









    ```
    <a class="btn btn-primary disabled" role="button" aria-disabled="true">Primary link</a>
    <a class="btn btn-secondary disabled" role="button" aria-disabled="true">Link</a>
    ```

    ### Link functionality caveat


    To cover cases where you have to keep the `href` attribute on a disabled link, the `.disabled` class uses `pointer-events: none` to try to disable the link functionality of `<a>`s. Note that this CSS property is not yet standardized for HTML, but all modern browsers support it. In addition, even in browsers that do support `pointer-events: none`, keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, in addition to `aria-disabled="true"`, also include a `tabindex="-1"` attribute on these links to prevent them from receiving keyboard focus, and use custom JavaScript to disable their functionality altogether.



    [Primary link](#)
    [Link](#)

    html









    ```
    <a href="#" class="btn btn-primary disabled" tabindex="-1" role="button" aria-disabled="true">Primary link</a>
    <a href="#" class="btn btn-secondary disabled" tabindex="-1" role="button" aria-disabled="true">Link</a>
    ```

    Block buttons
    -------------


    Create responsive stacks of full-width, “block buttons” like those in Bootstrap 4 with a mix of our display and gap utilities. By using utilities instead of button-specific classes, we have much greater control over spacing, alignment, and responsive behaviors.




    Button
    Button


    html









    ```
    <div class="d-grid gap-2">
     <button class="btn btn-primary" type="button">Button</button>
     <button class="btn btn-primary" type="button">Button</button>
    </div>
    ```

    Here we create a responsive variation, starting with vertically stacked buttons until the `md` breakpoint, where `.d-md-block` replaces the `.d-grid` class, thus nullifying the `gap-2` utility. Resize your browser to see them change.




    Button
    Button


    html









    ```
    <div class="d-grid gap-2 d-md-block">
     <button class="btn btn-primary" type="button">Button</button>
     <button class="btn btn-primary" type="button">Button</button>
    </div>
    ```

    You can adjust the width of your block buttons with grid column width classes. For example, for a half-width “block button”, use `.col-6`. Center it horizontally with `.mx-auto`, too.




    Button
    Button


    html









    ```
    <div class="d-grid gap-2 col-6 mx-auto">
     <button class="btn btn-primary" type="button">Button</button>
     <button class="btn btn-primary" type="button">Button</button>
    </div>
    ```

    Additional utilities can be used to adjust the alignment of buttons when horizontal. Here we’ve taken our previous responsive example and added some flex utilities and a margin utility on the button to right-align the buttons when they’re no longer stacked.




    Button
    Button


    html









    ```
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
     <button class="btn btn-primary me-md-2" type="button">Button</button>
     <button class="btn btn-primary" type="button">Button</button>
    </div>
    ```

    Button plugin
    -------------


    The button plugin allows you to create simple on/off toggle buttons.



    Visually, these toggle buttons are identical to the [checkbox toggle buttons](https://getbootstrap.com/docs/5.3/forms/checks-radios/#checkbox-toggle-buttons). However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as “checked”/“not checked” (since, despite their appearance, they are fundamentally still checkboxes), whereas these toggle buttons will be announced as “button”/“button pressed”. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.

    ### Toggle states


    Add `data-bs-toggle="button"` to toggle a button’s `active` state. If you’re pre-toggling a button, you must manually add the `.active` class **and** `aria-pressed="true"` to ensure that it is conveyed appropriately to assistive technologies.




    Toggle button
    Active toggle button
    Disabled toggle button




    Toggle button
    Active toggle button
    Disabled toggle button




    html









    ```
    <p class="d-inline-flex gap-1">
     <button type="button" class="btn" data-bs-toggle="button">Toggle button</button>
     <button type="button" class="btn active" data-bs-toggle="button" aria-pressed="true">Active toggle button</button>
     <button type="button" class="btn" disabled data-bs-toggle="button">Disabled toggle button</button>
    </p>
    <p class="d-inline-flex gap-1">
     <button type="button" class="btn btn-primary" data-bs-toggle="button">Toggle button</button>
     <button type="button" class="btn btn-primary active" data-bs-toggle="button" aria-pressed="true">Active toggle button</button>
     <button type="button" class="btn btn-primary" disabled data-bs-toggle="button">Disabled toggle button</button>
    </p>
    ```



    [Toggle link](#)
    [Active toggle link](#)
    Disabled toggle link




    [Toggle link](#)
    [Active toggle link](#)
    Disabled toggle link




    html









    ```
    <p class="d-inline-flex gap-1">
     <a href="#" class="btn" role="button" data-bs-toggle="button">Toggle link</a>
     <a href="#" class="btn active" role="button" data-bs-toggle="button" aria-pressed="true">Active toggle link</a>
     <a class="btn disabled" aria-disabled="true" role="button" data-bs-toggle="button">Disabled toggle link</a>
    </p>
    <p class="d-inline-flex gap-1">
     <a href="#" class="btn btn-primary" role="button" data-bs-toggle="button">Toggle link</a>
     <a href="#" class="btn btn-primary active" role="button" data-bs-toggle="button" aria-pressed="true">Active toggle link</a>
     <a class="btn btn-primary disabled" aria-disabled="true" role="button" data-bs-toggle="button">Disabled toggle link</a>
    </p>
    ```

    ### Methods


    You can create a button instance with the button constructor, for example:



    ```
    const bsButton = new bootstrap.Button('#myButton')

    ```


    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s button. (Removes stored data on the DOM element) |
    | `getInstance` | Static method which allows you to get the button instance associated with a DOM element, you can use it like this: `bootstrap.Button.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a button instance associated with a DOM element or creates a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Button.getOrCreateInstance(element)`. |
    | `toggle` | Toggles push state. Gives the button the appearance that it has been activated. |


    For example, to toggle all buttons



    ```
    document.querySelectorAll('.btn').forEach(buttonElement => {
     const button = bootstrap.Button.getOrCreateInstance(buttonElement)
     button.toggle()
    })

    ```
    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, buttons now use local CSS variables on `.btn` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_buttons.scss)






    ```
    --#{$prefix}btn-padding-x: #{$btn-padding-x};
    --#{$prefix}btn-padding-y: #{$btn-padding-y};
    --#{$prefix}btn-font-family: #{$btn-font-family};
    @include rfs($btn-font-size, --#{$prefix}btn-font-size);
    --#{$prefix}btn-font-weight: #{$btn-font-weight};
    --#{$prefix}btn-line-height: #{$btn-line-height};
    --#{$prefix}btn-color: #{$btn-color};
    --#{$prefix}btn-bg: transparent;
    --#{$prefix}btn-border-width: #{$btn-border-width};
    --#{$prefix}btn-border-color: transparent;
    --#{$prefix}btn-border-radius: #{$btn-border-radius};
    --#{$prefix}btn-hover-border-color: transparent;
    --#{$prefix}btn-box-shadow: #{$btn-box-shadow};
    --#{$prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
    --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(var(--#{$prefix}btn-focus-shadow-rgb), .5);
    ```

    Each `.btn-*` modifier class updates the appropriate CSS variables to minimize additional CSS rules with our `button-variant()`, `button-outline-variant()`, and `button-size()` mixins.


    Here’s an example of building a custom `.btn-*` modifier class as we do for the buttons unique to our docs by reassigning Bootstrap’s CSS variables with a mixture of our own CSS and Sass variables.



    Custom button



    [site/assets/scss/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/scss/_buttons.scss)






    ```
    .btn-bd-primary {
     --bs-btn-font-weight: 600;
     --bs-btn-color: var(--bs-white);
     --bs-btn-bg: var(--bd-violet-bg);
     --bs-btn-border-color: var(--bd-violet-bg);
     --bs-btn-hover-color: var(--bs-white);
     --bs-btn-hover-bg: #{shade-color($bd-violet, 10%)};
     --bs-btn-hover-border-color: #{shade-color($bd-violet, 10%)};
     --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
     --bs-btn-active-color: var(--bs-btn-hover-color);
     --bs-btn-active-bg: #{shade-color($bd-violet, 20%)};
     --bs-btn-active-border-color: #{shade-color($bd-violet, 20%)};
    }

    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $btn-color: var(--#{$prefix}body-color);
    $btn-padding-y: $input-btn-padding-y;
    $btn-padding-x: $input-btn-padding-x;
    $btn-font-family: $input-btn-font-family;
    $btn-font-size: $input-btn-font-size;
    $btn-line-height: $input-btn-line-height;
    $btn-white-space: null; // Set to `nowrap` to prevent text wrapping

    $btn-padding-y-sm: $input-btn-padding-y-sm;
    $btn-padding-x-sm: $input-btn-padding-x-sm;
    $btn-font-size-sm: $input-btn-font-size-sm;

    $btn-padding-y-lg: $input-btn-padding-y-lg;
    $btn-padding-x-lg: $input-btn-padding-x-lg;
    $btn-font-size-lg: $input-btn-font-size-lg;

    $btn-border-width: $input-btn-border-width;

    $btn-font-weight: $font-weight-normal;
    $btn-box-shadow: inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075);
    $btn-focus-width: $input-btn-focus-width;
    $btn-focus-box-shadow: $input-btn-focus-box-shadow;
    $btn-disabled-opacity: .65;
    $btn-active-box-shadow: inset 0 3px 5px rgba($black, .125);

    $btn-link-color: var(--#{$prefix}link-color);
    $btn-link-hover-color: var(--#{$prefix}link-hover-color);
    $btn-link-disabled-color: $gray-600;

    // Allows for customizing button radius independently from global border radius
    $btn-border-radius: var(--#{$prefix}border-radius);
    $btn-border-radius-sm: var(--#{$prefix}border-radius-sm);
    $btn-border-radius-lg: var(--#{$prefix}border-radius-lg);

    $btn-transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    $btn-hover-bg-shade-amount: 15%;
    $btn-hover-bg-tint-amount: 15%;
    $btn-hover-border-shade-amount: 20%;
    $btn-hover-border-tint-amount: 10%;
    $btn-active-bg-shade-amount: 20%;
    $btn-active-bg-tint-amount: 20%;
    $btn-active-border-shade-amount: 25%;
    $btn-active-border-tint-amount: 10%;

    ```

    ### Sass mixins


    There are three mixins for buttons: button and button outline variant mixins (both based on `$theme-colors`), plus a button size mixin.




    [scss/mixins/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_buttons.scss)






    ```
    @mixin button-variant(
     $background,
     $border,
     $color: color-contrast($background),
     $hover-background: if($color == $color-contrast-light, shade-color($background, $btn-hover-bg-shade-amount), tint-color($background, $btn-hover-bg-tint-amount)),
     $hover-border: if($color == $color-contrast-light, shade-color($border, $btn-hover-border-shade-amount), tint-color($border, $btn-hover-border-tint-amount)),
     $hover-color: color-contrast($hover-background),
     $active-background: if($color == $color-contrast-light, shade-color($background, $btn-active-bg-shade-amount), tint-color($background, $btn-active-bg-tint-amount)),
     $active-border: if($color == $color-contrast-light, shade-color($border, $btn-active-border-shade-amount), tint-color($border, $btn-active-border-tint-amount)),
     $active-color: color-contrast($active-background),
     $disabled-background: $background,
     $disabled-border: $border,
     $disabled-color: color-contrast($disabled-background)
    ) {
     --#{$prefix}btn-color: #{$color};
     --#{$prefix}btn-bg: #{$background};
     --#{$prefix}btn-border-color: #{$border};
     --#{$prefix}btn-hover-color: #{$hover-color};
     --#{$prefix}btn-hover-bg: #{$hover-background};
     --#{$prefix}btn-hover-border-color: #{$hover-border};
     --#{$prefix}btn-focus-shadow-rgb: #{to-rgb(mix($color, $border, 15%))};
     --#{$prefix}btn-active-color: #{$active-color};
     --#{$prefix}btn-active-bg: #{$active-background};
     --#{$prefix}btn-active-border-color: #{$active-border};
     --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
     --#{$prefix}btn-disabled-color: #{$disabled-color};
     --#{$prefix}btn-disabled-bg: #{$disabled-background};
     --#{$prefix}btn-disabled-border-color: #{$disabled-border};
    }

    ```



    [scss/mixins/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_buttons.scss)






    ```
    @mixin button-outline-variant(
     $color,
     $color-hover: color-contrast($color),
     $active-background: $color,
     $active-border: $color,
     $active-color: color-contrast($active-background)
    ) {
     --#{$prefix}btn-color: #{$color};
     --#{$prefix}btn-border-color: #{$color};
     --#{$prefix}btn-hover-color: #{$color-hover};
     --#{$prefix}btn-hover-bg: #{$active-background};
     --#{$prefix}btn-hover-border-color: #{$active-border};
     --#{$prefix}btn-focus-shadow-rgb: #{to-rgb($color)};
     --#{$prefix}btn-active-color: #{$active-color};
     --#{$prefix}btn-active-bg: #{$active-background};
     --#{$prefix}btn-active-border-color: #{$active-border};
     --#{$prefix}btn-active-shadow: #{$btn-active-box-shadow};
     --#{$prefix}btn-disabled-color: #{$color};
     --#{$prefix}btn-disabled-bg: transparent;
     --#{$prefix}btn-disabled-border-color: #{$color};
     --#{$prefix}gradient: none;
    }

    ```



    [scss/mixins/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_buttons.scss)






    ```
    @mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
     --#{$prefix}btn-padding-y: #{$padding-y};
     --#{$prefix}btn-padding-x: #{$padding-x};
     @include rfs($font-size, --#{$prefix}btn-font-size);
     --#{$prefix}btn-border-radius: #{$border-radius};
    }

    ```

    ### Sass loops


    Button variants (for regular and outline buttons) use their respective mixins with our `$theme-colors` map to generate the modifier classes in `scss/_buttons.scss`.




    [scss/\_buttons.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_buttons.scss)






    ```
    @each $color, $value in $theme-colors {
     .btn-#{$color} {
     @if $color == "light" {
     @include button-variant(
     $value,
     $value,
     $hover-background: shade-color($value, $btn-hover-bg-shade-amount),
     $hover-border: shade-color($value, $btn-hover-border-shade-amount),
     $active-background: shade-color($value, $btn-active-bg-shade-amount),
     $active-border: shade-color($value, $btn-active-border-shade-amount)
     );
     } @else if $color == "dark" {
     @include button-variant(
     $value,
     $value,
     $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
     $hover-border: tint-color($value, $btn-hover-border-tint-amount),
     $active-background: tint-color($value, $btn-active-bg-tint-amount),
     $active-border: tint-color($value, $btn-active-border-tint-amount)
     );
     } @else {
     @include button-variant($value, $value);
     }
     }
    }

    @each $color, $value in $theme-colors {
     .btn-outline-#{$color} {
     @include button-outline-variant($value);
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BUTTON_GROUP:
    """

    Button group
    ============



    Group a series of buttons together on a single line or stack them in a vertical column.






     On this page


    **On this page**


    ---




    * [Basic example](#basic-example)
    * [Mixed styles](#mixed-styles)
    * [Outlined styles](#outlined-styles)
    * [Checkbox and radio button groups](#checkbox-and-radio-button-groups)
    * [Button toolbar](#button-toolbar)
    * [Sizing](#sizing)
    * [Nesting](#nesting)
    * [Vertical variation](#vertical-variation)






    Basic example
    -------------


    Wrap a series of buttons with `.btn` in `.btn-group`.




    Left
    Middle
    Right


    html









    ```
    <div class="btn-group" role="group" aria-label="Basic example">
     <button type="button" class="btn btn-primary">Left</button>
     <button type="button" class="btn btn-primary">Middle</button>
     <button type="button" class="btn btn-primary">Right</button>
    </div>
    ```


    Button groups require an appropriate `role` attribute and explicit label to ensure assistive technologies like screen readers identify buttons as grouped and announce them. Use `role="group"` for button groups or `role="toolbar"` for button toolbars. Then use `aria-label` or `aria-labelledby` to label them.

    These classes can also be added to groups of links, as an alternative to the [`.nav` navigation components](https://getbootstrap.com/docs/5.3/components/navs-tabs/).




    [Active link](#)
    [Link](#)
    [Link](#)


    html









    ```
    <div class="btn-group">
     <a href="#" class="btn btn-primary active" aria-current="page">Active link</a>
     <a href="#" class="btn btn-primary">Link</a>
     <a href="#" class="btn btn-primary">Link</a>
    </div>
    ```

    Mixed styles
    ------------




    Left
    Middle
    Right


    html









    ```
    <div class="btn-group" role="group" aria-label="Basic mixed styles example">
     <button type="button" class="btn btn-danger">Left</button>
     <button type="button" class="btn btn-warning">Middle</button>
     <button type="button" class="btn btn-success">Right</button>
    </div>
    ```

    Outlined styles
    ---------------




    Left
    Middle
    Right


    html









    ```
    <div class="btn-group" role="group" aria-label="Basic outlined example">
     <button type="button" class="btn btn-outline-primary">Left</button>
     <button type="button" class="btn btn-outline-primary">Middle</button>
     <button type="button" class="btn btn-outline-primary">Right</button>
    </div>
    ```

    Checkbox and radio button groups
    --------------------------------


    Combine button-like checkbox and radio [toggle buttons](https://getbootstrap.com/docs/5.3/forms/checks-radios/) into a seamless looking button group.





    Checkbox 1

    Checkbox 2

    Checkbox 3


    html









    ```
    <div class="btn-group" role="group" aria-label="Basic checkbox toggle button group">
     <input type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
     <label class="btn btn-outline-primary" for="btncheck1">Checkbox 1</label>

     <input type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
     <label class="btn btn-outline-primary" for="btncheck2">Checkbox 2</label>

     <input type="checkbox" class="btn-check" id="btncheck3" autocomplete="off">
     <label class="btn btn-outline-primary" for="btncheck3">Checkbox 3</label>
    </div>
    ```




    Radio 1

    Radio 2

    Radio 3


    html









    ```
    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
     <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
     <label class="btn btn-outline-primary" for="btnradio1">Radio 1</label>

     <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
     <label class="btn btn-outline-primary" for="btnradio2">Radio 2</label>

     <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
     <label class="btn btn-outline-primary" for="btnradio3">Radio 3</label>
    </div>
    ```

    Button toolbar
    --------------


    Combine sets of button groups into button toolbars for more complex components. Use utility classes as needed to space out groups, buttons, and more.





    1
    2
    3
    4


    5
    6
    7


    8



    html









    ```
    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
     <div class="btn-group me-2" role="group" aria-label="First group">
     <button type="button" class="btn btn-primary">1</button>
     <button type="button" class="btn btn-primary">2</button>
     <button type="button" class="btn btn-primary">3</button>
     <button type="button" class="btn btn-primary">4</button>
     </div>
     <div class="btn-group me-2" role="group" aria-label="Second group">
     <button type="button" class="btn btn-secondary">5</button>
     <button type="button" class="btn btn-secondary">6</button>
     <button type="button" class="btn btn-secondary">7</button>
     </div>
     <div class="btn-group" role="group" aria-label="Third group">
     <button type="button" class="btn btn-info">8</button>
     </div>
    </div>
    ```

    Feel free to mix input groups with button groups in your toolbars. Similar to the example above, you’ll likely need some utilities though to space things properly.





    1
    2
    3
    4


    @





    1
    2
    3
    4


    @




    html









    ```
    <div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
     <div class="btn-group me-2" role="group" aria-label="First group">
     <button type="button" class="btn btn-outline-secondary">1</button>
     <button type="button" class="btn btn-outline-secondary">2</button>
     <button type="button" class="btn btn-outline-secondary">3</button>
     <button type="button" class="btn btn-outline-secondary">4</button>
     </div>
     <div class="input-group">
     <div class="input-group-text" id="btnGroupAddon">@</div>
     <input type="text" class="form-control" placeholder="Input group example" aria-label="Input group example" aria-describedby="btnGroupAddon">
     </div>
    </div>

    <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
     <div class="btn-group" role="group" aria-label="First group">
     <button type="button" class="btn btn-outline-secondary">1</button>
     <button type="button" class="btn btn-outline-secondary">2</button>
     <button type="button" class="btn btn-outline-secondary">3</button>
     <button type="button" class="btn btn-outline-secondary">4</button>
     </div>
     <div class="input-group">
     <div class="input-group-text" id="btnGroupAddon2">@</div>
     <input type="text" class="form-control" placeholder="Input group example" aria-label="Input group example" aria-describedby="btnGroupAddon2">
     </div>
    </div>
    ```

    Sizing
    ------


    Instead of applying button sizing classes to every button in a group, just add `.btn-group-*` to each `.btn-group`, including each one when nesting multiple groups.




    Left
    Middle
    Right




    Left
    Middle
    Right




    Left
    Middle
    Right


    html









    ```
    <div class="btn-group btn-group-lg" role="group" aria-label="Large button group">
     <button type="button" class="btn btn-outline-primary">Left</button>
     <button type="button" class="btn btn-outline-primary">Middle</button>
     <button type="button" class="btn btn-outline-primary">Right</button>
    </div>
    <br>
    <div class="btn-group" role="group" aria-label="Default button group">
     <button type="button" class="btn btn-outline-primary">Left</button>
     <button type="button" class="btn btn-outline-primary">Middle</button>
     <button type="button" class="btn btn-outline-primary">Right</button>
    </div>
    <br>
    <div class="btn-group btn-group-sm" role="group" aria-label="Small button group">
     <button type="button" class="btn btn-outline-primary">Left</button>
     <button type="button" class="btn btn-outline-primary">Middle</button>
     <button type="button" class="btn btn-outline-primary">Right</button>
    </div>
    ```

    Nesting
    -------


    Place a `.btn-group` within another `.btn-group` when you want dropdown menus mixed with a series of buttons.




    1
    2


     Dropdown

    * [Dropdown link](#)
    * [Dropdown link](#)





    html









    ```
    <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
     <button type="button" class="btn btn-primary">1</button>
     <button type="button" class="btn btn-primary">2</button>

     <div class="btn-group" role="group">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     </ul>
     </div>
    </div>
    ```

    Vertical variation
    ------------------


    Make a set of buttons appear vertically stacked rather than horizontally. **Split button dropdowns are not supported here.**




    Button
    Button
    Button
    Button


    html









    ```
    <div class="btn-group-vertical" role="group" aria-label="Vertical button group">
     <button type="button" class="btn btn-primary">Button</button>
     <button type="button" class="btn btn-primary">Button</button>
     <button type="button" class="btn btn-primary">Button</button>
     <button type="button" class="btn btn-primary">Button</button>
    </div>
    ```



    Button
    Button


     Dropdown

    * [Dropdown link](#)
    * [Dropdown link](#)





     Dropdown

    * [Dropdown link](#)
    * [Dropdown link](#)





     Dropdown

    * [Dropdown link](#)
    * [Dropdown link](#)





     Dropdown

    * [Dropdown link](#)
    * [Dropdown link](#)





    html









    ```
    <div class="btn-group-vertical" role="group" aria-label="Vertical button group">
     <button type="button" class="btn btn-primary">Button</button>
     <button type="button" class="btn btn-primary">Button</button>
     <div class="btn-group" role="group">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     </ul>
     </div>
     <div class="btn-group dropstart" role="group">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     </ul>
     </div>
     <div class="btn-group dropend" role="group">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     </ul>
     </div>
     <div class="btn-group dropup" role="group">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     <li><a class="dropdown-item" href="#">Dropdown link</a></li>
     </ul>
     </div>
    </div>
    ```




    Radio 1

    Radio 2

    Radio 3


    html









    ```
    <div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
     <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio1" autocomplete="off" checked>
     <label class="btn btn-outline-danger" for="vbtn-radio1">Radio 1</label>
     <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio2" autocomplete="off">
     <label class="btn btn-outline-danger" for="vbtn-radio2">Radio 2</label>
     <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio3" autocomplete="off">
     <label class="btn btn-outline-danger" for="vbtn-radio3">Radio 3</label>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CARDS:
    """

    Cards
    =====



    Bootstrap’s cards provide a flexible and extensible content container with multiple variants and options.






     On this page


    **On this page**


    ---




    * [About](#about)
    * [Example](#example)
    * [Content types](#content-types)
            + [Body](#body)
            + [Titles, text, and links](#titles-text-and-links)
            + [Images](#images)
            + [List groups](#list-groups)
            + [Kitchen sink](#kitchen-sink)
            + [Header and footer](#header-and-footer)
    * [Sizing](#sizing)
            + [Using grid markup](#using-grid-markup)
            + [Using utilities](#using-utilities)
            + [Using custom CSS](#using-custom-css)
    * [Text alignment](#text-alignment)
    * [Navigation](#navigation)
    * [Images](#images-1)
            + [Image caps](#image-caps)
            + [Image overlays](#image-overlays)
    * [Horizontal](#horizontal)
    * [Card styles](#card-styles)
            + [Background and color](#background-and-color)
            + [Border](#border)
            + [Mixins utilities](#mixins-utilities)
    * [Card layout](#card-layout)
            + [Card groups](#card-groups)
            + [Grid cards](#grid-cards)
            + [Masonry](#masonry)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)






    About
    -----


    A **card** is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. If you’re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.


    Example
    -------


    Cards are built with as little markup and styles as possible, but still manage to deliver a ton of control and customization. Built with flexbox, they offer easy alignment and mix well with other Bootstrap components. They have no `margin` by default, so use [spacing utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/) as needed.


    Below is an example of a basic card with mixed content and a fixed width. Cards have no fixed width to start, so they’ll naturally fill the full width of its parent element. This is easily customized with our various [sizing options](#sizing).




    PlaceholderImage cap

    ##### Card title


    Some quick example text to build on the card title and make up the bulk of the card's content.


    [Go somewhere](#)



    html









    ```
    <div class="card" style="width: 18rem;">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```

    Content types
    -------------


    Cards support a wide variety of content, including images, text, list groups, links, and more. Below are examples of what’s supported.


    ### Body


    The building block of a card is the `.card-body`. Use it whenever you need a padded section within a card.





     This is some text within a card body.



    html









    ```
    <div class="card">
     <div class="card-body">
     This is some text within a card body.
     </div>
    </div>
    ```

    ### Titles, text, and links


    Card titles are used by adding `.card-title` to a `<h*>` tag. In the same way, links are added and placed next to each other by adding `.card-link` to an `<a>` tag.


    Subtitles are used by adding a `.card-subtitle` to a `<h*>` tag. If the `.card-title` and the `.card-subtitle` items are placed in a `.card-body` item, the card title and subtitle are aligned nicely.





    ##### Card title


    ###### Card subtitle


    Some quick example text to build on the card title and make up the bulk of the card's content.


    [Card link](#)
    [Another link](#)



    html









    ```
    <div class="card" style="width: 18rem;">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <h6 class="card-subtitle mb-2 text-body-secondary">Card subtitle</h6>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     <a href="#" class="card-link">Card link</a>
     <a href="#" class="card-link">Another link</a>
     </div>
    </div>
    ```

    ### Images


    `.card-img-top` places an image to the top of the card. With `.card-text`, text can be added to the card. Text within `.card-text` can also be styled with the standard HTML tags.




    PlaceholderImage cap

    Some quick example text to build on the card title and make up the bulk of the card's content.





    html









    ```
    <div class="card" style="width: 18rem;">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    ```

    ### List groups


    Create lists of content in a card with a flush list group.




    * An item
    * A second item
    * A third item




    html









    ```
    <div class="card" style="width: 18rem;">
     <ul class="list-group list-group-flush">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     </ul>
    </div>
    ```




     Featured

    * An item
    * A second item
    * A third item




    html









    ```
    <div class="card" style="width: 18rem;">
     <div class="card-header">
     Featured
     </div>
     <ul class="list-group list-group-flush">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     </ul>
    </div>
    ```



    * An item
    * A second item
    * A third item



     Card footer



    html









    ```
    <div class="card" style="width: 18rem;">
     <ul class="list-group list-group-flush">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     </ul>
     <div class="card-footer">
     Card footer
     </div>
    </div>
    ```

    ### Kitchen sink


    Mix and match multiple content types to create the card you need, or throw everything in there. Shown below are image styles, blocks, text styles, and a list group—all wrapped in a fixed-width card.




    PlaceholderImage cap

    ##### Card title


    Some quick example text to build on the card title and make up the bulk of the card's content.



    * An item
    * A second item
    * A third item



    [Card link](#)
    [Another link](#)



    html









    ```
    <div class="card" style="width: 18rem;">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
     <ul class="list-group list-group-flush">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     </ul>
     <div class="card-body">
     <a href="#" class="card-link">Card link</a>
     <a href="#" class="card-link">Another link</a>
     </div>
    </div>
    ```

    ### Header and footer


    Add an optional header and/or footer within a card.





     Featured


    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card">
     <div class="card-header">
     Featured
     </div>
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```

    Card headers can be styled by adding `.card-header` to `<h*>` elements.




    ##### Featured



    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card">
     <h5 class="card-header">Featured</h5>
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```




     Quote



    >
    > A well-known quote, contained in a blockquote element.
    >
    >
    > Someone famous in Source Title
    >





    html









    ```
    <div class="card">
     <div class="card-header">
     Quote
     </div>
     <div class="card-body">
     <blockquote class="blockquote mb-0">
     <p>A well-known quote, contained in a blockquote element.</p>
     <footer class="blockquote-footer">Someone famous in <cite title="Source Title">Source Title</cite></footer>
     </blockquote>
     </div>
    </div>
    ```




     Featured


    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)


     2 days ago



    html









    ```
    <div class="card text-center">
     <div class="card-header">
     Featured
     </div>
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
     <div class="card-footer text-body-secondary">
     2 days ago
     </div>
    </div>
    ```

    Sizing
    ------


    Cards assume no specific `width` to start, so they’ll be 100% wide unless otherwise stated. You can change this as needed with custom CSS, grid classes, grid Sass mixins, or utilities.


    ### Using grid markup


    Using the grid, wrap cards in columns and rows as needed.







    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)






    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)





    html









    ```
    <div class="row">
     <div class="col-sm-6 mb-3 mb-sm-0">
     <div class="card">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
     </div>
     </div>
     <div class="col-sm-6">
     <div class="card">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
     </div>
     </div>
    </div>
    ```

    ### Using utilities


    Use our handful of [available sizing utilities](https://getbootstrap.com/docs/5.3/utilities/sizing/) to quickly set a card’s width.





    ##### Card title


    With supporting text below as a natural lead-in to additional content.


    [Button](#)




    ##### Card title


    With supporting text below as a natural lead-in to additional content.


    [Button](#)



    html









    ```
    <div class="card w-75 mb-3">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Button</a>
     </div>
    </div>

    <div class="card w-50">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Button</a>
     </div>
    </div>
    ```

    ### Using custom CSS


    Use custom CSS in your stylesheets or as inline styles to set a width.





    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card" style="width: 18rem;">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```

    Text alignment
    --------------


    You can quickly change the text alignment of any card—in its entirety or specific parts—with our [text align classes](https://getbootstrap.com/docs/5.3/utilities/text/#text-alignment).





    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)




    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)




    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card mb-3" style="width: 18rem;">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>

    <div class="card text-center mb-3" style="width: 18rem;">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>

    <div class="card text-end" style="width: 18rem;">
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```

    Navigation
    ----------


    Add some navigation to a card’s header (or block) with Bootstrap’s [nav components](https://getbootstrap.com/docs/5.3/components/navs-tabs/).





    * [Active](#)
    * [Link](#)
    * Disabled




    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card text-center">
     <div class="card-header">
     <ul class="nav nav-tabs card-header-tabs">
     <li class="nav-item">
     <a class="nav-link active" aria-current="true" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     </div>
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```




    * [Active](#)
    * [Link](#)
    * Disabled




    ##### Special title treatment


    With supporting text below as a natural lead-in to additional content.


    [Go somewhere](#)



    html









    ```
    <div class="card text-center">
     <div class="card-header">
     <ul class="nav nav-pills card-header-pills">
     <li class="nav-item">
     <a class="nav-link active" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     </div>
     <div class="card-body">
     <h5 class="card-title">Special title treatment</h5>
     <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>
    ```

    Images
    ------


    Cards include a few options for working with images. Choose from appending “image caps” at either end of a card, overlaying images with card content, or simply embedding the image in a card.


    ### Image caps


    Similar to headers and footers, cards can include top and bottom “image caps”—images at the top or bottom of a card.




    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.


    Last updated 3 mins ago






    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.


    Last updated 3 mins ago



    PlaceholderImage cap


    html









    ```
    <div class="card mb-3">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
    </div>
    <div class="card">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
     <img src="..." class="card-img-bottom" alt="...">
    </div>
    ```

    ### Image overlays


    Turn an image into a card background and overlay your card’s text. Depending on the image, you may or may not need additional styles or utilities.




    PlaceholderCard image

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.


    Last updated 3 mins ago





    html









    ```
    <div class="card text-bg-dark">
     <img src="..." class="card-img" alt="...">
     <div class="card-img-overlay">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     <p class="card-text"><small>Last updated 3 mins ago</small></p>
     </div>
    </div>
    ```


    Note that content should not be larger than the height of the image. If content is larger than the image the content will be displayed outside the image.

    Horizontal
    ----------


    Using a combination of grid and utility classes, cards can be made horizontal in a mobile-friendly and responsive way. In the example below, we remove the grid gutters with `.g-0` and use `.col-md-*` classes to make the card horizontal at the `md` breakpoint. Further adjustments may be needed depending on your card content.






    PlaceholderImage



    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.


    Last updated 3 mins ago







    html









    ```
    <div class="card mb-3" style="max-width: 540px;">
     <div class="row g-0">
     <div class="col-md-4">
     <img src="..." class="img-fluid rounded-start" alt="...">
     </div>
     <div class="col-md-8">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
     </div>
     </div>
    </div>
    ```

    Card styles
    -----------


    Cards include various options for customizing their backgrounds, borders, and color.


    ### Background and color


    Added in v5.2.0
    Set a `background-color` with contrasting foreground `color` with [our `.text-bg-{color}` helpers](https://getbootstrap.com/docs/5.3/helpers/color-background/). Previously it was required to manually pair your choice of [`.text-{color}`](https://getbootstrap.com/docs/5.3/utilities/colors/) and [`.bg-{color}`](https://getbootstrap.com/docs/5.3/utilities/background/) utilities for styling, which you still may use if you prefer.




    Header

    ##### Primary card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Secondary card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Success card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Danger card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Warning card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Info card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Light card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Dark card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    html









    ```
    <div class="card text-bg-primary mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Primary card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-secondary mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Secondary card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-success mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Success card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-danger mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Danger card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-warning mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Warning card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-info mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Info card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-light mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Light card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-dark mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Dark card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    ### Border


    Use [border utilities](https://getbootstrap.com/docs/5.3/utilities/borders/) to change just the `border-color` of a card. Note that you can put `.text-{color}` classes on the parent `.card` or a subset of the card’s contents as shown below.




    Header

    ##### Primary card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Secondary card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Success card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Danger card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Warning card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Info card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Light card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    ##### Dark card title


    Some quick example text to build on the card title and make up the bulk of the card's content.





    html









    ```
    <div class="card border-primary mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body text-primary">
     <h5 class="card-title">Primary card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-secondary mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body text-secondary">
     <h5 class="card-title">Secondary card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-success mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body text-success">
     <h5 class="card-title">Success card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-danger mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body text-danger">
     <h5 class="card-title">Danger card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-warning mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Warning card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-info mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Info card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-light mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Light card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card border-dark mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <h5 class="card-title">Dark card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    ```

    ### Mixins utilities


    You can also change the borders on the card header and footer as needed, and even remove their `background-color` with `.bg-transparent`.




    Header

    ##### Success card title


    Some quick example text to build on the card title and make up the bulk of the card's content.



    Footer


    html









    ```
    <div class="card border-success mb-3" style="max-width: 18rem;">
     <div class="card-header bg-transparent border-success">Header</div>
     <div class="card-body text-success">
     <h5 class="card-title">Success card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
     <div class="card-footer bg-transparent border-success">Footer</div>
    </div>
    ```

    Card layout
    -----------


    In addition to styling the content within cards, Bootstrap includes a few options for laying out series of cards. For the time being, **these layout options are not yet responsive**.


    ### Card groups


    Use card groups to render cards as a single, attached element with equal width and height columns. Card groups start off stacked and use `display: flex;` to become attached with uniform dimensions starting at the `sm` breakpoint.





    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.


    Last updated 3 mins ago





    PlaceholderImage cap

    ##### Card title


    This card has supporting text below as a natural lead-in to additional content.


    Last updated 3 mins ago





    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.


    Last updated 3 mins ago






    html









    ```
    <div class="card-group">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
     </div>
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This card has supporting text below as a natural lead-in to additional content.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
     </div>
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.</p>
     <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
     </div>
     </div>
    </div>
    ```

    When using card groups with footers, their content will automatically line up.





    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.




    Last updated 3 mins ago



    PlaceholderImage cap

    ##### Card title


    This card has supporting text below as a natural lead-in to additional content.




    Last updated 3 mins ago



    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.




    Last updated 3 mins ago




    html









    ```
    <div class="card-group">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This card has supporting text below as a natural lead-in to additional content.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
    </div>
    ```

    ### Grid cards


    Use the Bootstrap grid system and its [`.row-cols` classes](https://getbootstrap.com/docs/5.3/layout/grid/#row-columns) to control how many grid columns (wrapped around your cards) you show per row. For example, here’s `.row-cols-1` laying out the cards on one column, and `.row-cols-md-2` splitting four cards to equal width across multiple rows, from the medium breakpoint up.






    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    html









    ```
    <div class="row row-cols-1 row-cols-md-2 g-4">
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
    </div>
    ```

    Change it to `.row-cols-3` and you’ll see the fourth card wrap.






    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    html









    ```
    <div class="row row-cols-1 row-cols-md-3 g-4">
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
    </div>
    ```

    When you need equal height, add `.h-100` to the cards. If you want equal heights by default, you can set `$card-height: 100%` in Sass.






    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    PlaceholderImage cap

    ##### Card title


    This is a short card.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content.







    PlaceholderImage cap

    ##### Card title


    This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.







    html









    ```
    <div class="row row-cols-1 row-cols-md-3 g-4">
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a short card.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content.</p>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     </div>
     </div>
    </div>
    ```

    Just like with card groups, card footers will automatically line up.






    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.




    Last updated 3 mins ago





    PlaceholderImage cap

    ##### Card title


    This card has supporting text below as a natural lead-in to additional content.




    Last updated 3 mins ago





    PlaceholderImage cap

    ##### Card title


    This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.




    Last updated 3 mins ago





    html









    ```
    <div class="row row-cols-1 row-cols-md-3 g-4">
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This card has supporting text below as a natural lead-in to additional content.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
     </div>
     <div class="col">
     <div class="card h-100">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action.</p>
     </div>
     <div class="card-footer">
     <small class="text-body-secondary">Last updated 3 mins ago</small>
     </div>
     </div>
     </div>
    </div>
    ```

    ### Masonry


    In `v4` we used a CSS-only technique to mimic the behavior of [Masonry](https://masonry.desandro.com/)-like columns, but this technique came with lots of unpleasant [side effects](https://github.com/twbs/bootstrap/pull/28922). If you want to have this type of layout in `v5`, you can just make use of Masonry plugin. **Masonry is not included in Bootstrap**, but we’ve made a [demo example](https://getbootstrap.com/docs/5.3/examples/masonry/) to help you get started.


    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, cards now use local CSS variables on `.card` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_card.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_card.scss)






    ```
    --#{$prefix}card-spacer-y: #{$card-spacer-y};
    --#{$prefix}card-spacer-x: #{$card-spacer-x};
    --#{$prefix}card-title-spacer-y: #{$card-title-spacer-y};
    --#{$prefix}card-title-color: #{$card-title-color};
    --#{$prefix}card-subtitle-color: #{$card-subtitle-color};
    --#{$prefix}card-border-width: #{$card-border-width};
    --#{$prefix}card-border-color: #{$card-border-color};
    --#{$prefix}card-border-radius: #{$card-border-radius};
    --#{$prefix}card-box-shadow: #{$card-box-shadow};
    --#{$prefix}card-inner-border-radius: #{$card-inner-border-radius};
    --#{$prefix}card-cap-padding-y: #{$card-cap-padding-y};
    --#{$prefix}card-cap-padding-x: #{$card-cap-padding-x};
    --#{$prefix}card-cap-bg: #{$card-cap-bg};
    --#{$prefix}card-cap-color: #{$card-cap-color};
    --#{$prefix}card-height: #{$card-height};
    --#{$prefix}card-color: #{$card-color};
    --#{$prefix}card-bg: #{$card-bg};
    --#{$prefix}card-img-overlay-padding: #{$card-img-overlay-padding};
    --#{$prefix}card-group-margin: #{$card-group-margin};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $card-spacer-y: $spacer;
    $card-spacer-x: $spacer;
    $card-title-spacer-y: $spacer \* .5;
    $card-title-color: null;
    $card-subtitle-color: null;
    $card-border-width: var(--#{$prefix}border-width);
    $card-border-color: var(--#{$prefix}border-color-translucent);
    $card-border-radius: var(--#{$prefix}border-radius);
    $card-box-shadow: null;
    $card-inner-border-radius: subtract($card-border-radius, $card-border-width);
    $card-cap-padding-y: $card-spacer-y \* .5;
    $card-cap-padding-x: $card-spacer-x;
    $card-cap-bg: rgba(var(--#{$prefix}body-color-rgb), .03);
    $card-cap-color: null;
    $card-height: null;
    $card-color: null;
    $card-bg: var(--#{$prefix}body-bg);
    $card-img-overlay-padding: $spacer;
    $card-group-margin: $grid-gutter-width \* .5;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CAROUSEL:
    """

    Carousel
    ========



    A slideshow component for cycling through elements—images or slides of text—like a carousel.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Basic examples](#basic-examples)
            + [Indicators](#indicators)
            + [Captions](#captions)
            + [Crossfade](#crossfade)
    * [Autoplaying carousels](#autoplaying-carousels)
            + [Individual `.carousel-item` interval](#individual-carousel-item-interval)
            + [Autoplaying carousels without controls](#autoplaying-carousels-without-controls)
    * [Disable touch swiping](#disable-touch-swiping)
    * [Dark variant](#dark-variant)
    * [Custom transition](#custom-transition)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
            + [Methods](#methods)
            + [Events](#events)






    How it works
    ------------


    * The carousel is a slideshow for cycling through a series of content, built with CSS 3D transforms and a bit of JavaScript. It works with a series of images, text, or custom markup. It also includes support for previous/next controls and indicators.
    * For performance reasons, **carousels must be manually initialized** using the [carousel constructor method](#methods). Without initialization, some of the event listeners (specifically, the events needed touch/swipe support) will not be registered until a user has explicitly activated a control or indicator.


    The only exception are [autoplaying carousels](#autoplaying-carousels) with the `data-bs-ride="carousel"` attribute as these are initialized automatically on page load. If you’re using autoplaying carousels with the data attribute, **don’t explicitly initialize the same carousels with the constructor method.**
    * Nested carousels are not supported. You should also be aware that carousels in general can often cause usability and accessibility challenges.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Basic examples
    --------------


    Here is a basic example of a carousel with three slides. Note the previous/next controls. We recommend using `<button>` elements, but you can also use `<a>` elements with `role="button"`.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExample" class="carousel slide">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    Carousels don’t automatically normalize slide dimensions. As such, you may need to use additional utilities or custom styles to appropriately size content. While carousels support previous/next controls and indicators, they’re not explicitly required. Add and customize as you see fit.


    **You must add the `.active` class to one of the slides**, otherwise the carousel will not be visible. Also be sure to set a unique `id` on the `.carousel` for optional controls, especially if you’re using multiple carousels on a single page. Control and indicator elements must have a `data-bs-target` attribute (or `href` for links) that matches the `id` of the `.carousel` element.


    ### Indicators


    You can add indicators to the carousel, alongside the previous/next controls. The indicators let users jump directly to a particular slide.











    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleIndicators" class="carousel slide">
     <div class="carousel-indicators">
     <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
     <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
     <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
     </div>
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    ### Captions


    You can add captions to your slides with the `.carousel-caption` element within any `.carousel-item`. They can be easily hidden on smaller viewports, as shown below, with optional [display utilities](https://getbootstrap.com/docs/5.3/utilities/display/). We hide them initially with `.d-none` and bring them back on medium-sized devices with `.d-md-block`.











    PlaceholderFirst slide

    ##### First slide label


    Some representative placeholder content for the first slide.





    PlaceholderSecond slide

    ##### Second slide label


    Some representative placeholder content for the second slide.





    PlaceholderThird slide

    ##### Third slide label


    Some representative placeholder content for the third slide.







    Previous



    Next



    html









    ```
    <div id="carouselExampleCaptions" class="carousel slide">
     <div class="carousel-indicators">
     <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
     <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="1" aria-label="Slide 2"></button>
     <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="2" aria-label="Slide 3"></button>
     </div>
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>First slide label</h5>
     <p>Some representative placeholder content for the first slide.</p>
     </div>
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>Second slide label</h5>
     <p>Some representative placeholder content for the second slide.</p>
     </div>
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>Third slide label</h5>
     <p>Some representative placeholder content for the third slide.</p>
     </div>
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    ### Crossfade


    Add `.carousel-fade` to your carousel to animate slides with a fade transition instead of a slide. Depending on your carousel content (e.g., text only slides), you may want to add `.bg-body` or some custom CSS to the `.carousel-item`s for proper crossfading.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleFade" class="carousel slide carousel-fade">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    Autoplaying carousels
    ---------------------


    You can make your carousels autoplay on page load by setting the `ride` option to `carousel`. Autoplaying carousels automatically pause while hovered with the mouse. This behavior can be controlled with the `pause` option. In browsers that support the [Page Visibility API](https://www.w3.org/TR/page-visibility/), the carousel will stop cycling when the webpage is not visible to the user (such as when the browser tab is inactive, or when the browser window is minimized).



    For accessibility reasons, we recommend avoiding the use of autoplaying carousels. If your page does include an autoplaying carousel, we recommend providing an additional button or control to explicitly pause/stop the carousel.


    See [WCAG 2.1 Success Criterion 2.2.2 Pause, Stop, Hide](https://www.w3.org/TR/WCAG21/#pause-stop-hide).







    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleAutoplaying" class="carousel slide" data-bs-ride="carousel">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    When the `ride` option is set to `true`, rather than `carousel`, the carousel won’t automatically start to cycle on page load. Instead, it will only start after the first user interaction.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleRide" class="carousel slide" data-bs-ride="true">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleRide" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleRide" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    ### Individual `.carousel-item` interval


    Add `data-bs-interval=""` to a `.carousel-item` to change the amount of time to delay between automatically cycling to the next item.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleInterval" class="carousel slide" data-bs-ride="carousel">
     <div class="carousel-inner">
     <div class="carousel-item active" data-bs-interval="10000">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item" data-bs-interval="2000">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleInterval" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    ### Autoplaying carousels without controls


    Here’s a carousel with slides only. Note the presence of the `.d-block` and `.w-100` on carousel images to prevent browser default image alignment.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    html









    ```
    <div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
    </div>
    ```

    Disable touch swiping
    ---------------------


    Carousels support swiping left/right on touchscreen devices to move between slides. This can be disabled by setting the `touch` option to `false`.






    PlaceholderFirst slide


    PlaceholderSecond slide


    PlaceholderThird slide




    Previous



    Next



    html









    ```
    <div id="carouselExampleControlsNoTouching" class="carousel slide" data-bs-touch="false">
     <div class="carousel-inner">
     <div class="carousel-item active">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControlsNoTouching" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControlsNoTouching" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    Dark variant
    ------------


    Deprecated in v5.3.0
    Add `.carousel-dark` to the `.carousel` for darker controls, indicators, and captions. Controls are inverted compared to their default white fill with the `filter` CSS property. Captions and controls have additional Sass variables that customize the `color` and `background-color`.




    **Heads up!** Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of adding `.carousel-dark`, set `data-bs-theme="dark"` on the root element, a parent wrapper, or the component itself.













    PlaceholderFirst slide

    ##### First slide label


    Some representative placeholder content for the first slide.





    PlaceholderSecond slide

    ##### Second slide label


    Some representative placeholder content for the second slide.





    PlaceholderThird slide

    ##### Third slide label


    Some representative placeholder content for the third slide.







    Previous



    Next



    html









    ```
    <div id="carouselExampleDark" class="carousel carousel-dark slide">
     <div class="carousel-indicators">
     <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
     <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="1" aria-label="Slide 2"></button>
     <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="2" aria-label="Slide 3"></button>
     </div>
     <div class="carousel-inner">
     <div class="carousel-item active" data-bs-interval="10000">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>First slide label</h5>
     <p>Some representative placeholder content for the first slide.</p>
     </div>
     </div>
     <div class="carousel-item" data-bs-interval="2000">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>Second slide label</h5>
     <p>Some representative placeholder content for the second slide.</p>
     </div>
     </div>
     <div class="carousel-item">
     <img src="..." class="d-block w-100" alt="...">
     <div class="carousel-caption d-none d-md-block">
     <h5>Third slide label</h5>
     <p>Some representative placeholder content for the third slide.</p>
     </div>
     </div>
     </div>
     <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
     <span class="carousel-control-prev-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Previous</span>
     </button>
     <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
     <span class="carousel-control-next-icon" aria-hidden="true"></span>
     <span class="visually-hidden">Next</span>
     </button>
    </div>
    ```

    Custom transition
    -----------------


    The transition duration of `.carousel-item` can be changed with the `$carousel-transition-duration` Sass variable before compiling or custom styles if you’re using the compiled CSS. If multiple transitions are applied, make sure the transform transition is defined first (e.g. `transition: transform 2s ease, opacity .5s ease-out`).


    CSS
    ---


    ### Sass variables


    Variables for all carousels:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $carousel-control-color: $white;
    $carousel-control-width: 15%;
    $carousel-control-opacity: .5;
    $carousel-control-hover-opacity: .9;
    $carousel-control-transition: opacity .15s ease;

    $carousel-indicator-width: 30px;
    $carousel-indicator-height: 3px;
    $carousel-indicator-hit-area-height: 10px;
    $carousel-indicator-spacer: 3px;
    $carousel-indicator-opacity: .5;
    $carousel-indicator-active-bg: $white;
    $carousel-indicator-active-opacity: 1;
    $carousel-indicator-transition: opacity .6s ease;

    $carousel-caption-width: 70%;
    $carousel-caption-color: $white;
    $carousel-caption-padding-y: 1.25rem;
    $carousel-caption-spacer: 1.25rem;

    $carousel-control-icon-width: 2rem;

    $carousel-control-prev-icon-bg: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$carousel-control-color}'><path d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/></svg>");
    $carousel-control-next-icon-bg: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$carousel-control-color}'><path d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/></svg>");

    $carousel-transition-duration: .6s;
    $carousel-transition: transform $carousel-transition-duration ease-in-out; // Define transform transition first if using multiple transitions (e.g., `transform 2s ease, opacity .5s ease-out`)

    ```

    Variables for the [dark carousel](#dark-variant):




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $carousel-dark-indicator-active-bg: $black;
    $carousel-dark-caption-color: $black;
    $carousel-dark-control-icon-filter: invert(1) grayscale(100);

    ```

    Usage
    -----


    ### Via data attributes


    Use data attributes to easily control the position of the carousel. `data-bs-slide` accepts the keywords `prev` or `next`, which alters the slide position relative to its current position. Alternatively, use `data-bs-slide-to` to pass a raw slide index to the carousel `data-bs-slide-to="2"`, which shifts the slide position to a particular index beginning with `0`.


    ### Via JavaScript


    Call carousel manually with:



    ```
    const carousel = new bootstrap.Carousel('#myCarousel')

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `interval` | number | `5000` | The amount of time to delay between automatically cycling an item. |
    | `keyboard` | boolean | `true` | Whether the carousel should react to keyboard events. |
    | `pause` | string, boolean | `"hover"` | If set to `"hover"`, pauses the cycling of the carousel on `mouseenter` and resumes the cycling of the carousel on `mouseleave`. If set to `false`, hovering over the carousel won’t pause it. On touch-enabled devices, when set to `"hover"`, cycling will pause on `touchend` (once the user finished interacting with the carousel) for two intervals, before automatically resuming. This is in addition to the mouse behavior. |
    | `ride` | string, boolean | `false` | If set to `true`, autoplays the carousel after the user manually cycles the first item. If set to `"carousel"`, autoplays the carousel on load. |
    | `touch` | boolean | `true` | Whether the carousel should support left/right swipe interactions on touchscreen devices. |
    | `wrap` | boolean | `true` | Whether the carousel should cycle continuously or have hard stops. |


    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    You can create a carousel instance with the carousel constructor, and pass on any additional options. For example, to manually initialize an autoplaying carousel (assuming you’re not using the `data-bs-ride="carousel"` attribute in the markup itself) with a specific interval and with touch support disabled, you can use:



    ```
    const myCarouselElement = document.querySelector('#myCarousel')

    const carousel = new bootstrap.Carousel(myCarouselElement, {
     interval: 2000,
     touch: false
    })

    ```


    | Method | Description |
    | --- | --- |
    | `cycle` | Starts cycling through the carousel items from left to right. |
    | `dispose` | Destroys an element’s carousel. (Removes stored data on the DOM element) |
    | `getInstance` | Static method which allows you to get the carousel instance associated to a DOM element. You can use it like this: `bootstrap.Carousel.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a carousel instance associated to a DOM element, or creates a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Carousel.getOrCreateInstance(element)`. |
    | `next` | Cycles to the next item. **Returns to the caller before the next item has been shown** (e.g., before the `slid.bs.carousel` event occurs). |
    | `nextWhenVisible` | Don’t cycle carousel to next when the page, the carousel, or the carousel’s parent aren’t visible. **Returns to the caller before the target item has been shown**. |
    | `pause` | Stops the carousel from cycling through items. |
    | `prev` | Cycles to the previous item. **Returns to the caller before the previous item has been shown** (e.g., before the `slid.bs.carousel` event occurs). |
    | `to` | Cycles the carousel to a particular frame (0 based, similar to an array). **Returns to the caller before the target item has been shown** (e.g., before the `slid.bs.carousel` event occurs). |


    ### Events


    Bootstrap’s carousel class exposes two events for hooking into carousel functionality. Both events have the following additional properties:


    * `direction`: The direction in which the carousel is sliding (either `"left"` or `"right"`).
    * `relatedTarget`: The DOM element that is being slid into place as the active item.
    * `from`: The index of the current item
    * `to`: The index of the next item


    All carousel events are fired at the carousel itself (i.e. at the `<div class="carousel">`).




    | Event type | Description |
    | --- | --- |
    | `slid.bs.carousel` | Fired when the carousel has completed its slide transition. |
    | `slide.bs.carousel` | Fires immediately when the `slide` instance method is invoked. |



    ```
    const myCarousel = document.getElementById('myCarousel')

    myCarousel.addEventListener('slide.bs.carousel', event => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CLOSE_BUTTON:
    """

    Close button
    ============



    A generic close button for dismissing content like modals and alerts.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Disabled state](#disabled-state)
    * [Dark variant](#dark-variant)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)






    Example
    -------


    Provide an option to dismiss or close a component with `.btn-close`. Default styling is limited, but highly customizable. Modify the Sass variables to replace the default `background-image`. **Be sure to include text for screen readers**, as we’ve done with `aria-label`.





    html









    ```
    <button type="button" class="btn-close" aria-label="Close"></button>
    ```

    Disabled state
    --------------


    Disabled close buttons change their `opacity`. We’ve also applied `pointer-events: none` and `user-select: none` to preventing hover and active states from triggering.





    html









    ```
    <button type="button" class="btn-close" disabled aria-label="Close"></button>
    ```

    Dark variant
    ------------


    Deprecated in v5.3.0

    **Heads up!** As of v5.3.0, the `.btn-close-white` class is deprecated. Instead, use `data-bs-theme="dark"` to change the color mode of the close button.

    Add `data-bs-theme="dark"` to the `.btn-close`, or to its parent element, to invert the close button. This uses the `filter` property to invert the `background-image` without overriding its value.








    html









    ```
    <div data-bs-theme="dark">
     <button type="button" class="btn-close" aria-label="Close"></button>
     <button type="button" class="btn-close" disabled aria-label="Close"></button>
    </div>
    ```

    CSS
    ---


    ### Variables


    Added in v5.3.0
    As part of Bootstrap’s evolving CSS variables approach, close button now uses local CSS variables on `.btn-close` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_close.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_close.scss)






    ```
    --#{$prefix}btn-close-color: #{$btn-close-color};
    --#{$prefix}btn-close-bg: #{ escape-svg($btn-close-bg) };
    --#{$prefix}btn-close-opacity: #{$btn-close-opacity};
    --#{$prefix}btn-close-hover-opacity: #{$btn-close-hover-opacity};
    --#{$prefix}btn-close-focus-shadow: #{$btn-close-focus-shadow};
    --#{$prefix}btn-close-focus-opacity: #{$btn-close-focus-opacity};
    --#{$prefix}btn-close-disabled-opacity: #{$btn-close-disabled-opacity};
    --#{$prefix}btn-close-white-filter: #{$btn-close-white-filter};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $btn-close-width: 1em;
    $btn-close-height: $btn-close-width;
    $btn-close-padding-x: .25em;
    $btn-close-padding-y: $btn-close-padding-x;
    $btn-close-color: $black;
    $btn-close-bg: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$btn-close-color}'><path d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/></svg>");
    $btn-close-focus-shadow: $focus-ring-box-shadow;
    $btn-close-opacity: .5;
    $btn-close-hover-opacity: .75;
    $btn-close-focus-opacity: 1;
    $btn-close-disabled-opacity: .25;
    $btn-close-white-filter: invert(1) grayscale(100%) brightness(200%);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLLAPSE:
    """

    Collapse
    ========



    Toggle the visibility of content across your project with a few classes and our JavaScript plugins.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Example](#example)
    * [Horizontal](#horizontal)
    * [Multiple toggles and targets](#multiple-toggles-and-targets)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Classes](#classes)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
            + [Methods](#methods)
            + [Events](#events)






    How it works
    ------------


    The collapse JavaScript plugin is used to show and hide content. Buttons or anchors are used as triggers that are mapped to specific elements you toggle. Collapsing an element will animate the `height` from its current value to `0`. Given how CSS handles animations, you cannot use `padding` on a `.collapse` element. Instead, use the class as an independent wrapping element.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Example
    -------


    Click the buttons below to show and hide another element via class changes:


    * `.collapse` hides content
    * `.collapsing` is applied during transitions
    * `.collapse.show` shows content


    Generally, we recommend using a `<button>` with the `data-bs-target` attribute. While not recommended from a semantic point of view, you can also use an `<a>` link with the `href` attribute (and a `role="button"`). In both cases, the `data-bs-toggle="collapse"` is required.




    [Link with href](#collapseExample)

     Button with data-bs-target






     Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.



    html









    ```
    <p class="d-inline-flex gap-1">
     <a class="btn btn-primary" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
     Link with href
     </a>
     <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
     Button with data-bs-target
     </button>
    </p>
    <div class="collapse" id="collapseExample">
     <div class="card card-body">
     Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
     </div>
    </div>
    ```

    Horizontal
    ----------


    The collapse plugin supports horizontal collapsing. Add the `.collapse-horizontal` modifier class to transition the `width` instead of `height` and set a `width` on the immediate child element. Feel free to write your own custom Sass, use inline styles, or use our [width utilities](https://getbootstrap.com/docs/5.3/utilities/sizing/).



    Please note that while the example below has a `min-height` set to avoid excessive repaints in our docs, this is not explicitly required. **Only the `width` on the child element is required.**




     Toggle width collapse







     This is some placeholder content for a horizontal collapse. It's hidden by default and shown when triggered.




    html









    ```
    <p>
     <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
     Toggle width collapse
     </button>
    </p>
    <div style="min-height: 120px;">
     <div class="collapse collapse-horizontal" id="collapseWidthExample">
     <div class="card card-body" style="width: 300px;">
     This is some placeholder content for a horizontal collapse. It's hidden by default and shown when triggered.
     </div>
     </div>
    </div>
    ```

    Multiple toggles and targets
    ----------------------------


    A `<button>` or `<a>` element can show and hide multiple elements by referencing them with a selector in its `data-bs-target` or `href` attribute.
    Conversely, multiple `<button>` or `<a>` elements can show and hide the same element if they each reference it with their `data-bs-target` or `href` attribute.




    [Toggle first element](#multiCollapseExample1)
    Toggle second element
    Toggle both elements







     Some placeholder content for the first collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.






     Some placeholder content for the second collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.





    html









    ```
    <p class="d-inline-flex gap-1">
     <a class="btn btn-primary" data-bs-toggle="collapse" href="#multiCollapseExample1" role="button" aria-expanded="false" aria-controls="multiCollapseExample1">Toggle first element</a>
     <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#multiCollapseExample2" aria-expanded="false" aria-controls="multiCollapseExample2">Toggle second element</button>
     <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target=".multi-collapse" aria-expanded="false" aria-controls="multiCollapseExample1 multiCollapseExample2">Toggle both elements</button>
    </p>
    <div class="row">
     <div class="col">
     <div class="collapse multi-collapse" id="multiCollapseExample1">
     <div class="card card-body">
     Some placeholder content for the first collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
     </div>
     </div>
     </div>
     <div class="col">
     <div class="collapse multi-collapse" id="multiCollapseExample2">
     <div class="card card-body">
     Some placeholder content for the second collapse component of this multi-collapse example. This panel is hidden by default but revealed when the user activates the relevant trigger.
     </div>
     </div>
     </div>
    </div>
    ```

    Accessibility
    -------------


    Be sure to add `aria-expanded` to the control element. This attribute explicitly conveys the current state of the collapsible element tied to the control to screen readers and similar assistive technologies. If the collapsible element is closed by default, the attribute on the control element should have a value of `aria-expanded="false"`. If you’ve set the collapsible element to be open by default using the `show` class, set `aria-expanded="true"` on the control instead. The plugin will automatically toggle this attribute on the control based on whether or not the collapsible element has been opened or closed (via JavaScript, or because the user triggered another control element also tied to the same collapsible element). If the control element’s HTML element is not a button (e.g., an `<a>` or `<div>`), the attribute `role="button"` should be added to the element.


    If your control element is targeting a single collapsible element – i.e. the `data-bs-target` attribute is pointing to an `id` selector – you should add the `aria-controls` attribute to the control element, containing the `id` of the collapsible element. Modern screen readers and similar assistive technologies make use of this attribute to provide users with additional shortcuts to navigate directly to the collapsible element itself.


    Note that Bootstrap’s current implementation does not cover the various *optional* keyboard interactions described in the [ARIA Authoring Practices Guide accordion pattern](https://www.w3.org/WAI/ARIA/apg/patterns/accordion/) - you will need to include these yourself with custom JavaScript.


    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $transition-collapse: height .35s ease;
    $transition-collapse-width: width .35s ease;

    ```

    ### Classes


    Collapse transition classes can be found in `scss/_transitions.scss` as these are shared across multiple components (collapse and accordion).




    [scss/\_transitions.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_transitions.scss)






    ```
    .collapse {
     &:not(.show) {
     display: none;
     }
    }

    .collapsing {
     height: 0;
     overflow: hidden;
     @include transition($transition-collapse);

     &.collapse-horizontal {
     width: 0;
     height: auto;
     @include transition($transition-collapse-width);
     }
    }

    ```

    Usage
    -----


    The collapse plugin utilizes a few classes to handle the heavy lifting:


    * `.collapse` hides the content
    * `.collapse.show` shows the content
    * `.collapsing` is added when the transition starts, and removed when it finishes


    These classes can be found in `_transitions.scss`.


    ### Via data attributes


    Just add `data-bs-toggle="collapse"` and a `data-bs-target` to the element to automatically assign control of one or more collapsible elements. The `data-bs-target` attribute accepts a CSS selector to apply the collapse to. Be sure to add the class `collapse` to the collapsible element. If you’d like it to default open, add the additional class `show`.


    To add accordion-like group management to a collapsible area, add the data attribute `data-bs-parent="#selector"`. Refer to the [accordion page](https://getbootstrap.com/docs/5.3/components/accordion/) for more information.


    ### Via JavaScript


    Enable manually with:



    ```
    const collapseElementList = document.querySelectorAll('.collapse')
    const collapseList = [...collapseElementList].map(collapseEl => new bootstrap.Collapse(collapseEl))

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `parent` | selector, DOM element | `null` | If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown. (similar to traditional accordion behavior - this is dependent on the `card` class). The attribute has to be set on the target collapsible area. |
    | `toggle` | boolean | `true` | Toggles the collapsible element on invocation. |


    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    Activates your content as a collapsible element. Accepts an optional options `object`.


    You can create a collapse instance with the constructor, for example:



    ```
    const bsCollapse = new bootstrap.Collapse('#myCollapse', {
     toggle: false
    })

    ```


    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s collapse. (Removes stored data on the DOM element) |
    | `getInstance` | Static method which allows you to get the collapse instance associated to a DOM element, you can use it like this: `bootstrap.Collapse.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a collapse instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Collapse.getOrCreateInstance(element)`. |
    | `hide` | Hides a collapsible element. **Returns to the caller before the collapsible element has actually been hidden** (e.g., before the `hidden.bs.collapse` event occurs). |
    | `show` | Shows a collapsible element. **Returns to the caller before the collapsible element has actually been shown** (e.g., before the `shown.bs.collapse` event occurs). |
    | `toggle` | Toggles a collapsible element to shown or hidden. **Returns to the caller before the collapsible element has actually been shown or hidden** (i.e. before the `shown.bs.collapse` or `hidden.bs.collapse` event occurs). |


    ### Events


    Bootstrap’s collapse class exposes a few events for hooking into collapse functionality.




    | Event type | Description |
    | --- | --- |
    | `hide.bs.collapse` | This event is fired immediately when the `hide` method has been called. |
    | `hidden.bs.collapse` | This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete). |
    | `show.bs.collapse` | This event fires immediately when the `show` instance method is called. |
    | `shown.bs.collapse` | This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete). |



    ```
    const myCollapsible = document.getElementById('myCollapsible')
    myCollapsible.addEventListener('hidden.bs.collapse', event => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class DROPDOWNS:
    """

    Dropdowns
    =========



    Toggle contextual overlays for displaying lists of links and more with the Bootstrap dropdown plugin.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Accessibility](#accessibility)
    * [Examples](#examples)
            + [Single button](#single-button)
            + [Split button](#split-button)
    * [Sizing](#sizing)
    * [Dark dropdowns](#dark-dropdowns)
    * [Directions](#directions)
            + [Centered](#centered)
            + [Dropup](#dropup)
            + [Dropup centered](#dropup-centered)
            + [Dropend](#dropend)
            + [Dropstart](#dropstart)
    * [Menu items](#menu-items)
            + [Active](#active)
            + [Disabled](#disabled)
    * [Menu alignment](#menu-alignment)
            + [Responsive alignment](#responsive-alignment)
            + [Alignment options](#alignment-options)
    * [Menu content](#menu-content)
            + [Headers](#headers)
            + [Dividers](#dividers)
            + [Text](#text)
            + [Forms](#forms)
    * [Dropdown options](#dropdown-options)
            + [Auto close behavior](#auto-close-behavior)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
                    - [Using function with `popperConfig`](#using-function-with-popperconfig)
            + [Methods](#methods)
            + [Events](#events)






    Overview
    --------


    Dropdowns are toggleable, contextual overlays for displaying lists of links and more. They’re made interactive with the included Bootstrap dropdown JavaScript plugin. They’re toggled by clicking, not by hovering; this is [an intentional design decision](https://markdotto.com/2012/02/27/bootstrap-explained-dropdowns/).


    Dropdowns are built on a third party library, [Popper](https://popper.js.org/), which provides dynamic positioning and viewport detection. Be sure to include [popper.min.js](https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js) before Bootstrap’s JavaScript or use `bootstrap.bundle.min.js` / `bootstrap.bundle.js` which contains Popper. Popper isn’t used to position dropdowns in navbars though as dynamic positioning isn’t required.


    Accessibility
    -------------


    The [WAI ARIA](https://www.w3.org/TR/wai-aria/) standard defines an actual [`role="menu"` widget](https://www.w3.org/TR/wai-aria/#menu), but this is specific to application-like menus which trigger actions or functions. ARIA menus can only contain menu items, checkbox menu items, radio button menu items, radio button groups, and sub-menus.


    Bootstrap’s dropdowns, on the other hand, are designed to be generic and applicable to a variety of situations and markup structures. For instance, it is possible to create dropdowns that contain additional inputs and form controls, such as search fields or login forms. For this reason, Bootstrap does not expect (nor automatically add) any of the `role` and `aria-` attributes required for true ARIA menus. Authors will have to include these more specific attributes themselves.


    However, Bootstrap does add built-in support for most standard keyboard menu interactions, such as the ability to move through individual `.dropdown-item` elements using the cursor keys and close the menu with the `Esc` key.


    Examples
    --------


    Wrap the dropdown’s toggle (your button or link) and the dropdown menu within `.dropdown`, or another element that declares `position: relative;`. Ideally, you should use a `<button>` element as the dropdown trigger, but the plugin will work with `<a>` elements as well. The examples shown here use semantic `<ul>` elements where appropriate, but custom markup is supported.


    ### Single button


    Any single `.btn` can be turned into a dropdown toggle with some markup changes. Here’s how you can put them to work with `<button>` elements:





     Dropdown button

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)




    html









    ```
    <div class="dropdown">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown button
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
    </div>
    ```

    While `<button>` is the recommended control for a dropdown toggle, there might be situations where you have to use an `<a>` element. If you do, we recommend adding a `role="button"` attribute to appropriately convey control’s purpose to assistive technologies such as screen readers.




    [Dropdown link](#)
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)




    html









    ```
    <div class="dropdown">
     <a class="btn btn-secondary dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown link
     </a>

     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
    </div>
    ```

    The best part is you can do this with any button variant, too:




    Primary
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Secondary
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Success
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Info
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Warning
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Danger
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <!-- Example single danger button -->
    <div class="btn-group">
     <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Action
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>

    ```
    ### Split button


    Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of `.dropdown-toggle-split` for proper spacing around the dropdown caret.


    We use this extra class to reduce the horizontal `padding` on either side of the caret by 25% and remove the `margin-left` that’s added for regular button dropdowns. Those extra changes keep the caret centered in the split button and provide a more appropriately sized hit area next to the main button.




    Primary

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Secondary

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Success

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Info

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Warning

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Danger

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <!-- Example split danger button -->
    <div class="btn-group">
     <button type="button" class="btn btn-danger">Action</button>
     <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>

    ```
    Sizing
    ------


    Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.





     Large button

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Large split button

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <!-- Large button groups (default and split) -->
    <div class="btn-group">
     <button class="btn btn-secondary btn-lg dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Large button
     </button>
     <ul class="dropdown-menu">
     ...
     </ul>
    </div>
    <div class="btn-group">
     <button class="btn btn-secondary btn-lg" type="button">
     Large split button
     </button>
     <button type="button" class="btn btn-lg btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     ...
     </ul>
    </div>

    ```



     Small button

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    Small split button

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <div class="btn-group">
     <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Small button
     </button>
     <ul class="dropdown-menu">
     ...
     </ul>
    </div>
    <div class="btn-group">
     <button class="btn btn-secondary btn-sm" type="button">
     Small split button
     </button>
     <button type="button" class="btn btn-sm btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     ...
     </ul>
    </div>

    ```
    Dark dropdowns
    --------------


    Deprecated in v5.3.0
    Opt into darker dropdowns to match a dark navbar or custom style by adding `.dropdown-menu-dark` onto an existing `.dropdown-menu`. No changes are required to the dropdown items.




    **Heads up!** Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of adding `.dropdown-menu-dark`, set `data-bs-theme="dark"` on the root element, a parent wrapper, or the component itself.







     Dropdown button

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)




    html









    ```
    <div class="dropdown">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown button
     </button>
     <ul class="dropdown-menu dropdown-menu-dark">
     <li><a class="dropdown-item active" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
    </div>
    ```

    And putting it to use in a navbar:





    [Navbar](#)




    * Dropdown

            + [Action](#)
            + [Another action](#)
            + [Something else here](#)






    html









    ```
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDarkDropdown" aria-controls="navbarNavDarkDropdown" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarNavDarkDropdown">
     <ul class="navbar-nav">
     <li class="nav-item dropdown">
     <button class="btn btn-dark dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu dropdown-menu-dark">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     </ul>
     </div>
     </div>
    </nav>
    ```

    Directions
    ----------



    **Directions are flipped in RTL mode.** As such, `.dropstart` will appear on the right side.

    ### Centered


    Make the dropdown menu centered below the toggle with `.dropdown-center` on the parent element.





     Centered dropdown

    * [Action](#)
    * [Action two](#)
    * [Action three](#)




    html









    ```
    <div class="dropdown-center">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Centered dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Action two</a></li>
     <li><a class="dropdown-item" href="#">Action three</a></li>
     </ul>
    </div>
    ```

    ### Dropup


    Trigger dropdown menus above elements by adding `.dropup` to the parent element.





     Dropup

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





     Split dropup


    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <!-- Default dropup button -->
    <div class="btn-group dropup">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropup
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
    </div>

    <!-- Split dropup button -->
    <div class="btn-group dropup">
     <button type="button" class="btn btn-secondary">
     Split dropup
     </button>
     <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
    </div>

    ```
    ### Dropup centered


    Make the dropup menu centered above the toggle with `.dropup-center` on the parent element.





     Centered dropup

    * [Action](#)
    * [Action two](#)
    * [Action three](#)




    html









    ```
    <div class="dropup-center dropup">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Centered dropup
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Action two</a></li>
     <li><a class="dropdown-item" href="#">Action three</a></li>
     </ul>
    </div>
    ```

    ### Dropend


    Trigger dropdown menus at the right of the elements by adding `.dropend` to the parent element.





     Dropend

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





     Split dropend


    Toggle Dropend

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    ```
    <!-- Default dropend button -->
    <div class="btn-group dropend">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropend
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
    </div>

    <!-- Split dropend button -->
    <div class="btn-group dropend">
     <button type="button" class="btn btn-secondary">
     Split dropend
     </button>
     <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropend</span>
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
    </div>

    ```
    ### Dropstart


    Trigger dropdown menus at the left of the elements by adding `.dropstart` to the parent element.





     Dropstart

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    Toggle Dropstart

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)



     Split dropstart




    ```
    <!-- Default dropstart button -->
    <div class="btn-group dropstart">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropstart
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
    </div>

    <!-- Split dropstart button -->
    <div class="btn-group dropstart">
     <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
     <span class="visually-hidden">Toggle Dropstart</span>
     </button>
     <ul class="dropdown-menu">
     <!-- Dropdown menu links -->
     </ul>
     <button type="button" class="btn btn-secondary">
     Split dropstart
     </button>
    </div>

    ```
    Menu items
    ----------


    You can use `<a>` or `<button>` elements as dropdown items.





     Dropdown

    * Action
    * Another action
    * Something else here




    html









    ```
    <div class="dropdown">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><button class="dropdown-item" type="button">Action</button></li>
     <li><button class="dropdown-item" type="button">Another action</button></li>
     <li><button class="dropdown-item" type="button">Something else here</button></li>
     </ul>
    </div>
    ```

    You can also create non-interactive dropdown items with `.dropdown-item-text`. Feel free to style further with custom CSS or text utilities.



    * Dropdown item text
    * [Action](#)
    * [Another action](#)
    * [Something else here](#)



    html









    ```
    <ul class="dropdown-menu">
     <li><span class="dropdown-item-text">Dropdown item text</span></li>
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
    </ul>
    ```

    ### Active


    Add `.active` to items in the dropdown to **style them as active**. To convey the active state to assistive technologies, use the `aria-current` attribute — using the `page` value for the current page, or `true` for the current item in a set.



    * [Regular link](#)
    * [Active link](#)
    * [Another link](#)



    html









    ```
    <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Regular link</a></li>
     <li><a class="dropdown-item active" href="#" aria-current="true">Active link</a></li>
     <li><a class="dropdown-item" href="#">Another link</a></li>
    </ul>
    ```

    ### Disabled


    Add `.disabled` to items in the dropdown to **style them as disabled**.



    * [Regular link](#)
    * Disabled link
    * [Another link](#)



    html









    ```
    <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Regular link</a></li>
     <li><a class="dropdown-item disabled" aria-disabled="true">Disabled link</a></li>
     <li><a class="dropdown-item" href="#">Another link</a></li>
    </ul>
    ```

    Menu alignment
    --------------


    By default, a dropdown menu is automatically positioned 100% from the top and along the left side of its parent. You can change this with the directional `.drop*` classes, but you can also control them with additional modifier classes.


    Add `.dropdown-menu-end` to a `.dropdown-menu` to right align the dropdown menu. Directions are mirrored when using Bootstrap in RTL, meaning `.dropdown-menu-end` will appear on the left side.



    **Heads up!** Dropdowns are positioned thanks to Popper except when they are contained in a navbar.




     Right-aligned menu example

    * Action
    * Another action
    * Something else here




    html









    ```
    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Right-aligned menu example
     </button>
     <ul class="dropdown-menu dropdown-menu-end">
     <li><button class="dropdown-item" type="button">Action</button></li>
     <li><button class="dropdown-item" type="button">Another action</button></li>
     <li><button class="dropdown-item" type="button">Something else here</button></li>
     </ul>
    </div>
    ```

    ### Responsive alignment


    If you want to use responsive alignment, disable dynamic positioning by adding the `data-bs-display="static"` attribute and use the responsive variation classes.


    To align **right** the dropdown menu with the given breakpoint or larger, add `.dropdown-menu{-sm|-md|-lg|-xl|-xxl}-end`.





     Left-aligned but right aligned when large screen

    * Action
    * Another action
    * Something else here




    html









    ```
    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
     Left-aligned but right aligned when large screen
     </button>
     <ul class="dropdown-menu dropdown-menu-lg-end">
     <li><button class="dropdown-item" type="button">Action</button></li>
     <li><button class="dropdown-item" type="button">Another action</button></li>
     <li><button class="dropdown-item" type="button">Something else here</button></li>
     </ul>
    </div>
    ```

    To align **left** the dropdown menu with the given breakpoint or larger, add `.dropdown-menu-end` and `.dropdown-menu{-sm|-md|-lg|-xl|-xxl}-start`.





     Right-aligned but left aligned when large screen

    * Action
    * Another action
    * Something else here




    html









    ```
    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
     Right-aligned but left aligned when large screen
     </button>
     <ul class="dropdown-menu dropdown-menu-end dropdown-menu-lg-start">
     <li><button class="dropdown-item" type="button">Action</button></li>
     <li><button class="dropdown-item" type="button">Another action</button></li>
     <li><button class="dropdown-item" type="button">Something else here</button></li>
     </ul>
    </div>
    ```

    Note that you don’t need to add a `data-bs-display="static"` attribute to dropdown buttons in navbars, since Popper isn’t used in navbars.


    ### Alignment options


    Taking most of the options shown above, here’s a small kitchen sink demo of various dropdown alignment options in one place.





     Dropdown

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Right-aligned menu

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Left-aligned, right-aligned lg

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Right-aligned, left-aligned lg

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Dropstart

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Dropend

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Dropup

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)




    html









    ```
    <div class="btn-group">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Right-aligned menu
     </button>
     <ul class="dropdown-menu dropdown-menu-end">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
     Left-aligned, right-aligned lg
     </button>
     <ul class="dropdown-menu dropdown-menu-lg-end">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false">
     Right-aligned, left-aligned lg
     </button>
     <ul class="dropdown-menu dropdown-menu-end dropdown-menu-lg-start">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group dropstart">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropstart
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group dropend">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropend
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group dropup">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
     Dropup
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>
    ```

    Menu content
    ------------


    ### Headers


    Add a header to label sections of actions in any dropdown menu.



    * ###### Dropdown header
    * [Action](#)
    * [Another action](#)



    html









    ```
    <ul class="dropdown-menu">
     <li><h6 class="dropdown-header">Dropdown header</h6></li>
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
    </ul>
    ```

    ### Dividers


    Separate groups of related menu items with a divider.



    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)



    html









    ```
    <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
    </ul>
    ```

    ### Text


    Place any freeform text within a dropdown menu with text and use [spacing utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/). Note that you’ll likely need additional sizing styles to constrain the menu width.





     Some example text that's free-flowing within the dropdown menu.




     And this is more example text.





    html









    ```
    <div class="dropdown-menu p-4 text-body-secondary" style="max-width: 200px;">
     <p>
     Some example text that's free-flowing within the dropdown menu.
     </p>
     <p class="mb-0">
     And this is more example text.
     </p>
    </div>
    ```

    ### Forms


    Put a form within a dropdown menu, or make it into a dropdown menu, and use [margin or padding utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/) to give it the negative space you require.






    Email address



    Password






     Remember me



    Sign in


    [New around here? Sign up](#)
    [Forgot password?](#)


    html









    ```
    <div class="dropdown-menu">
     <form class="px-4 py-3">
     <div class="mb-3">
     <label for="exampleDropdownFormEmail1" class="form-label">Email address</label>
     <input type="email" class="form-control" id="exampleDropdownFormEmail1" placeholder="email@example.com">
     </div>
     <div class="mb-3">
     <label for="exampleDropdownFormPassword1" class="form-label">Password</label>
     <input type="password" class="form-control" id="exampleDropdownFormPassword1" placeholder="Password">
     </div>
     <div class="mb-3">
     <div class="form-check">
     <input type="checkbox" class="form-check-input" id="dropdownCheck">
     <label class="form-check-label" for="dropdownCheck">
     Remember me
     </label>
     </div>
     </div>
     <button type="submit" class="btn btn-primary">Sign in</button>
     </form>
     <div class="dropdown-divider"></div>
     <a class="dropdown-item" href="#">New around here? Sign up</a>
     <a class="dropdown-item" href="#">Forgot password?</a>
    </div>
    ```




     Dropdown form



    Email address



    Password






     Remember me



    Sign in



    html









    ```
    <div class="dropdown">
     <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
     Dropdown form
     </button>
     <form class="dropdown-menu p-4">
     <div class="mb-3">
     <label for="exampleDropdownFormEmail2" class="form-label">Email address</label>
     <input type="email" class="form-control" id="exampleDropdownFormEmail2" placeholder="email@example.com">
     </div>
     <div class="mb-3">
     <label for="exampleDropdownFormPassword2" class="form-label">Password</label>
     <input type="password" class="form-control" id="exampleDropdownFormPassword2" placeholder="Password">
     </div>
     <div class="mb-3">
     <div class="form-check">
     <input type="checkbox" class="form-check-input" id="dropdownCheck2">
     <label class="form-check-label" for="dropdownCheck2">
     Remember me
     </label>
     </div>
     </div>
     <button type="submit" class="btn btn-primary">Sign in</button>
     </form>
    </div>
    ```

    Dropdown options
    ----------------


    Use `data-bs-offset` or `data-bs-reference` to change the location of the dropdown.






     Offset

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)




    Reference

    Toggle Dropdown

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)
    * ---
    * [Separated link](#)





    html









    ```
    <div class="d-flex">
     <div class="dropdown me-1">
     <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-offset="10,20">
     Offset
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </div>
     <div class="btn-group">
     <button type="button" class="btn btn-secondary">Reference</button>
     <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false" data-bs-reference="parent">
     <span class="visually-hidden">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     </div>
    </div>
    ```

    ### Auto close behavior


    By default, the dropdown menu is closed when clicking inside or outside the dropdown menu. You can use the `autoClose` option to change this behavior of the dropdown.





     Default dropdown

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Clickable inside

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Clickable outside

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)





     Manual close

    * [Menu item](#)
    * [Menu item](#)
    * [Menu item](#)




    html









    ```
    <div class="btn-group">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-auto-close="true" aria-expanded="false">
     Default dropdown
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-auto-close="inside" aria-expanded="false">
     Clickable inside
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
     Clickable outside
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>

    <div class="btn-group">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-auto-close="false" aria-expanded="false">
     Manual close
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     <li><a class="dropdown-item" href="#">Menu item</a></li>
     </ul>
    </div>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, dropdowns now use local CSS variables on `.dropdown-menu` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_dropdown.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_dropdown.scss)






    ```
    --#{$prefix}dropdown-zindex: #{$zindex-dropdown};
    --#{$prefix}dropdown-min-width: #{$dropdown-min-width};
    --#{$prefix}dropdown-padding-x: #{$dropdown-padding-x};
    --#{$prefix}dropdown-padding-y: #{$dropdown-padding-y};
    --#{$prefix}dropdown-spacer: #{$dropdown-spacer};
    @include rfs($dropdown-font-size, --#{$prefix}dropdown-font-size);
    --#{$prefix}dropdown-color: #{$dropdown-color};
    --#{$prefix}dropdown-bg: #{$dropdown-bg};
    --#{$prefix}dropdown-border-color: #{$dropdown-border-color};
    --#{$prefix}dropdown-border-radius: #{$dropdown-border-radius};
    --#{$prefix}dropdown-border-width: #{$dropdown-border-width};
    --#{$prefix}dropdown-inner-border-radius: #{$dropdown-inner-border-radius};
    --#{$prefix}dropdown-divider-bg: #{$dropdown-divider-bg};
    --#{$prefix}dropdown-divider-margin-y: #{$dropdown-divider-margin-y};
    --#{$prefix}dropdown-box-shadow: #{$dropdown-box-shadow};
    --#{$prefix}dropdown-link-color: #{$dropdown-link-color};
    --#{$prefix}dropdown-link-hover-color: #{$dropdown-link-hover-color};
    --#{$prefix}dropdown-link-hover-bg: #{$dropdown-link-hover-bg};
    --#{$prefix}dropdown-link-active-color: #{$dropdown-link-active-color};
    --#{$prefix}dropdown-link-active-bg: #{$dropdown-link-active-bg};
    --#{$prefix}dropdown-link-disabled-color: #{$dropdown-link-disabled-color};
    --#{$prefix}dropdown-item-padding-x: #{$dropdown-item-padding-x};
    --#{$prefix}dropdown-item-padding-y: #{$dropdown-item-padding-y};
    --#{$prefix}dropdown-header-color: #{$dropdown-header-color};
    --#{$prefix}dropdown-header-padding-x: #{$dropdown-header-padding-x};
    --#{$prefix}dropdown-header-padding-y: #{$dropdown-header-padding-y};
    ```


    Dropdown items include at least one variable that is not set on `.dropdown`. This allows you to provide a new value while Bootstrap defaults to a fallback value.


    * `--bs-dropdown-item-border-radius`



    Customization through CSS variables can be seen on the `.dropdown-menu-dark` class where we override specific values without adding duplicate CSS selectors.




    [scss/\_dropdown.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_dropdown.scss)






    ```
    --#{$prefix}dropdown-color: #{$dropdown-dark-color};
    --#{$prefix}dropdown-bg: #{$dropdown-dark-bg};
    --#{$prefix}dropdown-border-color: #{$dropdown-dark-border-color};
    --#{$prefix}dropdown-box-shadow: #{$dropdown-dark-box-shadow};
    --#{$prefix}dropdown-link-color: #{$dropdown-dark-link-color};
    --#{$prefix}dropdown-link-hover-color: #{$dropdown-dark-link-hover-color};
    --#{$prefix}dropdown-divider-bg: #{$dropdown-dark-divider-bg};
    --#{$prefix}dropdown-link-hover-bg: #{$dropdown-dark-link-hover-bg};
    --#{$prefix}dropdown-link-active-color: #{$dropdown-dark-link-active-color};
    --#{$prefix}dropdown-link-active-bg: #{$dropdown-dark-link-active-bg};
    --#{$prefix}dropdown-link-disabled-color: #{$dropdown-dark-link-disabled-color};
    --#{$prefix}dropdown-header-color: #{$dropdown-dark-header-color};
    ```

    ### Sass variables


    Variables for all dropdowns:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $dropdown-min-width: 10rem;
    $dropdown-padding-x: 0;
    $dropdown-padding-y: .5rem;
    $dropdown-spacer: .125rem;
    $dropdown-font-size: $font-size-base;
    $dropdown-color: var(--#{$prefix}body-color);
    $dropdown-bg: var(--#{$prefix}body-bg);
    $dropdown-border-color: var(--#{$prefix}border-color-translucent);
    $dropdown-border-radius: var(--#{$prefix}border-radius);
    $dropdown-border-width: var(--#{$prefix}border-width);
    $dropdown-inner-border-radius: calc(#{$dropdown-border-radius} - #{$dropdown-border-width}); // stylelint-disable-line function-disallowed-list
    $dropdown-divider-bg: $dropdown-border-color;
    $dropdown-divider-margin-y: $spacer \* .5;
    $dropdown-box-shadow: $box-shadow;

    $dropdown-link-color: var(--#{$prefix}body-color);
    $dropdown-link-hover-color: $dropdown-link-color;
    $dropdown-link-hover-bg: var(--#{$prefix}tertiary-bg);

    $dropdown-link-active-color: $component-active-color;
    $dropdown-link-active-bg: $component-active-bg;

    $dropdown-link-disabled-color: var(--#{$prefix}tertiary-color);

    $dropdown-item-padding-y: $spacer \* .25;
    $dropdown-item-padding-x: $spacer;

    $dropdown-header-color: $gray-600;
    $dropdown-header-padding-x: $dropdown-item-padding-x;
    $dropdown-header-padding-y: $dropdown-padding-y;
    // fusv-disable
    $dropdown-header-padding: $dropdown-header-padding-y $dropdown-header-padding-x; // Deprecated in v5.2.0
    // fusv-enable

    ```

    Variables for the [dark dropdown](#dark-dropdowns):




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $dropdown-dark-color: $gray-300;
    $dropdown-dark-bg: $gray-800;
    $dropdown-dark-border-color: $dropdown-border-color;
    $dropdown-dark-divider-bg: $dropdown-divider-bg;
    $dropdown-dark-box-shadow: null;
    $dropdown-dark-link-color: $dropdown-dark-color;
    $dropdown-dark-link-hover-color: $white;
    $dropdown-dark-link-hover-bg: rgba($white, .15);
    $dropdown-dark-link-active-color: $dropdown-link-active-color;
    $dropdown-dark-link-active-bg: $dropdown-link-active-bg;
    $dropdown-dark-link-disabled-color: $gray-500;
    $dropdown-dark-header-color: $gray-500;

    ```

    Variables for the CSS-based carets that indicate a dropdown’s interactivity:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $caret-width: .3em;
    $caret-vertical-align: $caret-width \* .85;
    $caret-spacing: $caret-width \* .85;

    ```

    ### Sass mixins


    Mixins are used to generate the CSS-based carets and can be found in `scss/mixins/_caret.scss`.




    [scss/mixins/\_caret.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_caret.scss)






    ```
    @mixin caret-down($width: $caret-width) {
     border-top: $width solid;
     border-right: $width solid transparent;
     border-bottom: 0;
     border-left: $width solid transparent;
    }

    @mixin caret-up($width: $caret-width) {
     border-top: 0;
     border-right: $width solid transparent;
     border-bottom: $width solid;
     border-left: $width solid transparent;
    }

    @mixin caret-end($width: $caret-width) {
     border-top: $width solid transparent;
     border-right: 0;
     border-bottom: $width solid transparent;
     border-left: $width solid;
    }

    @mixin caret-start($width: $caret-width) {
     border-top: $width solid transparent;
     border-right: $width solid;
     border-bottom: $width solid transparent;
    }

    @mixin caret(
     $direction: down,
     $width: $caret-width,
     $spacing: $caret-spacing,
     $vertical-align: $caret-vertical-align
    ) {
     @if $enable-caret {
     &::after {
     display: inline-block;
     margin-left: $spacing;
     vertical-align: $vertical-align;
     content: "";
     @if $direction == down {
     @include caret-down($width);
     } @else if $direction == up {
     @include caret-up($width);
     } @else if $direction == end {
     @include caret-end($width);
     }
     }

     @if $direction == start {
     &::after {
     display: none;
     }

     &::before {
     display: inline-block;
     margin-right: $spacing;
     vertical-align: $vertical-align;
     content: "";
     @include caret-start($width);
     }
     }

     &:empty::after {
     margin-left: 0;
     }
     }
    }

    ```

    Usage
    -----


    Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the `.show` class on the parent `.dropdown-menu`. The `data-bs-toggle="dropdown"` attribute is relied on for closing dropdown menus at an application level, so it’s a good idea to always use it.



    On touch-enabled devices, opening a dropdown adds empty `mouseover` handlers to the immediate children of the `<body>` element. This admittedly ugly hack is necessary to work around a [quirk in iOS’ event delegation](https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html), which would otherwise prevent a tap anywhere outside of the dropdown from triggering the code that closes the dropdown. Once the dropdown is closed, these additional empty `mouseover` handlers are removed.

    ### Via data attributes


    Add `data-bs-toggle="dropdown"` to a link or button to toggle a dropdown.



    ```
    <div class="dropdown">
     <button type="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown trigger
     </button>
     <ul class="dropdown-menu">
     ...
     </ul>
    </div>

    ```
    ### Via JavaScript



    Dropdowns must have `data-bs-toggle="dropdown"` on their trigger element, regardless of whether you call your dropdown via JavaScript or use the data-api.

    Call the dropdowns via JavaScript:



    ```
    const dropdownElementList = document.querySelectorAll('.dropdown-toggle')
    const dropdownList = [...dropdownElementList].map(dropdownToggleEl => new bootstrap.Dropdown(dropdownToggleEl))

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `autoClose` | boolean, string | `true` | Configure the auto close behavior of the dropdown: * `true` - the dropdown will be closed by clicking outside or inside the dropdown menu.
    * `false` - the dropdown will be closed by clicking the toggle button and manually calling `hide` or `toggle` method. (Also will not be closed by pressing `Esc` key)
    * `'inside'` - the dropdown will be closed (only) by clicking inside the dropdown menu.
    * `'outside'` - the dropdown will be closed (only) by clicking outside the dropdown menu.

     Note: the dropdown can always be closed with the `Esc` key. |
    | `boundary` | string, element | `'clippingParents'` | Overflow constraint boundary of the dropdown menu (applies only to Popper’s preventOverflow modifier). By default it’s `clippingParents` and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s [detectOverflow docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/utils/detect-overflow/#boundary). |
    | `display` | string | `'dynamic'` | By default, we use Popper for dynamic positioning. Disable this with `static`. |
    | `offset` | array, string, function | `[0, 2]` | Offset of the dropdown relative to its target. You can pass a string in data attributes with comma separated values like: `data-bs-offset="10,20"`. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: [skidding](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#skidding-1), [distance](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#distance-1). For more information refer to Popper’s [offset docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#options). |
    | `popperConfig` | null, object, function | `null` | To change Bootstrap’s default Popper config, see [Popper’s configuration](https://popper.js.orghttps://getbootstrap.com/docs/v2/constructors/#options). When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper. |
    | `reference` | string, element, object | `'toggle'` | Reference element of the dropdown menu. Accepts the values of `'toggle'`, `'parent'`, an HTMLElement reference or an object providing `getBoundingClientRect`. For more information refer to Popper’s [constructor docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/constructors/#createpopper) and [virtual element docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/virtual-elements/). |


    #### Using function with `popperConfig`



    ```
    const dropdown = new bootstrap.Dropdown(element, {
     popperConfig(defaultBsPopperConfig) {
     // const newPopperConfig = {...}
     // use defaultBsPopperConfig if needed...
     // return newPopperConfig
     }
    })

    ```
    ### Methods




    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s dropdown. (Removes stored data on the DOM element) |
    | `getInstance` | Static method which allows you to get the dropdown instance associated to a DOM element, you can use it like this: `bootstrap.Dropdown.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a dropdown instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Dropdown.getOrCreateInstance(element)`. |
    | `hide` | Hides the dropdown menu of a given navbar or tabbed navigation. |
    | `show` | Shows the dropdown menu of a given navbar or tabbed navigation. |
    | `toggle` | Toggles the dropdown menu of a given navbar or tabbed navigation. |
    | `update` | Updates the position of an element’s dropdown. |


    ### Events


    All dropdown events are fired at the toggling element and then bubbled up. So you can also add event listeners on the `.dropdown-menu`’s parent element. `hide.bs.dropdown` and `hidden.bs.dropdown` events have a `clickEvent` property (only when the original Event type is `click`) that contains an Event Object for the click event.




    | Event type | Description |
    | --- | --- |
    | `hide.bs.dropdown` | Fires immediately when the `hide` instance method has been called. |
    | `hidden.bs.dropdown` | Fired when the dropdown has finished being hidden from the user and CSS transitions have completed. |
    | `show.bs.dropdown` | Fires immediately when the `show` instance method is called. |
    | `shown.bs.dropdown` | Fired when the dropdown has been made visible to the user and CSS transitions have completed. |



    ```
    const myDropdown = document.getElementById('myDropdown')
    myDropdown.addEventListener('show.bs.dropdown', event => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class LIST_GROUP:
    """

    List group
    ==========



    List groups are a flexible and powerful component for displaying a series of content. Modify and extend them to support just about any content within.






     On this page


    **On this page**


    ---




    * [Basic example](#basic-example)
    * [Active items](#active-items)
    * [Disabled items](#disabled-items)
    * [Links and buttons](#links-and-buttons)
    * [Flush](#flush)
    * [Numbered](#numbered)
    * [Horizontal](#horizontal)
    * [Variants](#variants)
            + [For links and buttons](#for-links-and-buttons)
    * [With badges](#with-badges)
    * [Custom content](#custom-content)
    * [Checkboxes and radios](#checkboxes-and-radios)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)
            + [Sass loops](#sass-loops)
    * [JavaScript behavior](#javascript-behavior)
            + [Using data attributes](#using-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Fade effect](#fade-effect)
            + [Methods](#methods)
            + [Events](#events)






    Basic example
    -------------


    The most basic list group is an unordered list with list items and the proper classes. Build upon it with the options that follow, or with your own CSS as needed.



    * An item
    * A second item
    * A third item
    * A fourth item
    * And a fifth one



    html









    ```
    <ul class="list-group">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     <li class="list-group-item">A fourth item</li>
     <li class="list-group-item">And a fifth one</li>
    </ul>
    ```

    Active items
    ------------


    Add `.active` to a `.list-group-item` to indicate the current active selection.



    * An active item
    * A second item
    * A third item
    * A fourth item
    * And a fifth one



    html









    ```
    <ul class="list-group">
     <li class="list-group-item active" aria-current="true">An active item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     <li class="list-group-item">A fourth item</li>
     <li class="list-group-item">And a fifth one</li>
    </ul>
    ```

    Disabled items
    --------------


    Add `.disabled` to a `.list-group-item` to make it *appear* disabled. Note that some elements with `.disabled` will also require custom JavaScript to fully disable their click events (e.g., links).



    * A disabled item
    * A second item
    * A third item
    * A fourth item
    * And a fifth one



    html









    ```
    <ul class="list-group">
     <li class="list-group-item disabled" aria-disabled="true">A disabled item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     <li class="list-group-item">A fourth item</li>
     <li class="list-group-item">And a fifth one</li>
    </ul>
    ```

    Links and buttons
    -----------------


    Use `<a>`s or `<button>`s to create *actionable* list group items with hover, disabled, and active states by adding `.list-group-item-action`. We separate these pseudo-classes to ensure list groups made of non-interactive elements (like `<li>`s or `<div>`s) don’t provide a click or tap affordance.


    Be sure to **not use the standard `.btn` classes here**.




    [The current link item](#)
    [A second link item](#)
    [A third link item](#)
    [A fourth link item](#)
    A disabled link item


    html









    ```
    <div class="list-group">
     <a href="#" class="list-group-item list-group-item-action active" aria-current="true">
     The current link item
     </a>
     <a href="#" class="list-group-item list-group-item-action">A second link item</a>
     <a href="#" class="list-group-item list-group-item-action">A third link item</a>
     <a href="#" class="list-group-item list-group-item-action">A fourth link item</a>
     <a class="list-group-item list-group-item-action disabled" aria-disabled="true">A disabled link item</a>
    </div>
    ```

    With `<button>`s, you can also make use of the `disabled` attribute instead of the `.disabled` class. Sadly, `<a>`s don’t support the disabled attribute.





     The current button

    A second button item
    A third button item
    A fourth button item
    A disabled button item


    html









    ```
    <div class="list-group">
     <button type="button" class="list-group-item list-group-item-action active" aria-current="true">
     The current button
     </button>
     <button type="button" class="list-group-item list-group-item-action">A second button item</button>
     <button type="button" class="list-group-item list-group-item-action">A third button item</button>
     <button type="button" class="list-group-item list-group-item-action">A fourth button item</button>
     <button type="button" class="list-group-item list-group-item-action" disabled>A disabled button item</button>
    </div>
    ```

    Flush
    -----


    Add `.list-group-flush` to remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards).



    * An item
    * A second item
    * A third item
    * A fourth item
    * And a fifth one



    html









    ```
    <ul class="list-group list-group-flush">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
     <li class="list-group-item">A fourth item</li>
     <li class="list-group-item">And a fifth one</li>
    </ul>
    ```

    Numbered
    --------


    Add the `.list-group-numbered` modifier class (and optionally use an `<ol>` element) to opt into numbered list group items. Numbers are generated via CSS (as opposed to a `<ol>`s default browser styling) for better placement inside list group items and to allow for better customization.


    Numbers are generated by `counter-reset` on the `<ol>`, and then styled and placed with a `::before` pseudo-element on the `<li>` with `counter-increment` and `content`.



    1. A list item
    2. A list item
    3. A list item



    html









    ```
    <ol class="list-group list-group-numbered">
     <li class="list-group-item">A list item</li>
     <li class="list-group-item">A list item</li>
     <li class="list-group-item">A list item</li>
    </ol>
    ```

    These work great with custom content as well.



    1. Subheading
     Content for list item

    14
    2. Subheading
     Content for list item

    14
    3. Subheading
     Content for list item

    14



    html









    ```
    <ol class="list-group list-group-numbered">
     <li class="list-group-item d-flex justify-content-between align-items-start">
     <div class="ms-2 me-auto">
     <div class="fw-bold">Subheading</div>
     Content for list item
     </div>
     <span class="badge bg-primary rounded-pill">14</span>
     </li>
     <li class="list-group-item d-flex justify-content-between align-items-start">
     <div class="ms-2 me-auto">
     <div class="fw-bold">Subheading</div>
     Content for list item
     </div>
     <span class="badge bg-primary rounded-pill">14</span>
     </li>
     <li class="list-group-item d-flex justify-content-between align-items-start">
     <div class="ms-2 me-auto">
     <div class="fw-bold">Subheading</div>
     Content for list item
     </div>
     <span class="badge bg-primary rounded-pill">14</span>
     </li>
    </ol>
    ```

    Horizontal
    ----------


    Add `.list-group-horizontal` to change the layout of list group items from vertical to horizontal across all breakpoints. Alternatively, choose a responsive variant `.list-group-horizontal-{sm|md|lg|xl|xxl}` to make a list group horizontal starting at that breakpoint’s `min-width`. Currently **horizontal list groups cannot be combined with flush list groups.**


    **ProTip:** Want equal-width list group items when horizontal? Add `.flex-fill` to each list group item.



    * An item
    * A second item
    * A third item


    * An item
    * A second item
    * A third item


    * An item
    * A second item
    * A third item


    * An item
    * A second item
    * A third item


    * An item
    * A second item
    * A third item


    * An item
    * A second item
    * A third item



    html









    ```
    <ul class="list-group list-group-horizontal">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    <ul class="list-group list-group-horizontal-sm">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    <ul class="list-group list-group-horizontal-md">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    <ul class="list-group list-group-horizontal-lg">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    <ul class="list-group list-group-horizontal-xl">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    <ul class="list-group list-group-horizontal-xxl">
     <li class="list-group-item">An item</li>
     <li class="list-group-item">A second item</li>
     <li class="list-group-item">A third item</li>
    </ul>
    ```

    Variants
    --------



    **Heads up!** As of v5.3.0, the `list-group-item-variant()` Sass mixin is deprecated. List group item variants now have their CSS variables overridden in [a Sass loop](#sass-loops).

    Use contextual classes to style list items with a stateful background and color.



    * A simple default list group item
    * A simple primary list group item
    * A simple secondary list group item
    * A simple success list group item
    * A simple danger list group item
    * A simple warning list group item
    * A simple info list group item
    * A simple light list group item
    * A simple dark list group item



    html









    ```
    <ul class="list-group">
     <li class="list-group-item">A simple default list group item</li>

     <li class="list-group-item list-group-item-primary">A simple primary list group item</li>
     <li class="list-group-item list-group-item-secondary">A simple secondary list group item</li>
     <li class="list-group-item list-group-item-success">A simple success list group item</li>
     <li class="list-group-item list-group-item-danger">A simple danger list group item</li>
     <li class="list-group-item list-group-item-warning">A simple warning list group item</li>
     <li class="list-group-item list-group-item-info">A simple info list group item</li>
     <li class="list-group-item list-group-item-light">A simple light list group item</li>
     <li class="list-group-item list-group-item-dark">A simple dark list group item</li>
    </ul>
    ```

    ### For links and buttons


    Contextual classes also work with `.list-group-item-action` for `<a>` and `<button>` elements. Note the addition of the hover styles here not present in the previous example. Also supported is the `.active` state; apply it to indicate an active selection on a contextual list group item.




    [A simple default list group item](#)
    [A simple primary list group item](#)
    [A simple secondary list group item](#)
    [A simple success list group item](#)
    [A simple danger list group item](#)
    [A simple warning list group item](#)
    [A simple info list group item](#)
    [A simple light list group item](#)
    [A simple dark list group item](#)


    html









    ```
    <div class="list-group">
     <a href="#" class="list-group-item list-group-item-action">A simple default list group item</a>

     <a href="#" class="list-group-item list-group-item-action list-group-item-primary">A simple primary list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-secondary">A simple secondary list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-success">A simple success list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-danger">A simple danger list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-warning">A simple warning list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-info">A simple info list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-light">A simple light list group item</a>
     <a href="#" class="list-group-item list-group-item-action list-group-item-dark">A simple dark list group item</a>
    </div>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    With badges
    -----------


    Add badges to any list group item to show unread counts, activity, and more with the help of some [utilities](https://getbootstrap.com/docs/5.3/utilities/flex/).



    * A list item
     14
    * A second list item
     2
    * A third list item
     1



    html









    ```
    <ul class="list-group">
     <li class="list-group-item d-flex justify-content-between align-items-center">
     A list item
     <span class="badge bg-primary rounded-pill">14</span>
     </li>
     <li class="list-group-item d-flex justify-content-between align-items-center">
     A second list item
     <span class="badge bg-primary rounded-pill">2</span>
     </li>
     <li class="list-group-item d-flex justify-content-between align-items-center">
     A third list item
     <span class="badge bg-primary rounded-pill">1</span>
     </li>
    </ul>
    ```

    Custom content
    --------------


    Add nearly any HTML within, even for linked list groups like the one below, with the help of [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/).




    [##### List group item heading


    3 days ago

    Some placeholder content in a paragraph.


    And some small print.](#)
    [##### List group item heading


    3 days ago

    Some placeholder content in a paragraph.


    And some muted small print.](#)
    [##### List group item heading


    3 days ago

    Some placeholder content in a paragraph.


    And some muted small print.](#)


    html









    ```
    <div class="list-group">
     <a href="#" class="list-group-item list-group-item-action active" aria-current="true">
     <div class="d-flex w-100 justify-content-between">
     <h5 class="mb-1">List group item heading</h5>
     <small>3 days ago</small>
     </div>
     <p class="mb-1">Some placeholder content in a paragraph.</p>
     <small>And some small print.</small>
     </a>
     <a href="#" class="list-group-item list-group-item-action">
     <div class="d-flex w-100 justify-content-between">
     <h5 class="mb-1">List group item heading</h5>
     <small class="text-body-secondary">3 days ago</small>
     </div>
     <p class="mb-1">Some placeholder content in a paragraph.</p>
     <small class="text-body-secondary">And some muted small print.</small>
     </a>
     <a href="#" class="list-group-item list-group-item-action">
     <div class="d-flex w-100 justify-content-between">
     <h5 class="mb-1">List group item heading</h5>
     <small class="text-body-secondary">3 days ago</small>
     </div>
     <p class="mb-1">Some placeholder content in a paragraph.</p>
     <small class="text-body-secondary">And some muted small print.</small>
     </a>
    </div>
    ```

    Checkboxes and radios
    ---------------------


    Place Bootstrap’s checkboxes and radios within list group items and customize as needed. You can use them without `<label>`s, but please remember to include an `aria-label` attribute and value for accessibility.



    * First checkbox
    * Second checkbox
    * Third checkbox



    html









    ```
    <ul class="list-group">
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="firstCheckbox">
     <label class="form-check-label" for="firstCheckbox">First checkbox</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="secondCheckbox">
     <label class="form-check-label" for="secondCheckbox">Second checkbox</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="thirdCheckbox">
     <label class="form-check-label" for="thirdCheckbox">Third checkbox</label>
     </li>
    </ul>
    ```


    * First radio
    * Second radio
    * Third radio



    html









    ```
    <ul class="list-group">
     <li class="list-group-item">
     <input class="form-check-input me-1" type="radio" name="listGroupRadio" value="" id="firstRadio" checked>
     <label class="form-check-label" for="firstRadio">First radio</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="radio" name="listGroupRadio" value="" id="secondRadio">
     <label class="form-check-label" for="secondRadio">Second radio</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="radio" name="listGroupRadio" value="" id="thirdRadio">
     <label class="form-check-label" for="thirdRadio">Third radio</label>
     </li>
    </ul>
    ```

    You can use `.stretched-link` on `<label>`s to make the whole list group item clickable.



    * First checkbox
    * Second checkbox
    * Third checkbox



    html









    ```
    <ul class="list-group">
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="firstCheckboxStretched">
     <label class="form-check-label stretched-link" for="firstCheckboxStretched">First checkbox</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="secondCheckboxStretched">
     <label class="form-check-label stretched-link" for="secondCheckboxStretched">Second checkbox</label>
     </li>
     <li class="list-group-item">
     <input class="form-check-input me-1" type="checkbox" value="" id="thirdCheckboxStretched">
     <label class="form-check-label stretched-link" for="thirdCheckboxStretched">Third checkbox</label>
     </li>
    </ul>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, list groups now use local CSS variables on `.list-group` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_list-group.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_list-group.scss)






    ```
    --#{$prefix}list-group-color: #{$list-group-color};
    --#{$prefix}list-group-bg: #{$list-group-bg};
    --#{$prefix}list-group-border-color: #{$list-group-border-color};
    --#{$prefix}list-group-border-width: #{$list-group-border-width};
    --#{$prefix}list-group-border-radius: #{$list-group-border-radius};
    --#{$prefix}list-group-item-padding-x: #{$list-group-item-padding-x};
    --#{$prefix}list-group-item-padding-y: #{$list-group-item-padding-y};
    --#{$prefix}list-group-action-color: #{$list-group-action-color};
    --#{$prefix}list-group-action-hover-color: #{$list-group-action-hover-color};
    --#{$prefix}list-group-action-hover-bg: #{$list-group-hover-bg};
    --#{$prefix}list-group-action-active-color: #{$list-group-action-active-color};
    --#{$prefix}list-group-action-active-bg: #{$list-group-action-active-bg};
    --#{$prefix}list-group-disabled-color: #{$list-group-disabled-color};
    --#{$prefix}list-group-disabled-bg: #{$list-group-disabled-bg};
    --#{$prefix}list-group-active-color: #{$list-group-active-color};
    --#{$prefix}list-group-active-bg: #{$list-group-active-bg};
    --#{$prefix}list-group-active-border-color: #{$list-group-active-border-color};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $list-group-color: var(--#{$prefix}body-color);
    $list-group-bg: var(--#{$prefix}body-bg);
    $list-group-border-color: var(--#{$prefix}border-color);
    $list-group-border-width: var(--#{$prefix}border-width);
    $list-group-border-radius: var(--#{$prefix}border-radius);

    $list-group-item-padding-y: $spacer \* .5;
    $list-group-item-padding-x: $spacer;
    // fusv-disable
    $list-group-item-bg-scale: -80%; // Deprecated in v5.3.0
    $list-group-item-color-scale: 40%; // Deprecated in v5.3.0
    // fusv-enable

    $list-group-hover-bg: var(--#{$prefix}tertiary-bg);
    $list-group-active-color: $component-active-color;
    $list-group-active-bg: $component-active-bg;
    $list-group-active-border-color: $list-group-active-bg;

    $list-group-disabled-color: var(--#{$prefix}secondary-color);
    $list-group-disabled-bg: $list-group-bg;

    $list-group-action-color: var(--#{$prefix}secondary-color);
    $list-group-action-hover-color: var(--#{$prefix}emphasis-color);

    $list-group-action-active-color: var(--#{$prefix}body-color);
    $list-group-action-active-bg: var(--#{$prefix}secondary-bg);

    ```

    ### Sass mixins


    Deprecated in v5.3.0
    Used in combination with `$theme-colors` to generate the [contextual variant classes](#variants) for `.list-group-item`s.




    [scss/mixins/\_list-group.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_list-group.scss)






    ```
    @mixin list-group-item-variant($state, $background, $color) {
     .list-group-item-#{$state} {
     color: $color;
     background-color: $background;

     &.list-group-item-action {
     &:hover,
     &:focus {
     color: $color;
     background-color: shade-color($background, 10%);
     }

     &.active {
     color: $white;
     background-color: $color;
     border-color: $color;
     }
     }
     }
    }

    ```

    ### Sass loops


    Loop that generates the modifier classes with an overriding of CSS variables.




    [scss/\_list-group.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_list-group.scss)






    ```
    // List group contextual variants
    //
    // Add modifier classes to change text and background color on individual items.
    // Organizationally, this must come after the `:hover` states.

    @each $state in map-keys($theme-colors) {
     .list-group-item-#{$state} {
     --#{$prefix}list-group-color: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}list-group-bg: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}list-group-border-color: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-action-hover-color: var(--#{$prefix}emphasis-color);
     --#{$prefix}list-group-action-hover-bg: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-action-active-color: var(--#{$prefix}emphasis-color);
     --#{$prefix}list-group-action-active-bg: var(--#{$prefix}#{$state}-border-subtle);
     --#{$prefix}list-group-active-color: var(--#{$prefix}#{$state}-bg-subtle);
     --#{$prefix}list-group-active-bg: var(--#{$prefix}#{$state}-text-emphasis);
     --#{$prefix}list-group-active-border-color: var(--#{$prefix}#{$state}-text-emphasis);
     }
    }

    ```

    JavaScript behavior
    -------------------


    Use the tab JavaScript plugin—include it individually or through the compiled `bootstrap.js` file—to extend our list group to create tabbable panes of local content.






    [Home](#list-home)
    [Profile](#list-profile)
    [Messages](#list-messages)
    [Settings](#list-settings)





    Some placeholder content in a paragraph relating to "Home". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.




    Some placeholder content in a paragraph relating to "Profile". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.




    Some placeholder content in a paragraph relating to "Messages". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.




    Some placeholder content in a paragraph relating to "Settings". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.








    ```
    <div class="row">
     <div class="col-4">
     <div class="list-group" id="list-tab" role="tablist">
     <a class="list-group-item list-group-item-action active" id="list-home-list" data-bs-toggle="list" href="#list-home" role="tab" aria-controls="list-home">Home</a>
     <a class="list-group-item list-group-item-action" id="list-profile-list" data-bs-toggle="list" href="#list-profile" role="tab" aria-controls="list-profile">Profile</a>
     <a class="list-group-item list-group-item-action" id="list-messages-list" data-bs-toggle="list" href="#list-messages" role="tab" aria-controls="list-messages">Messages</a>
     <a class="list-group-item list-group-item-action" id="list-settings-list" data-bs-toggle="list" href="#list-settings" role="tab" aria-controls="list-settings">Settings</a>
     </div>
     </div>
     <div class="col-8">
     <div class="tab-content" id="nav-tabContent">
     <div class="tab-pane fade show active" id="list-home" role="tabpanel" aria-labelledby="list-home-list">...</div>
     <div class="tab-pane fade" id="list-profile" role="tabpanel" aria-labelledby="list-profile-list">...</div>
     <div class="tab-pane fade" id="list-messages" role="tabpanel" aria-labelledby="list-messages-list">...</div>
     <div class="tab-pane fade" id="list-settings" role="tabpanel" aria-labelledby="list-settings-list">...</div>
     </div>
     </div>
    </div>

    ```
    ### Using data attributes


    You can activate a list group navigation without writing any JavaScript by simply specifying `data-bs-toggle="list"` or on an element. Use these data attributes on `.list-group-item`.



    ```
    <div role="tabpanel">
     <!-- List group -->
     <div class="list-group" id="myList" role="tablist">
     <a class="list-group-item list-group-item-action active" data-bs-toggle="list" href="#home" role="tab">Home</a>
     <a class="list-group-item list-group-item-action" data-bs-toggle="list" href="#profile" role="tab">Profile</a>
     <a class="list-group-item list-group-item-action" data-bs-toggle="list" href="#messages" role="tab">Messages</a>
     <a class="list-group-item list-group-item-action" data-bs-toggle="list" href="#settings" role="tab">Settings</a>
     </div>

     <!-- Tab panes -->
     <div class="tab-content">
     <div class="tab-pane active" id="home" role="tabpanel">...</div>
     <div class="tab-pane" id="profile" role="tabpanel">...</div>
     <div class="tab-pane" id="messages" role="tabpanel">...</div>
     <div class="tab-pane" id="settings" role="tabpanel">...</div>
     </div>
    </div>

    ```
    ### Via JavaScript


    Enable tabbable list item via JavaScript (each list item needs to be activated individually):



    ```
    const triggerTabList = document.querySelectorAll('#myTab a')
    triggerTabList.forEach(triggerEl => {
     const tabTrigger = new bootstrap.Tab(triggerEl)

     triggerEl.addEventListener('click', event => {
     event.preventDefault()
     tabTrigger.show()
     })
    })

    ```
    You can activate individual list item in several ways:



    ```
    const triggerEl = document.querySelector('#myTab a[href="#profile"]')
    bootstrap.Tab.getInstance(triggerEl).show() // Select tab by name

    const triggerFirstTabEl = document.querySelector('#myTab li:first-child a')
    bootstrap.Tab.getInstance(triggerFirstTabEl).show() // Select first tab

    ```
    ### Fade effect


    To make tabs panel fade in, add `.fade` to each `.tab-pane`. The first tab pane must also have `.show` to make the initial content visible.



    ```
    <div class="tab-content">
     <div class="tab-pane fade show active" id="home" role="tabpanel">...</div>
     <div class="tab-pane fade" id="profile" role="tabpanel">...</div>
     <div class="tab-pane fade" id="messages" role="tabpanel">...</div>
     <div class="tab-pane fade" id="settings" role="tabpanel">...</div>
    </div>

    ```
    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    Activates your content as a tab element.


    You can create a tab instance with the constructor, for example:



    ```
    const bsTab = new bootstrap.Tab('#myTab')

    ```


    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s tab. |
    | `getInstance` | Static method which allows you to get the tab instance associated with a DOM element, you can use it like this: `bootstrap.Tab.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Tab.getOrCreateInstance(element)`. |
    | `show` | Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden. **Returns to the caller before the tab pane has actually been shown** (i.e. before the `shown.bs.tab` event occurs). |


    ### Events


    When showing a new tab, the events fire in the following order:


    1. `hide.bs.tab` (on the current active tab)
    2. `show.bs.tab` (on the to-be-shown tab)
    3. `hidden.bs.tab` (on the previous active tab, the same one as for the `hide.bs.tab` event)
    4. `shown.bs.tab` (on the newly-active just-shown tab, the same one as for the `show.bs.tab` event)


    If no tab was already active, then the `hide.bs.tab` and `hidden.bs.tab` events will not be fired.




    | Event type | Description |
    | --- | --- |
    | `hide.bs.tab` | This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use `event.target` and `event.relatedTarget` to target the current active tab and the new soon-to-be-active tab, respectively. |
    | `hidden.bs.tab` | This event fires after a new tab is shown (and thus the previous active tab is hidden). Use `event.target` and `event.relatedTarget` to target the previous active tab and the new active tab, respectively. |
    | `show.bs.tab` | This event fires on tab show, but before the new tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively. |
    | `shown.bs.tab` | This event fires on tab show after a tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively. |



    ```
    const tabElms = document.querySelectorAll('a[data-bs-toggle="list"]')
    tabElms.forEach(tabElm => {
     tabElm.addEventListener('shown.bs.tab', event => {
     event.target // newly activated tab
     event.relatedTarget // previous active tab
     })
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class MODAL:
    """

    Modal
    =====



    Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Examples](#examples)
            + [Modal components](#modal-components)
            + [Live demo](#live-demo)
            + [Static backdrop](#static-backdrop)
            + [Scrolling long content](#scrolling-long-content)
            + [Vertically centered](#vertically-centered)
            + [Tooltips and popovers](#tooltips-and-popovers)
            + [Using the grid](#using-the-grid)
            + [Varying modal content](#varying-modal-content)
            + [Toggle between modals](#toggle-between-modals)
            + [Change animation](#change-animation)
            + [Remove animation](#remove-animation)
            + [Dynamic heights](#dynamic-heights)
            + [Accessibility](#accessibility)
            + [Embedding YouTube videos](#embedding-youtube-videos)
    * [Optional sizes](#optional-sizes)
    * [Fullscreen Modal](#fullscreen-modal)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass loops](#sass-loops)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
                    - [Toggle](#toggle)
                    - [Dismiss](#dismiss)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
            + [Methods](#methods)
                    - [Passing options](#passing-options)
            + [Events](#events)






    How it works
    ------------


    Before getting started with Bootstrap’s modal component, be sure to read the following as our menu options have recently changed.


    * Modals are built with HTML, CSS, and JavaScript. They’re positioned over everything else in the document and remove scroll from the `<body>` so that modal content scrolls instead.
    * Clicking on the modal “backdrop” will automatically close the modal.
    * Bootstrap only supports one modal window at a time. Nested modals aren’t supported as we believe them to be poor user experiences.
    * Modals use `position: fixed`, which can sometimes be a bit particular about its rendering. Whenever possible, place your modal HTML in a top-level position to avoid potential interference from other elements. You’ll likely run into issues when nesting a `.modal` within another fixed element.
    * Once again, due to `position: fixed`, there are some caveats with using modals on mobile devices. [See our browser support docs](https://getbootstrap.com/docs/5.3/getting-started/browsers-devices/#modals-and-dropdowns-on-mobile) for details.
    * Due to how HTML5 defines its semantics, [the `autofocus` HTML attribute](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Element/input#attr-autofocus) has no effect in Bootstrap modals. To achieve the same effect, use some custom JavaScript:



    ```
    const myModal = document.getElementById('myModal')
    const myInput = document.getElementById('myInput')

    myModal.addEventListener('shown.bs.modal', () => {
     myInput.focus()
    })

    ```

    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Keep reading for demos and usage guidelines.


    Examples
    --------


    ### Modal components


    Below is a *static* modal example (meaning its `position` and `display` have been overridden). Included are the modal header, modal body (required for `padding`), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.







    ##### Modal title





    Modal body text goes here.




    Close
    Save changes






    ```
    <div class="modal" tabindex="-1">
     <div class="modal-dialog">
     <div class="modal-content">
     <div class="modal-header">
     <h5 class="modal-title">Modal title</h5>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     <p>Modal body text goes here.</p>
     </div>
     <div class="modal-footer">
     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
     <button type="button" class="btn btn-primary">Save changes</button>
     </div>
     </div>
     </div>
    </div>

    ```

    In the above static example, we use `<h5>`, to avoid issues with the heading hierarchy in the documentation page. Structurally, however, a modal dialog represents its own separate document/context, so the `.modal-title` should ideally be an `<h1>`. If necessary, you can use the [font size utilities](https://getbootstrap.com/docs/5.3/utilities/text/#font-size) to control the heading’s appearance. All the following live examples use this approach.

    ### Live demo


    Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.






    Modal title
    ===========





    Woo-hoo, you're reading this text in a modal!




    Close
    Save changes






     Launch demo modal



    ```
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
     Launch demo modal
    </button>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
     <div class="modal-dialog">
     <div class="modal-content">
     <div class="modal-header">
     <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     ...
     </div>
     <div class="modal-footer">
     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
     <button type="button" class="btn btn-primary">Save changes</button>
     </div>
     </div>
     </div>
    </div>

    ```
    ### Static backdrop


    When backdrop is set to static, the modal will not close when clicking outside of it. Click the button below to try it.






    Modal title
    ===========





    I will not close if you click outside of me. Don't even try to press escape key.




    Close
    Understood






     Launch static backdrop modal



    ```
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
     Launch static backdrop modal
    </button>

    <!-- Modal -->
    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
     <div class="modal-dialog">
     <div class="modal-content">
     <div class="modal-header">
     <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     ...
     </div>
     <div class="modal-footer">
     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
     <button type="button" class="btn btn-primary">Understood</button>
     </div>
     </div>
     </div>
    </div>

    ```
    ### Scrolling long content


    When modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.






    Modal title
    ===========





    This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text in the modal, we use an inline style to set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.




    Close
    Save changes






     Launch demo modal


    You can also create a scrollable modal that allows scroll the modal body by adding `.modal-dialog-scrollable` to `.modal-dialog`.






    Modal title
    ===========





    This is some placeholder content to show the scrolling behavior for modals. We use repeated line breaks to demonstrate how content can exceed minimum inner height, thereby showing inner scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.











































    This content should appear at the bottom after you scroll.




    Close
    Save changes






     Launch demo modal



    ```
    <!-- Scrollable modal -->
    <div class="modal-dialog modal-dialog-scrollable">
     ...
    </div>

    ```
    ### Vertically centered


    Add `.modal-dialog-centered` to `.modal-dialog` to vertically center the modal.






    Modal title
    ===========





    This is a vertically centered modal.




    Close
    Save changes








    Modal title
    ===========





    This is some placeholder content to show a vertically centered modal. We've added some extra copy here to show how vertically centering the modal works when combined with scrollable modals. We also use some repeated line breaks to quickly extend the height of the content, thereby triggering the scrolling. When content becomes longer than the predefined max-height of modal, content will be cropped and scrollable within the modal.













    Just like that.




    Close
    Save changes






     Vertically centered modal


     Vertically centered scrollable modal



    ```
    <!-- Vertically centered modal -->
    <div class="modal-dialog modal-dialog-centered">
     ...
    </div>

    <!-- Vertically centered scrollable modal -->
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
     ...
    </div>

    ```
    ### Tooltips and popovers


    [Tooltips](https://getbootstrap.com/docs/5.3/components/tooltips/) and [popovers](https://getbootstrap.com/docs/5.3/components/popovers/) can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.






    Modal title
    ===========





    Popover in a modal
    ------------------


    This button triggers a popover on click.




    ---


    Tooltips in a modal
    -------------------


    [This link](# "Tooltip") and [that link](# "Tooltip") have tooltips on hover.




    Close
    Save changes






     Launch demo modal



    ```
    <div class="modal-body">
     <h2 class="fs-5">Popover in a modal</h2>
     <p>This <button class="btn btn-secondary" data-bs-toggle="popover" title="Popover title" data-bs-content="Popover body content is set in this attribute.">button</button> triggers a popover on click.</p>
     <hr>
     <h2 class="fs-5">Tooltips in a modal</h2>
     <p><a href="#" data-bs-toggle="tooltip" title="Tooltip">This link</a> and <a href="#" data-bs-toggle="tooltip" title="Tooltip">that link</a> have tooltips on hover.</p>
    </div>

    ```
    ### Using the grid


    Utilize the Bootstrap grid system within a modal by nesting `.container-fluid` within the `.modal-body`. Then, use the normal grid system classes as you would anywhere else.






    Grids in modals
    ===============







    .col-md-4
    .col-md-4 .ms-auto


    .col-md-3 .ms-auto
    .col-md-2 .ms-auto


    .col-md-6 .ms-auto



     Level 1: .col-sm-9


     Level 2: .col-8 .col-sm-6


     Level 2: .col-4 .col-sm-6







    Close
    Save changes






     Launch demo modal



    ```
    <div class="modal-body">
     <div class="container-fluid">
     <div class="row">
     <div class="col-md-4">.col-md-4</div>
     <div class="col-md-4 ms-auto">.col-md-4 .ms-auto</div>
     </div>
     <div class="row">
     <div class="col-md-3 ms-auto">.col-md-3 .ms-auto</div>
     <div class="col-md-2 ms-auto">.col-md-2 .ms-auto</div>
     </div>
     <div class="row">
     <div class="col-md-6 ms-auto">.col-md-6 .ms-auto</div>
     </div>
     <div class="row">
     <div class="col-sm-9">
     Level 1: .col-sm-9
     <div class="row">
     <div class="col-8 col-sm-6">
     Level 2: .col-8 .col-sm-6
     </div>
     <div class="col-4 col-sm-6">
     Level 2: .col-4 .col-sm-6
     </div>
     </div>
     </div>
     </div>
     </div>
    </div>

    ```
    ### Varying modal content


    Have a bunch of buttons that all trigger the same modal with slightly different contents? Use `event.relatedTarget` and [HTML `data-bs-*` attributes](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Learn/HTML/Howto/Use_data_attributes) to vary the contents of the modal depending on which button was clicked.


    Below is a live demo followed by example HTML and JavaScript. For more information, [read the modal events docs](#events) for details on `relatedTarget`.



    Open modal for @mdo
    Open modal for @fat
    Open modal for @getbootstrap




    New message
    ===========







    Recipient:



    Message:





    Close
    Send message





    html









    ```
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@mdo">Open modal for @mdo</button>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@fat">Open modal for @fat</button>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@getbootstrap">Open modal for @getbootstrap</button>

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
     <div class="modal-dialog">
     <div class="modal-content">
     <div class="modal-header">
     <h1 class="modal-title fs-5" id="exampleModalLabel">New message</h1>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     <form>
     <div class="mb-3">
     <label for="recipient-name" class="col-form-label">Recipient:</label>
     <input type="text" class="form-control" id="recipient-name">
     </div>
     <div class="mb-3">
     <label for="message-text" class="col-form-label">Message:</label>
     <textarea class="form-control" id="message-text"></textarea>
     </div>
     </form>
     </div>
     <div class="modal-footer">
     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
     <button type="button" class="btn btn-primary">Send message</button>
     </div>
     </div>
     </div>
    </div>
    ```



    [site/assets/js/snippets.js](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/js/snippets.js)






    ```
    const exampleModal = document.getElementById('exampleModal')
    if (exampleModal) {
     exampleModal.addEventListener('show.bs.modal', event => {
     // Button that triggered the modal
     const button = event.relatedTarget
     // Extract info from data-bs-\* attributes
     const recipient = button.getAttribute('data-bs-whatever')
     // If necessary, you could initiate an Ajax request here
     // and then do the updating in a callback.

     // Update the modal's content.
     const modalTitle = exampleModal.querySelector('.modal-title')
     const modalBodyInput = exampleModal.querySelector('.modal-body input')

     modalTitle.textContent = `New message to ${recipient}`
     modalBodyInput.value = recipient
     })
    }
    ```

    ### Toggle between modals


    Toggle between multiple modals with some clever placement of the `data-bs-target` and `data-bs-toggle` attributes. For example, you could toggle a password reset modal from within an already open sign in modal. **Please note multiple modals cannot be open at the same time**—this method simply toggles between two separate modals.







    Modal 1
    =======





     Show a second modal and hide this one with the button below.


    Open second modal








    Modal 2
    =======





     Hide this modal and show the first with the button below.


    Back to first




    Open first modal

    html









    ```
    <div class="modal fade" id="exampleModalToggle" aria-hidden="true" aria-labelledby="exampleModalToggleLabel" tabindex="-1">
     <div class="modal-dialog modal-dialog-centered">
     <div class="modal-content">
     <div class="modal-header">
     <h1 class="modal-title fs-5" id="exampleModalToggleLabel">Modal 1</h1>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     Show a second modal and hide this one with the button below.
     </div>
     <div class="modal-footer">
     <button class="btn btn-primary" data-bs-target="#exampleModalToggle2" data-bs-toggle="modal">Open second modal</button>
     </div>
     </div>
     </div>
    </div>
    <div class="modal fade" id="exampleModalToggle2" aria-hidden="true" aria-labelledby="exampleModalToggleLabel2" tabindex="-1">
     <div class="modal-dialog modal-dialog-centered">
     <div class="modal-content">
     <div class="modal-header">
     <h1 class="modal-title fs-5" id="exampleModalToggleLabel2">Modal 2</h1>
     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
     </div>
     <div class="modal-body">
     Hide this modal and show the first with the button below.
     </div>
     <div class="modal-footer">
     <button class="btn btn-primary" data-bs-target="#exampleModalToggle" data-bs-toggle="modal">Back to first</button>
     </div>
     </div>
     </div>
    </div>
    <button class="btn btn-primary" data-bs-target="#exampleModalToggle" data-bs-toggle="modal">Open first modal</button>
    ```

    ### Change animation


    The `$modal-fade-transform` variable determines the transform state of `.modal-dialog` before the modal fade-in animation, the `$modal-show-transform` variable determines the transform of `.modal-dialog` at the end of the modal fade-in animation.


    If you want for example a zoom-in animation, you can set `$modal-fade-transform: scale(.8)`.


    ### Remove animation


    For modals that simply appear rather than fade in to view, remove the `.fade` class from your modal markup.



    ```
    <div class="modal" tabindex="-1" aria-labelledby="..." aria-hidden="true">
     ...
    </div>

    ```
    ### Dynamic heights


    If the height of a modal changes while it is open, you should call `myModal.handleUpdate()` to readjust the modal’s position in case a scrollbar appears.


    ### Accessibility


    Be sure to add `aria-labelledby="..."`, referencing the modal title, to `.modal`. Additionally, you may give a description of your modal dialog with `aria-describedby` on `.modal`. Note that you don’t need to add `role="dialog"` since we already add it via JavaScript.


    ### Embedding YouTube videos


    Embedding YouTube videos in modals requires additional JavaScript not in Bootstrap to automatically stop playback and more. [See this helpful Stack Overflow post](https://stackoverflow.com/questions/18622508/bootstrap-3-and-youtube-in-modal) for more information.


    Optional sizes
    --------------


    Modals have three optional sizes, available via modifier classes to be placed on a `.modal-dialog`. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.




    | Size | Class | Modal max-width |
    | --- | --- | --- |
    | Small | `.modal-sm` | `300px` |
    | Default | None | `500px` |
    | Large | `.modal-lg` | `800px` |
    | Extra large | `.modal-xl` | `1140px` |


    Our default modal without modifier class constitutes the “medium” size modal.



    Extra large modal
    Large modal
    Small modal


    ```
    <div class="modal-dialog modal-xl">...</div>
    <div class="modal-dialog modal-lg">...</div>
    <div class="modal-dialog modal-sm">...</div>

    ```




    Extra large modal
    =================





     ...








    Large modal
    ===========





     ...








    Small modal
    ===========





     ...




    Fullscreen Modal
    ----------------


    Another override is the option to pop up a modal that covers the user viewport, available via modifier classes that are placed on a `.modal-dialog`.




    | Class | Availability |
    | --- | --- |
    | `.modal-fullscreen` | Always |
    | `.modal-fullscreen-sm-down` | `576px` |
    | `.modal-fullscreen-md-down` | `768px` |
    | `.modal-fullscreen-lg-down` | `992px` |
    | `.modal-fullscreen-xl-down` | `1200px` |
    | `.modal-fullscreen-xxl-down` | `1400px` |



    Full screen
    Full screen below sm
    Full screen below md
    Full screen below lg
    Full screen below xl
    Full screen below xxl


    ```
    <!-- Full screen modal -->
    <div class="modal-dialog modal-fullscreen-sm-down">
     ...
    </div>

    ```




    Full screen modal
    =================





     ...


    Close








    Full screen below sm
    ====================





     ...


    Close








    Full screen below md
    ====================





     ...


    Close








    Full screen below lg
    ====================





     ...


    Close








    Full screen below xl
    ====================





     ...


    Close








    Full screen below xxl
    =====================





     ...


    Close




    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, modals now use local CSS variables on `.modal` and `.modal-backdrop` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_modal.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_modal.scss)






    ```
    --#{$prefix}modal-zindex: #{$zindex-modal};
    --#{$prefix}modal-width: #{$modal-md};
    --#{$prefix}modal-padding: #{$modal-inner-padding};
    --#{$prefix}modal-margin: #{$modal-dialog-margin};
    --#{$prefix}modal-color: #{$modal-content-color};
    --#{$prefix}modal-bg: #{$modal-content-bg};
    --#{$prefix}modal-border-color: #{$modal-content-border-color};
    --#{$prefix}modal-border-width: #{$modal-content-border-width};
    --#{$prefix}modal-border-radius: #{$modal-content-border-radius};
    --#{$prefix}modal-box-shadow: #{$modal-content-box-shadow-xs};
    --#{$prefix}modal-inner-border-radius: #{$modal-content-inner-border-radius};
    --#{$prefix}modal-header-padding-x: #{$modal-header-padding-x};
    --#{$prefix}modal-header-padding-y: #{$modal-header-padding-y};
    --#{$prefix}modal-header-padding: #{$modal-header-padding}; // Todo in v6: Split this padding into x and y
    --#{$prefix}modal-header-border-color: #{$modal-header-border-color};
    --#{$prefix}modal-header-border-width: #{$modal-header-border-width};
    --#{$prefix}modal-title-line-height: #{$modal-title-line-height};
    --#{$prefix}modal-footer-gap: #{$modal-footer-margin-between};
    --#{$prefix}modal-footer-bg: #{$modal-footer-bg};
    --#{$prefix}modal-footer-border-color: #{$modal-footer-border-color};
    --#{$prefix}modal-footer-border-width: #{$modal-footer-border-width};
    ```



    [scss/\_modal.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_modal.scss)






    ```
    --#{$prefix}backdrop-zindex: #{$zindex-modal-backdrop};
    --#{$prefix}backdrop-bg: #{$modal-backdrop-bg};
    --#{$prefix}backdrop-opacity: #{$modal-backdrop-opacity};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $modal-inner-padding: $spacer;

    $modal-footer-margin-between: .5rem;

    $modal-dialog-margin: .5rem;
    $modal-dialog-margin-y-sm-up: 1.75rem;

    $modal-title-line-height: $line-height-base;

    $modal-content-color: null;
    $modal-content-bg: var(--#{$prefix}body-bg);
    $modal-content-border-color: var(--#{$prefix}border-color-translucent);
    $modal-content-border-width: var(--#{$prefix}border-width);
    $modal-content-border-radius: var(--#{$prefix}border-radius-lg);
    $modal-content-inner-border-radius: subtract($modal-content-border-radius, $modal-content-border-width);
    $modal-content-box-shadow-xs: $box-shadow-sm;
    $modal-content-box-shadow-sm-up: $box-shadow;

    $modal-backdrop-bg: $black;
    $modal-backdrop-opacity: .5;

    $modal-header-border-color: var(--#{$prefix}border-color);
    $modal-header-border-width: $modal-content-border-width;
    $modal-header-padding-y: $modal-inner-padding;
    $modal-header-padding-x: $modal-inner-padding;
    $modal-header-padding: $modal-header-padding-y $modal-header-padding-x; // Keep this for backwards compatibility

    $modal-footer-bg: null;
    $modal-footer-border-color: $modal-header-border-color;
    $modal-footer-border-width: $modal-header-border-width;

    $modal-sm: 300px;
    $modal-md: 500px;
    $modal-lg: 800px;
    $modal-xl: 1140px;

    $modal-fade-transform: translate(0, -50px);
    $modal-show-transform: none;
    $modal-transition: transform .3s ease-out;
    $modal-scale-transform: scale(1.02);

    ```

    ### Sass loops


    [Responsive fullscreen modals](#fullscreen-modal) are generated via the `$breakpoints` map and a loop in `scss/_modal.scss`.




    [scss/\_modal.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_modal.scss)






    ```
    @each $breakpoint in map-keys($grid-breakpoints) {
     $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
     $postfix: if($infix != "", $infix + "-down", "");

     @include media-breakpoint-down($breakpoint) {
     .modal-fullscreen#{$postfix} {
     width: 100vw;
     max-width: none;
     height: 100%;
     margin: 0;

     .modal-content {
     height: 100%;
     border: 0;
     @include border-radius(0);
     }

     .modal-header,
     .modal-footer {
     @include border-radius(0);
     }

     .modal-body {
     overflow-y: auto;
     }
     }
     }
    }

    ```

    Usage
    -----


    The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a `.modal-backdrop` to provide a click area for dismissing shown modals when clicking outside the modal.


    ### Via data attributes


    #### Toggle


    Activate a modal without writing JavaScript. Set `data-bs-toggle="modal"` on a controller element, like a button, along with a `data-bs-target="#foo"` or `href="#foo"` to target a specific modal to toggle.



    ```
    <button type="button" data-bs-toggle="modal" data-bs-target="#myModal">Launch modal</button>

    ```
    #### Dismiss


    Dismissal can be achieved with the `data-bs-dismiss` attribute on a button **within the modal** as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

    ```
    or on a button **outside the modal** using the additional `data-bs-target` as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="modal" data-bs-target="#my-modal" aria-label="Close"></button>

    ```

    While both ways to dismiss a modal are supported, keep in mind that dismissing from outside a modal does not match the [ARIA Authoring Practices Guide dialog (modal) pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/). Do this at your own risk.

    ### Via JavaScript


    Create a modal with a single line of JavaScript:



    ```
    const myModal = new bootstrap.Modal(document.getElementById('myModal'), options)
    // or
    const myModalAlternative = new bootstrap.Modal('#myModal', options)

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `backdrop` | boolean, `'static'` | `true` | Includes a modal-backdrop element. Alternatively, specify `static` for a backdrop which doesn’t close the modal when clicked. |
    | `focus` | boolean | `true` | Puts the focus on the modal when initialized. |
    | `keyboard` | boolean | `true` | Closes the modal when escape key is pressed. |


    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    #### Passing options


    Activates your content as a modal. Accepts an optional options `object`.



    ```
    const myModal = new bootstrap.Modal('#myModal', {
     keyboard: false
    })

    ```


    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s modal. (Removes stored data on the DOM element) |
    | `getInstance` | *Static* method which allows you to get the modal instance associated with a DOM element. |
    | `getOrCreateInstance` | *Static* method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn’t initialized. |
    | `handleUpdate` | Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears). |
    | `hide` | Manually hides a modal. **Returns to the caller before the modal has actually been hidden** (i.e. before the `hidden.bs.modal` event occurs). |
    | `show` | Manually opens a modal. **Returns to the caller before the modal has actually been shown** (i.e. before the `shown.bs.modal` event occurs). Also, you can pass a DOM element as an argument that can be received in the modal events (as the `relatedTarget` property). (i.e. `const modalToggle = document.getElementById('toggleMyModal'); myModal.show(modalToggle)`. |
    | `toggle` | Manually toggles a modal. **Returns to the caller before the modal has actually been shown or hidden** (i.e. before the `shown.bs.modal` or `hidden.bs.modal` event occurs). |


    ### Events


    Bootstrap’s modal class exposes a few events for hooking into modal functionality. All modal events are fired at the modal itself (i.e. at the `<div class="modal">`).




    | Event | Description |
    | --- | --- |
    | `hide.bs.modal` | This event is fired immediately when the `hide` instance method has been called. |
    | `hidden.bs.modal` | This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete). |
    | `hidePrevented.bs.modal` | This event is fired when the modal is shown, its backdrop is `static` and a click outside of the modal is performed. The event is also fired when the escape key is pressed and the `keyboard` option is set to `false`. |
    | `show.bs.modal` | This event fires immediately when the `show` instance method is called. If caused by a click, the clicked element is available as the `relatedTarget` property of the event. |
    | `shown.bs.modal` | This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete). If caused by a click, the clicked element is available as the `relatedTarget` property of the event. |



    ```
    const myModalEl = document.getElementById('myModal')
    myModalEl.addEventListener('hidden.bs.modal', event => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class NAVBAR:
    """

    Navbar
    ======



    Documentation and examples for Bootstrap’s powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more, including support for our collapse plugin.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Supported content](#supported-content)
            + [Brand](#brand)
                    - [Text](#text)
                    - [Image](#image)
                    - [Image and text](#image-and-text)
            + [Nav](#nav)
            + [Forms](#forms)
            + [Text](#text-1)
    * [Color schemes](#color-schemes)
    * [Containers](#containers)
    * [Placement](#placement)
    * [Scrolling](#scrolling)
    * [Responsive behaviors](#responsive-behaviors)
            + [Toggler](#toggler)
            + [External content](#external-content)
            + [Offcanvas](#offcanvas)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass loops](#sass-loops)






    How it works
    ------------


    Here’s what you need to know before getting started with the navbar:


    * Navbars require a wrapping `.navbar` with `.navbar-expand{-sm|-md|-lg|-xl|-xxl}` for responsive collapsing and [color scheme](#color-schemes) classes.
    * Navbars and their contents are fluid by default. Change the [container](#containers) to limit their horizontal width in different ways.
    * Use our [spacing](https://getbootstrap.com/docs/5.3/utilities/spacing/) and [flex](https://getbootstrap.com/docs/5.3/utilities/flex/) utility classes for controlling spacing and alignment within navbars.
    * Navbars are responsive by default, but you can easily modify them to change that. Responsive behavior depends on our Collapse JavaScript plugin.
    * Ensure accessibility by using a `<nav>` element or, if using a more generic element such as a `<div>`, add a `role="navigation"` to every navbar to explicitly identify it as a landmark region for users of assistive technologies.
    * Indicate the current item by using `aria-current="page"` for the current page or `aria-current="true"` for the current item in a set.
    * **New in v5.2.0:** Navbars can be themed with CSS variables that are scoped to the `.navbar` base class. `.navbar-light` has been deprecated and `.navbar-dark` has been rewritten to override CSS variables instead of adding additional styles.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Supported content
    -----------------


    Navbars come with built-in support for a handful of sub-components. Choose from the following as needed:


    * `.navbar-brand` for your company, product, or project name.
    * `.navbar-nav` for a full-height and lightweight navigation (including support for dropdowns).
    * `.navbar-toggler` for use with our collapse plugin and other [navigation toggling](#responsive-behaviors) behaviors.
    * Flex and spacing utilities for any form controls and actions.
    * `.navbar-text` for adding vertically centered strings of text.
    * `.collapse.navbar-collapse` for grouping and hiding navbar contents by a parent breakpoint.
    * Add an optional `.navbar-scroll` to set a `max-height` and [scroll expanded navbar content](#scrolling).


    Here’s an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the `lg` (large) breakpoint.





    [Navbar](#)




    * [Home](#)
    * [Link](#)
    * [Dropdown](#)
            + [Action](#)
            + [Another action](#)
            + ---
            + [Something else here](#)
    * Disabled




    Search





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarSupportedContent">
     <ul class="navbar-nav me-auto mb-2 mb-lg-0">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
    </nav>
    ```

    This example uses [background](https://getbootstrap.com/docs/5.3/utilities/background/) (`bg-body-tertiary`) and [spacing](https://getbootstrap.com/docs/5.3/utilities/spacing/) (`me-auto`, `mb-2`, `mb-lg-0`, `me-2`) utility classes.


    ### Brand


    The `.navbar-brand` can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles.


    #### Text


    Add your text within an element with the `.navbar-brand` class.






    [Navbar](#)





    Navbar



    html









    ```
    <!-- As a link -->
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     </div>
    </nav>

    <!-- As a heading -->
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <span class="navbar-brand mb-0 h1">Navbar</span>
     </div>
    </nav>
    ```

    #### Image


    You can replace the text within the `.navbar-brand` with an `<img>`.





    [![Bootstrap](https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo.svg)](#)



    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container">
     <a class="navbar-brand" href="#">
     <img src="https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo.svg" alt="Bootstrap" width="30" height="24">
     </a>
     </div>
    </nav>
    ```

    #### Image and text


    You can also make use of some additional utilities to add an image and text at the same time. Note the addition of `.d-inline-block` and `.align-text-top` on the `<img>`.





    [![Logo](https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo.svg)
     Bootstrap](#)



    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">
     <img src="https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo.svg" alt="Logo" width="30" height="24" class="d-inline-block align-text-top">
     Bootstrap
     </a>
     </div>
    </nav>
    ```

    ### Nav


    Navbar navigation links build on our `.nav` options with their own modifier class and require the use of [toggler classes](#toggler) for proper responsive styling. **Navigation in navbars will also grow to occupy as much horizontal space as possible** to keep your navbar contents securely aligned.


    Add the `.active` class on `.nav-link` to indicate the current page.


    Please note that you should also add the `aria-current` attribute on the active `.nav-link`.





    [Navbar](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)
    * Disabled






    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarNav">
     <ul class="navbar-nav">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Features</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Pricing</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     </div>
     </div>
    </nav>
    ```

    And because we use classes for our navs, you can avoid the list-based approach entirely if you like.





    [Navbar](#)





    [Home](#)
    [Features](#)
    [Pricing](#)
    Disabled





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
     <div class="navbar-nav">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     <a class="nav-link" href="#">Features</a>
     <a class="nav-link" href="#">Pricing</a>
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </div>
     </div>
     </div>
    </nav>
    ```

    You can also use dropdowns in your navbar. Dropdown menus require a wrapping element for positioning, so be sure to use separate and nested elements for `.nav-item` and `.nav-link` as shown below.





    [Navbar](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)
    * [Dropdown link](#)
            + [Action](#)
            + [Another action](#)
            + [Something else here](#)






    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarNavDropdown">
     <ul class="navbar-nav">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Features</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Pricing</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown link
     </a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     </ul>
     </div>
     </div>
    </nav>
    ```

    ### Forms


    Place various form controls and components within a navbar:







    Search




    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
    </nav>
    ```

    Immediate child elements of `.navbar` use flex layout and will default to `justify-content: space-between`. Use additional [flex utilities](https://getbootstrap.com/docs/5.3/utilities/flex/) as needed to adjust this behavior.





    Navbar


    Search




    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand">Navbar</a>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
    </nav>
    ```

    Input groups work, too. If your navbar is an entire form, or mostly a form, you can use the `<form>` element as the container and save some HTML.






    @





    html









    ```
    <nav class="navbar bg-body-tertiary">
     <form class="container-fluid">
     <div class="input-group">
     <span class="input-group-text" id="basic-addon1">@</span>
     <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1">
     </div>
     </form>
    </nav>
    ```

    Various buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements.





    Main button
    Smaller button



    html









    ```
    <nav class="navbar bg-body-tertiary">
     <form class="container-fluid justify-content-start">
     <button class="btn btn-outline-success me-2" type="button">Main button</button>
     <button class="btn btn-sm btn-outline-secondary" type="button">Smaller button</button>
     </form>
    </nav>
    ```

    ### Text


    Navbars may contain bits of text with the help of `.navbar-text`. This class adjusts vertical alignment and horizontal spacing for strings of text.






     Navbar text with an inline element




    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <span class="navbar-text">
     Navbar text with an inline element
     </span>
     </div>
    </nav>
    ```

    Mix and match with other components and utilities as needed.





    [Navbar w/ text](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)



     Navbar text with an inline element





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar w/ text</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarText">
     <ul class="navbar-nav me-auto mb-2 mb-lg-0">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Features</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Pricing</a>
     </li>
     </ul>
     <span class="navbar-text">
     Navbar text with an inline element
     </span>
     </div>
     </div>
    </nav>
    ```

    Color schemes
    -------------



    **New dark navbars in v5.3.0 —** We’ve deprecated `.navbar-dark` in favor of the new `data-bs-theme="dark"`. Add `data-bs-theme="dark"` to the `.navbar` to enable a component-specific color mode. [Learn more about our color modes.](https://getbootstrap.com/docs/5.3/customize/color-modes/)




    ---


    **New in v5.2.0 —** Navbar theming is now powered by CSS variables and `.navbar-light` has been deprecated. CSS variables are applied to `.navbar`, defaulting to the “light” appearance, and can be overridden with `.navbar-dark`.



    Navbar themes are easier than ever thanks to Bootstrap’s combination of Sass and CSS variables. The default is our “light navbar” for use with light background colors, but you can also apply `data-bs-theme="dark"` to the `.navbar` parent for dark background colors. Then, customize with `.bg-*` and additional utilities.





    [Navbar](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)
    * [About](#)




    Search






    [Navbar](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)
    * [About](#)




    Search






    [Navbar](#)




    * [Home](#)
    * [Features](#)
    * [Pricing](#)
    * [About](#)




    Search






    ```
    <nav class="navbar bg-dark border-bottom border-body" data-bs-theme="dark">
     <!-- Navbar content -->
    </nav>

    <nav class="navbar bg-primary" data-bs-theme="dark">
     <!-- Navbar content -->
    </nav>

    <nav class="navbar" style="background-color: #e3f2fd;">
     <!-- Navbar content -->
    </nav>

    ```
    Containers
    ----------


    Although it’s not required, you can wrap a navbar in a `.container` to center it on a page–though note that an inner container is still required. Or you can add a container inside the `.navbar` to only center the contents of a [fixed or static top navbar](#placement).






    [Navbar](#)




    html









    ```
    <div class="container">
     <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     </div>
     </nav>
    </div>
    ```

    Use any of the responsive containers to change how wide the content in your navbar is presented.





    [Navbar](#)



    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-md">
     <a class="navbar-brand" href="#">Navbar</a>
     </div>
    </nav>
    ```

    Placement
    ---------


    Use our [position utilities](https://getbootstrap.com/docs/5.3/utilities/position/) to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, stickied to the top (scrolls with the page until it reaches the top, then stays there), or stickied to the bottom (scrolls with the page until it reaches the bottom, then stays there).


    Fixed navbars use `position: fixed`, meaning they’re pulled from the normal flow of the DOM and may require custom CSS (e.g., `padding-top` on the `<body>`) to prevent overlap with other elements.





    [Default](#)



    html









    ```
    <nav class="navbar bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Default</a>
     </div>
    </nav>
    ```




    [Fixed top](#)



    html









    ```
    <nav class="navbar fixed-top bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Fixed top</a>
     </div>
    </nav>
    ```




    [Fixed bottom](#)



    html









    ```
    <nav class="navbar fixed-bottom bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Fixed bottom</a>
     </div>
    </nav>
    ```




    [Sticky top](#)



    html









    ```
    <nav class="navbar sticky-top bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Sticky top</a>
     </div>
    </nav>
    ```




    [Sticky bottom](#)



    html









    ```
    <nav class="navbar sticky-bottom bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Sticky bottom</a>
     </div>
    </nav>
    ```

    Scrolling
    ---------


    Add `.navbar-nav-scroll` to a `.navbar-nav` (or other navbar sub-component) to enable vertical scrolling within the toggleable contents of a collapsed navbar. By default, scrolling kicks in at `75vh` (or 75% of the viewport height), but you can override that with the local CSS custom property `--bs-navbar-height` or custom styles. At larger viewports when the navbar is expanded, content will appear as it does in a default navbar.


    Please note that this behavior comes with a potential drawback of `overflow`—when setting `overflow-y: auto` (required to scroll the content here), `overflow-x` is the equivalent of `auto`, which will crop some horizontal content.


    Here’s an example navbar using `.navbar-nav-scroll` with `style="--bs-scroll-height: 100px;"`, with some extra margin utilities for optimum spacing.





    [Navbar scroll](#)




    * [Home](#)
    * [Link](#)
    * [Link](#)
            + [Action](#)
            + [Another action](#)
            + ---
            + [Something else here](#)
    * Link




    Search





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar scroll</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarScroll">
     <ul class="navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll" style="--bs-scroll-height: 100px;">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Link
     </a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Link</a>
     </li>
     </ul>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
    </nav>
    ```

    Responsive behaviors
    --------------------


    Navbars can use `.navbar-toggler`, `.navbar-collapse`, and `.navbar-expand{-sm|-md|-lg|-xl|-xxl}` classes to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.


    For navbars that never collapse, add the `.navbar-expand` class on the navbar. For navbars that always collapse, don’t add any `.navbar-expand` class.


    ### Toggler


    Navbar togglers are left-aligned by default, but should they follow a sibling element like a `.navbar-brand`, they’ll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.


    With no `.navbar-brand` shown at the smallest breakpoint:









    [Hidden brand](#)
    * [Home](#)
    * [Link](#)
    * Disabled




    Search





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
     <a class="navbar-brand" href="#">Hidden brand</a>
     <ul class="navbar-nav me-auto mb-2 mb-lg-0">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
    </nav>
    ```

    With a brand name shown on the left and toggler on the right:





    [Navbar](#)




    * [Home](#)
    * [Link](#)
    * Disabled




    Search





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
     <ul class="navbar-nav me-auto mb-2 mb-lg-0">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
    </nav>
    ```

    With a toggler on the left and brand name on the right:








    [Navbar](#)

    * [Home](#)
    * [Link](#)
    * Disabled




    Search





    html









    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
     <div class="container-fluid">
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo03" aria-controls="navbarTogglerDemo03" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <a class="navbar-brand" href="#">Navbar</a>
     <div class="collapse navbar-collapse" id="navbarTogglerDemo03">
     <ul class="navbar-nav me-auto mb-2 mb-lg-0">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
     </ul>
     <form class="d-flex" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
    </nav>
    ```

    ### External content


    Sometimes you want to use the collapse plugin to trigger a container element for content that structurally sits outside of the `.navbar` . Because our plugin works on the `id` and `data-bs-target` matching, that’s easily done!





    ##### Collapsed content


    Toggleable via the navbar brand.










    html









    ```
    <div class="collapse" id="navbarToggleExternalContent" data-bs-theme="dark">
     <div class="bg-dark p-4">
     <h5 class="text-body-emphasis h4">Collapsed content</h5>
     <span class="text-body-secondary">Toggleable via the navbar brand.</span>
     </div>
    </div>
    <nav class="navbar navbar-dark bg-dark">
     <div class="container-fluid">
     <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarToggleExternalContent" aria-controls="navbarToggleExternalContent" aria-expanded="false" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     </div>
    </nav>
    ```

    When you do this, we recommend including additional JavaScript to move the focus programmatically to the container when it is opened. Otherwise, keyboard users and users of assistive technologies will likely have a hard time finding the newly revealed content - particularly if the container that was opened comes *before* the toggler in the document’s structure. We also recommend making sure that the toggler has the `aria-controls` attribute, pointing to the `id` of the content container. In theory, this allows assistive technology users to jump directly from the toggler to the container it controls–but support for this is currently quite patchy.


    ### Offcanvas


    Transform your expanding and collapsing navbar into an offcanvas drawer with the [offcanvas component](https://getbootstrap.com/docs/5.3/components/offcanvas/). We extend both the offcanvas default styles and use our `.navbar-expand-*` classes to create a dynamic and flexible navigation sidebar.


    In the example below, to create an offcanvas navbar that is always collapsed across all breakpoints, omit the `.navbar-expand-*` class entirely.





    [Offcanvas navbar](#)





    ##### Offcanvas





    * [Home](#)
    * [Link](#)
    * [Dropdown](#)
            + [Action](#)
            + [Another action](#)
            + ---
            + [Something else here](#)




    Search






    html









    ```
    <nav class="navbar bg-body-tertiary fixed-top">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Offcanvas navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Offcanvas</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li>
     <hr class="dropdown-divider">
     </li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     </ul>
     <form class="d-flex mt-3" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-outline-success" type="submit">Search</button>
     </form>
     </div>
     </div>
     </div>
    </nav>
    ```

    To create an offcanvas navbar that expands into a normal navbar at a specific breakpoint like `lg`, use `.navbar-expand-lg`.



    ```
    <nav class="navbar navbar-expand-lg bg-body-tertiary fixed-top">
     <a class="navbar-brand" href="#">Offcanvas navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#navbarOffcanvasLg" aria-controls="navbarOffcanvasLg" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="offcanvas offcanvas-end" tabindex="-1" id="navbarOffcanvasLg" aria-labelledby="navbarOffcanvasLgLabel">
     ...
     </div>
    </nav>

    ```
    When using offcanvas in a dark navbar, be aware that you may need to have a dark background on the offcanvas content to avoid the text becoming illegible. In the example below, we add `.navbar-dark` and `.bg-dark` to the `.navbar`, `.text-bg-dark` to the `.offcanvas`, `.dropdown-menu-dark` to `.dropdown-menu`, and `.btn-close-white` to `.btn-close` for proper styling with a dark offcanvas.





    [Offcanvas dark navbar](#)





    ##### Dark offcanvas





    * [Home](#)
    * [Link](#)
    * [Dropdown](#)
            + [Action](#)
            + [Another action](#)
            + ---
            + [Something else here](#)




    Search






    html









    ```
    <nav class="navbar navbar-dark bg-dark fixed-top">
     <div class="container-fluid">
     <a class="navbar-brand" href="#">Offcanvas dark navbar</a>
     <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasDarkNavbar" aria-controls="offcanvasDarkNavbar" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
     </button>
     <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasDarkNavbar" aria-labelledby="offcanvasDarkNavbarLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasDarkNavbarLabel">Dark offcanvas</h5>
     <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Home</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
     Dropdown
     </a>
     <ul class="dropdown-menu dropdown-menu-dark">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li>
     <hr class="dropdown-divider">
     </li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </li>
     </ul>
     <form class="d-flex mt-3" role="search">
     <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
     <button class="btn btn-success" type="submit">Search</button>
     </form>
     </div>
     </div>
     </div>
    </nav>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, navbars now use local CSS variables on `.navbar` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_navbar.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_navbar.scss)






    ```
    --#{$prefix}navbar-padding-x: #{if($navbar-padding-x == null, 0, $navbar-padding-x)};
    --#{$prefix}navbar-padding-y: #{$navbar-padding-y};
    --#{$prefix}navbar-color: #{$navbar-light-color};
    --#{$prefix}navbar-hover-color: #{$navbar-light-hover-color};
    --#{$prefix}navbar-disabled-color: #{$navbar-light-disabled-color};
    --#{$prefix}navbar-active-color: #{$navbar-light-active-color};
    --#{$prefix}navbar-brand-padding-y: #{$navbar-brand-padding-y};
    --#{$prefix}navbar-brand-margin-end: #{$navbar-brand-margin-end};
    --#{$prefix}navbar-brand-font-size: #{$navbar-brand-font-size};
    --#{$prefix}navbar-brand-color: #{$navbar-light-brand-color};
    --#{$prefix}navbar-brand-hover-color: #{$navbar-light-brand-hover-color};
    --#{$prefix}navbar-nav-link-padding-x: #{$navbar-nav-link-padding-x};
    --#{$prefix}navbar-toggler-padding-y: #{$navbar-toggler-padding-y};
    --#{$prefix}navbar-toggler-padding-x: #{$navbar-toggler-padding-x};
    --#{$prefix}navbar-toggler-font-size: #{$navbar-toggler-font-size};
    --#{$prefix}navbar-toggler-icon-bg: #{escape-svg($navbar-light-toggler-icon-bg)};
    --#{$prefix}navbar-toggler-border-color: #{$navbar-light-toggler-border-color};
    --#{$prefix}navbar-toggler-border-radius: #{$navbar-toggler-border-radius};
    --#{$prefix}navbar-toggler-focus-width: #{$navbar-toggler-focus-width};
    --#{$prefix}navbar-toggler-transition: #{$navbar-toggler-transition};
    ```

    Some additional CSS variables are also present on `.navbar-nav`:




    [scss/\_navbar.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_navbar.scss)






    ```
    --#{$prefix}nav-link-padding-x: 0;
    --#{$prefix}nav-link-padding-y: #{$nav-link-padding-y};
    @include rfs($nav-link-font-size, --#{$prefix}nav-link-font-size);
    --#{$prefix}nav-link-font-weight: #{$nav-link-font-weight};
    --#{$prefix}nav-link-color: var(--#{$prefix}navbar-color);
    --#{$prefix}nav-link-hover-color: var(--#{$prefix}navbar-hover-color);
    --#{$prefix}nav-link-disabled-color: var(--#{$prefix}navbar-disabled-color);
    ```

    Customization through CSS variables can be seen on the `.navbar-dark` class where we override specific values without adding duplicate CSS selectors.




    [scss/\_navbar.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_navbar.scss)






    ```
    --#{$prefix}navbar-color: #{$navbar-dark-color};
    --#{$prefix}navbar-hover-color: #{$navbar-dark-hover-color};
    --#{$prefix}navbar-disabled-color: #{$navbar-dark-disabled-color};
    --#{$prefix}navbar-active-color: #{$navbar-dark-active-color};
    --#{$prefix}navbar-brand-color: #{$navbar-dark-brand-color};
    --#{$prefix}navbar-brand-hover-color: #{$navbar-dark-brand-hover-color};
    --#{$prefix}navbar-toggler-border-color: #{$navbar-dark-toggler-border-color};
    --#{$prefix}navbar-toggler-icon-bg: #{escape-svg($navbar-dark-toggler-icon-bg)};
    ```

    ### Sass variables


    Variables for all navbars:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $navbar-padding-y: $spacer \* .5;
    $navbar-padding-x: null;

    $navbar-nav-link-padding-x: .5rem;

    $navbar-brand-font-size: $font-size-lg;
    // Compute the navbar-brand padding-y so the navbar-brand will have the same height as navbar-text and nav-link
    $nav-link-height: $font-size-base \* $line-height-base + $nav-link-padding-y \* 2;
    $navbar-brand-height: $navbar-brand-font-size \* $line-height-base;
    $navbar-brand-padding-y: ($nav-link-height - $navbar-brand-height) \* .5;
    $navbar-brand-margin-end: 1rem;

    $navbar-toggler-padding-y: .25rem;
    $navbar-toggler-padding-x: .75rem;
    $navbar-toggler-font-size: $font-size-lg;
    $navbar-toggler-border-radius: $btn-border-radius;
    $navbar-toggler-focus-width: $btn-focus-width;
    $navbar-toggler-transition: box-shadow .15s ease-in-out;

    $navbar-light-color: rgba(var(--#{$prefix}emphasis-color-rgb), .65);
    $navbar-light-hover-color: rgba(var(--#{$prefix}emphasis-color-rgb), .8);
    $navbar-light-active-color: rgba(var(--#{$prefix}emphasis-color-rgb), 1);
    $navbar-light-disabled-color: rgba(var(--#{$prefix}emphasis-color-rgb), .3);
    $navbar-light-icon-color: rgba($body-color, .75);
    $navbar-light-toggler-icon-bg: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-light-icon-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>");
    $navbar-light-toggler-border-color: rgba(var(--#{$prefix}emphasis-color-rgb), .15);
    $navbar-light-brand-color: $navbar-light-active-color;
    $navbar-light-brand-hover-color: $navbar-light-active-color;

    ```

    Variables for the [dark navbar](#color-schemes):




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $navbar-dark-color: rgba($white, .55);
    $navbar-dark-hover-color: rgba($white, .75);
    $navbar-dark-active-color: $white;
    $navbar-dark-disabled-color: rgba($white, .25);
    $navbar-dark-icon-color: $navbar-dark-color;
    $navbar-dark-toggler-icon-bg: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-dark-icon-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>");
    $navbar-dark-toggler-border-color: rgba($white, .1);
    $navbar-dark-brand-color: $navbar-dark-active-color;
    $navbar-dark-brand-hover-color: $navbar-dark-active-color;

    ```

    ### Sass loops


    [Responsive navbar expand/collapse classes](#responsive-behaviors) (e.g., `.navbar-expand-lg`) are combined with the `$breakpoints` map and generated through a loop in `scss/_navbar.scss`.




    [scss/\_navbar.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_navbar.scss)






    ```
    // Generate series of `.navbar-expand-\*` responsive classes for configuring
    // where your navbar collapses.
    .navbar-expand {
     @each $breakpoint in map-keys($grid-breakpoints) {
     $next: breakpoint-next($breakpoint, $grid-breakpoints);
     $infix: breakpoint-infix($next, $grid-breakpoints);

     // stylelint-disable-next-line scss/selector-no-union-class-name
     &#{$infix} {
     @include media-breakpoint-up($next) {
     flex-wrap: nowrap;
     justify-content: flex-start;

     .navbar-nav {
     flex-direction: row;

     .dropdown-menu {
     position: absolute;
     }

     .nav-link {
     padding-right: var(--#{$prefix}navbar-nav-link-padding-x);
     padding-left: var(--#{$prefix}navbar-nav-link-padding-x);
     }
     }

     .navbar-nav-scroll {
     overflow: visible;
     }

     .navbar-collapse {
     display: flex !important; // stylelint-disable-line declaration-no-important
     flex-basis: auto;
     }

     .navbar-toggler {
     display: none;
     }

     .offcanvas {
     // stylelint-disable declaration-no-important
     position: static;
     z-index: auto;
     flex-grow: 1;
     width: auto !important;
     height: auto !important;
     visibility: visible !important;
     background-color: transparent !important;
     border: 0 !important;
     transform: none !important;
     @include box-shadow(none);
     @include transition(none);
     // stylelint-enable declaration-no-important

     .offcanvas-header {
     display: none;
     }

     .offcanvas-body {
     display: flex;
     flex-grow: 0;
     padding: 0;
     overflow-y: visible;
     }
     }
     }
     }
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class NAVS_AND_TABS:
    """

    Navs and tabs
    =============



    Documentation and examples for how to use Bootstrap’s included navigation components.






     On this page


    **On this page**


    ---




    * [Base nav](#base-nav)
    * [Available styles](#available-styles)
            + [Horizontal alignment](#horizontal-alignment)
            + [Vertical](#vertical)
            + [Tabs](#tabs)
            + [Pills](#pills)
            + [Underline](#underline)
            + [Fill and justify](#fill-and-justify)
    * [Working with flex utilities](#working-with-flex-utilities)
    * [Regarding accessibility](#regarding-accessibility)
    * [Using dropdowns](#using-dropdowns)
            + [Tabs with dropdowns](#tabs-with-dropdowns)
            + [Pills with dropdowns](#pills-with-dropdowns)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
    * [JavaScript behavior](#javascript-behavior)
            + [Accessibility](#accessibility)
            + [Using data attributes](#using-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Fade effect](#fade-effect)
            + [Methods](#methods)
            + [Events](#events)






    Base nav
    --------


    Navigation available in Bootstrap share general markup and styles, from the base `.nav` class to the active and disabled states. Swap modifier classes to switch between each style.


    The base `.nav` component is built with flexbox and provide a strong foundation for building all types of navigation components. It includes some style overrides (for working with lists), some link padding for larger hit areas, and basic disabled styling.



    The base `.nav` component does not include any `.active` state. The following examples include the class, mainly to demonstrate that this particular class does not trigger any special styling.


    To convey the active state to assistive technologies, use the `aria-current` attribute — using the `page` value for current page, or `true` for the current item in a set.




    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    Classes are used throughout, so your markup can be super flexible. Use `<ul>`s like above, `<ol>` if the order of your items is important, or roll your own with a `<nav>` element. Because the `.nav` uses `display: flex`, the nav links behave the same as nav items would, but without the extra markup.




    [Active](#)
    [Link](#)
    [Link](#)
    Disabled


    html









    ```
    <nav class="nav">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
    </nav>
    ```

    Available styles
    ----------------


    Change the style of `.nav`s component with modifiers and utilities. Mix and match as needed, or build your own.


    ### Horizontal alignment


    Change the horizontal alignment of your nav with [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/#justify-content). By default, navs are left-aligned, but you can easily change them to center or right-aligned.


    Centered with `.justify-content-center`:



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav justify-content-center">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    Right-aligned with `.justify-content-end`:



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav justify-content-end">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    ### Vertical


    Stack your navigation by changing the flex item direction with the `.flex-column` utility. Need to stack them on some viewports but not others? Use the responsive versions (e.g., `.flex-sm-column`).



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav flex-column">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    As always, vertical navigation is possible without `<ul>`s, too.




    [Active](#)
    [Link](#)
    [Link](#)
    Disabled


    html









    ```
    <nav class="nav flex-column">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
    </nav>
    ```

    ### Tabs


    Takes the basic nav from above and adds the `.nav-tabs` class to generate a tabbed interface. Use them to create tabbable regions with our [tab JavaScript plugin](#javascript-behavior).



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-tabs">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    ### Pills


    Take that same HTML, but use `.nav-pills` instead:



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-pills">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    ### Underline


    Take that same HTML, but use `.nav-underline` instead:



    * [Active](#)
    * [Link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-underline">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    ### Fill and justify


    Force your `.nav`’s contents to extend the full available width with one of two modifier classes. To proportionately fill all available space with your `.nav-item`s, use `.nav-fill`. Notice that all horizontal space is occupied, but not every nav item has the same width.



    * [Active](#)
    * [Much longer nav link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-pills nav-fill">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Much longer nav link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    When using a `<nav>`-based navigation, you can safely omit `.nav-item` as only `.nav-link` is required for styling `<a>` elements.




    [Active](#)
    [Much longer nav link](#)
    [Link](#)
    Disabled


    html









    ```
    <nav class="nav nav-pills nav-fill">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     <a class="nav-link" href="#">Much longer nav link</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
    </nav>
    ```

    For equal-width elements, use `.nav-justified`. All horizontal space will be occupied by nav links, but unlike the `.nav-fill` above, every nav item will be the same width.



    * [Active](#)
    * [Much longer nav link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-pills nav-justified">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Much longer nav link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    Similar to the `.nav-fill` example using a `<nav>`-based navigation.




    [Active](#)
    [Much longer nav link](#)
    [Link](#)
    Disabled


    html









    ```
    <nav class="nav nav-pills nav-justified">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     <a class="nav-link" href="#">Much longer nav link</a>
     <a class="nav-link" href="#">Link</a>
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
    </nav>
    ```

    Working with flex utilities
    ---------------------------


    If you need responsive nav variations, consider using a series of [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/). While more verbose, these utilities offer greater customization across responsive breakpoints. In the example below, our nav will be stacked on the lowest breakpoint, then adapt to a horizontal layout that fills the available width starting from the small breakpoint.




    [Active](#)
    [Longer nav link](#)
    [Link](#)
    Disabled


    html









    ```
    <nav class="nav nav-pills flex-column flex-sm-row">
     <a class="flex-sm-fill text-sm-center nav-link active" aria-current="page" href="#">Active</a>
     <a class="flex-sm-fill text-sm-center nav-link" href="#">Longer nav link</a>
     <a class="flex-sm-fill text-sm-center nav-link" href="#">Link</a>
     <a class="flex-sm-fill text-sm-center nav-link disabled" aria-disabled="true">Disabled</a>
    </nav>
    ```

    Regarding accessibility
    -----------------------


    If you’re using navs to provide a navigation bar, be sure to add a `role="navigation"` to the most logical parent container of the `<ul>`, or wrap a `<nav>` element around the whole navigation. Do not add the role to the `<ul>` itself, as this would prevent it from being announced as an actual list by assistive technologies.


    Note that navigation bars, even if visually styled as tabs with the `.nav-tabs` class, should **not** be given `role="tablist"`, `role="tab"` or `role="tabpanel"` attributes. These are only appropriate for dynamic tabbed interfaces, as described in the [ARIA Authoring Practices Guide tabs pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/). See [JavaScript behavior](#javascript-behavior) for dynamic tabbed interfaces in this section for an example. The `aria-current` attribute is not necessary on dynamic tabbed interfaces since our JavaScript handles the selected state by adding `aria-selected="true"` on the active tab.


    Using dropdowns
    ---------------


    Add dropdown menus with a little extra HTML and the [dropdowns JavaScript plugin](https://getbootstrap.com/docs/5.3/components/dropdowns/#usage).


    ### Tabs with dropdowns



    * [Active](#)
    * [Dropdown](#)
            + [Action](#)
            + [Another action](#)
            + [Something else here](#)
            + ---
            + [Separated link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-tabs">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Dropdown</a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    ### Pills with dropdowns



    * [Active](#)
    * [Dropdown](#)
            + [Action](#)
            + [Another action](#)
            + [Something else here](#)
            + ---
            + [Separated link](#)
    * [Link](#)
    * Disabled



    html









    ```
    <ul class="nav nav-pills">
     <li class="nav-item">
     <a class="nav-link active" aria-current="page" href="#">Active</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Dropdown</a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#">Separated link</a></li>
     </ul>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#">Link</a>
     </li>
     <li class="nav-item">
     <a class="nav-link disabled" aria-disabled="true">Disabled</a>
     </li>
    </ul>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, navs now use local CSS variables on `.nav`, `.nav-tabs`, and `.nav-pills` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.


    On the `.nav` base class:




    [scss/\_nav.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_nav.scss)






    ```
    --#{$prefix}nav-link-padding-x: #{$nav-link-padding-x};
    --#{$prefix}nav-link-padding-y: #{$nav-link-padding-y};
    @include rfs($nav-link-font-size, --#{$prefix}nav-link-font-size);
    --#{$prefix}nav-link-font-weight: #{$nav-link-font-weight};
    --#{$prefix}nav-link-color: #{$nav-link-color};
    --#{$prefix}nav-link-hover-color: #{$nav-link-hover-color};
    --#{$prefix}nav-link-disabled-color: #{$nav-link-disabled-color};
    ```

    On the `.nav-tabs` modifier class:




    [scss/\_nav.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_nav.scss)






    ```
    --#{$prefix}nav-tabs-border-width: #{$nav-tabs-border-width};
    --#{$prefix}nav-tabs-border-color: #{$nav-tabs-border-color};
    --#{$prefix}nav-tabs-border-radius: #{$nav-tabs-border-radius};
    --#{$prefix}nav-tabs-link-hover-border-color: #{$nav-tabs-link-hover-border-color};
    --#{$prefix}nav-tabs-link-active-color: #{$nav-tabs-link-active-color};
    --#{$prefix}nav-tabs-link-active-bg: #{$nav-tabs-link-active-bg};
    --#{$prefix}nav-tabs-link-active-border-color: #{$nav-tabs-link-active-border-color};
    ```

    On the `.nav-pills` modifier class:




    [scss/\_nav.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_nav.scss)






    ```
    --#{$prefix}nav-pills-border-radius: #{$nav-pills-border-radius};
    --#{$prefix}nav-pills-link-active-color: #{$nav-pills-link-active-color};
    --#{$prefix}nav-pills-link-active-bg: #{$nav-pills-link-active-bg};
    ```

    Added in v5.3.0
    On the `.nav-underline` modifier class:




    [scss/\_nav.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_nav.scss)






    ```
    --#{$prefix}nav-underline-gap: #{$nav-underline-gap};
    --#{$prefix}nav-underline-border-width: #{$nav-underline-border-width};
    --#{$prefix}nav-underline-link-active-color: #{$nav-underline-link-active-color};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $nav-link-padding-y: .5rem;
    $nav-link-padding-x: 1rem;
    $nav-link-font-size: null;
    $nav-link-font-weight: null;
    $nav-link-color: var(--#{$prefix}link-color);
    $nav-link-hover-color: var(--#{$prefix}link-hover-color);
    $nav-link-transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out;
    $nav-link-disabled-color: var(--#{$prefix}secondary-color);
    $nav-link-focus-box-shadow: $focus-ring-box-shadow;

    $nav-tabs-border-color: var(--#{$prefix}border-color);
    $nav-tabs-border-width: var(--#{$prefix}border-width);
    $nav-tabs-border-radius: var(--#{$prefix}border-radius);
    $nav-tabs-link-hover-border-color: var(--#{$prefix}secondary-bg) var(--#{$prefix}secondary-bg) $nav-tabs-border-color;
    $nav-tabs-link-active-color: var(--#{$prefix}emphasis-color);
    $nav-tabs-link-active-bg: var(--#{$prefix}body-bg);
    $nav-tabs-link-active-border-color: var(--#{$prefix}border-color) var(--#{$prefix}border-color) $nav-tabs-link-active-bg;

    $nav-pills-border-radius: var(--#{$prefix}border-radius);
    $nav-pills-link-active-color: $component-active-color;
    $nav-pills-link-active-bg: $component-active-bg;

    $nav-underline-gap: 1rem;
    $nav-underline-border-width: .125rem;
    $nav-underline-link-active-color: var(--#{$prefix}emphasis-color);

    ```

    JavaScript behavior
    -------------------


    Use the tab JavaScript plugin—include it individually or through the compiled `bootstrap.js` file—to extend our navigational tabs and pills to create tabbable panes of local content.



    * Home
    * Profile
    * Contact
    * Disabled




    This is some placeholder content the **Home tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Profile tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Contact tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Disabled tab's** associated content.






    ```
    <ul class="nav nav-tabs" id="myTab" role="tablist">
     <li class="nav-item" role="presentation">
     <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Home</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Profile</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact-tab-pane" type="button" role="tab" aria-controls="contact-tab-pane" aria-selected="false">Contact</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="disabled-tab" data-bs-toggle="tab" data-bs-target="#disabled-tab-pane" type="button" role="tab" aria-controls="disabled-tab-pane" aria-selected="false" disabled>Disabled</button>
     </li>
    </ul>
    <div class="tab-content" id="myTabContent">
     <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="contact-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="disabled-tab-pane" role="tabpanel" aria-labelledby="disabled-tab" tabindex="0">...</div>
    </div>

    ```
    To help fit your needs, this works with `<ul>`-based markup, as shown above, or with any arbitrary “roll your own” markup. Note that if you’re using `<nav>`, you shouldn’t add `role="tablist"` directly to it, as this would override the element’s native role as a navigation landmark. Instead, switch to an alternative element (in the example below, a simple `<div>`) and wrap the `<nav>` around it.





    Home
    Profile
    Contact
    Disabled




    This is some placeholder content the **Home tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Profile tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Contact tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Disabled tab's** associated content.






    ```
    <nav>
     <div class="nav nav-tabs" id="nav-tab" role="tablist">
     <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Home</button>
     <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Profile</button>
     <button class="nav-link" id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#nav-contact" type="button" role="tab" aria-controls="nav-contact" aria-selected="false">Contact</button>
     <button class="nav-link" id="nav-disabled-tab" data-bs-toggle="tab" data-bs-target="#nav-disabled" type="button" role="tab" aria-controls="nav-disabled" aria-selected="false" disabled>Disabled</button>
     </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
     <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="nav-disabled" role="tabpanel" aria-labelledby="nav-disabled-tab" tabindex="0">...</div>
    </div>

    ```
    The tabs plugin also works with pills.



    * Home
    * Profile
    * Contact
    * Disabled




    This is some placeholder content the **Home tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Profile tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Contact tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Disabled tab's** associated content.






    ```
    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
     <li class="nav-item" role="presentation">
     <button class="nav-link active" id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">Home</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Profile</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="pills-contact-tab" data-bs-toggle="pill" data-bs-target="#pills-contact" type="button" role="tab" aria-controls="pills-contact" aria-selected="false">Contact</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="pills-disabled-tab" data-bs-toggle="pill" data-bs-target="#pills-disabled" type="button" role="tab" aria-controls="pills-disabled" aria-selected="false" disabled>Disabled</button>
     </li>
    </ul>
    <div class="tab-content" id="pills-tabContent">
     <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="pills-contact" role="tabpanel" aria-labelledby="pills-contact-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="pills-disabled" role="tabpanel" aria-labelledby="pills-disabled-tab" tabindex="0">...</div>
    </div>

    ```
    And with vertical pills. Ideally, for vertical tabs, you should also add `aria-orientation="vertical"` to the tab list container.





    Home
    Profile
    Disabled
    Messages
    Settings



    This is some placeholder content the **Home tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Profile tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Disabled tab's** associated content.




    This is some placeholder content the **Messages tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.




    This is some placeholder content the **Settings tab's** associated content. Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps classes to control the content visibility and styling. You can use it with tabs, pills, and any other `.nav`-powered navigation.







    ```
    <div class="d-flex align-items-start">
     <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
     <button class="nav-link active" id="v-pills-home-tab" data-bs-toggle="pill" data-bs-target="#v-pills-home" type="button" role="tab" aria-controls="v-pills-home" aria-selected="true">Home</button>
     <button class="nav-link" id="v-pills-profile-tab" data-bs-toggle="pill" data-bs-target="#v-pills-profile" type="button" role="tab" aria-controls="v-pills-profile" aria-selected="false">Profile</button>
     <button class="nav-link" id="v-pills-disabled-tab" data-bs-toggle="pill" data-bs-target="#v-pills-disabled" type="button" role="tab" aria-controls="v-pills-disabled" aria-selected="false" disabled>Disabled</button>
     <button class="nav-link" id="v-pills-messages-tab" data-bs-toggle="pill" data-bs-target="#v-pills-messages" type="button" role="tab" aria-controls="v-pills-messages" aria-selected="false">Messages</button>
     <button class="nav-link" id="v-pills-settings-tab" data-bs-toggle="pill" data-bs-target="#v-pills-settings" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false">Settings</button>
     </div>
     <div class="tab-content" id="v-pills-tabContent">
     <div class="tab-pane fade show active" id="v-pills-home" role="tabpanel" aria-labelledby="v-pills-home-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="v-pills-disabled" role="tabpanel" aria-labelledby="v-pills-disabled-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="v-pills-messages" role="tabpanel" aria-labelledby="v-pills-messages-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="v-pills-settings" role="tabpanel" aria-labelledby="v-pills-settings-tab" tabindex="0">...</div>
     </div>
    </div>

    ```
    ### Accessibility


    Dynamic tabbed interfaces, as described in the [ARIA Authoring Practices Guide tabs pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/), require `role="tablist"`, `role="tab"`, `role="tabpanel"`, and additional `aria-` attributes in order to convey their structure, functionality, and current state to users of assistive technologies (such as screen readers). As a best practice, we recommend using `<button>` elements for the tabs, as these are controls that trigger a dynamic change, rather than links that navigate to a new page or location.


    In line with the ARIA Authoring Practices pattern, only the currently active tab receives keyboard focus. When the JavaScript plugin is initialized, it will set `tabindex="-1"` on all inactive tab controls. Once the currently active tab has focus, the cursor keys activate the previous/next tab. The `Home` and `End` keys activate the first and last tabs, respectively. The plugin will change the [roving `tabindex`](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/) accordingly. However, note that the JavaScript plugin does not distinguish between horizontal and vertical tab lists when it comes to cursor key interactions: regardless of the tab list’s orientation, both the up *and* left cursor go to the previous tab, and down *and* right cursor go to the next tab.



    In general, to facilitate keyboard navigation, it’s recommended to make the tab panels themselves focusable as well, unless the first element containing meaningful content inside the tab panel is already focusable. The JavaScript plugin does not try to handle this aspect—where appropriate, you’ll need to explicitly make your tab panels focusable by adding `tabindex="0"` in your markup.


    The tab JavaScript plugin **does not** support tabbed interfaces that contain dropdown menus, as these cause both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab’s trigger element is not immediately visible (as it’s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.

    ### Using data attributes


    You can activate a tab or pill navigation without writing any JavaScript by simply specifying `data-bs-toggle="tab"` or `data-bs-toggle="pill"` on an element. Use these data attributes on `.nav-tabs` or `.nav-pills`.



    ```
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="myTab" role="tablist">
     <li class="nav-item" role="presentation">
     <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Home</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Profile</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="messages-tab" data-bs-toggle="tab" data-bs-target="#messages" type="button" role="tab" aria-controls="messages" aria-selected="false">Messages</button>
     </li>
     <li class="nav-item" role="presentation">
     <button class="nav-link" id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings" type="button" role="tab" aria-controls="settings" aria-selected="false">Settings</button>
     </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
     <div class="tab-pane active" id="home" role="tabpanel" aria-labelledby="home-tab" tabindex="0">...</div>
     <div class="tab-pane" id="profile" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">...</div>
     <div class="tab-pane" id="messages" role="tabpanel" aria-labelledby="messages-tab" tabindex="0">...</div>
     <div class="tab-pane" id="settings" role="tabpanel" aria-labelledby="settings-tab" tabindex="0">...</div>
    </div>

    ```
    ### Via JavaScript


    Enable tabbable tabs via JavaScript (each tab needs to be activated individually):



    ```
    const triggerTabList = document.querySelectorAll('#myTab button')
    triggerTabList.forEach(triggerEl => {
     const tabTrigger = new bootstrap.Tab(triggerEl)

     triggerEl.addEventListener('click', event => {
     event.preventDefault()
     tabTrigger.show()
     })
    })

    ```
    You can activate individual tabs in several ways:



    ```
    const triggerEl = document.querySelector('#myTab button[data-bs-target="#profile"]')
    bootstrap.Tab.getInstance(triggerEl).show() // Select tab by name

    const triggerFirstTabEl = document.querySelector('#myTab li:first-child button')
    bootstrap.Tab.getInstance(triggerFirstTabEl).show() // Select first tab

    ```
    ### Fade effect


    To make tabs fade in, add `.fade` to each `.tab-pane`. The first tab pane must also have `.show` to make the initial content visible.



    ```
    <div class="tab-content">
     <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="messages" role="tabpanel" aria-labelledby="messages-tab" tabindex="0">...</div>
     <div class="tab-pane fade" id="settings" role="tabpanel" aria-labelledby="settings-tab" tabindex="0">...</div>
    </div>

    ```
    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    Activates your content as a tab element.


    You can create a tab instance with the constructor, for example:



    ```
    const bsTab = new bootstrap.Tab('#myTab')

    ```


    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s tab. |
    | `getInstance` | Static method which allows you to get the tab instance associated with a DOM element, you can use it like this: `bootstrap.Tab.getInstance(element)`. |
    | `getOrCreateInstance` | Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: `bootstrap.Tab.getOrCreateInstance(element)`. |
    | `show` | Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden. **Returns to the caller before the tab pane has actually been shown** (i.e. before the `shown.bs.tab` event occurs). |


    ### Events


    When showing a new tab, the events fire in the following order:


    1. `hide.bs.tab` (on the current active tab)
    2. `show.bs.tab` (on the to-be-shown tab)
    3. `hidden.bs.tab` (on the previous active tab, the same one as for the `hide.bs.tab` event)
    4. `shown.bs.tab` (on the newly-active just-shown tab, the same one as for the `show.bs.tab` event)


    If no tab was already active, then the `hide.bs.tab` and `hidden.bs.tab` events will not be fired.




    | Event type | Description |
    | --- | --- |
    | `hide.bs.tab` | This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use `event.target` and `event.relatedTarget` to target the current active tab and the new soon-to-be-active tab, respectively. |
    | `hidden.bs.tab` | This event fires after a new tab is shown (and thus the previous active tab is hidden). Use `event.target` and `event.relatedTarget` to target the previous active tab and the new active tab, respectively. |
    | `show.bs.tab` | This event fires on tab show, but before the new tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively. |
    | `shown.bs.tab` | This event fires on tab show after a tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively. |



    ```
    const tabEl = document.querySelector('button[data-bs-toggle="tab"]')
    tabEl.addEventListener('shown.bs.tab', event => {
     event.target // newly activated tab
     event.relatedTarget // previous active tab
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OFFCANVAS:
    """

    Offcanvas
    =========



    Build hidden sidebars into your project for navigation, shopping carts, and more with a few classes and our JavaScript plugin.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Examples](#examples)
            + [Offcanvas components](#offcanvas-components)
            + [Live demo](#live-demo)
            + [Body scrolling](#body-scrolling)
            + [Body scrolling and backdrop](#body-scrolling-and-backdrop)
            + [Static backdrop](#static-backdrop)
    * [Dark offcanvas](#dark-offcanvas)
    * [Responsive](#responsive)
    * [Placement](#placement)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
                    - [Toggle](#toggle)
                    - [Dismiss](#dismiss)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
            + [Methods](#methods)
            + [Events](#events)






    How it works
    ------------


    Offcanvas is a sidebar component that can be toggled via JavaScript to appear from the left, right, top, or bottom edge of the viewport. Buttons or anchors are used as triggers that are attached to specific elements you toggle, and `data` attributes are used to invoke our JavaScript.


    * Offcanvas shares some of the same JavaScript code as modals. Conceptually, they are quite similar, but they are separate plugins.
    * Similarly, some [source Sass](#sass-variables) variables for offcanvas’s styles and dimensions are inherited from the modal’s variables.
    * When shown, offcanvas includes a default backdrop that can be clicked to hide the offcanvas.
    * Similar to modals, only one offcanvas can be shown at a time.


    **Heads up!** Given how CSS handles animations, you cannot use `margin` or `translate` on an `.offcanvas` element. Instead, use the class as an independent wrapping element.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Examples
    --------


    ### Offcanvas components


    Below is an offcanvas example that is shown by default (via `.show` on `.offcanvas`). Offcanvas includes support for a header with a close button and an optional body class for some initial `padding`. We suggest that you include offcanvas headers with dismiss actions whenever possible, or provide an explicit dismiss action.





    ##### Offcanvas





     Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.



    html









    ```
    <div class="offcanvas offcanvas-start show" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasLabel">Offcanvas</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.
     </div>
    </div>
    ```

    ### Live demo


    Use the buttons below to show and hide an offcanvas element via JavaScript that toggles the `.show` class on an element with the `.offcanvas` class.


    * `.offcanvas` hides content (default)
    * `.offcanvas.show` shows content


    You can use a link with the `href` attribute, or a button with the `data-bs-target` attribute. In both cases, the `data-bs-toggle="offcanvas"` is required.



    [Link with href](#offcanvasExample)

     Button with data-bs-target



    ##### Offcanvas






     Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.



     Dropdown button

    * [Action](#)
    * [Another action](#)
    * [Something else here](#)






    html









    ```
    <a class="btn btn-primary" data-bs-toggle="offcanvas" href="#offcanvasExample" role="button" aria-controls="offcanvasExample">
     Link with href
    </a>
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExample" aria-controls="offcanvasExample">
     Button with data-bs-target
    </button>

    <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasExample" aria-labelledby="offcanvasExampleLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasExampleLabel">Offcanvas</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <div>
     Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.
     </div>
     <div class="dropdown mt-3">
     <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
     Dropdown button
     </button>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#">Action</a></li>
     <li><a class="dropdown-item" href="#">Another action</a></li>
     <li><a class="dropdown-item" href="#">Something else here</a></li>
     </ul>
     </div>
     </div>
    </div>
    ```

    ### Body scrolling


    Scrolling the `<body>` element is disabled when an offcanvas and its backdrop are visible. Use the `data-bs-scroll` attribute to enable `<body>` scrolling.



    Enable body scrolling


    ##### Offcanvas with body scrolling





    Try scrolling the rest of the page to see this option in action.





    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasScrolling" aria-controls="offcanvasScrolling">Enable body scrolling</button>

    <div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Offcanvas with body scrolling</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <p>Try scrolling the rest of the page to see this option in action.</p>
     </div>
    </div>
    ```

    ### Body scrolling and backdrop


    You can also enable `<body>` scrolling with a visible backdrop.



    Enable both scrolling & backdrop


    ##### Backdrop with scrolling





    Try scrolling the rest of the page to see this option in action.





    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions">Enable both scrolling & backdrop</button>

    <div class="offcanvas offcanvas-start" data-bs-scroll="true" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">Backdrop with scrolling</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <p>Try scrolling the rest of the page to see this option in action.</p>
     </div>
    </div>
    ```

    ### Static backdrop


    When backdrop is set to static, the offcanvas will not close when clicking outside of it.




     Toggle static offcanvas



    ##### Offcanvas






     I will not close if you click outside of me.




    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#staticBackdrop" aria-controls="staticBackdrop">
     Toggle static offcanvas
    </button>

    <div class="offcanvas offcanvas-start" data-bs-backdrop="static" tabindex="-1" id="staticBackdrop" aria-labelledby="staticBackdropLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="staticBackdropLabel">Offcanvas</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <div>
     I will not close if you click outside of me.
     </div>
     </div>
    </div>
    ```

    Dark offcanvas
    --------------


    Deprecated in v5.3.0
    Added in v5.2.0



    Change the appearance of offcanvases with utilities to better match them to different contexts like dark navbars. Here we add `.text-bg-dark` to the `.offcanvas` and `.btn-close-white` to `.btn-close` for proper styling with a dark offcanvas. If you have dropdowns within, consider also adding `.dropdown-menu-dark` to `.dropdown-menu`.



    Heads up! Dark variants for components were deprecated in v5.3.0 with the introduction of color modes. Instead of manually adding classes mentioned above, set `data-bs-theme="dark"` on the root element, a parent wrapper, or the component itself.




    ##### Offcanvas





    Place offcanvas content here.





    html









    ```
    <div class="offcanvas offcanvas-start show text-bg-dark" tabindex="-1" id="offcanvasDark" aria-labelledby="offcanvasDarkLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasDarkLabel">Offcanvas</h5>
     <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvasDark" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <p>Place offcanvas content here.</p>
     </div>
    </div>
    ```

    Responsive
    ----------


    Added in v5.2.0
    Responsive offcanvas classes hide content outside the viewport from a specified breakpoint and down. Above that breakpoint, the contents within will behave as usual. For example, `.offcanvas-lg` hides content in an offcanvas below the `lg` breakpoint, but shows the content above the `lg` breakpoint.



    Toggle offcanvas
    Resize your browser to show the responsive offcanvas toggle.


    ##### Responsive offcanvas





    This is content within an `.offcanvas-lg`.





    html









    ```
    <button class="btn btn-primary d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasResponsive" aria-controls="offcanvasResponsive">Toggle offcanvas</button>

    <div class="alert alert-info d-none d-lg-block">Resize your browser to show the responsive offcanvas toggle.</div>

    <div class="offcanvas-lg offcanvas-end" tabindex="-1" id="offcanvasResponsive" aria-labelledby="offcanvasResponsiveLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasResponsiveLabel">Responsive offcanvas</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#offcanvasResponsive" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     <p class="mb-0">This is content within an <code>.offcanvas-lg</code>.</p>
     </div>
    </div>
    ```

    Responsive offcanvas classes are available across for each breakpoint.


    * `.offcanvas`
    * `.offcanvas-sm`
    * `.offcanvas-md`
    * `.offcanvas-lg`
    * `.offcanvas-xl`
    * `.offcanvas-xxl`


    Placement
    ---------


    There’s no default placement for offcanvas components, so you must add one of the modifier classes below.


    * `.offcanvas-start` places offcanvas on the left of the viewport (shown above)
    * `.offcanvas-end` places offcanvas on the right of the viewport
    * `.offcanvas-top` places offcanvas on the top of the viewport
    * `.offcanvas-bottom` places offcanvas on the bottom of the viewport


    Try the top, right, and bottom examples out below.



    Toggle top offcanvas


    ##### Offcanvas top





     ...



    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasTop" aria-controls="offcanvasTop">Toggle top offcanvas</button>

    <div class="offcanvas offcanvas-top" tabindex="-1" id="offcanvasTop" aria-labelledby="offcanvasTopLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasTopLabel">Offcanvas top</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     ...
     </div>
    </div>
    ```


    Toggle right offcanvas


    ##### Offcanvas right





     ...



    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasRightLabel">Offcanvas right</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body">
     ...
     </div>
    </div>
    ```


    Toggle bottom offcanvas


    ##### Offcanvas bottom





     ...



    html









    ```
    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">Toggle bottom offcanvas</button>

    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel">
     <div class="offcanvas-header">
     <h5 class="offcanvas-title" id="offcanvasBottomLabel">Offcanvas bottom</h5>
     <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
     </div>
     <div class="offcanvas-body small">
     ...
     </div>
    </div>
    ```

    Accessibility
    -------------


    Since the offcanvas panel is conceptually a modal dialog, be sure to add `aria-labelledby="..."`—referencing the offcanvas title—to `.offcanvas`. Note that you don’t need to add `role="dialog"` since we already add it via JavaScript.


    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, offcanvas now uses local CSS variables on `.offcanvas` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_offcanvas.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_offcanvas.scss)






    ```
    --#{$prefix}offcanvas-zindex: #{$zindex-offcanvas};
    --#{$prefix}offcanvas-width: #{$offcanvas-horizontal-width};
    --#{$prefix}offcanvas-height: #{$offcanvas-vertical-height};
    --#{$prefix}offcanvas-padding-x: #{$offcanvas-padding-x};
    --#{$prefix}offcanvas-padding-y: #{$offcanvas-padding-y};
    --#{$prefix}offcanvas-color: #{$offcanvas-color};
    --#{$prefix}offcanvas-bg: #{$offcanvas-bg-color};
    --#{$prefix}offcanvas-border-width: #{$offcanvas-border-width};
    --#{$prefix}offcanvas-border-color: #{$offcanvas-border-color};
    --#{$prefix}offcanvas-box-shadow: #{$offcanvas-box-shadow};
    --#{$prefix}offcanvas-transition: #{transform $offcanvas-transition-duration ease-in-out};
    --#{$prefix}offcanvas-title-line-height: #{$offcanvas-title-line-height};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $offcanvas-padding-y: $modal-inner-padding;
    $offcanvas-padding-x: $modal-inner-padding;
    $offcanvas-horizontal-width: 400px;
    $offcanvas-vertical-height: 30vh;
    $offcanvas-transition-duration: .3s;
    $offcanvas-border-color: $modal-content-border-color;
    $offcanvas-border-width: $modal-content-border-width;
    $offcanvas-title-line-height: $modal-title-line-height;
    $offcanvas-bg-color: var(--#{$prefix}body-bg);
    $offcanvas-color: var(--#{$prefix}body-color);
    $offcanvas-box-shadow: $modal-content-box-shadow-xs;
    $offcanvas-backdrop-bg: $modal-backdrop-bg;
    $offcanvas-backdrop-opacity: $modal-backdrop-opacity;

    ```

    Usage
    -----


    The offcanvas plugin utilizes a few classes and attributes to handle the heavy lifting:


    * `.offcanvas` hides the content
    * `.offcanvas.show` shows the content
    * `.offcanvas-start` hides the offcanvas on the left
    * `.offcanvas-end` hides the offcanvas on the right
    * `.offcanvas-top` hides the offcanvas on the top
    * `.offcanvas-bottom` hides the offcanvas on the bottom


    Add a dismiss button with the `data-bs-dismiss="offcanvas"` attribute, which triggers the JavaScript functionality. Be sure to use the `<button>` element with it for proper behavior across all devices.


    ### Via data attributes


    #### Toggle


    Add `data-bs-toggle="offcanvas"` and a `data-bs-target` or `href` to the element to automatically assign control of one offcanvas element. The `data-bs-target` attribute accepts a CSS selector to apply the offcanvas to. Be sure to add the class `offcanvas` to the offcanvas element. If you’d like it to default open, add the additional class `show`.


    #### Dismiss


    Dismissal can be achieved with the `data-bs-dismiss` attribute on a button **within the offcanvas** as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>

    ```
    or on a button **outside the offcanvas** using the additional `data-bs-target` as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#my-offcanvas" aria-label="Close"></button>

    ```

    While both ways to dismiss an offcanvas are supported, keep in mind that dismissing from outside an offcanvas does not match the [ARIA Authoring Practices Guide dialog (modal) pattern](https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/). Do this at your own risk.

    ### Via JavaScript


    Enable manually with:



    ```
    const offcanvasElementList = document.querySelectorAll('.offcanvas')
    const offcanvasList = [...offcanvasElementList].map(offcanvasEl => new bootstrap.Offcanvas(offcanvasEl))

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `backdrop` | boolean or the string `static` | `true` | Apply a backdrop on body while offcanvas is open. Alternatively, specify `static` for a backdrop which doesn’t close the offcanvas when clicked. |
    | `keyboard` | boolean | `true` | Closes the offcanvas when escape key is pressed. |
    | `scroll` | boolean | `false` | Allow body scrolling while offcanvas is open. |


    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)

    Activates your content as an offcanvas element. Accepts an optional options `object`.


    You can create an offcanvas instance with the constructor, for example:



    ```
    const bsOffcanvas = new bootstrap.Offcanvas('#myOffcanvas')

    ```


    | Method | Description |
    | --- | --- |
    | `getInstance` | *Static* method which allows you to get the offcanvas instance associated with a DOM element. |
    | `getOrCreateInstance` | *Static* method which allows you to get the offcanvas instance associated with a DOM element, or create a new one in case it wasn’t initialized. |
    | `hide` | Hides an offcanvas element. **Returns to the caller before the offcanvas element has actually been hidden** (i.e. before the `hidden.bs.offcanvas` event occurs). |
    | `show` | Shows an offcanvas element. **Returns to the caller before the offcanvas element has actually been shown** (i.e. before the `shown.bs.offcanvas` event occurs). |
    | `toggle` | Toggles an offcanvas element to shown or hidden. **Returns to the caller before the offcanvas element has actually been shown or hidden** (i.e. before the `shown.bs.offcanvas` or `hidden.bs.offcanvas` event occurs). |


    ### Events


    Bootstrap’s offcanvas class exposes a few events for hooking into offcanvas functionality.




    | Event type | Description |
    | --- | --- |
    | `hide.bs.offcanvas` | This event is fired immediately when the `hide` method has been called. |
    | `hidden.bs.offcanvas` | This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete). |
    | `hidePrevented.bs.offcanvas` | This event is fired when the offcanvas is shown, its backdrop is `static` and a click outside of the offcanvas is performed. The event is also fired when the escape key is pressed and the `keyboard` option is set to `false`. |
    | `show.bs.offcanvas` | This event fires immediately when the `show` instance method is called. |
    | `shown.bs.offcanvas` | This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete). |



    ```
    const myOffcanvas = document.getElementById('myOffcanvas')
    myOffcanvas.addEventListener('hidden.bs.offcanvas', event => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class PAGINATION:
    """

    Pagination
    ==========



    Documentation and examples for showing pagination to indicate a series of related content exists across multiple pages.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Working with icons](#working-with-icons)
    * [Disabled and active states](#disabled-and-active-states)
    * [Sizing](#sizing)
    * [Alignment](#alignment)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass mixins](#sass-mixins)






    Overview
    --------


    We use a large block of connected links for our pagination, making links hard to miss and easily scalable—all while providing large hit areas. Pagination is built with list HTML elements so screen readers can announce the number of available links. Use a wrapping `<nav>` element to identify it as a navigation section to screen readers and other assistive technologies.


    In addition, as pages likely have more than one such navigation section, it’s advisable to provide a descriptive `aria-label` for the `<nav>` to reflect its purpose. For example, if the pagination component is used to navigate between a set of search results, an appropriate label could be `aria-label="Search results pages"`.




    * [Previous](#)
    * [1](#)
    * [2](#)
    * [3](#)
    * [Next](#)




    html









    ```
    <nav aria-label="Page navigation example">
     <ul class="pagination">
     <li class="page-item"><a class="page-link" href="#">Previous</a></li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item"><a class="page-link" href="#">Next</a></li>
     </ul>
    </nav>
    ```

    Working with icons
    ------------------


    Looking to use an icon or symbol in place of text for some pagination links? Be sure to provide proper screen reader support with `aria` attributes.




    * [«](#)
    * [1](#)
    * [2](#)
    * [3](#)
    * [»](#)




    html









    ```
    <nav aria-label="Page navigation example">
     <ul class="pagination">
     <li class="page-item">
     <a class="page-link" href="#" aria-label="Previous">
     <span aria-hidden="true">&laquo;</span>
     </a>
     </li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item">
     <a class="page-link" href="#" aria-label="Next">
     <span aria-hidden="true">&raquo;</span>
     </a>
     </li>
     </ul>
    </nav>
    ```

    Disabled and active states
    --------------------------


    Pagination links are customizable for different circumstances. Use `.disabled` for links that appear un-clickable and `.active` to indicate the current page.


    While the `.disabled` class uses `pointer-events: none` to *try* to disable the link functionality of `<a>`s, that CSS property is not yet standardized and doesn’t account for keyboard navigation. As such, you should always add `tabindex="-1"` on disabled links and use custom JavaScript to fully disable their functionality.




    * Previous
    * [1](#)
    * [2](#)
    * [3](#)
    * [Next](#)




    html









    ```
    <nav aria-label="...">
     <ul class="pagination">
     <li class="page-item disabled">
     <a class="page-link">Previous</a>
     </li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item active" aria-current="page">
     <a class="page-link" href="#">2</a>
     </li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item">
     <a class="page-link" href="#">Next</a>
     </li>
     </ul>
    </nav>
    ```

    You can optionally swap out active or disabled anchors for `<span>`, or omit the anchor in the case of the prev/next arrows, to remove click functionality and prevent keyboard focus while retaining intended styles.




    * Previous
    * [1](#)
    * 2
    * [3](#)
    * [Next](#)




    html









    ```
    <nav aria-label="...">
     <ul class="pagination">
     <li class="page-item disabled">
     <span class="page-link">Previous</span>
     </li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item active" aria-current="page">
     <span class="page-link">2</span>
     </li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item">
     <a class="page-link" href="#">Next</a>
     </li>
     </ul>
    </nav>
    ```

    Sizing
    ------


    Fancy larger or smaller pagination? Add `.pagination-lg` or `.pagination-sm` for additional sizes.




    * 1
    * [2](#)
    * [3](#)




    html









    ```
    <nav aria-label="...">
     <ul class="pagination pagination-lg">
     <li class="page-item active" aria-current="page">
     <span class="page-link">1</span>
     </li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     </ul>
    </nav>
    ```



    * 1
    * [2](#)
    * [3](#)




    html









    ```
    <nav aria-label="...">
     <ul class="pagination pagination-sm">
     <li class="page-item active" aria-current="page">
     <span class="page-link">1</span>
     </li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     </ul>
    </nav>
    ```

    Alignment
    ---------


    Change the alignment of pagination components with [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/). For example, with `.justify-content-center`:




    * Previous
    * [1](#)
    * [2](#)
    * [3](#)
    * [Next](#)




    html









    ```
    <nav aria-label="Page navigation example">
     <ul class="pagination justify-content-center">
     <li class="page-item disabled">
     <a class="page-link">Previous</a>
     </li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item">
     <a class="page-link" href="#">Next</a>
     </li>
     </ul>
    </nav>
    ```

    Or with `.justify-content-end`:




    * Previous
    * [1](#)
    * [2](#)
    * [3](#)
    * [Next](#)




    html









    ```
    <nav aria-label="Page navigation example">
     <ul class="pagination justify-content-end">
     <li class="page-item disabled">
     <a class="page-link">Previous</a>
     </li>
     <li class="page-item"><a class="page-link" href="#">1</a></li>
     <li class="page-item"><a class="page-link" href="#">2</a></li>
     <li class="page-item"><a class="page-link" href="#">3</a></li>
     <li class="page-item">
     <a class="page-link" href="#">Next</a>
     </li>
     </ul>
    </nav>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, pagination now uses local CSS variables on `.pagination` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_pagination.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_pagination.scss)






    ```
    --#{$prefix}pagination-padding-x: #{$pagination-padding-x};
    --#{$prefix}pagination-padding-y: #{$pagination-padding-y};
    @include rfs($pagination-font-size, --#{$prefix}pagination-font-size);
    --#{$prefix}pagination-color: #{$pagination-color};
    --#{$prefix}pagination-bg: #{$pagination-bg};
    --#{$prefix}pagination-border-width: #{$pagination-border-width};
    --#{$prefix}pagination-border-color: #{$pagination-border-color};
    --#{$prefix}pagination-border-radius: #{$pagination-border-radius};
    --#{$prefix}pagination-hover-color: #{$pagination-hover-color};
    --#{$prefix}pagination-hover-bg: #{$pagination-hover-bg};
    --#{$prefix}pagination-hover-border-color: #{$pagination-hover-border-color};
    --#{$prefix}pagination-focus-color: #{$pagination-focus-color};
    --#{$prefix}pagination-focus-bg: #{$pagination-focus-bg};
    --#{$prefix}pagination-focus-box-shadow: #{$pagination-focus-box-shadow};
    --#{$prefix}pagination-active-color: #{$pagination-active-color};
    --#{$prefix}pagination-active-bg: #{$pagination-active-bg};
    --#{$prefix}pagination-active-border-color: #{$pagination-active-border-color};
    --#{$prefix}pagination-disabled-color: #{$pagination-disabled-color};
    --#{$prefix}pagination-disabled-bg: #{$pagination-disabled-bg};
    --#{$prefix}pagination-disabled-border-color: #{$pagination-disabled-border-color};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $pagination-padding-y: .375rem;
    $pagination-padding-x: .75rem;
    $pagination-padding-y-sm: .25rem;
    $pagination-padding-x-sm: .5rem;
    $pagination-padding-y-lg: .75rem;
    $pagination-padding-x-lg: 1.5rem;

    $pagination-font-size: $font-size-base;

    $pagination-color: var(--#{$prefix}link-color);
    $pagination-bg: var(--#{$prefix}body-bg);
    $pagination-border-radius: var(--#{$prefix}border-radius);
    $pagination-border-width: var(--#{$prefix}border-width);
    $pagination-margin-start: calc(#{$pagination-border-width} \* -1); // stylelint-disable-line function-disallowed-list
    $pagination-border-color: var(--#{$prefix}border-color);

    $pagination-focus-color: var(--#{$prefix}link-hover-color);
    $pagination-focus-bg: var(--#{$prefix}secondary-bg);
    $pagination-focus-box-shadow: $focus-ring-box-shadow;
    $pagination-focus-outline: 0;

    $pagination-hover-color: var(--#{$prefix}link-hover-color);
    $pagination-hover-bg: var(--#{$prefix}tertiary-bg);
    $pagination-hover-border-color: var(--#{$prefix}border-color); // Todo in v6: remove this?

    $pagination-active-color: $component-active-color;
    $pagination-active-bg: $component-active-bg;
    $pagination-active-border-color: $component-active-bg;

    $pagination-disabled-color: var(--#{$prefix}secondary-color);
    $pagination-disabled-bg: var(--#{$prefix}secondary-bg);
    $pagination-disabled-border-color: var(--#{$prefix}border-color);

    $pagination-transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;

    $pagination-border-radius-sm: var(--#{$prefix}border-radius-sm);
    $pagination-border-radius-lg: var(--#{$prefix}border-radius-lg);

    ```

    ### Sass mixins




    [scss/mixins/\_pagination.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_pagination.scss)






    ```
    @mixin pagination-size($padding-y, $padding-x, $font-size, $border-radius) {
     --#{$prefix}pagination-padding-x: #{$padding-x};
     --#{$prefix}pagination-padding-y: #{$padding-y};
     @include rfs($font-size, --#{$prefix}pagination-font-size);
     --#{$prefix}pagination-border-radius: #{$border-radius};
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class PLACEHOLDERS:
    """

    Placeholders
    ============



    Use loading placeholders for your components or pages to indicate something may still be loading.






     On this page


    **On this page**


    ---




    * [About](#about)
    * [Example](#example)
    * [How it works](#how-it-works)
            + [Width](#width)
            + [Color](#color)
            + [Sizing](#sizing)
            + [Animation](#animation)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    About
    -----


    Placeholders can be used to enhance the experience of your application. They’re built only with HTML and CSS, meaning you don’t need any JavaScript to create them. You will, however, need some custom JavaScript to toggle their visibility. Their appearance, color, and sizing can be easily customized with our utility classes.


    Example
    -------


    In the example below, we take a typical card component and recreate it with placeholders applied to create a “loading card”. Size and proportions are the same between the two.




    Placeholder

    ##### Card title


    Some quick example text to build on the card title and make up the bulk of the card's content.


    [Go somewhere](#)



    Placeholder


















    ```
    <div class="card">
     <img src="..." class="card-img-top" alt="...">

     <div class="card-body">
     <h5 class="card-title">Card title</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     <a href="#" class="btn btn-primary">Go somewhere</a>
     </div>
    </div>

    <div class="card" aria-hidden="true">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title placeholder-glow">
     <span class="placeholder col-6"></span>
     </h5>
     <p class="card-text placeholder-glow">
     <span class="placeholder col-7"></span>
     <span class="placeholder col-4"></span>
     <span class="placeholder col-4"></span>
     <span class="placeholder col-6"></span>
     <span class="placeholder col-8"></span>
     </p>
     <a class="btn btn-primary disabled placeholder col-6" aria-disabled="true"></a>
     </div>
    </div>

    ```
    How it works
    ------------


    Create placeholders with the `.placeholder` class and a grid column class (e.g., `.col-6`) to set the `width`. They can replace the text inside an element or be added as a modifier class to an existing component.


    We apply additional styling to `.btn`s via `::before` to ensure the `height` is respected. You may extend this pattern for other situations as needed, or add a `&nbsp;` within the element to reflect the height when actual text is rendered in its place.










    html









    ```
    <p aria-hidden="true">
     <span class="placeholder col-6"></span>
    </p>

    <a class="btn btn-primary disabled placeholder col-4" aria-disabled="true"></a>
    ```


    The use of `aria-hidden="true"` only indicates that the element should be hidden to screen readers. The *loading* behavior of the placeholder depends on how authors will actually use the placeholder styles, how they plan to update things, etc. Some JavaScript code may be needed to *swap* the state of the placeholder and inform AT users of the update.

    ### Width


    You can change the `width` through grid column classes, width utilities, or inline styles.







    html









    ```
    <span class="placeholder col-6"></span>
    <span class="placeholder w-75"></span>
    <span class="placeholder" style="width: 25%;"></span>
    ```

    ### Color


    By default, the `placeholder` uses `currentColor`. This can be overridden with a custom color or utility class.













    html









    ```
    <span class="placeholder col-12"></span>

    <span class="placeholder col-12 bg-primary"></span>
    <span class="placeholder col-12 bg-secondary"></span>
    <span class="placeholder col-12 bg-success"></span>
    <span class="placeholder col-12 bg-danger"></span>
    <span class="placeholder col-12 bg-warning"></span>
    <span class="placeholder col-12 bg-info"></span>
    <span class="placeholder col-12 bg-light"></span>
    <span class="placeholder col-12 bg-dark"></span>
    ```

    ### Sizing


    The size of `.placeholder`s are based on the typographic style of the parent element. Customize them with sizing modifiers: `.placeholder-lg`, `.placeholder-sm`, or `.placeholder-xs`.








    html









    ```
    <span class="placeholder col-12 placeholder-lg"></span>
    <span class="placeholder col-12"></span>
    <span class="placeholder col-12 placeholder-sm"></span>
    <span class="placeholder col-12 placeholder-xs"></span>
    ```

    ### Animation


    Animate placeholders with `.placeholder-glow` or `.placeholder-wave` to better convey the perception of something being *actively* loaded.














    html









    ```
    <p class="placeholder-glow">
     <span class="placeholder col-12"></span>
    </p>

    <p class="placeholder-wave">
     <span class="placeholder col-12"></span>
    </p>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $placeholder-opacity-max: .5;
    $placeholder-opacity-min: .2;

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class POPOVERS:
    """

    Popovers
    ========



    Documentation and examples for adding Bootstrap popovers, like those found in iOS, to any element on your site.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Examples](#examples)
            + [Enable popovers](#enable-popovers)
            + [Live demo](#live-demo)
            + [Four directions](#four-directions)
            + [Custom `container`](#custom-container)
            + [Custom popovers](#custom-popovers)
            + [Dismiss on next click](#dismiss-on-next-click)
            + [Disabled elements](#disabled-elements)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
    * [Usage](#usage)
            + [Options](#options)
                    - [Using function with `popperConfig`](#using-function-with-popperconfig)
            + [Methods](#methods)
            + [Events](#events)






    Overview
    --------


    Things to know when using the popover plugin:


    * Popovers rely on the third party library [Popper](https://popper.js.org/) for positioning. You must include [popper.min.js](https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js) before `bootstrap.js`, or use one `bootstrap.bundle.min.js` which contains Popper.
    * Popovers require the [popover plugin](https://getbootstrap.com/docs/5.3/components/popovers/) as a dependency.
    * Popovers are opt-in for performance reasons, so **you must initialize them yourself**.
    * Zero-length `title` and `content` values will never show a popover.
    * Specify `container: 'body'` to avoid rendering problems in more complex components (like our input groups, button groups, etc).
    * Triggering popovers on hidden elements will not work.
    * Popovers for `.disabled` or `disabled` elements must be triggered on a wrapper element.
    * When triggered from anchors that wrap across multiple lines, popovers will be centered between the anchors’ overall width. Use `.text-nowrap` on your `<a>`s to avoid this behavior.
    * Popovers must be hidden before their corresponding elements have been removed from the DOM.
    * Popovers can be triggered thanks to an element inside a shadow DOM.



    By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the [sanitizer section in our JavaScript documentation](https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer) for more details.


    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Keep reading to see how popovers work with some examples.


    Examples
    --------


    ### Enable popovers


    As mentioned above, you must initialize popovers before they can be used. One way to initialize all popovers on a page would be to select them by their `data-bs-toggle` attribute, like so:



    ```
    const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
    const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))

    ```
    ### Live demo


    We use JavaScript similar to the snippet above to render the following live popover. Titles are set via `data-bs-title` and body content is set via `data-bs-content`.



    Feel free to use either `title` or `data-bs-title` in your HTML. When `title` is used, Popper will replace it automatically with `data-bs-title` when the element is rendered.


    Click to toggle popover

    html









    ```
    <button type="button" class="btn btn-lg btn-danger" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>
    ```

    ### Four directions


    Four options are available: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL. Set `data-bs-placement` to change the direction.




     Popover on top


     Popover on right


     Popover on bottom


     Popover on left


    html









    ```
    <button type="button" class="btn btn-secondary" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="top" data-bs-content="Top popover">
     Popover on top
    </button>
    <button type="button" class="btn btn-secondary" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="right" data-bs-content="Right popover">
     Popover on right
    </button>
    <button type="button" class="btn btn-secondary" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="bottom" data-bs-content="Bottom popover">
     Popover on bottom
    </button>
    <button type="button" class="btn btn-secondary" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="left" data-bs-content="Left popover">
     Popover on left
    </button>
    ```

    ### Custom `container`


    When you have some styles on a parent element that interfere with a popover, you’ll want to specify a custom `container` so that the popover’s HTML appears within that element instead. This is common in responsive tables, input groups, and the like.



    ```
    const popover = new bootstrap.Popover('.example-popover', {
     container: 'body'
    })

    ```
    Another situation where you’ll want to set an explicit custom `container` are popovers inside a [modal dialog](https://getbootstrap.com/docs/5.3/components/modal/), to make sure that the popover itself is appended to the modal. This is particularly important for popovers that contain interactive elements – modal dialogs will trap focus, so unless the popover is a child element of the modal, users won’t be able to focus or activate these interactive elements.



    ```
    const popover = new bootstrap.Popover('.example-popover', {
     container: '.modal-body'
    })

    ```
    ### Custom popovers


    Added in v5.2.0
    You can customize the appearance of popovers using [CSS variables](#variables). We set a custom class with `data-bs-custom-class="custom-popover"` to scope our custom appearance and use it to override some of the local CSS variables.




    [site/assets/scss/\_component-examples.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/scss/_component-examples.scss)






    ```
    .custom-popover {
     --bs-popover-max-width: 200px;
     --bs-popover-border-color: var(--bd-violet-bg);
     --bs-popover-header-bg: var(--bd-violet-bg);
     --bs-popover-header-color: var(--bs-white);
     --bs-popover-body-padding-x: 1rem;
     --bs-popover-body-padding-y: .5rem;
    }

    ```



     Custom popover


    html









    ```
    <button type="button" class="btn btn-secondary"
     data-bs-toggle="popover" data-bs-placement="right"
     data-bs-custom-class="custom-popover"
     data-bs-title="Custom popover"
     data-bs-content="This popover is themed via CSS variables.">
     Custom popover
    </button>
    ```

    ### Dismiss on next click


    Use the `focus` trigger to dismiss popovers on the user’s next click of an element other than the toggle element.



    **Dismissing on next click requires specific HTML for proper cross-browser and cross-platform behavior.** You can only use `<a>` elements, not `<button>`s, and you must include a [`tabindex`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Global_attributes/tabindex).


    Dismissible popover

    html









    ```
    <a tabindex="0" class="btn btn-lg btn-danger" role="button" data-bs-toggle="popover" data-bs-trigger="focus" data-bs-title="Dismissible popover" data-bs-content="And here's some amazing content. It's very engaging. Right?">Dismissible popover</a>
    ```


    ```
    const popover = new bootstrap.Popover('.popover-dismiss', {
     trigger: 'focus'
    })

    ```
    ### Disabled elements


    Elements with the `disabled` attribute aren’t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover from a wrapper `<div>` or `<span>`, ideally made keyboard-focusable using `tabindex="0"`.


    For disabled popover triggers, you may also prefer `data-bs-trigger="hover focus"` so that the popover appears as immediate visual feedback to your users as they may not expect to *click* on a disabled element.




    Disabled button


    html









    ```
    <span class="d-inline-block" tabindex="0" data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="Disabled popover">
     <button class="btn btn-primary" type="button" disabled>Disabled button</button>
    </span>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, popovers now use local CSS variables on `.popover` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_popover.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_popover.scss)






    ```
    --#{$prefix}popover-zindex: #{$zindex-popover};
    --#{$prefix}popover-max-width: #{$popover-max-width};
    @include rfs($popover-font-size, --#{$prefix}popover-font-size);
    --#{$prefix}popover-bg: #{$popover-bg};
    --#{$prefix}popover-border-width: #{$popover-border-width};
    --#{$prefix}popover-border-color: #{$popover-border-color};
    --#{$prefix}popover-border-radius: #{$popover-border-radius};
    --#{$prefix}popover-inner-border-radius: #{$popover-inner-border-radius};
    --#{$prefix}popover-box-shadow: #{$popover-box-shadow};
    --#{$prefix}popover-header-padding-x: #{$popover-header-padding-x};
    --#{$prefix}popover-header-padding-y: #{$popover-header-padding-y};
    @include rfs($popover-header-font-size, --#{$prefix}popover-header-font-size);
    --#{$prefix}popover-header-color: #{$popover-header-color};
    --#{$prefix}popover-header-bg: #{$popover-header-bg};
    --#{$prefix}popover-body-padding-x: #{$popover-body-padding-x};
    --#{$prefix}popover-body-padding-y: #{$popover-body-padding-y};
    --#{$prefix}popover-body-color: #{$popover-body-color};
    --#{$prefix}popover-arrow-width: #{$popover-arrow-width};
    --#{$prefix}popover-arrow-height: #{$popover-arrow-height};
    --#{$prefix}popover-arrow-border: var(--#{$prefix}popover-border-color);
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $popover-font-size: $font-size-sm;
    $popover-bg: var(--#{$prefix}body-bg);
    $popover-max-width: 276px;
    $popover-border-width: var(--#{$prefix}border-width);
    $popover-border-color: var(--#{$prefix}border-color-translucent);
    $popover-border-radius: var(--#{$prefix}border-radius-lg);
    $popover-inner-border-radius: calc(#{$popover-border-radius} - #{$popover-border-width}); // stylelint-disable-line function-disallowed-list
    $popover-box-shadow: $box-shadow;

    $popover-header-font-size: $font-size-base;
    $popover-header-bg: var(--#{$prefix}secondary-bg);
    $popover-header-color: $headings-color;
    $popover-header-padding-y: .5rem;
    $popover-header-padding-x: $spacer;

    $popover-body-color: var(--#{$prefix}body-color);
    $popover-body-padding-y: $spacer;
    $popover-body-padding-x: $spacer;

    $popover-arrow-width: 1rem;
    $popover-arrow-height: .5rem;

    ```

    Usage
    -----


    Enable popovers via JavaScript:



    ```
    const exampleEl = document.getElementById('example')
    const popover = new bootstrap.Popover(exampleEl, options)

    ```

    **Keep popovers accessible to keyboard and assistive technology users** by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding `tabindex="0"`, this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce popovers in this situation. Additionally, do not rely solely on `hover` as the trigger for your popovers as this will make them impossible to trigger for keyboard users.


    Avoid adding an excessive amount of content in popovers with the `html` option. Once popovers are displayed, their content is tied to the trigger element with the `aria-describedby` attribute, causing all of the popover’s content to be announced to assistive technology users as one long, uninterrupted stream.


    Popovers do not manage keyboard focus order, and their placement can be random in the DOM, so be careful when adding interactive elements (like forms or links), as it may lead to an illogical focus order or make the popover content itself completely unreachable for keyboard users. In cases where you must use these elements, consider using a modal dialog instead.



    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.



    Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` options cannot be supplied using data attributes.



    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `allowList` | object | [Default value](https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer) | Object which contains allowed attributes and tags. |
    | `animation` | boolean | `true` | Apply a CSS fade transition to the popover. |
    | `boundary` | string, element | `'clippingParents'` | Overflow constraint boundary of the popover (applies only to Popper’s preventOverflow modifier). By default, it’s `'clippingParents'` and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s [detectOverflow docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/utils/detect-overflow/#boundary). |
    | `container` | string, element, false | `false` | Appends the popover to a specific element. Example: `container: 'body'`. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element - which will prevent the popover from floating away from the triggering element during a window resize. |
    | `content` | string, element, function | `''` | The popover’s text content. If a function is given, it will be called with its `this` reference set to the element that the popover is attached to. |
    | `customClass` | string, function | `''` | Add classes to the popover when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces: `'class-1 class-2'`. You can also pass a function that should return a single string containing additional class names. |
    | `delay` | number, object | `0` | Delay showing and hiding the popover (ms)—doesn’t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: `delay: { "show": 500, "hide": 100 }`. |
    | `fallbackPlacements` | string, array | `['top', 'right', 'bottom', 'left']` | Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper’s [behavior docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/flip/#fallbackplacements). |
    | `html` | boolean | `false` | Allow HTML in the popover. If true, HTML tags in the popover’s `title` will be rendered in the popover. If false, `innerText` property will be used to insert content into the DOM. Use text if you’re worried about XSS attacks. |
    | `offset` | number, string, function | `[0, 0]` | Offset of the popover relative to its target. You can pass a string in data attributes with comma separated values like: `data-bs-offset="10,20"`. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: [skidding](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#skidding-1), [distance](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#distance-1). For more information refer to Popper’s [offset docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#options). |
    | `placement` | string, function | `'top'` | How to position the popover: auto, top, bottom, left, right. When `auto` is specified, it will dynamically reorient the popover. When a function is used to determine the placement, it is called with the popover DOM node as its first argument and the triggering element DOM node as its second. The `this` context is set to the popover instance. |
    | `popperConfig` | null, object, function | `null` | To change Bootstrap’s default Popper config, see [Popper’s configuration](https://popper.js.orghttps://getbootstrap.com/docs/v2/constructors/#options). When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper. |
    | `sanitize` | boolean | `true` | Enable or disable the sanitization. If activated `'template'`, `'content'` and `'title'` options will be sanitized. |
    | `sanitizeFn` | null, function | `null` | Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization. |
    | `selector` | string, false | `false` | If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to also apply popovers to dynamically added DOM elements (`jQuery.on` support). See [this issue](https://github.com/twbs/bootstrap/issues/4215) and [an informative example](https://codepen.io/Johann-S/pen/djJYPb). **Note**: `title` attribute must not be used as a selector. |
    | `template` | string | `'<div class="popover" role="popover"><div class="popover-arrow"></div><div class="popover-inner"></div></div>'` | Base HTML to use when creating the popover. The popover’s `title` will be injected into the `.popover-inner`. `.popover-arrow` will become the popover’s arrow. The outermost wrapper element should have the `.popover` class and `role="popover"`. |
    | `title` | string, element, function | `''` | The popover title. If a function is given, it will be called with its `this` reference set to the element that the popover is attached to. |
    | `trigger` | string | `'hover focus'` | How popover is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. `'manual'` indicates that the popover will be triggered programmatically via the `.popover('show')`, `.popover('hide')` and `.popover('toggle')` methods; this value cannot be combined with any other trigger. `'hover'` on its own will result in popovers that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present. |



    #### Data attributes for individual popovers


    Options for individual popovers can alternatively be specified through the use of data attributes, as explained above.



    #### Using function with `popperConfig`



    ```
    const popover = new bootstrap.Popover(element, {
     popperConfig(defaultBsPopperConfig) {
     // const newPopperConfig = {...}
     // use defaultBsPopperConfig if needed...
     // return newPopperConfig
     }
    })

    ```
    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)



    | Method | Description |
    | --- | --- |
    | `disable` | Removes the ability for an element’s popover to be shown. The popover will only be able to be shown if it is re-enabled. |
    | `dispose` | Hides and destroys an element’s popover (Removes stored data on the DOM element). Popovers that use delegation (which are created using [the `selector` option](#options)) cannot be individually destroyed on descendant trigger elements. |
    | `enable` | Gives an element’s popover the ability to be shown. **Popovers are enabled by default.** |
    | `getInstance` | *Static* method which allows you to get the popover instance associated with a DOM element. |
    | `getOrCreateInstance` | *Static* method which allows you to get the popover instance associated with a DOM element, or create a new one in case it wasn’t initialized. |
    | `hide` | Hides an element’s popover. **Returns to the caller before the popover has actually been hidden** (i.e. before the `hidden.bs.popover` event occurs). This is considered a “manual” triggering of the popover. |
    | `setContent` | Gives a way to change the popover’s content after its initialization. |
    | `show` | Reveals an element’s popover. **Returns to the caller before the popover has actually been shown** (i.e. before the `shown.bs.popover` event occurs). This is considered a “manual” triggering of the popover. Popovers whose title and content are both zero-length are never displayed. |
    | `toggle` | Toggles an element’s popover. **Returns to the caller before the popover has actually been shown or hidden** (i.e. before the `shown.bs.popover` or `hidden.bs.popover` event occurs). This is considered a “manual” triggering of the popover. |
    | `toggleEnabled` | Toggles the ability for an element’s popover to be shown or hidden. |
    | `update` | Updates the position of an element’s popover. |



    ```
    // getOrCreateInstance example
    const popover = bootstrap.Popover.getOrCreateInstance('#example') // Returns a Bootstrap popover instance

    // setContent example
    myPopover.setContent({
     '.popover-header': 'another title',
     '.popover-body': 'another content'
    })

    ```

    The `setContent` method accepts an `object` argument, where each property-key is a valid `string` selector within the popover template, and each related property-value can be `string` | `element` | `function` | `null`

    ### Events




    | Event | Description |
    | --- | --- |
    | `hide.bs.popover` | This event is fired immediately when the `hide` instance method has been called. |
    | `hidden.bs.popover` | This event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete). |
    | `inserted.bs.popover` | This event is fired after the `show.bs.popover` event when the popover template has been added to the DOM. |
    | `show.bs.popover` | This event fires immediately when the `show` instance method is called. |
    | `shown.bs.popover` | This event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete). |



    ```
    const myPopoverTrigger = document.getElementById('myPopover')
    myPopoverTrigger.addEventListener('hidden.bs.popover', () => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class PROGRESS:
    """

    Progress
    ========



    Documentation and examples for using Bootstrap custom progress bars featuring support for stacked bars, animated backgrounds, and text labels.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Bar sizing](#bar-sizing)
            + [Width](#width)
            + [Height](#height)
    * [Labels](#labels)
    * [Backgrounds](#backgrounds)
    * [Multiple bars](#multiple-bars)
    * [Striped](#striped)
    * [Animated stripes](#animated-stripes)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Keyframes](#keyframes)







    **New markup in v5.3.0 —** We’ve deprecated the previous HTML structure for progress bars and replaced it with a more accessible one. The previous structure will continue to work until v6. [See what’s changed in our migration guide.](https://getbootstrap.com/docs/5.3/migration/#improved-markup-for-progress-bars)

    How it works
    ------------


    Progress components are built with two HTML elements, some CSS to set the width, and a few attributes. We don’t use [the HTML5 `<progress>` element](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/HTML/Element/progress), ensuring you can stack progress bars, animate them, and place text labels over them.


    * We use the `.progress` as a wrapper to indicate the max value of the progress bar.
    * The `.progress` wrapper also requires a `role="progressbar"` and `aria` attributes to make it accessible, including an accessible name (using `aria-label`, `aria-labelledby`, or similar).
    * We use the inner `.progress-bar` purely for the visual bar and label.
    * The `.progress-bar` requires an inline style, utility class, or custom CSS to set its width.
    * We provide a special `.progress-stacked` class to create multiple/stacked progress bars.


    Put that all together, and you have the following examples.



















    html









    ```
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 0%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 25%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 50%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 75%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 100%"></div>
    </div>
    ```

    Bar sizing
    ----------


    ### Width


    Bootstrap provides a handful of [utilities for setting width](https://getbootstrap.com/docs/5.3/utilities/sizing/). Depending on your needs, these may help with quickly configuring the width of the `.progress-bar`.







    html









    ```
    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar w-75"></div>
    </div>
    ```

    ### Height


    You only set a `height` value on the `.progress` container, so if you change that value, the inner `.progress-bar` will automatically resize accordingly.










    html









    ```
    <div class="progress" role="progressbar" aria-label="Example 1px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 1px">
     <div class="progress-bar" style="width: 25%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Example 20px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 20px">
     <div class="progress-bar" style="width: 25%"></div>
    </div>
    ```

    Labels
    ------


    Add labels to your progress bars by placing text within the `.progress-bar`.




    25%


    html









    ```
    <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar" style="width: 25%">25%</div>
    </div>
    ```

    Note that by default, the content inside the `.progress-bar` is controlled with `overflow: hidden`, so it doesn’t bleed out of the bar. If your progress bar is shorter than its label, the content will be capped and may become unreadable. To change this behavior, you can use `.overflow-visible` from the [overflow utilities](https://getbootstrap.com/docs/5.3/utilities/overflow/), but make sure to also define an explicit [text color](https://getbootstrap.com/docs/5.3/utilities/colors/#colors) so the text remains readable. Be aware though that currently this approach does not take into account [color modes](https://getbootstrap.com/docs/5.3/customize/color-modes/).




    Long label text for the progress bar, set to a dark color


    html









    ```
    <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar overflow-visible text-dark" style="width: 10%">Long label text for the progress bar, set to a dark color</div>
    </div>
    ```

    Backgrounds
    -----------


    Use background utility classes to change the appearance of individual progress bars.
















    html









    ```
    <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-success" style="width: 25%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Info example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-info" style="width: 50%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Warning example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-warning" style="width: 75%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Danger example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-danger" style="width: 100%"></div>
    </div>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    If you’re adding labels to progress bars with a custom background color, make sure to also set an appropriate [text color](https://getbootstrap.com/docs/5.3/utilities/colors/#colors), so the labels remain readable and have sufficient contrast.




    25%


    50%


    75%


    100%


    html









    ```
    <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-success" style="width: 25%">25%</div>
    </div>
    <div class="progress" role="progressbar" aria-label="Info example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-info text-dark" style="width: 50%">50%</div>
    </div>
    <div class="progress" role="progressbar" aria-label="Warning example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-warning text-dark" style="width: 75%">75%</div>
    </div>
    <div class="progress" role="progressbar" aria-label="Danger example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar bg-danger" style="width: 100%">100%</div>
    </div>
    ```

    Alternatively, you can use the new combined [color and background](https://getbootstrap.com/docs/5.3/helpers/color-background/) helper classes.




    75%


    html









    ```
    <div class="progress" role="progressbar" aria-label="Warning example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar text-bg-warning" style="width: 75%">75%</div>
    </div>
    ```

    Multiple bars
    -------------


    You can include multiple progress components inside a container with `.progress-stacked` to create a single stacked progress bar. Note that in this case, the styling to set the visual width of the progress bar *must* be applied to the `.progress` elements, rather than the `.progress-bar`s.















    html









    ```
    <div class="progress-stacked">
     <div class="progress" role="progressbar" aria-label="Segment one" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100" style="width: 15%">
     <div class="progress-bar"></div>
     </div>
     <div class="progress" role="progressbar" aria-label="Segment two" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 30%">
     <div class="progress-bar bg-success"></div>
     </div>
     <div class="progress" role="progressbar" aria-label="Segment three" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%">
     <div class="progress-bar bg-info"></div>
     </div>
    </div>
    ```

    Striped
    -------


    Add `.progress-bar-striped` to any `.progress-bar` to apply a stripe via CSS gradient over the progress bar’s background color.



















    html









    ```
    <div class="progress" role="progressbar" aria-label="Default striped example" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped" style="width: 10%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Success striped example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped bg-success" style="width: 25%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Info striped example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped bg-info" style="width: 50%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Warning striped example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped bg-warning" style="width: 75%"></div>
    </div>
    <div class="progress" role="progressbar" aria-label="Danger striped example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped bg-danger" style="width: 100%"></div>
    </div>
    ```

    Animated stripes
    ----------------


    The striped gradient can also be animated. Add `.progress-bar-animated` to `.progress-bar` to animate the stripes right to left via CSS3 animations.







    html









    ```
    <div class="progress" role="progressbar" aria-label="Animated striped example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
     <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 75%"></div>
    </div>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, progress bars now use local CSS variables on `.progress` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_progress.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_progress.scss)






    ```
    --#{$prefix}progress-height: #{$progress-height};
    @include rfs($progress-font-size, --#{$prefix}progress-font-size);
    --#{$prefix}progress-bg: #{$progress-bg};
    --#{$prefix}progress-border-radius: #{$progress-border-radius};
    --#{$prefix}progress-box-shadow: #{$progress-box-shadow};
    --#{$prefix}progress-bar-color: #{$progress-bar-color};
    --#{$prefix}progress-bar-bg: #{$progress-bar-bg};
    --#{$prefix}progress-bar-transition: #{$progress-bar-transition};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $progress-height: 1rem;
    $progress-font-size: $font-size-base \* .75;
    $progress-bg: var(--#{$prefix}secondary-bg);
    $progress-border-radius: var(--#{$prefix}border-radius);
    $progress-box-shadow: var(--#{$prefix}box-shadow-inset);
    $progress-bar-color: $white;
    $progress-bar-bg: $primary;
    $progress-bar-animation-timing: 1s linear infinite;
    $progress-bar-transition: width .6s ease;

    ```

    ### Keyframes


    Used for creating the CSS animations for `.progress-bar-animated`. Included in `scss/_progress-bar.scss`.




    [scss/\_progress.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_progress.scss)






    ```
    @if $enable-transitions {
     @keyframes progress-bar-stripes {
     0% { background-position-x: $progress-height; }
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SCROLLSPY:
    """

    Scrollspy
    =========



    Automatically update Bootstrap navigation or list group components based on scroll position to indicate which link is currently active in the viewport.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Examples](#examples)
            + [Navbar](#navbar)
            + [Nested nav](#nested-nav)
            + [List group](#list-group)
            + [Simple anchors](#simple-anchors)
    * [Non-visible elements](#non-visible-elements)
    * [Usage](#usage)
            + [Via data attributes](#via-data-attributes)
            + [Via JavaScript](#via-javascript)
            + [Options](#options)
            + [Methods](#methods)
            + [Events](#events)






    How it works
    ------------


    Scrollspy toggles the `.active` class on anchor (`<a>`) elements when the element with the `id` referenced by the anchor’s `href` is scrolled into view. Scrollspy is best used in conjunction with a Bootstrap [nav component](https://getbootstrap.com/docs/5.3/components/navs-tabs/) or [list group](https://getbootstrap.com/docs/5.3/components/list-group/), but it will also work with any anchor elements in the current page. Here’s how it works.


    * To start, scrollspy requires two things: a navigation, list group, or a simple set of links, plus a scrollable container. The scrollable container can be the `<body>` or a custom element with a set `height` and `overflow-y: scroll`.
    * On the scrollable container, add `data-bs-spy="scroll"` and `data-bs-target="#navId"` where `navId` is the unique `id` of the associated navigation. If there is no focusable element inside the element, be sure to also include a `tabindex="0"` to ensure keyboard access.
    * As you scroll the “spied” container, an `.active` class is added and removed from anchor links within the associated navigation. Links must have resolvable `id` targets, otherwise they’re ignored. For example, a `<a href="#home">home</a>` must correspond to something in the DOM like `<div id="home"></div>`
    * Target elements that are not visible will be ignored. See the [Non-visible elements](#non-visible-elements) section below.


    Examples
    --------


    ### Navbar


    Scroll the area below the navbar and watch the active class change. Open the dropdown menu and watch the dropdown items be highlighted as well.




    [Navbar](#)
    * [First](#scrollspyHeading1)
    * [Second](#scrollspyHeading2)
    * [Dropdown](#)
            + [Third](#scrollspyHeading3)
            + [Fourth](#scrollspyHeading4)
            + ---
            + [Fifth](#scrollspyHeading5)




    #### First heading


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Second heading


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Third heading


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Fourth heading


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Fifth heading


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.





    ```
    <nav id="navbar-example2" class="navbar bg-body-tertiary px-3 mb-3">
     <a class="navbar-brand" href="#">Navbar</a>
     <ul class="nav nav-pills">
     <li class="nav-item">
     <a class="nav-link" href="#scrollspyHeading1">First</a>
     </li>
     <li class="nav-item">
     <a class="nav-link" href="#scrollspyHeading2">Second</a>
     </li>
     <li class="nav-item dropdown">
     <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Dropdown</a>
     <ul class="dropdown-menu">
     <li><a class="dropdown-item" href="#scrollspyHeading3">Third</a></li>
     <li><a class="dropdown-item" href="#scrollspyHeading4">Fourth</a></li>
     <li><hr class="dropdown-divider"></li>
     <li><a class="dropdown-item" href="#scrollspyHeading5">Fifth</a></li>
     </ul>
     </li>
     </ul>
    </nav>
    <div data-bs-spy="scroll" data-bs-target="#navbar-example2" data-bs-root-margin="0px 0px -40%" data-bs-smooth-scroll="true" class="scrollspy-example bg-body-tertiary p-3 rounded-2" tabindex="0">
     <h4 id="scrollspyHeading1">First heading</h4>
     <p>...</p>
     <h4 id="scrollspyHeading2">Second heading</h4>
     <p>...</p>
     <h4 id="scrollspyHeading3">Third heading</h4>
     <p>...</p>
     <h4 id="scrollspyHeading4">Fourth heading</h4>
     <p>...</p>
     <h4 id="scrollspyHeading5">Fifth heading</h4>
     <p>...</p>
    </div>

    ```
    ### Nested nav


    Scrollspy also works with nested `.nav`s. If a nested `.nav` is `.active`, its parents will also be `.active`. Scroll the area next to the navbar and watch the active class change.







    [Item 1](#item-1)

    [Item 1-1](#item-1-1)
    [Item 1-2](#item-1-2)

    [Item 2](#item-2)
    [Item 3](#item-3)

    [Item 3-1](#item-3-1)
    [Item 3-2](#item-3-2)







    #### Item 1


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    ##### Item 1-1


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    ##### Item 1-2


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    #### Item 2


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    #### Item 3


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    ##### Item 3-1


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.




    ##### Item 3-2


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    Keep in mind that the JavaScript plugin tries to pick the right element among all that may be visible. Multiple visible scrollspy targets at the same time may cause some issues.








    ```
    <div class="row">
     <div class="col-4">
     <nav id="navbar-example3" class="h-100 flex-column align-items-stretch pe-4 border-end">
     <nav class="nav nav-pills flex-column">
     <a class="nav-link" href="#item-1">Item 1</a>
     <nav class="nav nav-pills flex-column">
     <a class="nav-link ms-3 my-1" href="#item-1-1">Item 1-1</a>
     <a class="nav-link ms-3 my-1" href="#item-1-2">Item 1-2</a>
     </nav>
     <a class="nav-link" href="#item-2">Item 2</a>
     <a class="nav-link" href="#item-3">Item 3</a>
     <nav class="nav nav-pills flex-column">
     <a class="nav-link ms-3 my-1" href="#item-3-1">Item 3-1</a>
     <a class="nav-link ms-3 my-1" href="#item-3-2">Item 3-2</a>
     </nav>
     </nav>
     </nav>
     </div>

     <div class="col-8">
     <div data-bs-spy="scroll" data-bs-target="#navbar-example3" data-bs-smooth-scroll="true" class="scrollspy-example-2" tabindex="0">
     <div id="item-1">
     <h4>Item 1</h4>
     <p>...</p>
     </div>
     <div id="item-1-1">
     <h5>Item 1-1</h5>
     <p>...</p>
     </div>
     <div id="item-1-2">
     <h5>Item 1-2</h5>
     <p>...</p>
     </div>
     <div id="item-2">
     <h4>Item 2</h4>
     <p>...</p>
     </div>
     <div id="item-3">
     <h4>Item 3</h4>
     <p>...</p>
     </div>
     <div id="item-3-1">
     <h5>Item 3-1</h5>
     <p>...</p>
     </div>
     <div id="item-3-2">
     <h5>Item 3-2</h5>
     <p>...</p>
     </div>
     </div>
     </div>
    </div>

    ```
    ### List group


    Scrollspy also works with `.list-group`s. Scroll the area next to the list group and watch the active class change.






    [Item 1](#list-item-1)
    [Item 2](#list-item-2)
    [Item 3](#list-item-3)
    [Item 4](#list-item-4)




    #### Item 1


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 2


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 3


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 4


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.







    ```
    <div class="row">
     <div class="col-4">
     <div id="list-example" class="list-group">
     <a class="list-group-item list-group-item-action" href="#list-item-1">Item 1</a>
     <a class="list-group-item list-group-item-action" href="#list-item-2">Item 2</a>
     <a class="list-group-item list-group-item-action" href="#list-item-3">Item 3</a>
     <a class="list-group-item list-group-item-action" href="#list-item-4">Item 4</a>
     </div>
     </div>
     <div class="col-8">
     <div data-bs-spy="scroll" data-bs-target="#list-example" data-bs-smooth-scroll="true" class="scrollspy-example" tabindex="0">
     <h4 id="list-item-1">Item 1</h4>
     <p>...</p>
     <h4 id="list-item-2">Item 2</h4>
     <p>...</p>
     <h4 id="list-item-3">Item 3</h4>
     <p>...</p>
     <h4 id="list-item-4">Item 4</h4>
     <p>...</p>
     </div>
     </div>
    </div>

    ```
    ### Simple anchors


    Scrollspy is not limited to nav components and list groups, so it will work on any `<a>` anchor elements in the current document. Scroll the area and watch the `.active` class change.






    [Item 1](#simple-list-item-1)
    [Item 2](#simple-list-item-2)
    [Item 3](#simple-list-item-3)
    [Item 4](#simple-list-item-4)
    [Item 5](#simple-list-item-5)




    #### Item 1


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 2


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 3


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 4


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.


    #### Item 5


    This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.







    ```
    <div class="row">
     <div class="col-4">
     <div id="simple-list-example" class="d-flex flex-column gap-2 simple-list-example-scrollspy text-center">
     <a class="p-1 rounded" href="#simple-list-item-1">Item 1</a>
     <a class="p-1 rounded" href="#simple-list-item-2">Item 2</a>
     <a class="p-1 rounded" href="#simple-list-item-3">Item 3</a>
     <a class="p-1 rounded" href="#simple-list-item-4">Item 4</a>
     <a class="p-1 rounded" href="#simple-list-item-5">Item 5</a>
     </div>
     </div>
     <div class="col-8">
     <div data-bs-spy="scroll" data-bs-target="#simple-list-example" data-bs-offset="0" data-bs-smooth-scroll="true" class="scrollspy-example" tabindex="0">
     <h4 id="simple-list-item-1">Item 1</h4>
     <p>...</p>
     <h4 id="simple-list-item-2">Item 2</h4>
     <p>...</p>
     <h4 id="simple-list-item-3">Item 3</h4>
     <p>...</p>
     <h4 id="simple-list-item-4">Item 4</h4>
     <p>...</p>
     <h4 id="simple-list-item-5">Item 5</h4>
     <p>...</p>
     </div>
     </div>
    </div>

    ```
    Non-visible elements
    --------------------


    Target elements that aren’t visible will be ignored and their corresponding nav items won’t receive an `.active` class. Scrollspy instances initialized in a non-visible wrapper will ignore all target elements. Use the `refresh` method to check for observable elements once the wrapper becomes visible.



    ```
    document.querySelectorAll('#nav-tab>[data-bs-toggle="tab"]').forEach(el => {
     el.addEventListener('shown.bs.tab', () => {
     const target = el.getAttribute('data-bs-target')
     const scrollElem = document.querySelector(`${target} [data-bs-spy="scroll"]`)
     bootstrap.ScrollSpy.getOrCreateInstance(scrollElem).refresh()
     })
    })

    ```
    Usage
    -----


    ### Via data attributes


    To easily add scrollspy behavior to your topbar navigation, add `data-bs-spy="scroll"` to the element you want to spy on (most typically this would be the `<body>`). Then add the `data-bs-target` attribute with the `id` or class name of the parent element of any Bootstrap `.nav` component.



    ```
    <body data-bs-spy="scroll" data-bs-target="#navbar-example">
     ...
     <div id="navbar-example">
     <ul class="nav nav-tabs" role="tablist">
     ...
     </ul>
     </div>
     ...
    </body>

    ```
    ### Via JavaScript



    ```
    const scrollSpy = new bootstrap.ScrollSpy(document.body, {
     target: '#navbar-example'
    })

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `rootMargin` | string | `0px 0px -25%` | Intersection Observer [rootMargin](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/API/IntersectionObserver/rootMargin) valid units, when calculating scroll position. |
    | `smoothScroll` | boolean | `false` | Enables smooth scrolling when a user clicks on a link that refers to ScrollSpy observables. |
    | `target` | string, DOM element | `null` | Specifies element to apply Scrollspy plugin. |
    | `threshold` | array | `[0.1, 0.5, 1]` | `IntersectionObserver` [threshold](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/API/IntersectionObserver/IntersectionObserver#threshold) valid input, when calculating scroll position. |



    **Deprecated Options**


    Up until v5.1.3 we were using `offset` & `method` options, which are now deprecated and replaced by `rootMargin`.
    To keep backwards compatibility, we will continue to parse a given `offset` to `rootMargin`, but this feature will be removed in **v6**.



    ### Methods




    | Method | Description |
    | --- | --- |
    | `dispose` | Destroys an element’s scrollspy. (Removes stored data on the DOM element) |
    | `getInstance` | *Static* method to get the scrollspy instance associated with a DOM element. |
    | `getOrCreateInstance` | *Static* method to get the scrollspy instance associated with a DOM element, or to create a new one in case it wasn’t initialized. |
    | `refresh` | When adding or removing elements in the DOM, you’ll need to call the refresh method. |


    Here’s an example using the refresh method:



    ```
    const dataSpyList = document.querySelectorAll('[data-bs-spy="scroll"]')
    dataSpyList.forEach(dataSpyEl => {
     bootstrap.ScrollSpy.getInstance(dataSpyEl).refresh()
    })

    ```
    ### Events




    | Event | Description |
    | --- | --- |
    | `activate.bs.scrollspy` | This event fires on the scroll element whenever an anchor is activated by the scrollspy. |



    ```
    const firstScrollSpyEl = document.querySelector('[data-bs-spy="scroll"]')
    firstScrollSpyEl.addEventListener('activate.bs.scrollspy', () => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SPINNERS:
    """

    Spinners
    ========



    Indicate the loading state of a component or page with Bootstrap spinners, built entirely with HTML, CSS, and no JavaScript.






     On this page


    **On this page**


    ---




    * [About](#about)
    * [Border spinner](#border-spinner)
            + [Colors](#colors)
    * [Growing spinner](#growing-spinner)
    * [Alignment](#alignment)
            + [Margin](#margin)
            + [Placement](#placement)
                    - [Flex](#flex)
                    - [Floats](#floats)
                    - [Text align](#text-align)
    * [Size](#size)
    * [Buttons](#buttons)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Keyframes](#keyframes)






    About
    -----


    Bootstrap “spinners” can be used to show the loading state in your projects. They’re built only with HTML and CSS, meaning you don’t need any JavaScript to create them. You will, however, need some custom JavaScript to toggle their visibility. Their appearance, alignment, and sizing can be easily customized with our amazing utility classes.


    For accessibility purposes, each loader here includes `role="status"` and a nested `<span class="visually-hidden">Loading...</span>`.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Border spinner
    --------------


    Use the border spinners for a lightweight loading indicator.




    Loading...


    html









    ```
    <div class="spinner-border" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    ### Colors


    The border spinner uses `currentColor` for its `border-color`, meaning you can customize the color with [text color utilities](https://getbootstrap.com/docs/5.3/utilities/colors/). You can use any of our text color utilities on the standard spinner.




    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    html









    ```
    <div class="spinner-border text-primary" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-secondary" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-success" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-danger" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-warning" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-info" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-light" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-border text-dark" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```


    **Why not use `border-color` utilities?** Each border spinner specifies a `transparent` border for at least one side, so `.border-{color}` utilities would override that.

    Growing spinner
    ---------------


    If you don’t fancy a border spinner, switch to the grow spinner. While it doesn’t technically spin, it does repeatedly grow!




    Loading...


    html









    ```
    <div class="spinner-grow" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    Once again, this spinner is built with `currentColor`, so you can easily change its appearance with [text color utilities](https://getbootstrap.com/docs/5.3/utilities/colors/). Here it is in blue, along with the supported variants.




    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    Loading...


    html









    ```
    <div class="spinner-grow text-primary" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-secondary" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-success" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-danger" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-warning" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-info" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-light" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow text-dark" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    Alignment
    ---------


    Spinners in Bootstrap are built with `rem`s, `currentColor`, and `display: inline-flex`. This means they can easily be resized, recolored, and quickly aligned.


    ### Margin


    Use [margin utilities](https://getbootstrap.com/docs/5.3/utilities/spacing/) like `.m-5` for easy spacing.




    Loading...


    html









    ```
    <div class="spinner-border m-5" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    ### Placement


    Use [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/), [float utilities](https://getbootstrap.com/docs/5.3/utilities/float/), or [text alignment](https://getbootstrap.com/docs/5.3/utilities/text/) utilities to place spinners exactly where you need them in any situation.


    #### Flex





    Loading...



    html









    ```
    <div class="d-flex justify-content-center">
     <div class="spinner-border" role="status">
     <span class="visually-hidden">Loading...</span>
     </div>
    </div>
    ```



    **Loading...**



    html









    ```
    <div class="d-flex align-items-center">
     <strong role="status">Loading...</strong>
     <div class="spinner-border ms-auto" aria-hidden="true"></div>
    </div>
    ```

    #### Floats





    Loading...



    html









    ```
    <div class="clearfix">
     <div class="spinner-border float-end" role="status">
     <span class="visually-hidden">Loading...</span>
     </div>
    </div>
    ```

    #### Text align





    Loading...



    html









    ```
    <div class="text-center">
     <div class="spinner-border" role="status">
     <span class="visually-hidden">Loading...</span>
     </div>
    </div>
    ```

    Size
    ----


    Add `.spinner-border-sm` and `.spinner-grow-sm` to make a smaller spinner that can quickly be used within other components.




    Loading...


    Loading...


    html









    ```
    <div class="spinner-border spinner-border-sm" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow spinner-grow-sm" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    Or, use custom CSS or inline styles to change the dimensions as needed.




    Loading...


    Loading...


    html









    ```
    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
     <span class="visually-hidden">Loading...</span>
    </div>
    ```

    Buttons
    -------


    Use spinners within buttons to indicate an action is currently processing or taking place. You may also swap the text out of the spinner element and utilize button text as needed.





    Loading...



    Loading...


    html









    ```
    <button class="btn btn-primary" type="button" disabled>
     <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
     <span class="visually-hidden" role="status">Loading...</span>
    </button>
    <button class="btn btn-primary" type="button" disabled>
     <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
     <span role="status">Loading...</span>
    </button>
    ```




    Loading...



    Loading...


    html









    ```
    <button class="btn btn-primary" type="button" disabled>
     <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
     <span class="visually-hidden" role="status">Loading...</span>
    </button>
    <button class="btn btn-primary" type="button" disabled>
     <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
     <span role="status">Loading...</span>
    </button>
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, spinners now use local CSS variables on `.spinner-border` and `.spinner-grow` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.


    Border spinner variables:




    [scss/\_spinners.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_spinners.scss)






    ```
    --#{$prefix}spinner-width: #{$spinner-width};
    --#{$prefix}spinner-height: #{$spinner-height};
    --#{$prefix}spinner-vertical-align: #{$spinner-vertical-align};
    --#{$prefix}spinner-border-width: #{$spinner-border-width};
    --#{$prefix}spinner-animation-speed: #{$spinner-animation-speed};
    --#{$prefix}spinner-animation-name: spinner-border;
    ```

    Growing spinner variables:




    [scss/\_spinners.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_spinners.scss)






    ```
    --#{$prefix}spinner-width: #{$spinner-width};
    --#{$prefix}spinner-height: #{$spinner-height};
    --#{$prefix}spinner-vertical-align: #{$spinner-vertical-align};
    --#{$prefix}spinner-animation-speed: #{$spinner-animation-speed};
    --#{$prefix}spinner-animation-name: spinner-grow;
    ```

    For both spinners, small spinner modifier classes are used to update the values of these CSS variables as needed. For example, the `.spinner-border-sm` class does the following:




    [scss/\_spinners.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_spinners.scss)






    ```
    --#{$prefix}spinner-width: #{$spinner-width-sm};
    --#{$prefix}spinner-height: #{$spinner-height-sm};
    --#{$prefix}spinner-border-width: #{$spinner-border-width-sm};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $spinner-width: 2rem;
    $spinner-height: $spinner-width;
    $spinner-vertical-align: -.125em;
    $spinner-border-width: .25em;
    $spinner-animation-speed: .75s;

    $spinner-width-sm: 1rem;
    $spinner-height-sm: $spinner-width-sm;
    $spinner-border-width-sm: .2em;

    ```

    ### Keyframes


    Used for creating the CSS animations for our spinners. Included in `scss/_spinners.scss`.




    [scss/\_spinners.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_spinners.scss)






    ```
    @keyframes spinner-border {
     to { transform: rotate(360deg) #{"/\* rtl:ignore \*/"}; }
    }

    ```



    [scss/\_spinners.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_spinners.scss)






    ```
    @keyframes spinner-grow {
     0% {
     transform: scale(0);
     }
     50% {
     opacity: 1;
     transform: none;
     }
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TOASTS:
    """

    Toasts
    ======



    Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Examples](#examples)
            + [Basic](#basic)
            + [Live example](#live-example)
            + [Translucent](#translucent)
            + [Stacking](#stacking)
            + [Custom content](#custom-content)
            + [Color schemes](#color-schemes)
    * [Placement](#placement)
    * [Accessibility](#accessibility)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
    * [Usage](#usage)
            + [Triggers](#triggers)
            + [Options](#options)
            + [Methods](#methods)
            + [Events](#events)






    Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.


    Overview
    --------


    Things to know when using the toast plugin:


    * Toasts are opt-in for performance reasons, so **you must initialize them yourself**.
    * Toasts will automatically hide if you do not specify `autohide: false`.



    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Examples
    --------


    ### Basic


    To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use `display: flex`, allowing easy alignment of content thanks to our margin and flexbox utilities.


    Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button.






    **Bootstrap**
    11 mins ago



     Hello, world! This is a toast message.



    html









    ```
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small>11 mins ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
    </div>
    ```


    Previously, our scripts dynamically added the `.hide` class to completely hide a toast (with `display:none`, rather than just with `opacity:0`). This is now not necessary anymore. However, for backwards compatibility, our script will continue to toggle the class (even though there is no practical need for it) until the next major version.

    ### Live example


    Click the button below to show a toast (positioned with our utilities in the lower right corner) that has been hidden by default.






    **Bootstrap**
    11 mins ago



     Hello, world! This is a toast message.




    Show live toast


    ```
    <button type="button" class="btn btn-primary" id="liveToastBtn">Show live toast</button>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
     <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small>11 mins ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
     </div>
    </div>

    ```
    We use the following JavaScript to trigger our live toast demo:




    [site/assets/js/snippets.js](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/js/snippets.js)






    ```
    const toastTrigger = document.getElementById('liveToastBtn')
    const toastLiveExample = document.getElementById('liveToast')

    if (toastTrigger) {
     const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample)
     toastTrigger.addEventListener('click', () => {
     toastBootstrap.show()
     })
    }
    ```

    ### Translucent


    Toasts are slightly translucent to blend in with what’s below them.






    **Bootstrap**
    11 mins ago



     Hello, world! This is a toast message.



    html









    ```
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small class="text-body-secondary">11 mins ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
    </div>
    ```

    ### Stacking


    You can stack toasts by wrapping them in a toast container, which will vertically add some spacing.







    **Bootstrap**
    just now



     See? Just like this.





    **Bootstrap**
    2 seconds ago



     Heads up, toasts will stack automatically




    html









    ```
    <div class="toast-container position-static">
     <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small class="text-body-secondary">just now</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     See? Just like this.
     </div>
     </div>

     <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small class="text-body-secondary">2 seconds ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Heads up, toasts will stack automatically
     </div>
     </div>
    </div>
    ```

    ### Custom content


    Customize your toasts by removing sub-components, tweaking them with [utilities](https://getbootstrap.com/docs/5.3/utilities/api/), or by adding your own markup. Here we’ve created a simpler toast by removing the default `.toast-header`, adding a custom hide icon from [Bootstrap Icons](https://icons.getbootstrap.com/), and using some [flexbox utilities](https://getbootstrap.com/docs/5.3/utilities/flex/) to adjust the layout.






     Hello, world! This is a toast message.





    html









    ```
    <div class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="d-flex">
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
     <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
    </div>
    ```

    Alternatively, you can also add additional controls and components to toasts.





     Hello, world! This is a toast message.

    Take action
    Close




    html









    ```
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-body">
     Hello, world! This is a toast message.
     <div class="mt-2 pt-2 border-top">
     <button type="button" class="btn btn-primary btn-sm">Take action</button>
     <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="toast">Close</button>
     </div>
     </div>
    </div>
    ```

    ### Color schemes


    Building on the above example, you can create different toast color schemes with our [color](https://getbootstrap.com/docs/5.3/utilities/colors/) and [background](https://getbootstrap.com/docs/5.3/utilities/background/) utilities. Here we’ve added `.text-bg-primary` to the `.toast`, and then added `.btn-close-white` to our close button. For a crisp edge, we remove the default border with `.border-0`.






     Hello, world! This is a toast message.





    html









    ```
    <div class="toast align-items-center text-bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="d-flex">
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
     <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
    </div>
    ```

    Placement
    ---------


    Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle. If you’re only ever going to show one toast at a time, put the positioning styles right on the `.toast`.





    Toast placement

    Select a position...
    Top left
    Top center
    Top right
    Middle left
    Middle center
    Middle right
    Bottom left
    Bottom center
    Bottom right








    **Bootstrap**
    11 mins ago


     Hello, world! This is a toast message.





    html









    ```
    <form>
     <div class="mb-3">
     <label for="selectToastPlacement">Toast placement</label>
     <select class="form-select mt-2" id="selectToastPlacement">
     <option value="" selected>Select a position...</option>
     <option value="top-0 start-0">Top left</option>
     <option value="top-0 start-50 translate-middle-x">Top center</option>
     <option value="top-0 end-0">Top right</option>
     <option value="top-50 start-0 translate-middle-y">Middle left</option>
     <option value="top-50 start-50 translate-middle">Middle center</option>
     <option value="top-50 end-0 translate-middle-y">Middle right</option>
     <option value="bottom-0 start-0">Bottom left</option>
     <option value="bottom-0 start-50 translate-middle-x">Bottom center</option>
     <option value="bottom-0 end-0">Bottom right</option>
     </select>
     </div>
    </form>
    <div aria-live="polite" aria-atomic="true" class="bg-body-secondary position-relative bd-example-toasts rounded-3">
     <div class="toast-container p-3" id="toastPlacement">
     <div class="toast">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small>11 mins ago</small>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
     </div>
     </div>
    </div>
    ```

    For systems that generate more notifications, consider using a wrapping element so they can easily stack.













    **Bootstrap**
    just now



     See? Just like this.





    **Bootstrap**
    2 seconds ago



     Heads up, toasts will stack automatically





    html









    ```
    <div aria-live="polite" aria-atomic="true" class="position-relative">
     <!-- Position it: -->
     <!-- - `.toast-container` for spacing between toasts -->
     <!-- - `top-0` & `end-0` to position the toasts in the upper right corner -->
     <!-- - `.p-3` to prevent the toasts from sticking to the edge of the container -->
     <div class="toast-container top-0 end-0 p-3">

     <!-- Then put toasts within -->
     <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small class="text-body-secondary">just now</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     See? Just like this.
     </div>
     </div>

     <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small class="text-body-secondary">2 seconds ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Heads up, toasts will stack automatically
     </div>
     </div>
     </div>
    </div>
    ```

    You can also get fancy with flexbox utilities to align toasts horizontally and/or vertically.









    **Bootstrap**
    11 mins ago



     Hello, world! This is a toast message.




    html









    ```
    <!-- Flexbox container for aligning the toasts -->
    <div aria-live="polite" aria-atomic="true" class="d-flex justify-content-center align-items-center w-100">

     <!-- Then put toasts within -->
     <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small>11 mins ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
     </div>
    </div>
    ```

    Accessibility
    -------------


    Toasts are intended to be small interruptions to your visitors or users, so to help those with screen readers and similar assistive technologies, you should wrap your toasts in an [`aria-live` region](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/Accessibility/ARIA/ARIA_Live_Regions). Changes to live regions (such as injecting/updating a toast component) are automatically announced by screen readers without needing to move the user’s focus or otherwise interrupt the user. Additionally, include `aria-atomic="true"` to ensure that the entire toast is always announced as a single (atomic) unit, rather than just announcing what was changed (which could lead to problems if you only update part of the toast’s content, or if displaying the same toast content at a later point in time). If the information needed is important for the process, e.g. for a list of errors in a form, then use the [alert component](https://getbootstrap.com/docs/5.3/components/alerts/) instead of toast.


    Note that the live region needs to be present in the markup *before* the toast is generated or updated. If you dynamically generate both at the same time and inject them into the page, they will generally not be announced by assistive technologies.


    You also need to adapt the `role` and `aria-live` level depending on the content. If it’s an important message like an error, use `role="alert" aria-live="assertive"`, otherwise use `role="status" aria-live="polite"` attributes.


    As the content you’re displaying changes, be sure to update the [`delay` timeout](#options) so that users have enough time to read the toast.



    ```
    <div class="toast" role="alert" aria-live="polite" aria-atomic="true" data-bs-delay="10000">
     <div role="alert" aria-live="assertive" aria-atomic="true">...</div>
    </div>

    ```
    When using `autohide: false`, you must add a close button to allow users to dismiss the toast.






    **Bootstrap**
    11 mins ago



     Hello, world! This is a toast message.



    html









    ```
    <div role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-bs-autohide="false">
     <div class="toast-header">
     <img src="..." class="rounded me-2" alt="...">
     <strong class="me-auto">Bootstrap</strong>
     <small>11 mins ago</small>
     <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
     </div>
     <div class="toast-body">
     Hello, world! This is a toast message.
     </div>
    </div>
    ```

    While technically it’s possible to add focusable/actionable controls (such as additional buttons or links) in your toast, you should avoid doing this for autohiding toasts. Even if you give the toast a long [`delay` timeout](#options), keyboard and assistive technology users may find it difficult to reach the toast in time to take action (since toasts don’t receive focus when they are displayed). If you absolutely must have further controls, we recommend using a toast with `autohide: false`.


    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, toasts now use local CSS variables on `.toast` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_toasts.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_toasts.scss)






    ```
    --#{$prefix}toast-zindex: #{$zindex-toast};
    --#{$prefix}toast-padding-x: #{$toast-padding-x};
    --#{$prefix}toast-padding-y: #{$toast-padding-y};
    --#{$prefix}toast-spacing: #{$toast-spacing};
    --#{$prefix}toast-max-width: #{$toast-max-width};
    @include rfs($toast-font-size, --#{$prefix}toast-font-size);
    --#{$prefix}toast-color: #{$toast-color};
    --#{$prefix}toast-bg: #{$toast-background-color};
    --#{$prefix}toast-border-width: #{$toast-border-width};
    --#{$prefix}toast-border-color: #{$toast-border-color};
    --#{$prefix}toast-border-radius: #{$toast-border-radius};
    --#{$prefix}toast-box-shadow: #{$toast-box-shadow};
    --#{$prefix}toast-header-color: #{$toast-header-color};
    --#{$prefix}toast-header-bg: #{$toast-header-background-color};
    --#{$prefix}toast-header-border-color: #{$toast-header-border-color};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $toast-max-width: 350px;
    $toast-padding-x: .75rem;
    $toast-padding-y: .5rem;
    $toast-font-size: .875rem;
    $toast-color: null;
    $toast-background-color: rgba(var(--#{$prefix}body-bg-rgb), .85);
    $toast-border-width: var(--#{$prefix}border-width);
    $toast-border-color: var(--#{$prefix}border-color-translucent);
    $toast-border-radius: var(--#{$prefix}border-radius);
    $toast-box-shadow: var(--#{$prefix}box-shadow);
    $toast-spacing: $container-padding-x;

    $toast-header-color: var(--#{$prefix}secondary-color);
    $toast-header-background-color: rgba(var(--#{$prefix}body-bg-rgb), .85);
    $toast-header-border-color: $toast-border-color;

    ```

    Usage
    -----


    Initialize toasts via JavaScript:



    ```
    const toastElList = document.querySelectorAll('.toast')
    const toastList = [...toastElList].map(toastEl => new bootstrap.Toast(toastEl, option))

    ```
    ### Triggers


    Dismissal can be achieved with the `data-bs-dismiss` attribute on a button **within the toast** as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>

    ```
    or on a button **outside the toast** using the additional `data-bs-target` as demonstrated below:



    ```
    <button type="button" class="btn-close" data-bs-dismiss="toast" data-bs-target="#my-toast" aria-label="Close"></button>

    ```
    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.




    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `animation` | boolean | `true` | Apply a CSS fade transition to the toast. |
    | `autohide` | boolean | `true` | Automatically hide the toast after the delay. |
    | `delay` | number | `5000` | Delay in milliseconds before hiding the toast. |


    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)



    | Method | Description |
    | --- | --- |
    | `dispose` | Hides an element’s toast. Your toast will remain on the DOM but won’t show anymore. |
    | `getInstance` | *Static* method which allows you to get the toast instance associated with a DOM element.  For example: `const myToastEl = document.getElementById('myToastEl')` `const myToast = bootstrap.Toast.getInstance(myToastEl)` Returns a Bootstrap toast instance. |
    | `getOrCreateInstance` | *Static* method which allows you to get the toast instance associated with a DOM element, or create a new one, in case it wasn’t initialized. `const myToastEl = document.getElementById('myToastEl')` `const myToast = bootstrap.Toast.getOrCreateInstance(myToastEl)` Returns a Bootstrap toast instance. |
    | `hide` | Hides an element’s toast. **Returns to the caller before the toast has actually been hidden** (i.e. before the `hidden.bs.toast` event occurs). You have to manually call this method if you made `autohide` to `false`. |
    | `isShown` | Returns a boolean according to toast’s visibility state. |
    | `show` | Reveals an element’s toast. **Returns to the caller before the toast has actually been shown** (i.e. before the `shown.bs.toast` event occurs). You have to manually call this method, instead your toast won’t show. |


    ### Events




    | Event | Description |
    | --- | --- |
    | `hide.bs.toast` | This event is fired immediately when the `hide` instance method has been called. |
    | `hidden.bs.toast` | This event is fired when the toast has finished being hidden from the user. |
    | `show.bs.toast` | This event fires immediately when the `show` instance method is called. |
    | `shown.bs.toast` | This event is fired when the toast has been made visible to the user. |



    ```
    const myToastEl = document.getElementById('myToast')
    myToastEl.addEventListener('hidden.bs.toast', () => {
     // do something...
    })

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TOOLTIPS:
    """

    Tooltips
    ========



    Documentation and examples for adding custom Bootstrap tooltips with CSS and JavaScript using CSS3 for animations and data-bs-attributes for local title storage.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Examples](#examples)
            + [Enable tooltips](#enable-tooltips)
            + [Tooltips on links](#tooltips-on-links)
            + [Custom tooltips](#custom-tooltips)
            + [Directions](#directions)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
    * [Usage](#usage)
            + [Markup](#markup)
            + [Disabled elements](#disabled-elements)
            + [Options](#options)
                    - [Using function with `popperConfig`](#using-function-with-popperconfig)
            + [Methods](#methods)
            + [Events](#events)






    Overview
    --------


    Things to know when using the tooltip plugin:


    * Tooltips rely on the third party library [Popper](https://popper.js.org/) for positioning. You must include [popper.min.js](https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js) before `bootstrap.js`, or use one `bootstrap.bundle.min.js` which contains Popper.
    * Tooltips are opt-in for performance reasons, so **you must initialize them yourself**.
    * Tooltips with zero-length titles are never displayed.
    * Specify `container: 'body'` to avoid rendering problems in more complex components (like our input groups, button groups, etc).
    * Triggering tooltips on hidden elements will not work.
    * Tooltips for `.disabled` or `disabled` elements must be triggered on a wrapper element.
    * When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use `white-space: nowrap;` on your `<a>`s to avoid this behavior.
    * Tooltips must be hidden before their corresponding elements have been removed from the DOM.
    * Tooltips can be triggered thanks to an element inside a shadow DOM.


    Got all that? Great, let’s see how they work with some examples.



    By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the [sanitizer section in our JavaScript documentation](https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer) for more details.


    The animation effect of this component is dependent on the `prefers-reduced-motion` media query. See the [reduced motion section of our accessibility documentation](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#reduced-motion).

    Examples
    --------


    ### Enable tooltips


    As mentioned above, you must initialize tooltips before they can be used. One way to initialize all tooltips on a page would be to select them by their `data-bs-toggle` attribute, like so:



    ```
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    ```
    ### Tooltips on links


    Hover over the links below to see tooltips:



    Placeholder text to demonstrate some [inline links](#) with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of [real text](#). And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how [these tooltips on links](#) can work in practice, once you use them on [your own](#) site or project.



    html









    ```
    <p class="muted">Placeholder text to demonstrate some <a href="#" data-bs-toggle="tooltip" data-bs-title="Default tooltip">inline links</a> with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of <a href="#" data-bs-toggle="tooltip" data-bs-title="Another tooltip">real text</a>. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how <a href="#" data-bs-toggle="tooltip" data-bs-title="Another one here too">these tooltips on links</a> can work in practice, once you use them on <a href="#" data-bs-toggle="tooltip" data-bs-title="The last tip!">your own</a> site or project.</p>
    ```


    Feel free to use either `title` or `data-bs-title` in your HTML. When `title` is used, Popper will replace it automatically with `data-bs-title` when the element is rendered.

    ### Custom tooltips


    Added in v5.2.0
    You can customize the appearance of tooltips using [CSS variables](#variables). We set a custom class with `data-bs-custom-class="custom-tooltip"` to scope our custom appearance and use it to override a local CSS variable.




    [site/assets/scss/\_component-examples.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/site/assets/scss/_component-examples.scss)






    ```
    .custom-tooltip {
     --bs-tooltip-bg: var(--bd-violet-bg);
     --bs-tooltip-color: var(--bs-white);
    }

    ```



     Custom tooltip


    html









    ```
    <button type="button" class="btn btn-secondary"
     data-bs-toggle="tooltip" data-bs-placement="top"
     data-bs-custom-class="custom-tooltip"
     data-bs-title="This top tooltip is themed via CSS variables.">
     Custom tooltip
    </button>
    ```

    ### Directions


    Hover over the buttons below to see the four tooltips directions: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL.




    Tooltip on top
    Tooltip on right
    Tooltip on bottom
    Tooltip on left
    Tooltip with HTML



    ```
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Tooltip on top">
     Tooltip on top
    </button>
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Tooltip on right">
     Tooltip on right
    </button>
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Tooltip on bottom">
     Tooltip on bottom
    </button>
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-title="Tooltip on left">
     Tooltip on left
    </button>

    ```
    And with custom HTML added:



    ```
    <button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-html="true" data-bs-title="<em>Tooltip</em> <u>with</u> <b>HTML</b>">
     Tooltip with HTML
    </button>

    ```
    With an SVG:





    CSS
    ---


    ### Variables


    Added in v5.2.0
    As part of Bootstrap’s evolving CSS variables approach, tooltips now use local CSS variables on `.tooltip` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.




    [scss/\_tooltip.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_tooltip.scss)






    ```
    --#{$prefix}tooltip-zindex: #{$zindex-tooltip};
    --#{$prefix}tooltip-max-width: #{$tooltip-max-width};
    --#{$prefix}tooltip-padding-x: #{$tooltip-padding-x};
    --#{$prefix}tooltip-padding-y: #{$tooltip-padding-y};
    --#{$prefix}tooltip-margin: #{$tooltip-margin};
    @include rfs($tooltip-font-size, --#{$prefix}tooltip-font-size);
    --#{$prefix}tooltip-color: #{$tooltip-color};
    --#{$prefix}tooltip-bg: #{$tooltip-bg};
    --#{$prefix}tooltip-border-radius: #{$tooltip-border-radius};
    --#{$prefix}tooltip-opacity: #{$tooltip-opacity};
    --#{$prefix}tooltip-arrow-width: #{$tooltip-arrow-width};
    --#{$prefix}tooltip-arrow-height: #{$tooltip-arrow-height};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $tooltip-font-size: $font-size-sm;
    $tooltip-max-width: 200px;
    $tooltip-color: var(--#{$prefix}body-bg);
    $tooltip-bg: var(--#{$prefix}emphasis-color);
    $tooltip-border-radius: var(--#{$prefix}border-radius);
    $tooltip-opacity: .9;
    $tooltip-padding-y: $spacer \* .25;
    $tooltip-padding-x: $spacer \* .5;
    $tooltip-margin: null; // TODO: remove this in v6

    $tooltip-arrow-width: .8rem;
    $tooltip-arrow-height: .4rem;
    // fusv-disable
    $tooltip-arrow-color: null; // Deprecated in Bootstrap 5.2.0 for CSS variables
    // fusv-enable

    ```

    Usage
    -----


    The tooltip plugin generates content and markup on demand, and by default places tooltips after their trigger element. Trigger the tooltip via JavaScript:



    ```
    const exampleEl = document.getElementById('example')
    const tooltip = new bootstrap.Tooltip(exampleEl, options)

    ```

    Tooltips automatically attempt to change positions when a parent container has `overflow: auto` or `overflow: scroll`, but still keeps the original placement’s positioning. Set the [`boundary` option](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/flip/#boundary) (for the flip modifier using the `popperConfig` option) to any HTMLElement to override the default value, `'clippingParents'`, such as `document.body`:



    ```
    const tooltip = new bootstrap.Tooltip('#example', {
     boundary: document.body // or document.querySelector('#boundary')
    })

    ```


    ### Markup


    The required markup for a tooltip is only a `data` attribute and `title` on the HTML element you wish to have a tooltip. The generated markup of a tooltip is rather simple, though it does require a position (by default, set to `top` by the plugin).



    **Keep tooltips accessible to keyboard and assistive technology users** by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding `tabindex="0"`, this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce tooltips in this situation. Additionally, do not rely solely on `hover` as the trigger for your tooltips as this will make them impossible to trigger for keyboard users.


    ```
    <!-- HTML to write -->
    <a href="#" data-bs-toggle="tooltip" data-bs-title="Some tooltip text!">Hover over me</a>

    <!-- Generated markup by the plugin -->
    <div class="tooltip bs-tooltip-auto" role="tooltip">
     <div class="tooltip-arrow"></div>
     <div class="tooltip-inner">
     Some tooltip text!
     </div>
    </div>

    ```
    ### Disabled elements


    Elements with the `disabled` attribute aren’t interactive, meaning users cannot focus, hover, or click them to trigger a tooltip (or popover). As a workaround, you’ll want to trigger the tooltip from a wrapper `<div>` or `<span>`, ideally made keyboard-focusable using `tabindex="0"`.




    Disabled button


    html









    ```
    <span class="d-inline-block" tabindex="0" data-bs-toggle="tooltip" data-bs-title="Disabled tooltip">
     <button class="btn btn-primary" type="button" disabled>Disabled button</button>
    </span>
    ```

    ### Options


    As options can be passed via data attributes or JavaScript, you can append an option name to `data-bs-`, as in `data-bs-animation="{value}"`. Make sure to change the case type of the option name from “*camelCase*” to “*kebab-case*” when passing the options via data attributes. For example, use `data-bs-custom-class="beautifier"` instead of `data-bs-customClass="beautifier"`.


    As of Bootstrap 5.2.0, all components support an **experimental** reserved data attribute `data-bs-config` that can house simple component configuration as a JSON string. When an element has `data-bs-config='{"delay":0, "title":123}'` and `data-bs-title="456"` attributes, the final `title` value will be `456` and the separate data attributes will override values given on `data-bs-config`. In addition, existing data attributes are able to house JSON values like `data-bs-delay='{"show":0,"hide":150}'`.


    The final configuration object is the merged result of `data-bs-config`, `data-bs-`, and `js object` where the latest given key-value overrides the others.



    Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` options cannot be supplied using data attributes.



    | Name | Type | Default | Description |
    | --- | --- | --- | --- |
    | `allowList` | object | [Default value](https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer) | Object which contains allowed attributes and tags. |
    | `animation` | boolean | `true` | Apply a CSS fade transition to the tooltip. |
    | `boundary` | string, element | `'clippingParents'` | Overflow constraint boundary of the tooltip (applies only to Popper’s preventOverflow modifier). By default, it’s `'clippingParents'` and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper’s [detectOverflow docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/utils/detect-overflow/#boundary). |
    | `container` | string, element, false | `false` | Appends the tooltip to a specific element. Example: `container: 'body'`. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element - which will prevent the tooltip from floating away from the triggering element during a window resize. |
    | `customClass` | string, function | `''` | Add classes to the tooltip when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces: `'class-1 class-2'`. You can also pass a function that should return a single string containing additional class names. |
    | `delay` | number, object | `0` | Delay showing and hiding the tooltip (ms)—doesn’t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: `delay: { "show": 500, "hide": 100 }`. |
    | `fallbackPlacements` | array | `['top', 'right', 'bottom', 'left']` | Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper’s [behavior docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/flip/#fallbackplacements). |
    | `html` | boolean | `false` | Allow HTML in the tooltip. If true, HTML tags in the tooltip’s `title` will be rendered in the tooltip. If false, `innerText` property will be used to insert content into the DOM. Use text if you’re worried about XSS attacks. |
    | `offset` | array, string, function | `[0, 0]` | Offset of the tooltip relative to its target. You can pass a string in data attributes with comma separated values like: `data-bs-offset="10,20"`. When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: [skidding](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#skidding-1), [distance](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#distance-1). For more information refer to Popper’s [offset docs](https://popper.js.orghttps://getbootstrap.com/docs/v2/modifiers/offset/#options). |
    | `placement` | string, function | `'top'` | How to position the tooltip: auto, top, bottom, left, right. When `auto` is specified, it will dynamically reorient the tooltip. When a function is used to determine the placement, it is called with the tooltip DOM node as its first argument and the triggering element DOM node as its second. The `this` context is set to the tooltip instance. |
    | `popperConfig` | null, object, function | `null` | To change Bootstrap’s default Popper config, see [Popper’s configuration](https://popper.js.orghttps://getbootstrap.com/docs/v2/constructors/#options). When a function is used to create the Popper configuration, it’s called with an object that contains the Bootstrap’s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper. |
    | `sanitize` | boolean | `true` | Enable or disable the sanitization. If activated `'template'`, `'content'` and `'title'` options will be sanitized. |
    | `sanitizeFn` | null, function | `null` | Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization. |
    | `selector` | string, false | `false` | If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (`jQuery.on` support). See [this issue](https://github.com/twbs/bootstrap/issues/4215) and [an informative example](https://codepen.io/Johann-S/pen/djJYPb). **Note**: `title` attribute must not be used as a selector. |
    | `template` | string | `'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'` | Base HTML to use when creating the tooltip. The tooltip’s `title` will be injected into the `.tooltip-inner`. `.tooltip-arrow` will become the tooltip’s arrow. The outermost wrapper element should have the `.tooltip` class and `role="tooltip"`. |
    | `title` | string, element, function | `''` | The tooltip title. If a function is given, it will be called with its `this` reference set to the element that the popover is attached to. |
    | `trigger` | string | `'hover focus'` | How tooltip is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. `'manual'` indicates that the tooltip will be triggered programmatically via the `.tooltip('show')`, `.tooltip('hide')` and `.tooltip('toggle')` methods; this value cannot be combined with any other trigger. `'hover'` on its own will result in tooltips that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present. |



    #### Data attributes for individual tooltips


    Options for individual tooltips can alternatively be specified through the use of data attributes, as explained above.



    #### Using function with `popperConfig`



    ```
    const tooltip = new bootstrap.Tooltip(element, {
     popperConfig(defaultBsPopperConfig) {
     // const newPopperConfig = {...}
     // use defaultBsPopperConfig if needed...
     // return newPopperConfig
     }
    })

    ```
    ### Methods



    **All API methods are asynchronous and start a transition.** They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. [Learn more in our JavaScript docs.](https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions)



    | Method | Description |
    | --- | --- |
    | `disable` | Removes the ability for an element’s tooltip to be shown. The tooltip will only be able to be shown if it is re-enabled. |
    | `dispose` | Hides and destroys an element’s tooltip (Removes stored data on the DOM element). Tooltips that use delegation (which are created using [the `selector` option](#options)) cannot be individually destroyed on descendant trigger elements. |
    | `enable` | Gives an element’s tooltip the ability to be shown. **Tooltips are enabled by default.** |
    | `getInstance` | *Static* method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn’t initialized. |
    | `getOrCreateInstance` | *Static* method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn’t initialized. |
    | `hide` | Hides an element’s tooltip. **Returns to the caller before the tooltip has actually been hidden** (i.e. before the `hidden.bs.tooltip` event occurs). This is considered a “manual” triggering of the tooltip. |
    | `setContent` | Gives a way to change the tooltip’s content after its initialization. |
    | `show` | Reveals an element’s tooltip. **Returns to the caller before the tooltip has actually been shown** (i.e. before the `shown.bs.tooltip` event occurs). This is considered a “manual” triggering of the tooltip. Tooltips with zero-length titles are never displayed. |
    | `toggle` | Toggles an element’s tooltip. **Returns to the caller before the tooltip has actually been shown or hidden** (i.e. before the `shown.bs.tooltip` or `hidden.bs.tooltip` event occurs). This is considered a “manual” triggering of the tooltip. |
    | `toggleEnabled` | Toggles the ability for an element’s tooltip to be shown or hidden. |
    | `update` | Updates the position of an element’s tooltip. |



    ```
    const tooltip = bootstrap.Tooltip.getInstance('#example') // Returns a Bootstrap tooltip instance

    // setContent example
    tooltip.setContent({ '.tooltip-inner': 'another title' })

    ```

    The `setContent` method accepts an `object` argument, where each property-key is a valid `string` selector within the tooltip template, and each related property-value can be `string` | `element` | `function` | `null`

    ### Events




    | Event | Description |
    | --- | --- |
    | `hide.bs.tooltip` | This event is fired immediately when the `hide` instance method has been called. |
    | `hidden.bs.tooltip` | This event is fired when the tooltip has finished being hidden from the user (will wait for CSS transitions to complete). |
    | `inserted.bs.tooltip` | This event is fired after the `show.bs.tooltip` event when the tooltip template has been added to the DOM. |
    | `show.bs.tooltip` | This event fires immediately when the `show` instance method is called. |
    | `shown.bs.tooltip` | This event is fired when the tooltip has been made visible to the user (will wait for CSS transitions to complete). |



    ```
    const myTooltipEl = document.getElementById('myTooltip')
    const tooltip = bootstrap.Tooltip.getOrCreateInstance(myTooltipEl)

    myTooltipEl.addEventListener('hidden.bs.tooltip', () => {
     // do something...
    })

    tooltip.hide()

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class CLEARFIX:
    """

    Clearfix
    ========



    Quickly and easily clear floated content within a container by adding a clearfix utility.





    Easily clear `float`s by adding `.clearfix` **to the parent element**. Can also be used as a mixin.


    Use in HTML:



    ```
    <div class="clearfix">...</div>

    ```
    The mixin source code:




    [scss/mixins/\_clearfix.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_clearfix.scss)






    ```
    @mixin clearfix() {
     &::after {
     display: block;
     clear: both;
     content: "";
     }
    }

    ```

    Use the mixin in SCSS:



    ```
    .element {
     @include clearfix;
    }

    ```
    The following example shows how the clearfix can be used. Without the clearfix the wrapping div would not span around the buttons which would cause a broken layout.




    Example Button floated left
    Example Button floated right


    html









    ```
    <div class="bg-info clearfix">
     <button type="button" class="btn btn-secondary float-start">Example Button floated left</button>
     <button type="button" class="btn btn-secondary float-end">Example Button floated right</button>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLOR_AND_BACKGROUND:
    """

    Color and background
    ====================



    Set a background color with contrasting foreground color.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [With components](#with-components)






    Overview
    --------


    Color and background helpers combine the power of our [`.text-*` utilities](https://getbootstrap.com/docs/5.3/utilities/colors/) and [`.bg-*` utilities](https://getbootstrap.com/docs/5.3/utilities/background/) in one class. Using our Sass `color-contrast()` function, we automatically determine a contrasting `color` for a particular `background-color`.



    **Heads up!** There’s currently no support for a CSS-native `color-contrast` function, so we use our own via Sass. This means that customizing our theme colors via CSS variables may cause color contrast issues with these utilities.


    Primary with contrasting color
    Secondary with contrasting color
    Success with contrasting color
    Danger with contrasting color
    Warning with contrasting color
    Info with contrasting color
    Light with contrasting color
    Dark with contrasting color

    html









    ```
    <div class="text-bg-primary p-3">Primary with contrasting color</div>
    <div class="text-bg-secondary p-3">Secondary with contrasting color</div>
    <div class="text-bg-success p-3">Success with contrasting color</div>
    <div class="text-bg-danger p-3">Danger with contrasting color</div>
    <div class="text-bg-warning p-3">Warning with contrasting color</div>
    <div class="text-bg-info p-3">Info with contrasting color</div>
    <div class="text-bg-light p-3">Light with contrasting color</div>
    <div class="text-bg-dark p-3">Dark with contrasting color</div>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    With components
    ---------------


    Use them in place of combined `.text-*` and `.bg-*` classes, like on [badges](https://getbootstrap.com/docs/5.3/components/badge/#background-colors):



    Primary
    Info

    html









    ```
    <span class="badge text-bg-primary">Primary</span>
    <span class="badge text-bg-info">Info</span>
    ```

    Or on [cards](https://getbootstrap.com/docs/5.3/components/card/#background-and-color):




    Header

    Some quick example text to build on the card title and make up the bulk of the card's content.





    Header

    Some quick example text to build on the card title and make up the bulk of the card's content.





    html









    ```
    <div class="card text-bg-primary mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    <div class="card text-bg-info mb-3" style="max-width: 18rem;">
     <div class="card-header">Header</div>
     <div class="card-body">
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     </div>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLORED_LINKS:
    """

    Colored links
    =============



    Colored links with hover states






     On this page


    **On this page**


    ---




    * [Link colors](#link-colors)
    * [Link utilities](#link-utilities)






    Link colors
    -----------


    You can use the `.link-*` classes to colorize links. Unlike the [`.text-*` classes](https://getbootstrap.com/docs/5.3/utilities/colors/), these classes have a `:hover` and `:focus` state. Some of the link styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.



    **Heads up!** `.link-body-emphasis` is currently the only colored link that adapts to color modes. It’s treated as a special case until v6 arrives and we can more thoroughly rebuild our theme colors for color modes. Until then, it’s a unique, high-contrast link color with custom `:hover` and `:focus` styles. However, it still responds to the new link utilities.


    [Primary link](#)


    [Secondary link](#)


    [Success link](#)


    [Danger link](#)


    [Warning link](#)


    [Info link](#)


    [Light link](#)


    [Dark link](#)


    [Emphasis link](#)



    html









    ```
    <p><a href="#" class="link-primary">Primary link</a></p>
    <p><a href="#" class="link-secondary">Secondary link</a></p>
    <p><a href="#" class="link-success">Success link</a></p>
    <p><a href="#" class="link-danger">Danger link</a></p>
    <p><a href="#" class="link-warning">Warning link</a></p>
    <p><a href="#" class="link-info">Info link</a></p>
    <p><a href="#" class="link-light">Light link</a></p>
    <p><a href="#" class="link-dark">Dark link</a></p>
    <p><a href="#" class="link-body-emphasis">Emphasis link</a></p>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Link utilities
    --------------


    Added in v5.3.0
    Colored links can also be modified by our [link utilities](https://getbootstrap.com/docs/5.3/utilities/link/).



    [Primary link](#)


    [Secondary link](#)


    [Success link](#)


    [Danger link](#)


    [Warning link](#)


    [Info link](#)


    [Light link](#)


    [Dark link](#)


    [Emphasis link](#)



    html









    ```
    <p><a href="#" class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Primary link</a></p>
    <p><a href="#" class="link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Secondary link</a></p>
    <p><a href="#" class="link-success link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Success link</a></p>
    <p><a href="#" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Danger link</a></p>
    <p><a href="#" class="link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Warning link</a></p>
    <p><a href="#" class="link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Info link</a></p>
    <p><a href="#" class="link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Light link</a></p>
    <p><a href="#" class="link-dark link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Dark link</a></p>
    <p><a href="#" class="link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover">Emphasis link</a></p>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FOCUS_RING:
    """

    Focus ring
    ==========



    Utility classes that allows you to add and modify custom focus ring styles to elements and components.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Customize](#customize)
            + [CSS variables](#css-variables)
            + [Sass variables](#sass-variables)
            + [Sass utilities API](#sass-utilities-api)






    The `.focus-ring` helper removes the default `outline` on `:focus`, replacing it with a `box-shadow` that can be more broadly customized. The new shadow is made up of a series of CSS variables, inherited from the `:root` level, that can be modified for any element or component.


    Example
    -------


    Click directly on the link below to see the focus ring in action, or into the example below and then press `Tab`.



    [Custom focus ring](#)

    html









    ```
    <a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2">
     Custom focus ring
    </a>
    ```

    Customize
    ---------


    Modify the styling of a focus ring with our CSS variables, Sass variables, utilities, or custom styles.


    ### CSS variables


    Modify the `--bs-focus-ring-*` CSS variables as needed to change the default appearance.



    [Green focus ring](#)

    html









    ```
    <a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2" style="--bs-focus-ring-color: rgba(var(--bs-success-rgb), .25)">
     Green focus ring
    </a>
    ```

    `.focus-ring` sets styles via global CSS variables that can be overridden on any parent element, as shown above. These variables are generated from their Sass variable counterparts.




    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    --#{$prefix}focus-ring-width: #{$focus-ring-width};
    --#{$prefix}focus-ring-opacity: #{$focus-ring-opacity};
    --#{$prefix}focus-ring-color: #{$focus-ring-color};
    ```

    By default, there is no `--bs-focus-ring-x`, `--bs-focus-ring-y`, or `--bs-focus-ring-blur`, but we provide CSS variables with fallbacks to initial `0` values. Modify them to change the default appearance.



    [Blurry offset focus ring](#)

    html









    ```
    <a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2" style="--bs-focus-ring-x: 10px; --bs-focus-ring-y: 10px; --bs-focus-ring-blur: 4px">
     Blurry offset focus ring
    </a>
    ```

    ### Sass variables


    Customize the focus ring Sass variables to modify all usage of the focus ring styles across your Bootstrap-powered project.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $focus-ring-width: .25rem;
    $focus-ring-opacity: .25;
    $focus-ring-color: rgba($primary, $focus-ring-opacity);
    $focus-ring-blur: 0;
    $focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;

    ```

    ### Sass utilities API


    In addition to `.focus-ring`, we have several `.focus-ring-*` utilities to modify the helper class defaults. Modify the color with any of our [theme colors](https://getbootstrap.com/docs/5.3/customize/color/#theme-colors). Note that the light and dark variants may not be visible on all background colors given current color mode support.



    [Primary focus](#)


    [Secondary focus](#)


    [Success focus](#)


    [Danger focus](#)


    [Warning focus](#)


    [Info focus](#)


    [Light focus](#)


    [Dark focus](#)



    html









    ```
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-primary py-1 px-2 text-decoration-none border rounded-2">Primary focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-secondary py-1 px-2 text-decoration-none border rounded-2">Secondary focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-success py-1 px-2 text-decoration-none border rounded-2">Success focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-danger py-1 px-2 text-decoration-none border rounded-2">Danger focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-warning py-1 px-2 text-decoration-none border rounded-2">Warning focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-info py-1 px-2 text-decoration-none border rounded-2">Info focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-light py-1 px-2 text-decoration-none border rounded-2">Light focus</a></p>
    <p><a href="#" class="d-inline-flex focus-ring focus-ring-dark py-1 px-2 text-decoration-none border rounded-2">Dark focus</a></p>
    ```

    Focus ring utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "focus-ring": (
     css-var: true,
     css-variable-name: focus-ring-color,
     class: focus-ring,
     values: map-loop($theme-colors-rgb, rgba-css-var, "$key", "focus-ring")
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ICON_LINK:
    """

    Icon link
    =========



    Quickly create stylized hyperlinks with Bootstrap Icons or other icons.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Style on hover](#style-on-hover)
    * [Customize](#customize)
            + [CSS variables](#css-variables)
            + [Sass variables](#sass-variables)
            + [Sass utilities API](#sass-utilities-api)






    The icon link helper component modifies our default link styles to enhance their appearance and quickly align any pairing of icon and text. Alignment is set via inline flexbox styling and a default `gap` value. We stylize the underline with a custom offset and color. Icons are automatically sized to `1em` to best match their associated text’s `font-size`.


    Icon links assume [Bootstrap Icons](https://icons.getbootstrap.com) are being used, but you can use any icon or image you like.



    When icons are purely decorative, they should be hidden from assistive technologies using `aria-hidden="true"`, as we’ve done in our examples. For icons that convey meaning, provide an appropriate text alternative by adding `role="img"` and an appropriate `aria-label="..."` to the SVGs.

    Example
    -------


    Take a regular `<a>` element, add `.icon-link`, and insert an icon on either the left or right of your link text. The icon is automatically sized, placed, and colored.



    [Icon link](#)

    html









    ```
    <a class="icon-link" href="#">
     <svg class="bi" aria-hidden="true"><use xlink:href="#box-seam"></use></svg>
     Icon link
    </a>
    ```


    [Icon link](#)

    html









    ```
    <a class="icon-link" href="#">
     Icon link
     <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
    </a>
    ```

    Style on hover
    --------------


    Add `.icon-link-hover` to move the icon to the right on hover.



    [Icon link](#)

    html









    ```
    <a class="icon-link icon-link-hover" href="#">
     Icon link
     <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
    </a>
    ```

    Customize
    ---------


    Modify the styling of an icon link with our link CSS variables, Sass variables, utilities, or custom styles.


    ### CSS variables


    Modify the `--bs-link-*` and `--bs-icon-link-*` CSS variables as needed to change the default appearance.


    Customize the hover `transform` by overriding the `--bs-icon-link-transform` CSS variable:



    [Icon link](#)

    html









    ```
    <a class="icon-link icon-link-hover" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" href="#">
     <svg class="bi" aria-hidden="true"><use xlink:href="#clipboard"></use></svg>
     Icon link
    </a>
    ```

    Customize the color by overriding the `--bs-link-*` CSS variable:



    [Icon link](#)

    html









    ```
    <a class="icon-link icon-link-hover" style="--bs-link-hover-color-rgb: 25, 135, 84;" href="#">
     Icon link
     <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
    </a>
    ```

    ### Sass variables


    Customize the icon link Sass variables to modify all icon link styles across your Bootstrap-powered project.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $icon-link-gap: .375rem;
    $icon-link-underline-offset: .25em;
    $icon-link-icon-size: 1em;
    $icon-link-icon-transition: .2s ease-in-out transform;
    $icon-link-icon-transform: translate3d(.25em, 0, 0);

    ```

    ### Sass utilities API


    Modify icon links with any of [our link utilities](https://getbootstrap.com/docs/5.3/utilities/link/) for modifying underline color and offset.



    [Icon link](#)

    html









    ```
    <a class="icon-link icon-link-hover link-success link-underline-success link-underline-opacity-25" href="#">
     Icon link
     <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
    </a>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class POSITION:
    """

    Position
    ========



    Use these helpers for quickly configuring the position of an element.






     On this page


    **On this page**


    ---




    * [Fixed top](#fixed-top)
    * [Fixed bottom](#fixed-bottom)
    * [Sticky top](#sticky-top)
    * [Responsive sticky top](#responsive-sticky-top)
    * [Sticky bottom](#sticky-bottom)
    * [Responsive sticky bottom](#responsive-sticky-bottom)






    Fixed top
    ---------


    Position an element at the top of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.



    ```
    <div class="fixed-top">...</div>

    ```
    Fixed bottom
    ------------


    Position an element at the bottom of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.



    ```
    <div class="fixed-bottom">...</div>

    ```
    Sticky top
    ----------


    Position an element at the top of the viewport, from edge to edge, but only after you scroll past it.



    ```
    <div class="sticky-top">...</div>

    ```
    Responsive sticky top
    ---------------------


    Responsive variations also exist for `.sticky-top` utility.



    ```
    <div class="sticky-sm-top">Stick to the top on viewports sized SM (small) or wider</div>
    <div class="sticky-md-top">Stick to the top on viewports sized MD (medium) or wider</div>
    <div class="sticky-lg-top">Stick to the top on viewports sized LG (large) or wider</div>
    <div class="sticky-xl-top">Stick to the top on viewports sized XL (extra-large) or wider</div>
    <div class="sticky-xxl-top">Stick to the top on viewports sized XXL (extra-extra-large) or wider</div>

    ```
    Sticky bottom
    -------------


    Position an element at the bottom of the viewport, from edge to edge, but only after you scroll past it.



    ```
    <div class="sticky-bottom">...</div>

    ```
    Responsive sticky bottom
    ------------------------


    Responsive variations also exist for `.sticky-bottom` utility.



    ```
    <div class="sticky-sm-bottom">Stick to the bottom on viewports sized SM (small) or wider</div>
    <div class="sticky-md-bottom">Stick to the bottom on viewports sized MD (medium) or wider</div>
    <div class="sticky-lg-bottom">Stick to the bottom on viewports sized LG (large) or wider</div>
    <div class="sticky-xl-bottom">Stick to the bottom on viewports sized XL (extra-large) or wider</div>
    <div class="sticky-xxl-bottom">Stick to the bottom on viewports sized XXL (extra-extra-large) or wider</div>

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class RATIOS:
    """

    Ratios
    ======



    Use generated pseudo elements to make an element maintain the aspect ratio of your choosing. Perfect for responsively handling video or slideshow embeds based on the width of the parent.






     On this page


    **On this page**


    ---




    * [About](#about)
    * [Example](#example)
    * [Aspect ratios](#aspect-ratios)
    * [Custom ratios](#custom-ratios)
    * [Sass maps](#sass-maps)






    About
    -----


    Use the ratio helper to manage the aspect ratios of external content like `<iframe>`s, `<embed>`s, `<video>`s, and `<object>`s. These helpers also can be used on any standard HTML child element (e.g., a `<div>` or `<img>`). Styles are applied from the parent `.ratio` class directly to the child.


    Aspect ratios are declared in a Sass map and included in each class via CSS variable, which also allows [custom aspect ratios](#custom-ratios).



    **Pro-Tip!** You don’t need `frameborder="0"` on your `<iframe>`s as we override that for you in [Reboot](https://getbootstrap.com/docs/5.3/content/reboot/).

    Example
    -------


    Wrap any embed, like an `<iframe>`, in a parent element with `.ratio` and an aspect ratio class. The immediate child element is automatically sized thanks to our universal selector `.ratio > *`.







    html









    ```
    <div class="ratio ratio-16x9">
     <iframe src="https://www.youtube.com/embed/zpOULjyy-n8?rel=0" title="YouTube video" allowfullscreen></iframe>
    </div>
    ```

    Aspect ratios
    -------------


    Aspect ratios can be customized with modifier classes. By default the following ratio classes are provided:




    1x1


    4x3


    16x9


    21x9


    html









    ```
    <div class="ratio ratio-1x1">
     <div>1x1</div>
    </div>
    <div class="ratio ratio-4x3">
     <div>4x3</div>
    </div>
    <div class="ratio ratio-16x9">
     <div>16x9</div>
    </div>
    <div class="ratio ratio-21x9">
     <div>21x9</div>
    </div>
    ```

    Custom ratios
    -------------


    Each `.ratio-*` class includes a CSS custom property (or CSS variable) in the selector. You can override this CSS variable to create custom aspect ratios on the fly with some quick math on your part.


    For example, to create a 2x1 aspect ratio, set `--bs-aspect-ratio: 50%` on the `.ratio`.




    2x1


    html









    ```
    <div class="ratio" style="--bs-aspect-ratio: 50%;">
     <div>2x1</div>
    </div>
    ```

    This CSS variable makes it easy to modify the aspect ratio across breakpoints. The following is 4x3 to start, but changes to a custom 2x1 at the medium breakpoint.



    ```
    .ratio-4x3 {
     @include media-breakpoint-up(md) {
     --bs-aspect-ratio: 50%; // 2x1
     }
    }

    ```


    4x3, then 2x1


    html









    ```
    <div class="ratio ratio-4x3">
     <div>4x3, then 2x1</div>
    </div>
    ```

    Sass maps
    ---------


    Within `_variables.scss`, you can change the aspect ratios you want to use. Here’s our default `$ratio-aspect-ratios` map. Modify the map as you like and recompile your Sass to put them to use.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $aspect-ratios: (
     "1x1": 100%,
     "4x3": calc(3 / 4 \* 100%),
     "16x9": calc(9 / 16 \* 100%),
     "21x9": calc(9 / 21 \* 100%)
    );

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class STACKS:
    """

    Stacks
    ======



    Shorthand helpers that build on top of our flexbox utilities to make component layout faster and easier than ever.






     On this page


    **On this page**


    ---




    * [Vertical](#vertical)
    * [Horizontal](#horizontal)
    * [Examples](#examples)
    * [CSS](#css)






    Stacks offer a shortcut for applying a number of flexbox properties to quickly and easily create layouts in Bootstrap. All credit for the concept and implementation goes to the open source [Pylon project](https://almonk.github.io/pylon/).



    Heads up! Support for gap utilities with flexbox was recently added to Safari, so consider verifying your intended browser support. Grid layout should have no issues. [Read more](https://caniuse.com/flexbox-gap).

    Vertical
    --------


    Use `.vstack` to create vertical layouts. Stacked items are full-width by default. Use `.gap-*` utilities to add space between items.




    First item
    Second item
    Third item


    html









    ```
    <div class="vstack gap-3">
     <div class="p-2">First item</div>
     <div class="p-2">Second item</div>
     <div class="p-2">Third item</div>
    </div>
    ```

    Horizontal
    ----------


    Use `.hstack` for horizontal layouts. Stacked items are vertically centered by default and only take up their necessary width. Use `.gap-*` utilities to add space between items.




    First item
    Second item
    Third item


    html









    ```
    <div class="hstack gap-3">
     <div class="p-2">First item</div>
     <div class="p-2">Second item</div>
     <div class="p-2">Third item</div>
    </div>
    ```

    Using horizontal margin utilities like `.ms-auto` as spacers:




    First item
    Second item
    Third item


    html









    ```
    <div class="hstack gap-3">
     <div class="p-2">First item</div>
     <div class="p-2 ms-auto">Second item</div>
     <div class="p-2">Third item</div>
    </div>
    ```

    And with [vertical rules](https://getbootstrap.com/docs/5.3/helpers/vertical-rule/):




    First item
    Second item

    Third item


    html









    ```
    <div class="hstack gap-3">
     <div class="p-2">First item</div>
     <div class="p-2 ms-auto">Second item</div>
     <div class="vr"></div>
     <div class="p-2">Third item</div>
    </div>
    ```

    Examples
    --------


    Use `.vstack` to stack buttons and other elements:




    Save changes
    Cancel


    html









    ```
    <div class="vstack gap-2 col-md-5 mx-auto">
     <button type="button" class="btn btn-secondary">Save changes</button>
     <button type="button" class="btn btn-outline-secondary">Cancel</button>
    </div>
    ```

    Create an inline form with `.hstack`:





    Submit

    Reset


    html









    ```
    <div class="hstack gap-3">
     <input class="form-control me-auto" type="text" placeholder="Add your item here..." aria-label="Add your item here...">
     <button type="button" class="btn btn-secondary">Submit</button>
     <div class="vr"></div>
     <button type="button" class="btn btn-outline-danger">Reset</button>
    </div>
    ```

    CSS
    ---




    [scss/helpers/\_stacks.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/helpers/_stacks.scss)






    ```
    .hstack {
     display: flex;
     flex-direction: row;
     align-items: center;
     align-self: stretch;
    }

    .vstack {
     display: flex;
     flex: 1 1 auto;
     flex-direction: column;
     align-self: stretch;
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class STRETCHED_LINK:
    """

    Stretched link
    ==============



    Make any HTML element or Bootstrap component clickable by “stretching” a nested link via CSS.





    Add `.stretched-link` to a link to make its [containing block](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Containing_block) clickable via a `::after` pseudo element. In most cases, this means that an element with `position: relative;` that contains a link with the `.stretched-link` class is clickable. Please note given [how CSS `position` works](https://www.w3.org/TR/CSS21/visuren.html#propdef-position), `.stretched-link` cannot be mixed with most table elements.


    Cards have `position: relative` by default in Bootstrap, so in this case you can safely add the `.stretched-link` class to a link in the card without any other HTML changes.


    Multiple links and tap targets are not recommended with stretched links. However, some `position` and `z-index` styles can help should this be required.




    Card image cap

    ##### Card with stretched link


    Some quick example text to build on the card title and make up the bulk of the card's content.


    [Go somewhere](#)



    html









    ```
    <div class="card" style="width: 18rem;">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card with stretched link</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     <a href="#" class="btn btn-primary stretched-link">Go somewhere</a>
     </div>
    </div>
    ```

    Most custom components do not have `position: relative` by default, so we need to add the `.position-relative` here to prevent the link from stretching outside the parent element.




    Generic placeholder image

    ##### Custom component with stretched link


    This is some placeholder content for the custom component. It is intended to mimic what some real-world content would look like, and we're using it here to give the component a bit of body and size.


    [Go somewhere](#)



    html









    ```
    <div class="d-flex position-relative">
     <img src="..." class="flex-shrink-0 me-3" alt="...">
     <div>
     <h5 class="mt-0">Custom component with stretched link</h5>
     <p>This is some placeholder content for the custom component. It is intended to mimic what some real-world content would look like, and we're using it here to give the component a bit of body and size.</p>
     <a href="#" class="stretched-link">Go somewhere</a>
     </div>
    </div>
    ```




    Generic placeholder image


    ##### Columns with stretched link


    Another instance of placeholder content for this other custom component. It is intended to mimic what some real-world content would look like, and we're using it here to give the component a bit of body and size.


    [Go somewhere](#)



    html









    ```
    <div class="row g-0 bg-body-secondary position-relative">
     <div class="col-md-6 mb-md-0 p-md-4">
     <img src="..." class="w-100" alt="...">
     </div>
     <div class="col-md-6 p-4 ps-md-0">
     <h5 class="mt-0">Columns with stretched link</h5>
     <p>Another instance of placeholder content for this other custom component. It is intended to mimic what some real-world content would look like, and we're using it here to give the component a bit of body and size.</p>
     <a href="#" class="stretched-link">Go somewhere</a>
     </div>
    </div>
    ```

    Identifying the containing block
    --------------------------------


    If the stretched link doesn’t seem to work, the [containing block](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Containing_block#Identifying_the_containing_block) will probably be the cause. The following CSS properties will make an element the containing block:


    * A `position` value other than `static`
    * A `transform` or `perspective` value other than `none`
    * A `will-change` value of `transform` or `perspective`
    * A `filter` value other than `none` or a `will-change` value of `filter` (only works on Firefox)




    Card image cap

    ##### Card with stretched links


    Some quick example text to build on the card title and make up the bulk of the card's content.



    [Stretched link will not work here, because `position: relative` is added to the link](#)




     This [stretched link](#) will only be spread over the `p`-tag, because a transform is applied to it.






    html









    ```
    <div class="card" style="width: 18rem;">
     <img src="..." class="card-img-top" alt="...">
     <div class="card-body">
     <h5 class="card-title">Card with stretched links</h5>
     <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
     <p class="card-text">
     <a href="#" class="stretched-link text-danger" style="position: relative;">Stretched link will not work here, because <code>position: relative</code> is added to the link</a>
     </p>
     <p class="card-text bg-body-tertiary" style="transform: rotate(0);">
     This <a href="#" class="text-warning stretched-link">stretched link</a> will only be spread over the <code>p</code>-tag, because a transform is applied to it.
     </p>
     </div>
    </div>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TEXT_TRUNCATION:
    """

    Text truncation
    ===============



    Truncate long strings of text with an ellipsis.





    For longer content, you can add a `.text-truncate` class to truncate the text with an ellipsis. **Requires `display: inline-block` or `display: block`.**






     This text is quite long, and will be truncated once displayed.




     This text is quite long, and will be truncated once displayed.


    html









    ```
    <!-- Block level -->
    <div class="row">
     <div class="col-2 text-truncate">
     This text is quite long, and will be truncated once displayed.
     </div>
    </div>

    <!-- Inline level -->
    <span class="d-inline-block text-truncate" style="max-width: 150px;">
     This text is quite long, and will be truncated once displayed.
    </span>
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class VERTICAL_RULE:
    """

    Vertical rule
    =============



    Use the custom vertical rule helper to create vertical dividers like the `<hr>` element.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Example](#example)
    * [With stacks](#with-stacks)
    * [CSS](#css)
            + [Sass variables](#sass-variables)






    How it works
    ------------


    Vertical rules are inspired by the `<hr>` element, allowing you to create vertical dividers in common layouts. They’re styled just like `<hr>` elements:


    * They’re `1px` wide
    * They have `min-height` of `1em`
    * Their color is set via `currentColor` and `opacity`


    Customize them with additional styles as needed.


    Example
    -------





    html









    ```
    <div class="vr"></div>
    ```

    Vertical rules scale their height in flex layouts:







    html









    ```
    <div class="d-flex" style="height: 200px;">
     <div class="vr"></div>
    </div>
    ```

    With stacks
    -----------


    They can also be used in [stacks](https://getbootstrap.com/docs/5.3/helpers/stacks/):




    First item
    Second item

    Third item


    html









    ```
    <div class="hstack gap-3">
     <div class="p-2">First item</div>
     <div class="p-2 ms-auto">Second item</div>
     <div class="vr"></div>
     <div class="p-2">Third item</div>
    </div>
    ```

    CSS
    ---


    ### Sass variables


    Customize the vertical rule Sass variable to change its width.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $vr-border-width: var(--#{$prefix}border-width);

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class VISUALLY_HIDDEN:
    """

    Visually hidden
    ===============



    Use these helpers to visually hide elements but keep them accessible to assistive technologies.





    Visually hide an element while still allowing it to be exposed to assistive technologies (such as screen readers) with `.visually-hidden`. Use `.visually-hidden-focusable` to visually hide an element by default, but to display it when it’s focused (e.g. by a keyboard-only user). `.visually-hidden-focusable` can also be applied to a container–thanks to `:focus-within`, the container will be displayed when any child element of the container receives focus.



    Title for screen readers
    ------------------------


    [Skip to main content](#content)
    A container with a [focusable element](#).

    html









    ```
    <h2 class="visually-hidden">Title for screen readers</h2>
    <a class="visually-hidden-focusable" href="#content">Skip to main content</a>
    <div class="visually-hidden-focusable">A container with a <a href="#">focusable element</a>.</div>
    ```

    Both `visually-hidden` and `visually-hidden-focusable` can also be used as mixins.



    ```
    // Usage as a mixin

    .visually-hidden-title {
     @include visually-hidden;
    }

    .skip-navigation {
     @include visually-hidden-focusable;
    }

    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class UTILITY_API:
    """

    Utility API
    ===========



    The utility API is a Sass-based tool to generate utility classes.






     On this page


    **On this page**


    ---




    * [API explained](#api-explained)
            + [Property](#property)
            + [Values](#values)
            + [Class](#class)
            + [CSS variable utilities](#css-variable-utilities)
            + [Local CSS variables](#local-css-variables)
            + [States](#states)
            + [Responsive](#responsive)
            + [Print](#print)
    * [Importance](#importance)
    * [Using the API](#using-the-api)
            + [Override utilities](#override-utilities)
            + [Add utilities](#add-utilities)
            + [Modify utilities](#modify-utilities)
                    - [Enable responsive](#enable-responsive)
                    - [Rename utilities](#rename-utilities)
            + [Remove utilities](#remove-utilities)
            + [Add, remove, modify](#add-remove-modify)
                    - [Remove utility in RTL](#remove-utility-in-rtl)






    Bootstrap utilities are generated with our utility API and can be used to modify or extend our default set of utility classes via Sass. Our utility API is based on a series of Sass maps and functions for generating families of classes with various options. If you’re unfamiliar with Sass maps, read up on the [official Sass docs](https://sass-lang.com/documentation/values/maps) to get started.


    The `$utilities` map contains all our utilities and is later merged with your custom `$utilities` map, if present. The utility map contains a keyed list of utility groups which accept the following options:




    | Option | Type | Default value | Description |
    | --- | --- | --- | --- |
    | [`property`](#property) | **Required** | – | Name of the property, this can be a string or an array of strings (e.g., horizontal paddings or margins). |
    | [`values`](#values) | **Required** | – | List of values, or a map if you don’t want the class name to be the same as the value. If `null` is used as map key, `class` is not prepended to the class name. |
    | [`class`](#class) | Optional | null | Name of the generated class. If not provided and `property` is an array of strings, `class` will default to the first element of the `property` array. If not provided and `property` is a string, the `values` keys are used for the `class` names. |
    | [`css-var`](#css-variable-utilities) | Optional | `false` | Boolean to generate CSS variables instead of CSS rules. |
    | [`css-variable-name`](#css-variable-utilities) | Optional | null | Custom un-prefixed name for the CSS variable inside the ruleset. |
    | [`local-vars`](#local-css-variables) | Optional | null | Map of local CSS variables to generate in addition to the CSS rules. |
    | [`state`](#states) | Optional | null | List of pseudo-class variants (e.g., `:hover` or `:focus`) to generate. |
    | [`responsive`](#responsive) | Optional | `false` | Boolean indicating if responsive classes should be generated. |
    | `rfs` | Optional | `false` | Boolean to enable [fluid rescaling with RFS](https://getbootstrap.com/docs/5.3/getting-started/rfs/). |
    | [`print`](#print) | Optional | `false` | Boolean indicating if print classes need to be generated. |
    | `rtl` | Optional | `true` | Boolean indicating if utility should be kept in RTL. |


    API explained
    -------------


    All utility variables are added to the `$utilities` variable within our `_utilities.scss` stylesheet. Each group of utilities looks something like this:



    ```
    $utilities: (
     "opacity": (
     property: opacity,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
     )
    );

    ```
    Which outputs the following:



    ```
    .opacity-0 { opacity: 0; }
    .opacity-25 { opacity: .25; }
    .opacity-50 { opacity: .5; }
    .opacity-75 { opacity: .75; }
    .opacity-100 { opacity: 1; }

    ```
    ### Property


    The required `property` key must be set for any utility, and it must contain a valid CSS property. This property is used in the generated utility’s ruleset. When the `class` key is omitted, it also serves as the default class name. Consider the `text-decoration` utility:



    ```
    $utilities: (
     "text-decoration": (
     property: text-decoration,
     values: none underline line-through
     )
    );

    ```
    Output:



    ```
    .text-decoration-none { text-decoration: none !important; }
    .text-decoration-underline { text-decoration: underline !important; }
    .text-decoration-line-through { text-decoration: line-through !important; }

    ```
    ### Values


    Use the `values` key to specify which values for the specified `property` should be used in the generated class names and rules. Can be a list or map (set in the utilities or in a Sass variable).


    As a list, like with [`text-decoration` utilities](https://getbootstrap.com/docs/5.3/utilities/text/#text-decoration):



    ```
    values: none underline line-through

    ```
    As a map, like with [`opacity` utilities](https://getbootstrap.com/docs/5.3/utilities/opacity/):



    ```
    values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
    )

    ```
    As a Sass variable that sets the list or map, as in our [`position` utilities](https://getbootstrap.com/docs/5.3/utilities/position/):



    ```
    values: $position-values

    ```
    ### Class


    Use the `class` option to change the class prefix used in the compiled CSS. For example, to change from `.opacity-*` to `.o-*`:



    ```
    $utilities: (
     "opacity": (
     property: opacity,
     class: o,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
     )
    );

    ```
    Output:



    ```
    .o-0 { opacity: 0 !important; }
    .o-25 { opacity: .25 !important; }
    .o-50 { opacity: .5 !important; }
    .o-75 { opacity: .75 !important; }
    .o-100 { opacity: 1 !important; }

    ```
    If `class: null`, generates classes for each of the `values` keys:



    ```
    $utilities: (
     "visibility": (
     property: visibility,
     class: null,
     values: (
     visible: visible,
     invisible: hidden,
     )
     )
    );

    ```
    Output:



    ```
    .visible { visibility: visible !important; }
    .invisible { visibility: hidden !important; }

    ```
    ### CSS variable utilities


    Set the `css-var` boolean option to `true` and the API will generate local CSS variables for the given selector instead of the usual `property: value` rules. Add an optional `css-variable-name` to set a different CSS variable name than the class name.


    Consider our `.text-opacity-*` utilities. If we add the `css-variable-name` option, we’ll get a custom output.



    ```
    $utilities: (
     "text-opacity": (
     css-var: true,
     css-variable-name: text-alpha,
     class: text-opacity,
     values: (
     25: .25,
     50: .5,
     75: .75,
     100: 1
     )
     ),
    );

    ```
    Output:



    ```
    .text-opacity-25 { --bs-text-alpha: .25; }
    .text-opacity-50 { --bs-text-alpha: .5; }
    .text-opacity-75 { --bs-text-alpha: .75; }
    .text-opacity-100 { --bs-text-alpha: 1; }

    ```
    ### Local CSS variables


    Use the `local-vars` option to specify a Sass map that will generate local CSS variables within the utility class’s ruleset. Please note that it may require additional work to consume those local CSS variables in the generated CSS rules. For example, consider our `.bg-*` utilities:



    ```
    $utilities: (
     "background-color": (
     property: background-color,
     class: bg,
     local-vars: (
     "bg-opacity": 1
     ),
     values: map-merge(
     $utilities-bg-colors,
     (
     "transparent": transparent
     )
     )
     )
    );

    ```
    Output:



    ```
    .bg-primary {
     --bs-bg-opacity: 1;
     background-color: rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)) !important;
    }

    ```
    ### States


    Use the `state` option to generate pseudo-class variations. Example pseudo-classes are `:hover` and `:focus`. When a list of states are provided, classnames are created for that pseudo-class. For example, to change opacity on hover, add `state: hover` and you’ll get `.opacity-hover:hover` in your compiled CSS.


    Need multiple pseudo-classes? Use a space-separated list of states: `state: hover focus`.



    ```
    $utilities: (
     "opacity": (
     property: opacity,
     class: opacity,
     state: hover,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
     )
    );

    ```
    Output:



    ```
    .opacity-0-hover:hover { opacity: 0 !important; }
    .opacity-25-hover:hover { opacity: .25 !important; }
    .opacity-50-hover:hover { opacity: .5 !important; }
    .opacity-75-hover:hover { opacity: .75 !important; }
    .opacity-100-hover:hover { opacity: 1 !important; }

    ```
    ### Responsive


    Add the `responsive` boolean to generate responsive utilities (e.g., `.opacity-md-25`) across [all breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/).



    ```
    $utilities: (
     "opacity": (
     property: opacity,
     responsive: true,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
     )
    );

    ```
    Output:



    ```
    .opacity-0 { opacity: 0 !important; }
    .opacity-25 { opacity: .25 !important; }
    .opacity-50 { opacity: .5 !important; }
    .opacity-75 { opacity: .75 !important; }
    .opacity-100 { opacity: 1 !important; }

    @media (min-width: 576px) {
     .opacity-sm-0 { opacity: 0 !important; }
     .opacity-sm-25 { opacity: .25 !important; }
     .opacity-sm-50 { opacity: .5 !important; }
     .opacity-sm-75 { opacity: .75 !important; }
     .opacity-sm-100 { opacity: 1 !important; }
    }

    @media (min-width: 768px) {
     .opacity-md-0 { opacity: 0 !important; }
     .opacity-md-25 { opacity: .25 !important; }
     .opacity-md-50 { opacity: .5 !important; }
     .opacity-md-75 { opacity: .75 !important; }
     .opacity-md-100 { opacity: 1 !important; }
    }

    @media (min-width: 992px) {
     .opacity-lg-0 { opacity: 0 !important; }
     .opacity-lg-25 { opacity: .25 !important; }
     .opacity-lg-50 { opacity: .5 !important; }
     .opacity-lg-75 { opacity: .75 !important; }
     .opacity-lg-100 { opacity: 1 !important; }
    }

    @media (min-width: 1200px) {
     .opacity-xl-0 { opacity: 0 !important; }
     .opacity-xl-25 { opacity: .25 !important; }
     .opacity-xl-50 { opacity: .5 !important; }
     .opacity-xl-75 { opacity: .75 !important; }
     .opacity-xl-100 { opacity: 1 !important; }
    }

    @media (min-width: 1400px) {
     .opacity-xxl-0 { opacity: 0 !important; }
     .opacity-xxl-25 { opacity: .25 !important; }
     .opacity-xxl-50 { opacity: .5 !important; }
     .opacity-xxl-75 { opacity: .75 !important; }
     .opacity-xxl-100 { opacity: 1 !important; }
    }

    ```
    ### Print


    Enabling the `print` option will **also** generate utility classes for print, which are only applied within the `@media print { ... }` media query.



    ```
    $utilities: (
     "opacity": (
     property: opacity,
     print: true,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
     )
    );

    ```
    Output:



    ```
    .opacity-0 { opacity: 0 !important; }
    .opacity-25 { opacity: .25 !important; }
    .opacity-50 { opacity: .5 !important; }
    .opacity-75 { opacity: .75 !important; }
    .opacity-100 { opacity: 1 !important; }

    @media print {
     .opacity-print-0 { opacity: 0 !important; }
     .opacity-print-25 { opacity: .25 !important; }
     .opacity-print-50 { opacity: .5 !important; }
     .opacity-print-75 { opacity: .75 !important; }
     .opacity-print-100 { opacity: 1 !important; }
    }

    ```
    Importance
    ----------


    All utilities generated by the API include `!important` to ensure they override components and modifier classes as intended. You can toggle this setting globally with the `$enable-important-utilities` variable (defaults to `true`).


    Using the API
    -------------


    Now that you’re familiar with how the utilities API works, learn how to add your own custom classes and modify our default utilities.


    ### Override utilities


    Override existing utilities by using the same key. For example, if you want additional responsive overflow utility classes, you can do this:



    ```
    $utilities: (
     "overflow": (
     responsive: true,
     property: overflow,
     values: visible hidden scroll auto,
     ),
    );

    ```
    ### Add utilities


    New utilities can be added to the default `$utilities` map with a `map-merge`. Make sure our required Sass files and `_utilities.scss` are imported first, then use the `map-merge` to add your additional utilities. For example, here’s how to add a responsive `cursor` utility with three values.



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities,
     (
     "cursor": (
     property: cursor,
     class: cursor,
     responsive: true,
     values: auto pointer grab,
     )
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    ### Modify utilities


    Modify existing utilities in the default `$utilities` map with `map-get` and `map-merge` functions. In the example below, we’re adding an additional value to the `width` utilities. Start with an initial `map-merge` and then specify which utility you want to modify. From there, fetch the nested `"width"` map with `map-get` to access and modify the utility’s options and values.



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities,
     (
     "width": map-merge(
     map-get($utilities, "width"),
     (
     values: map-merge(
     map-get(map-get($utilities, "width"), "values"),
     (10: 10%),
     ),
     ),
     ),
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    #### Enable responsive


    You can enable responsive classes for an existing set of utilities that are not currently responsive by default. For example, to make the `border` classes responsive:



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities, (
     "border": map-merge(
     map-get($utilities, "border"),
     ( responsive: true ),
     ),
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    This will now generate responsive variations of `.border` and `.border-0` for each breakpoint. Your generated CSS will look like this:



    ```
    .border { ... }
    .border-0 { ... }

    @media (min-width: 576px) {
     .border-sm { ... }
     .border-sm-0 { ... }
    }

    @media (min-width: 768px) {
     .border-md { ... }
     .border-md-0 { ... }
    }

    @media (min-width: 992px) {
     .border-lg { ... }
     .border-lg-0 { ... }
    }

    @media (min-width: 1200px) {
     .border-xl { ... }
     .border-xl-0 { ... }
    }

    @media (min-width: 1400px) {
     .border-xxl { ... }
     .border-xxl-0 { ... }
    }

    ```
    #### Rename utilities


    Missing v4 utilities, or used to another naming convention? The utilities API can be used to override the resulting `class` of a given utility—for example, to rename `.ms-*` utilities to oldish `.ml-*`:



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities, (
     "margin-start": map-merge(
     map-get($utilities, "margin-start"),
     ( class: ml ),
     ),
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    ### Remove utilities


    Remove any of the default utilities with the [`map-remove()` Sass function](https://sass-lang.com/documentation/modules/map#remove).



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    // Remove multiple utilities with a comma-separated list
    $utilities: map-remove($utilities, "width", "float");

    @import "bootstrap/scss/utilities/api";

    ```
    You can also use the [`map-merge()` Sass function](https://sass-lang.com/documentation/modules/map#merge) and set the group key to `null` to remove the utility.



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities,
     (
     "width": null
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    ### Add, remove, modify


    You can add, remove, and modify many utilities all at once with the [`map-merge()` Sass function](https://sass-lang.com/documentation/modules/map#merge). Here’s how you can combine the previous examples into one larger map.



    ```
    @import "bootstrap/scss/functions";
    @import "bootstrap/scss/variables";
    @import "bootstrap/scss/variables-dark";
    @import "bootstrap/scss/maps";
    @import "bootstrap/scss/mixins";
    @import "bootstrap/scss/utilities";

    $utilities: map-merge(
     $utilities,
     (
     // Remove the `width` utility
     "width": null,

     // Make an existing utility responsive
     "border": map-merge(
     map-get($utilities, "border"),
     ( responsive: true ),
     ),

     // Add new utilities
     "cursor": (
     property: cursor,
     class: cursor,
     responsive: true,
     values: auto pointer grab,
     )
     )
    );

    @import "bootstrap/scss/utilities/api";

    ```
    #### Remove utility in RTL


    Some edge cases make [RTL styling difficult](https://rtlstyling.com/posts/rtl-styling#common-things-that-might-not-work-for-rtl), such as line breaks in Arabic. Thus utilities can be dropped from RTL output by setting the `rtl` option to `false`:



    ```
    $utilities: (
     "word-wrap": (
     property: word-wrap word-break,
     class: text,
     values: (break: break-word),
     rtl: false
     ),
    );

    ```
    Output:



    ```
    /\* rtl:begin:remove \*/
    .text-break {
     word-wrap: break-word !important;
     word-break: break-word !important;
    }
    /\* rtl:end:remove \*/

    ```
    This doesn’t output anything in RTL, thanks to [the RTLCSS `remove` control directive](https://rtlcss.com/learn/usage-guide/control-directives/#remove).









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BACKGROUND:
    """

    Background
    ==========



    Convey meaning through `background-color` and add decoration with gradients.






     On this page


    **On this page**


    ---




    * [Background color](#background-color)
    * [Background gradient](#background-gradient)
    * [Opacity](#opacity)
            + [How it works](#how-it-works)
            + [Example](#example)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass maps](#sass-maps)
            + [Sass mixins](#sass-mixins)
            + [Sass utilities API](#sass-utilities-api)







    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Background color
    ----------------


    Similar to the contextual text color classes, set the background of an element to any contextual class. Background utilities **do not set `color`**, so in some cases you’ll want to use `.text-*` [color utilities](https://getbootstrap.com/docs/5.3/utilities/colors/).



    Background utilities like `.bg-*` that generated from our original `$theme-colors` Sass map don’t yet respond to color modes, however, any `.bg-*-subtle` utility will. This will be resolved in v6.


    .bg-primary
    .bg-primary-subtle
    .bg-secondary
    .bg-secondary-subtle
    .bg-success
    .bg-success-subtle
    .bg-danger
    .bg-danger-subtle
    .bg-warning
    .bg-warning-subtle
    .bg-info
    .bg-info-subtle
    .bg-light
    .bg-light-subtle
    .bg-dark
    .bg-dark-subtle
    .bg-body-secondary


    .bg-body-tertiary


    .bg-body
    .bg-black
    .bg-white
    .bg-transparent

    html









    ```
    <div class="p-3 mb-2 bg-primary text-white">.bg-primary</div>
    <div class="p-3 mb-2 bg-primary-subtle text-emphasis-primary">.bg-primary-subtle</div>
    <div class="p-3 mb-2 bg-secondary text-white">.bg-secondary</div>
    <div class="p-3 mb-2 bg-secondary-subtle text-emphasis-secondary">.bg-secondary-subtle</div>
    <div class="p-3 mb-2 bg-success text-white">.bg-success</div>
    <div class="p-3 mb-2 bg-success-subtle text-emphasis-success">.bg-success-subtle</div>
    <div class="p-3 mb-2 bg-danger text-white">.bg-danger</div>
    <div class="p-3 mb-2 bg-danger-subtle text-emphasis-danger">.bg-danger-subtle</div>
    <div class="p-3 mb-2 bg-warning text-dark">.bg-warning</div>
    <div class="p-3 mb-2 bg-warning-subtle text-emphasis-warning">.bg-warning-subtle</div>
    <div class="p-3 mb-2 bg-info text-dark">.bg-info</div>
    <div class="p-3 mb-2 bg-info-subtle text-emphasis-info">.bg-info-subtle</div>
    <div class="p-3 mb-2 bg-light text-dark">.bg-light</div>
    <div class="p-3 mb-2 bg-light-subtle text-emphasis-light">.bg-light-subtle</div>
    <div class="p-3 mb-2 bg-dark text-white">.bg-dark</div>
    <div class="p-3 mb-2 bg-dark-subtle text-emphasis-dark">.bg-dark-subtle</div>
    <p class="p-3 mb-2 bg-body-secondary">.bg-body-secondary</p>
    <p class="p-3 mb-2 bg-body-tertiary">.bg-body-tertiary</p>

    <div class="p-3 mb-2 bg-body text-body">.bg-body</div>
    <div class="p-3 mb-2 bg-black text-white">.bg-black</div>
    <div class="p-3 mb-2 bg-white text-dark">.bg-white</div>
    <div class="p-3 mb-2 bg-transparent text-body">.bg-transparent</div>
    ```

    Background gradient
    -------------------


    By adding a `.bg-gradient` class, a linear gradient is added as background image to the backgrounds. This gradient starts with a semi-transparent white which fades out to the bottom.


    Do you need a gradient in your custom CSS? Just add `background-image: var(--bs-gradient);`.


    .bg-primary.bg-gradient
    .bg-secondary.bg-gradient
    .bg-success.bg-gradient
    .bg-danger.bg-gradient
    .bg-warning.bg-gradient
    .bg-info.bg-gradient
    .bg-light.bg-gradient
    .bg-dark.bg-gradient
    .bg-black.bg-gradient
    Opacity
    -------


    Added in v5.1.0
    As of v5.1.0, `background-color` utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.


    ### How it works


    Consider our default `.bg-success` utility.



    ```
    .bg-success {
     --bs-bg-opacity: 1;
     background-color: rgba(var(--bs-success-rgb), var(--bs-bg-opacity)) !important;
    }

    ```
    We use an RGB version of our `--bs-success` (with the value of `25, 135, 84`) CSS variable and attached a second CSS variable, `--bs-bg-opacity`, for the alpha transparency (with a default value `1` thanks to a local CSS variable). That means anytime you use `.bg-success` now, your computed `color` value is `rgba(25, 135, 84, 1)`. The local CSS variable inside each `.bg-*` class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.


    ### Example


    To change that opacity, override `--bs-bg-opacity` via custom styles or inline styles.



    This is default success background
    This is 50% opacity success background

    html









    ```
    <div class="bg-success p-2 text-white">This is default success background</div>
    <div class="bg-success p-2" style="--bs-bg-opacity: .5;">This is 50% opacity success background</div>
    ```

    Or, choose from any of the `.bg-opacity` utilities:



    This is default success background
    This is 75% opacity success background
    This is 50% opacity success background
    This is 25% opacity success background
    This is 10% opacity success background

    html









    ```
    <div class="bg-success p-2 text-white">This is default success background</div>
    <div class="bg-success p-2 text-white bg-opacity-75">This is 75% opacity success background</div>
    <div class="bg-success p-2 text-dark bg-opacity-50">This is 50% opacity success background</div>
    <div class="bg-success p-2 text-dark bg-opacity-25">This is 25% opacity success background</div>
    <div class="bg-success p-2 text-dark bg-opacity-10">This is 10% opacity success background</div>
    ```

    CSS
    ---


    In addition to the following Sass functionality, consider reading about our included [CSS custom properties](https://getbootstrap.com/docs/5.3/customize/css-variables/) (aka CSS variables) for colors and more.


    ### Sass variables


    Most `background-color` utilities are generated by our theme colors, reassigned from our generic color palette variables.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $blue: #0d6efd;
    $indigo: #6610f2;
    $purple: #6f42c1;
    $pink: #d63384;
    $red: #dc3545;
    $orange: #fd7e14;
    $yellow: #ffc107;
    $green: #198754;
    $teal: #20c997;
    $cyan: #0dcaf0;

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $primary: $blue;
    $secondary: $gray-600;
    $success: $green;
    $info: $cyan;
    $warning: $yellow;
    $danger: $red;
    $light: $gray-100;
    $dark: $gray-900;

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $gradient: linear-gradient(180deg, rgba($white, .15), rgba($white, 0));

    ```

    Grayscale colors are also available, but only a subset are used to generate any utilities.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $white: #fff;
    $gray-100: #f8f9fa;
    $gray-200: #e9ecef;
    $gray-300: #dee2e6;
    $gray-400: #ced4da;
    $gray-500: #adb5bd;
    $gray-600: #6c757d;
    $gray-700: #495057;
    $gray-800: #343a40;
    $gray-900: #212529;
    $black: #000;

    ```

    Variables for setting `background-color` in `.bg-*-subtle` utilities in light and dark mode:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $primary-bg-subtle: tint-color($primary, 80%);
    $secondary-bg-subtle: tint-color($secondary, 80%);
    $success-bg-subtle: tint-color($success, 80%);
    $info-bg-subtle: tint-color($info, 80%);
    $warning-bg-subtle: tint-color($warning, 80%);
    $danger-bg-subtle: tint-color($danger, 80%);
    $light-bg-subtle: mix($gray-100, $white);
    $dark-bg-subtle: $gray-400;

    ```



    [scss/\_variables-dark.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables-dark.scss)






    ```
    $primary-bg-subtle-dark: shade-color($primary, 80%);
    $secondary-bg-subtle-dark: shade-color($secondary, 80%);
    $success-bg-subtle-dark: shade-color($success, 80%);
    $info-bg-subtle-dark: shade-color($info, 80%);
    $warning-bg-subtle-dark: shade-color($warning, 80%);
    $danger-bg-subtle-dark: shade-color($danger, 80%);
    $light-bg-subtle-dark: $gray-800;
    $dark-bg-subtle-dark: mix($gray-800, $black);

    ```

    ### Sass maps


    Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $theme-colors: (
     "primary": $primary,
     "secondary": $secondary,
     "success": $success,
     "info": $info,
     "warning": $warning,
     "danger": $danger,
     "light": $light,
     "dark": $dark
    );

    ```

    Grayscale colors are also available as a Sass map. **This map is not used to generate any utilities.**




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $grays: (
     "100": $gray-100,
     "200": $gray-200,
     "300": $gray-300,
     "400": $gray-400,
     "500": $gray-500,
     "600": $gray-600,
     "700": $gray-700,
     "800": $gray-800,
     "900": $gray-900
    );

    ```

    RGB colors are generated from a separate Sass map:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");

    ```

    Background color opacities build on that with their own map that’s consumed by the utilities API:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $utilities-bg: map-merge(
     $utilities-colors,
     (
     "black": to-rgb($black),
     "white": to-rgb($white),
     "body": to-rgb($body-bg)
     )
    );
    $utilities-bg-colors: map-loop($utilities-bg, rgba-css-var, "$key", "bg");

    $utilities-bg-subtle: (
     "primary-subtle": var(--#{$prefix}primary-bg-subtle),
     "secondary-subtle": var(--#{$prefix}secondary-bg-subtle),
     "success-subtle": var(--#{$prefix}success-bg-subtle),
     "info-subtle": var(--#{$prefix}info-bg-subtle),
     "warning-subtle": var(--#{$prefix}warning-bg-subtle),
     "danger-subtle": var(--#{$prefix}danger-bg-subtle),
     "light-subtle": var(--#{$prefix}light-bg-subtle),
     "dark-subtle": var(--#{$prefix}dark-bg-subtle)
    );

    ```

    Color mode background colors are also available as a Sass map:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-bg-subtle: (
     "primary": $primary-bg-subtle,
     "secondary": $secondary-bg-subtle,
     "success": $success-bg-subtle,
     "info": $info-bg-subtle,
     "warning": $warning-bg-subtle,
     "danger": $danger-bg-subtle,
     "light": $light-bg-subtle,
     "dark": $dark-bg-subtle,
    );

    ```



    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-bg-subtle-dark: (
     "primary": $primary-bg-subtle-dark,
     "secondary": $secondary-bg-subtle-dark,
     "success": $success-bg-subtle-dark,
     "info": $info-bg-subtle-dark,
     "warning": $warning-bg-subtle-dark,
     "danger": $danger-bg-subtle-dark,
     "light": $light-bg-subtle-dark,
     "dark": $dark-bg-subtle-dark,
    );
    ```

    ### Sass mixins


    **No mixins are used to generate our background utilities**, but we do have some additional mixins for other situations where you’d like to create your own gradients.




    [scss/mixins/\_gradients.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_gradients.scss)






    ```
    @mixin gradient-bg($color: null) {
     background-color: $color;

     @if $enable-gradients {
     background-image: var(--#{$prefix}gradient);
     }
    }

    ```



    [scss/mixins/\_gradients.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_gradients.scss)






    ```
    // Horizontal gradient, from left to right
    //
    // Creates two color stops, start and end, by specifying a color and position for each color stop.
    @mixin gradient-x($start-color: $gray-700, $end-color: $gray-800, $start-percent: 0%, $end-percent: 100%) {
     background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
    }

    // Vertical gradient, from top to bottom
    //
    // Creates two color stops, start and end, by specifying a color and position for each color stop.
    @mixin gradient-y($start-color: $gray-700, $end-color: $gray-800, $start-percent: null, $end-percent: null) {
     background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
    }

    @mixin gradient-directional($start-color: $gray-700, $end-color: $gray-800, $deg: 45deg) {
     background-image: linear-gradient($deg, $start-color, $end-color);
    }

    @mixin gradient-x-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {
     background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
    }

    @mixin gradient-y-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {
     background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
    }

    @mixin gradient-radial($inner-color: $gray-700, $outer-color: $gray-800) {
     background-image: radial-gradient(circle, $inner-color, $outer-color);
    }

    @mixin gradient-striped($color: rgba($white, .15), $angle: 45deg) {
     background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    }

    ```

    ### Sass utilities API


    Background utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "background-color": (
     property: background-color,
     class: bg,
     local-vars: (
     "bg-opacity": 1
     ),
     values: map-merge(
     $utilities-bg-colors,
     (
     "transparent": transparent,
     "body-secondary": rgba(var(--#{$prefix}secondary-bg-rgb), var(--#{$prefix}bg-opacity)),
     "body-tertiary": rgba(var(--#{$prefix}tertiary-bg-rgb), var(--#{$prefix}bg-opacity)),
     )
     )
    ),
    "bg-opacity": (
     css-var: true,
     class: bg-opacity,
     values: (
     10: .1,
     25: .25,
     50: .5,
     75: .75,
     100: 1
     )
    ),
    "subtle-background-color": (
     property: background-color,
     class: bg,
     values: $utilities-bg-subtle
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BORDERS:
    """

    Borders
    =======



    Use border utilities to quickly style the border and border-radius of an element. Great for images, buttons, or any other element.






     On this page


    **On this page**


    ---




    * [Border](#border)
            + [Additive](#additive)
            + [Subtractive](#subtractive)
    * [Color](#color)
    * [Opacity](#opacity)
            + [How it works](#how-it-works)
            + [Example](#example)
    * [Width](#width)
    * [Radius](#radius)
            + [Sizes](#sizes)
    * [CSS](#css)
            + [Variables](#variables)
            + [Sass variables](#sass-variables)
            + [Sass maps](#sass-maps)
            + [Sass mixins](#sass-mixins)
            + [Sass utilities API](#sass-utilities-api)






    Border
    ------


    Use border utilities to add or remove an element’s borders. Choose from all borders or one at a time.


    ### Additive


    Add borders to custom elements:









    html









    ```
    <span class="border"></span>
    <span class="border-top"></span>
    <span class="border-end"></span>
    <span class="border-bottom"></span>
    <span class="border-start"></span>
    ```

    ### Subtractive


    Or remove borders:









    html









    ```
    <span class="border border-0"></span>
    <span class="border border-top-0"></span>
    <span class="border border-end-0"></span>
    <span class="border border-bottom-0"></span>
    <span class="border border-start-0"></span>
    ```

    Color
    -----



    Border utilities like `.border-*` that generated from our original `$theme-colors` Sass map don’t yet respond to color modes, however, any `.border-*-subtle` utility will. This will be resolved in v6.

    Change the border color using utilities built on our theme colors.






















    html









    ```
    <span class="border border-primary"></span>
    <span class="border border-primary-subtle"></span>
    <span class="border border-secondary"></span>
    <span class="border border-secondary-subtle"></span>
    <span class="border border-success"></span>
    <span class="border border-success-subtle"></span>
    <span class="border border-danger"></span>
    <span class="border border-danger-subtle"></span>
    <span class="border border-warning"></span>
    <span class="border border-warning-subtle"></span>
    <span class="border border-info"></span>
    <span class="border border-info-subtle"></span>
    <span class="border border-light"></span>
    <span class="border border-light-subtle"></span>
    <span class="border border-dark"></span>
    <span class="border border-dark-subtle"></span>
    <span class="border border-black"></span>
    <span class="border border-white"></span>
    ```

    Or modify the default `border-color` of a component:




    Email address



     Dangerous heading


     Changing border color and width


    html









    ```
    <div class="mb-4">
     <label for="exampleFormControlInput1" class="form-label">Email address</label>
     <input type="email" class="form-control border-success" id="exampleFormControlInput1" placeholder="name@example.com">
    </div>

    <div class="h4 pb-2 mb-4 text-danger border-bottom border-danger">
     Dangerous heading
    </div>

    <div class="p-3 bg-info bg-opacity-10 border border-info border-start-0 rounded-end">
     Changing border color and width
    </div>
    ```

    Opacity
    -------


    Added in v5.2.0
    Bootstrap `border-{color}` utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.


    ### How it works


    Consider our default `.border-success` utility.



    ```
    .border-success {
     --bs-border-opacity: 1;
     border-color: rgba(var(--bs-success-rgb), var(--bs-border-opacity)) !important;
    }

    ```
    We use an RGB version of our `--bs-success` (with the value of `25, 135, 84`) CSS variable and attached a second CSS variable, `--bs-border-opacity`, for the alpha transparency (with a default value `1` thanks to a local CSS variable). That means anytime you use `.border-success` now, your computed `color` value is `rgba(25, 135, 84, 1)`. The local CSS variable inside each `.border-*` class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.


    ### Example


    To change that opacity, override `--bs-border-opacity` via custom styles or inline styles.



    This is default success border
    This is 50% opacity success border

    html









    ```
    <div class="border border-success p-2 mb-2">This is default success border</div>
    <div class="border border-success p-2" style="--bs-border-opacity: .5;">This is 50% opacity success border</div>
    ```

    Or, choose from any of the `.border-opacity` utilities:



    This is default success border
    This is 75% opacity success border
    This is 50% opacity success border
    This is 25% opacity success border
    This is 10% opacity success border

    html









    ```
    <div class="border border-success p-2 mb-2">This is default success border</div>
    <div class="border border-success p-2 mb-2 border-opacity-75">This is 75% opacity success border</div>
    <div class="border border-success p-2 mb-2 border-opacity-50">This is 50% opacity success border</div>
    <div class="border border-success p-2 mb-2 border-opacity-25">This is 25% opacity success border</div>
    <div class="border border-success p-2 border-opacity-10">This is 10% opacity success border</div>
    ```

    Width
    -----









    html









    ```
    <span class="border border-1"></span>
    <span class="border border-2"></span>
    <span class="border border-3"></span>
    <span class="border border-4"></span>
    <span class="border border-5"></span>
    ```

    Radius
    ------


    Add classes to an element to easily round its corners.



    Example rounded image75x75
    Example top rounded image75x75
    Example right rounded image75x75
    Example bottom rounded image75x75
    Example left rounded image75x75
    Completely round image75x75
    Rounded pill image150x75

    html









    ```
    <img src="..." class="rounded" alt="...">
    <img src="..." class="rounded-top" alt="...">
    <img src="..." class="rounded-end" alt="...">
    <img src="..." class="rounded-bottom" alt="...">
    <img src="..." class="rounded-start" alt="...">
    <img src="..." class="rounded-circle" alt="...">
    <img src="..." class="rounded-pill" alt="...">
    ```

    ### Sizes


    Use the scaling classes for larger or smaller rounded corners. Sizes range from `0` to `5`, and can be configured by modifying the utilities API.



    Example non-rounded image75x75
    Example small rounded image75x75
    Example default rounded image75x75
    Example large rounded image75x75
    Example larger rounded image75x75
    Example extra large rounded image75x75

    html









    ```
    <img src="..." class="rounded-0" alt="...">
    <img src="..." class="rounded-1" alt="...">
    <img src="..." class="rounded-2" alt="...">
    <img src="..." class="rounded-3" alt="...">
    <img src="..." class="rounded-4" alt="...">
    <img src="..." class="rounded-5" alt="...">
    ```


    Example small rounded image75x75
    Example default left rounded image75x75
    Example right completely round image75x75
    Example left rounded pill image75x75
    Example extra large bottom rounded image75x75

    html









    ```
    <img src="..." class="rounded-bottom-1" alt="...">
    <img src="..." class="rounded-start-2" alt="...">
    <img src="..." class="rounded-end-circle" alt="...">
    <img src="..." class="rounded-start-pill" alt="...">
    <img src="..." class="rounded-5 rounded-top-0" alt="...">
    ```

    CSS
    ---


    ### Variables


    Added in v5.2.0


    [scss/\_root.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_root.scss)






    ```
    --#{$prefix}border-width: #{$border-width};
    --#{$prefix}border-style: #{$border-style};
    --#{$prefix}border-color: #{$border-color};
    --#{$prefix}border-color-translucent: #{$border-color-translucent};

    --#{$prefix}border-radius: #{$border-radius};
    --#{$prefix}border-radius-sm: #{$border-radius-sm};
    --#{$prefix}border-radius-lg: #{$border-radius-lg};
    --#{$prefix}border-radius-xl: #{$border-radius-xl};
    --#{$prefix}border-radius-xxl: #{$border-radius-xxl};
    --#{$prefix}border-radius-2xl: var(--#{$prefix}border-radius-xxl); // Deprecated in v5.3.0 for consistency
    --#{$prefix}border-radius-pill: #{$border-radius-pill};
    ```

    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $border-width: 1px;
    $border-widths: (
     1: 1px,
     2: 2px,
     3: 3px,
     4: 4px,
     5: 5px
    );
    $border-style: solid;
    $border-color: $gray-300;
    $border-color-translucent: rgba($black, .175);

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $border-radius: .375rem;
    $border-radius-sm: .25rem;
    $border-radius-lg: .5rem;
    $border-radius-xl: 1rem;
    $border-radius-xxl: 2rem;
    $border-radius-pill: 50rem;

    ```

    Variables for setting `border-color` in `.border-*-subtle` utilities in light and dark mode:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $primary-border-subtle: tint-color($primary, 60%);
    $secondary-border-subtle: tint-color($secondary, 60%);
    $success-border-subtle: tint-color($success, 60%);
    $info-border-subtle: tint-color($info, 60%);
    $warning-border-subtle: tint-color($warning, 60%);
    $danger-border-subtle: tint-color($danger, 60%);
    $light-border-subtle: $gray-200;
    $dark-border-subtle: $gray-500;

    ```



    [scss/\_variables-dark.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables-dark.scss)






    ```
    $primary-border-subtle-dark: shade-color($primary, 40%);
    $secondary-border-subtle-dark: shade-color($secondary, 40%);
    $success-border-subtle-dark: shade-color($success, 40%);
    $info-border-subtle-dark: shade-color($info, 40%);
    $warning-border-subtle-dark: shade-color($warning, 40%);
    $danger-border-subtle-dark: shade-color($danger, 40%);
    $light-border-subtle-dark: $gray-700;
    $dark-border-subtle-dark: $gray-800;

    ```

    ### Sass maps


    Color mode adaptive border colors are also available as a Sass map:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-border-subtle: (
     "primary": $primary-border-subtle,
     "secondary": $secondary-border-subtle,
     "success": $success-border-subtle,
     "info": $info-border-subtle,
     "warning": $warning-border-subtle,
     "danger": $danger-border-subtle,
     "light": $light-border-subtle,
     "dark": $dark-border-subtle,
    );

    ```



    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-border-subtle-dark: (
     "primary": $primary-border-subtle-dark,
     "secondary": $secondary-border-subtle-dark,
     "success": $success-border-subtle-dark,
     "info": $info-border-subtle-dark,
     "warning": $warning-border-subtle-dark,
     "danger": $danger-border-subtle-dark,
     "light": $light-border-subtle-dark,
     "dark": $dark-border-subtle-dark,
    );
    ```

    ### Sass mixins




    [scss/mixins/\_border-radius.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/mixins/_border-radius.scss)






    ```
    @mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
     @if $enable-rounded {
     border-radius: valid-radius($radius);
     }
     @else if $fallback-border-radius != false {
     border-radius: $fallback-border-radius;
     }
    }

    @mixin border-top-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-top-left-radius: valid-radius($radius);
     border-top-right-radius: valid-radius($radius);
     }
    }

    @mixin border-end-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-top-right-radius: valid-radius($radius);
     border-bottom-right-radius: valid-radius($radius);
     }
    }

    @mixin border-bottom-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-bottom-right-radius: valid-radius($radius);
     border-bottom-left-radius: valid-radius($radius);
     }
    }

    @mixin border-start-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-top-left-radius: valid-radius($radius);
     border-bottom-left-radius: valid-radius($radius);
     }
    }

    @mixin border-top-start-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-top-left-radius: valid-radius($radius);
     }
    }

    @mixin border-top-end-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-top-right-radius: valid-radius($radius);
     }
    }

    @mixin border-bottom-end-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-bottom-right-radius: valid-radius($radius);
     }
    }

    @mixin border-bottom-start-radius($radius: $border-radius) {
     @if $enable-rounded {
     border-bottom-left-radius: valid-radius($radius);
     }
    }

    ```

    ### Sass utilities API


    Border utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "border": (
     property: border,
     values: (
     null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
     0: 0,
     )
    ),
    "border-top": (
     property: border-top,
     values: (
     null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
     0: 0,
     )
    ),
    "border-end": (
     property: border-right,
     class: border-end,
     values: (
     null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
     0: 0,
     )
    ),
    "border-bottom": (
     property: border-bottom,
     values: (
     null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
     0: 0,
     )
    ),
    "border-start": (
     property: border-left,
     class: border-start,
     values: (
     null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
     0: 0,
     )
    ),
    "border-color": (
     property: border-color,
     class: border,
     local-vars: (
     "border-opacity": 1
     ),
     values: $utilities-border-colors
    ),
    "subtle-border-color": (
     property: border-color,
     class: border,
     values: $utilities-border-subtle
    ),
    "border-width": (
     property: border-width,
     class: border,
     values: $border-widths
    ),
    "border-opacity": (
     css-var: true,
     class: border-opacity,
     values: (
     10: .1,
     25: .25,
     50: .5,
     75: .75,
     100: 1
     )
    ),
    ```



    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "rounded": (
     property: border-radius,
     class: rounded,
     values: (
     null: var(--#{$prefix}border-radius),
     0: 0,
     1: var(--#{$prefix}border-radius-sm),
     2: var(--#{$prefix}border-radius),
     3: var(--#{$prefix}border-radius-lg),
     4: var(--#{$prefix}border-radius-xl),
     5: var(--#{$prefix}border-radius-xxl),
     circle: 50%,
     pill: var(--#{$prefix}border-radius-pill)
     )
    ),
    "rounded-top": (
     property: border-top-left-radius border-top-right-radius,
     class: rounded-top,
     values: (
     null: var(--#{$prefix}border-radius),
     0: 0,
     1: var(--#{$prefix}border-radius-sm),
     2: var(--#{$prefix}border-radius),
     3: var(--#{$prefix}border-radius-lg),
     4: var(--#{$prefix}border-radius-xl),
     5: var(--#{$prefix}border-radius-xxl),
     circle: 50%,
     pill: var(--#{$prefix}border-radius-pill)
     )
    ),
    "rounded-end": (
     property: border-top-right-radius border-bottom-right-radius,
     class: rounded-end,
     values: (
     null: var(--#{$prefix}border-radius),
     0: 0,
     1: var(--#{$prefix}border-radius-sm),
     2: var(--#{$prefix}border-radius),
     3: var(--#{$prefix}border-radius-lg),
     4: var(--#{$prefix}border-radius-xl),
     5: var(--#{$prefix}border-radius-xxl),
     circle: 50%,
     pill: var(--#{$prefix}border-radius-pill)
     )
    ),
    "rounded-bottom": (
     property: border-bottom-right-radius border-bottom-left-radius,
     class: rounded-bottom,
     values: (
     null: var(--#{$prefix}border-radius),
     0: 0,
     1: var(--#{$prefix}border-radius-sm),
     2: var(--#{$prefix}border-radius),
     3: var(--#{$prefix}border-radius-lg),
     4: var(--#{$prefix}border-radius-xl),
     5: var(--#{$prefix}border-radius-xxl),
     circle: 50%,
     pill: var(--#{$prefix}border-radius-pill)
     )
    ),
    "rounded-start": (
     property: border-bottom-left-radius border-top-left-radius,
     class: rounded-start,
     values: (
     null: var(--#{$prefix}border-radius),
     0: 0,
     1: var(--#{$prefix}border-radius-sm),
     2: var(--#{$prefix}border-radius),
     3: var(--#{$prefix}border-radius-lg),
     4: var(--#{$prefix}border-radius-xl),
     5: var(--#{$prefix}border-radius-xxl),
     circle: 50%,
     pill: var(--#{$prefix}border-radius-pill)
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class COLORS:
    """

    Colors
    ======



    Convey meaning through `color` with a handful of color utility classes. Includes support for styling links with hover states, too.






     On this page


    **On this page**


    ---




    * [Colors](#colors)
    * [Opacity](#opacity)
            + [How it works](#how-it-works)
            + [Example](#example)
    * [Specificity](#specificity)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass maps](#sass-maps)
            + [Sass utilities API](#sass-utilities-api)







    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    Colors
    ------


    Colorize text with color utilities. If you want to colorize links, you can use the [`.link-*` helper classes](https://getbootstrap.com/docs/5.3/helpers/colored-links/) which have `:hover` and `:focus` states.



    Color utilities like `.text-*` that generated from our original `$theme-colors` Sass map don’t yet respond to color modes, however, any `.text-*-emphasis` utility will. This will be resolved in v6.


    .text-primary


    .text-primary-emphasis


    .text-secondary


    .text-secondary-emphasis


    .text-success


    .text-success-emphasis


    .text-danger


    .text-danger-emphasis


    .text-warning


    .text-warning-emphasis


    .text-info


    .text-info-emphasis


    .text-light


    .text-light-emphasis


    .text-dark


    .text-dark-emphasis


    .text-body


    .text-body-emphasis


    .text-body-secondary


    .text-body-tertiary


    .text-black


    .text-white


    .text-black-50


    .text-white-50



    html









    ```
    <p class="text-primary">.text-primary</p>
    <p class="text-primary-emphasis">.text-primary-emphasis</p>
    <p class="text-secondary">.text-secondary</p>
    <p class="text-secondary-emphasis">.text-secondary-emphasis</p>
    <p class="text-success">.text-success</p>
    <p class="text-success-emphasis">.text-success-emphasis</p>
    <p class="text-danger">.text-danger</p>
    <p class="text-danger-emphasis">.text-danger-emphasis</p>
    <p class="text-warning bg-dark">.text-warning</p>
    <p class="text-warning-emphasis">.text-warning-emphasis</p>
    <p class="text-info bg-dark">.text-info</p>
    <p class="text-info-emphasis">.text-info-emphasis</p>
    <p class="text-light bg-dark">.text-light</p>
    <p class="text-light-emphasis">.text-light-emphasis</p>
    <p class="text-dark bg-white">.text-dark</p>
    <p class="text-dark-emphasis">.text-dark-emphasis</p>

    <p class="text-body">.text-body</p>
    <p class="text-body-emphasis">.text-body-emphasis</p>
    <p class="text-body-secondary">.text-body-secondary</p>
    <p class="text-body-tertiary">.text-body-tertiary</p>

    <p class="text-black bg-white">.text-black</p>
    <p class="text-white bg-dark">.text-white</p>
    <p class="text-black-50 bg-white">.text-black-50</p>
    <p class="text-white-50 bg-dark">.text-white-50</p>
    ```


    **Deprecation:** With the addition of `.text-opacity-*` utilities and CSS variables for text utilities, `.text-black-50` and `.text-white-50` are deprecated as of v5.1.0. They’ll be removed in v6.0.0.


    **Deprecation:** With the addition of the expanded theme colors and variables, the `.text-muted` utility has been deprecated as of v5.3.0. Its default value has also been reassigned to the new `--bs-secondary-color` CSS variable to better support color modes. It will be removed in v6.0.0.

    Opacity
    -------


    Added in v5.1.0
    As of v5.1.0, text color utilities are generated with Sass using CSS variables. This allows for real-time color changes without compilation and dynamic alpha transparency changes.


    ### How it works


    Consider our default `.text-primary` utility.



    ```
    .text-primary {
     --bs-text-opacity: 1;
     color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;
    }

    ```
    We use an RGB version of our `--bs-primary` (with the value of `13, 110, 253`) CSS variable and attached a second CSS variable, `--bs-text-opacity`, for the alpha transparency (with a default value `1` thanks to a local CSS variable). That means anytime you use `.text-primary` now, your computed `color` value is `rgba(13, 110, 253, 1)`. The local CSS variable inside each `.text-*` class avoids inheritance issues so nested instances of the utilities don’t automatically have a modified alpha transparency.


    ### Example


    To change that opacity, override `--bs-text-opacity` via custom styles or inline styles.



    This is default primary text
    This is 50% opacity primary text

    html









    ```
    <div class="text-primary">This is default primary text</div>
    <div class="text-primary" style="--bs-text-opacity: .5;">This is 50% opacity primary text</div>
    ```

    Or, choose from any of the `.text-opacity` utilities:



    This is default primary text
    This is 75% opacity primary text
    This is 50% opacity primary text
    This is 25% opacity primary text

    html









    ```
    <div class="text-primary">This is default primary text</div>
    <div class="text-primary text-opacity-75">This is 75% opacity primary text</div>
    <div class="text-primary text-opacity-50">This is 50% opacity primary text</div>
    <div class="text-primary text-opacity-25">This is 25% opacity primary text</div>
    ```

    Specificity
    -----------


    Sometimes contextual classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element’s content in a `<div>` or more semantic element with the desired class.


    CSS
    ---


    In addition to the following Sass functionality, consider reading about our included [CSS custom properties](https://getbootstrap.com/docs/5.3/customize/css-variables/) (aka CSS variables) for colors and more.


    ### Sass variables


    Most `color` utilities are generated by our theme colors, reassigned from our generic color palette variables.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $blue: #0d6efd;
    $indigo: #6610f2;
    $purple: #6f42c1;
    $pink: #d63384;
    $red: #dc3545;
    $orange: #fd7e14;
    $yellow: #ffc107;
    $green: #198754;
    $teal: #20c997;
    $cyan: #0dcaf0;

    ```



    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $primary: $blue;
    $secondary: $gray-600;
    $success: $green;
    $info: $cyan;
    $warning: $yellow;
    $danger: $red;
    $light: $gray-100;
    $dark: $gray-900;

    ```

    Grayscale colors are also available, but only a subset are used to generate any utilities.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $white: #fff;
    $gray-100: #f8f9fa;
    $gray-200: #e9ecef;
    $gray-300: #dee2e6;
    $gray-400: #ced4da;
    $gray-500: #adb5bd;
    $gray-600: #6c757d;
    $gray-700: #495057;
    $gray-800: #343a40;
    $gray-900: #212529;
    $black: #000;

    ```



    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-text: (
     "primary": $primary-text-emphasis,
     "secondary": $secondary-text-emphasis,
     "success": $success-text-emphasis,
     "info": $info-text-emphasis,
     "warning": $warning-text-emphasis,
     "danger": $danger-text-emphasis,
     "light": $light-text-emphasis,
     "dark": $dark-text-emphasis,
    );

    ```

    Variables for setting colors in `.text-*-emphasis` utilities in light and dark mode:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $primary-text-emphasis: shade-color($primary, 60%);
    $secondary-text-emphasis: shade-color($secondary, 60%);
    $success-text-emphasis: shade-color($success, 60%);
    $info-text-emphasis: shade-color($info, 60%);
    $warning-text-emphasis: shade-color($warning, 60%);
    $danger-text-emphasis: shade-color($danger, 60%);
    $light-text-emphasis: $gray-700;
    $dark-text-emphasis: $gray-700;

    ```



    [scss/\_variables-dark.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables-dark.scss)






    ```
    $primary-text-emphasis-dark: tint-color($primary, 40%);
    $secondary-text-emphasis-dark: tint-color($secondary, 40%);
    $success-text-emphasis-dark: tint-color($success, 40%);
    $info-text-emphasis-dark: tint-color($info, 40%);
    $warning-text-emphasis-dark: tint-color($warning, 40%);
    $danger-text-emphasis-dark: tint-color($danger, 40%);
    $light-text-emphasis-dark: $gray-100;
    $dark-text-emphasis-dark: $gray-300;

    ```

    ### Sass maps


    Theme colors are then put into a Sass map so we can loop over them to generate our utilities, component modifiers, and more.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $theme-colors: (
     "primary": $primary,
     "secondary": $secondary,
     "success": $success,
     "info": $info,
     "warning": $warning,
     "danger": $danger,
     "light": $light,
     "dark": $dark
    );

    ```

    Grayscale colors are also available as a Sass map. **This map is not used to generate any utilities.**




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $grays: (
     "100": $gray-100,
     "200": $gray-200,
     "300": $gray-300,
     "400": $gray-400,
     "500": $gray-500,
     "600": $gray-600,
     "700": $gray-700,
     "800": $gray-800,
     "900": $gray-900
    );

    ```

    RGB colors are generated from a separate Sass map:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");

    ```

    Color opacities build on that with their own map that’s consumed by the utilities API:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $utilities-text: map-merge(
     $utilities-colors,
     (
     "black": to-rgb($black),
     "white": to-rgb($white),
     "body": to-rgb($body-color)
     )
    );
    $utilities-text-colors: map-loop($utilities-text, rgba-css-var, "$key", "text");

    $utilities-text-emphasis-colors: (
     "primary-emphasis": var(--#{$prefix}primary-text-emphasis),
     "secondary-emphasis": var(--#{$prefix}secondary-text-emphasis),
     "success-emphasis": var(--#{$prefix}success-text-emphasis),
     "info-emphasis": var(--#{$prefix}info-text-emphasis),
     "warning-emphasis": var(--#{$prefix}warning-text-emphasis),
     "danger-emphasis": var(--#{$prefix}danger-text-emphasis),
     "light-emphasis": var(--#{$prefix}light-text-emphasis),
     "dark-emphasis": var(--#{$prefix}dark-text-emphasis)
    );

    ```

    Color mode adaptive text colors are also available as a Sass map:




    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-text: (
     "primary": $primary-text-emphasis,
     "secondary": $secondary-text-emphasis,
     "success": $success-text-emphasis,
     "info": $info-text-emphasis,
     "warning": $warning-text-emphasis,
     "danger": $danger-text-emphasis,
     "light": $light-text-emphasis,
     "dark": $dark-text-emphasis,
    );

    ```



    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-text-dark: (
     "primary": $primary-text-emphasis-dark,
     "secondary": $secondary-text-emphasis-dark,
     "success": $success-text-emphasis-dark,
     "info": $info-text-emphasis-dark,
     "warning": $warning-text-emphasis-dark,
     "danger": $danger-text-emphasis-dark,
     "light": $light-text-emphasis-dark,
     "dark": $dark-text-emphasis-dark,
    );
    ```

    ### Sass utilities API


    Color utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "color": (
     property: color,
     class: text,
     local-vars: (
     "text-opacity": 1
     ),
     values: map-merge(
     $utilities-text-colors,
     (
     "muted": var(--#{$prefix}secondary-color), // deprecated
     "black-50": rgba($black, .5), // deprecated
     "white-50": rgba($white, .5), // deprecated
     "body-secondary": var(--#{$prefix}secondary-color),
     "body-tertiary": var(--#{$prefix}tertiary-color),
     "body-emphasis": var(--#{$prefix}emphasis-color),
     "reset": inherit,
     )
     )
    ),
    "text-opacity": (
     css-var: true,
     class: text-opacity,
     values: (
     25: .25,
     50: .5,
     75: .75,
     100: 1
     )
    ),
    "text-color": (
     property: color,
     class: text,
     values: $utilities-text-emphasis-colors
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class DISPLAY_PROPERTY:
    """

    Display property
    ================



    Quickly and responsively toggle the display value of components and more with our display utilities. Includes support for some of the more common values, as well as some extras for controlling display when printing.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Notation](#notation)
    * [Examples](#examples)
    * [Hiding elements](#hiding-elements)
    * [Display in print](#display-in-print)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    How it works
    ------------


    Change the value of the [`display` property](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/display) with our responsive display utility classes. We purposely support only a subset of all possible values for `display`. Classes can be combined for various effects as you need.


    Notation
    --------


    Display utility classes that apply to all [breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/), from `xs` to `xxl`, have no breakpoint abbreviation in them. This is because those classes are applied from `min-width: 0;` and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.


    As such, the classes are named using the format:


    * `.d-{value}` for `xs`
    * `.d-{breakpoint}-{value}` for `sm`, `md`, `lg`, `xl`, and `xxl`.


    Where *value* is one of:


    * `none`
    * `inline`
    * `inline-block`
    * `block`
    * `grid`
    * `inline-grid`
    * `table`
    * `table-cell`
    * `table-row`
    * `flex`
    * `inline-flex`


    The display values can be altered by changing the `display` values defined in `$utilities` and recompiling the SCSS.


    The media queries affect screen widths with the given breakpoint *or larger*. For example, `.d-lg-none` sets `display: none;` on `lg`, `xl`, and `xxl` screens.


    Examples
    --------



    d-inline
    d-inline

    html









    ```
    <div class="d-inline p-2 text-bg-primary">d-inline</div>
    <div class="d-inline p-2 text-bg-dark">d-inline</div>
    ```


    d-block
    d-block

    html









    ```
    <span class="d-block p-2 text-bg-primary">d-block</span>
    <span class="d-block p-2 text-bg-dark">d-block</span>
    ```

    Hiding elements
    ---------------


    For faster mobile-friendly development, use responsive display classes for showing and hiding elements by device. Avoid creating entirely different versions of the same site, instead hide elements responsively for each screen size.


    To hide elements simply use the `.d-none` class or one of the `.d-{sm,md,lg,xl,xxl}-none` classes for any responsive screen variation.


    To show an element only on a given interval of screen sizes you can combine one `.d-*-none` class with a `.d-*-*` class, for example `.d-none .d-md-block .d-xl-none .d-xxl-none` will hide the element for all screen sizes except on medium and large devices.




    | Screen size | Class |
    | --- | --- |
    | Hidden on all | `.d-none` |
    | Hidden only on xs | `.d-none .d-sm-block` |
    | Hidden only on sm | `.d-sm-none .d-md-block` |
    | Hidden only on md | `.d-md-none .d-lg-block` |
    | Hidden only on lg | `.d-lg-none .d-xl-block` |
    | Hidden only on xl | `.d-xl-none .d-xxl-block` |
    | Hidden only on xxl | `.d-xxl-none` |
    | Visible on all | `.d-block` |
    | Visible only on xs | `.d-block .d-sm-none` |
    | Visible only on sm | `.d-none .d-sm-block .d-md-none` |
    | Visible only on md | `.d-none .d-md-block .d-lg-none` |
    | Visible only on lg | `.d-none .d-lg-block .d-xl-none` |
    | Visible only on xl | `.d-none .d-xl-block .d-xxl-none` |
    | Visible only on xxl | `.d-none .d-xxl-block` |



    hide on lg and wider screens
    hide on screens smaller than lg

    html









    ```
    <div class="d-lg-none">hide on lg and wider screens</div>
    <div class="d-none d-lg-block">hide on screens smaller than lg</div>
    ```

    Display in print
    ----------------


    Change the `display` value of elements when printing with our print display utility classes. Includes support for the same `display` values as our responsive `.d-*` utilities.


    * `.d-print-none`
    * `.d-print-inline`
    * `.d-print-inline-block`
    * `.d-print-block`
    * `.d-print-grid`
    * `.d-print-inline-grid`
    * `.d-print-table`
    * `.d-print-table-row`
    * `.d-print-table-cell`
    * `.d-print-flex`
    * `.d-print-inline-flex`


    The print and display classes can be combined.



    Screen Only (Hide on print only)
    Print Only (Hide on screen only)
    Hide up to large on screen, but always show on print

    html









    ```
    <div class="d-print-none">Screen Only (Hide on print only)</div>
    <div class="d-none d-print-block">Print Only (Hide on screen only)</div>
    <div class="d-none d-lg-block d-print-block">Hide up to large on screen, but always show on print</div>
    ```

    CSS
    ---


    ### Sass utilities API


    Display utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "display": (
     responsive: true,
     print: true,
     property: display,
     class: d,
     values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FLEX:
    """

    Flex
    ====



    Quickly manage the layout, alignment, and sizing of grid columns, navigation, components, and more with a full suite of responsive flexbox utilities. For more complex implementations, custom CSS may be necessary.






     On this page


    **On this page**


    ---




    * [Enable flex behaviors](#enable-flex-behaviors)
    * [Direction](#direction)
    * [Justify content](#justify-content)
    * [Align items](#align-items)
    * [Align self](#align-self)
    * [Fill](#fill)
    * [Grow and shrink](#grow-and-shrink)
    * [Auto margins](#auto-margins)
            + [With align-items](#with-align-items)
    * [Wrap](#wrap)
    * [Order](#order)
    * [Align content](#align-content)
    * [Media object](#media-object)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    Enable flex behaviors
    ---------------------


    Apply `display` utilities to create a flexbox container and transform **direct children elements** into flex items. Flex containers and items are able to be modified further with additional flex properties.



    I'm a flexbox container!

    html









    ```
    <div class="d-flex p-2">I'm a flexbox container!</div>
    ```


    I'm an inline flexbox container!

    html









    ```
    <div class="d-inline-flex p-2">I'm an inline flexbox container!</div>
    ```

    Responsive variations also exist for `.d-flex` and `.d-inline-flex`.


    * `.d-flex`
    * `.d-inline-flex`
    * `.d-sm-flex`
    * `.d-sm-inline-flex`
    * `.d-md-flex`
    * `.d-md-inline-flex`
    * `.d-lg-flex`
    * `.d-lg-inline-flex`
    * `.d-xl-flex`
    * `.d-xl-inline-flex`
    * `.d-xxl-flex`
    * `.d-xxl-inline-flex`


    Direction
    ---------


    Set the direction of flex items in a flex container with direction utilities. In most cases you can omit the horizontal class here as the browser default is `row`. However, you may encounter situations where you needed to explicitly set this value (like responsive layouts).


    Use `.flex-row` to set a horizontal direction (the browser default), or `.flex-row-reverse` to start the horizontal direction from the opposite side.




    Flex item 1
    Flex item 2
    Flex item 3


    Flex item 1
    Flex item 2
    Flex item 3


    html









    ```
    <div class="d-flex flex-row mb-3">
     <div class="p-2">Flex item 1</div>
     <div class="p-2">Flex item 2</div>
     <div class="p-2">Flex item 3</div>
    </div>
    <div class="d-flex flex-row-reverse">
     <div class="p-2">Flex item 1</div>
     <div class="p-2">Flex item 2</div>
     <div class="p-2">Flex item 3</div>
    </div>
    ```

    Use `.flex-column` to set a vertical direction, or `.flex-column-reverse` to start the vertical direction from the opposite side.




    Flex item 1
    Flex item 2
    Flex item 3


    Flex item 1
    Flex item 2
    Flex item 3


    html









    ```
    <div class="d-flex flex-column mb-3">
     <div class="p-2">Flex item 1</div>
     <div class="p-2">Flex item 2</div>
     <div class="p-2">Flex item 3</div>
    </div>
    <div class="d-flex flex-column-reverse">
     <div class="p-2">Flex item 1</div>
     <div class="p-2">Flex item 2</div>
     <div class="p-2">Flex item 3</div>
    </div>
    ```

    Responsive variations also exist for `flex-direction`.


    * `.flex-row`
    * `.flex-row-reverse`
    * `.flex-column`
    * `.flex-column-reverse`
    * `.flex-sm-row`
    * `.flex-sm-row-reverse`
    * `.flex-sm-column`
    * `.flex-sm-column-reverse`
    * `.flex-md-row`
    * `.flex-md-row-reverse`
    * `.flex-md-column`
    * `.flex-md-column-reverse`
    * `.flex-lg-row`
    * `.flex-lg-row-reverse`
    * `.flex-lg-column`
    * `.flex-lg-column-reverse`
    * `.flex-xl-row`
    * `.flex-xl-row-reverse`
    * `.flex-xl-column`
    * `.flex-xl-column-reverse`
    * `.flex-xxl-row`
    * `.flex-xxl-row-reverse`
    * `.flex-xxl-column`
    * `.flex-xxl-column-reverse`


    Justify content
    ---------------


    Use `justify-content` utilities on flexbox containers to change the alignment of flex items on the main axis (the x-axis to start, y-axis if `flex-direction: column`). Choose from `start` (browser default), `end`, `center`, `between`, `around`, or `evenly`.




    Justify
    Content
    Start


    Justify
    Content
    End


    Justify
    Content
    Center


    Justify
    Content
    Between


    Justify
    Content
    Around


    Justify
    Content
    Evenly



    ```
    <div class="d-flex justify-content-start">...</div>
    <div class="d-flex justify-content-end">...</div>
    <div class="d-flex justify-content-center">...</div>
    <div class="d-flex justify-content-between">...</div>
    <div class="d-flex justify-content-around">...</div>
    <div class="d-flex justify-content-evenly">...</div>

    ```
    Responsive variations also exist for `justify-content`.


    * `.justify-content-start`
    * `.justify-content-end`
    * `.justify-content-center`
    * `.justify-content-between`
    * `.justify-content-around`
    * `.justify-content-evenly`
    * `.justify-content-sm-start`
    * `.justify-content-sm-end`
    * `.justify-content-sm-center`
    * `.justify-content-sm-between`
    * `.justify-content-sm-around`
    * `.justify-content-sm-evenly`
    * `.justify-content-md-start`
    * `.justify-content-md-end`
    * `.justify-content-md-center`
    * `.justify-content-md-between`
    * `.justify-content-md-around`
    * `.justify-content-md-evenly`
    * `.justify-content-lg-start`
    * `.justify-content-lg-end`
    * `.justify-content-lg-center`
    * `.justify-content-lg-between`
    * `.justify-content-lg-around`
    * `.justify-content-lg-evenly`
    * `.justify-content-xl-start`
    * `.justify-content-xl-end`
    * `.justify-content-xl-center`
    * `.justify-content-xl-between`
    * `.justify-content-xl-around`
    * `.justify-content-xl-evenly`
    * `.justify-content-xxl-start`
    * `.justify-content-xxl-end`
    * `.justify-content-xxl-center`
    * `.justify-content-xxl-between`
    * `.justify-content-xxl-around`
    * `.justify-content-xxl-evenly`


    Align items
    -----------


    Use `align-items` utilities on flexbox containers to change the alignment of flex items on the cross axis (the y-axis to start, x-axis if `flex-direction: column`). Choose from `start`, `end`, `center`, `baseline`, or `stretch` (browser default).




    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-items-start">...</div>
    <div class="d-flex align-items-end">...</div>
    <div class="d-flex align-items-center">...</div>
    <div class="d-flex align-items-baseline">...</div>
    <div class="d-flex align-items-stretch">...</div>

    ```
    Responsive variations also exist for `align-items`.


    * `.align-items-start`
    * `.align-items-end`
    * `.align-items-center`
    * `.align-items-baseline`
    * `.align-items-stretch`
    * `.align-items-sm-start`
    * `.align-items-sm-end`
    * `.align-items-sm-center`
    * `.align-items-sm-baseline`
    * `.align-items-sm-stretch`
    * `.align-items-md-start`
    * `.align-items-md-end`
    * `.align-items-md-center`
    * `.align-items-md-baseline`
    * `.align-items-md-stretch`
    * `.align-items-lg-start`
    * `.align-items-lg-end`
    * `.align-items-lg-center`
    * `.align-items-lg-baseline`
    * `.align-items-lg-stretch`
    * `.align-items-xl-start`
    * `.align-items-xl-end`
    * `.align-items-xl-center`
    * `.align-items-xl-baseline`
    * `.align-items-xl-stretch`
    * `.align-items-xxl-start`
    * `.align-items-xxl-end`
    * `.align-items-xxl-center`
    * `.align-items-xxl-baseline`
    * `.align-items-xxl-stretch`


    Align self
    ----------


    Use `align-self` utilities on flexbox items to individually change their alignment on the cross axis (the y-axis to start, x-axis if `flex-direction: column`). Choose from the same options as `align-items`: `start`, `end`, `center`, `baseline`, or `stretch` (browser default).




    Flex item
    Aligned flex item
    Flex item


    Flex item
    Aligned flex item
    Flex item


    Flex item
    Aligned flex item
    Flex item


    Flex item
    Aligned flex item
    Flex item


    Flex item
    Aligned flex item
    Flex item



    ```
    <div class="align-self-start">Aligned flex item</div>
    <div class="align-self-end">Aligned flex item</div>
    <div class="align-self-center">Aligned flex item</div>
    <div class="align-self-baseline">Aligned flex item</div>
    <div class="align-self-stretch">Aligned flex item</div>

    ```
    Responsive variations also exist for `align-self`.


    * `.align-self-start`
    * `.align-self-end`
    * `.align-self-center`
    * `.align-self-baseline`
    * `.align-self-stretch`
    * `.align-self-sm-start`
    * `.align-self-sm-end`
    * `.align-self-sm-center`
    * `.align-self-sm-baseline`
    * `.align-self-sm-stretch`
    * `.align-self-md-start`
    * `.align-self-md-end`
    * `.align-self-md-center`
    * `.align-self-md-baseline`
    * `.align-self-md-stretch`
    * `.align-self-lg-start`
    * `.align-self-lg-end`
    * `.align-self-lg-center`
    * `.align-self-lg-baseline`
    * `.align-self-lg-stretch`
    * `.align-self-xl-start`
    * `.align-self-xl-end`
    * `.align-self-xl-center`
    * `.align-self-xl-baseline`
    * `.align-self-xl-stretch`
    * `.align-self-xxl-start`
    * `.align-self-xxl-end`
    * `.align-self-xxl-center`
    * `.align-self-xxl-baseline`
    * `.align-self-xxl-stretch`


    Fill
    ----


    Use the `.flex-fill` class on a series of sibling elements to force them into widths equal to their content (or equal widths if their content does not surpass their border-boxes) while taking up all available horizontal space.




    Flex item with a lot of content
    Flex item
    Flex item


    html









    ```
    <div class="d-flex">
     <div class="p-2 flex-fill">Flex item with a lot of content</div>
     <div class="p-2 flex-fill">Flex item</div>
     <div class="p-2 flex-fill">Flex item</div>
    </div>
    ```

    Responsive variations also exist for `flex-fill`.


    * `.flex-fill`
    * `.flex-sm-fill`
    * `.flex-md-fill`
    * `.flex-lg-fill`
    * `.flex-xl-fill`
    * `.flex-xxl-fill`


    Grow and shrink
    ---------------


    Use `.flex-grow-*` utilities to toggle a flex item’s ability to grow to fill available space. In the example below, the `.flex-grow-1` elements uses all available space it can, while allowing the remaining two flex items their necessary space.




    Flex item
    Flex item
    Third flex item


    html









    ```
    <div class="d-flex">
     <div class="p-2 flex-grow-1">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="p-2">Third flex item</div>
    </div>
    ```

    Use `.flex-shrink-*` utilities to toggle a flex item’s ability to shrink if necessary. In the example below, the second flex item with `.flex-shrink-1` is forced to wrap its contents to a new line, “shrinking” to allow more space for the previous flex item with `.w-100`.




    Flex item
    Flex item


    html









    ```
    <div class="d-flex">
     <div class="p-2 w-100">Flex item</div>
     <div class="p-2 flex-shrink-1">Flex item</div>
    </div>
    ```

    Responsive variations also exist for `flex-grow` and `flex-shrink`.


    * `.flex-{grow|shrink}-0`
    * `.flex-{grow|shrink}-1`
    * `.flex-sm-{grow|shrink}-0`
    * `.flex-sm-{grow|shrink}-1`
    * `.flex-md-{grow|shrink}-0`
    * `.flex-md-{grow|shrink}-1`
    * `.flex-lg-{grow|shrink}-0`
    * `.flex-lg-{grow|shrink}-1`
    * `.flex-xl-{grow|shrink}-0`
    * `.flex-xl-{grow|shrink}-1`
    * `.flex-xxl-{grow|shrink}-0`
    * `.flex-xxl-{grow|shrink}-1`


    Auto margins
    ------------


    Flexbox can do some pretty awesome things when you mix flex alignments with auto margins. Shown below are three examples of controlling flex items via auto margins: default (no auto margin), pushing two items to the right (`.me-auto`), and pushing two items to the left (`.ms-auto`).




    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    html









    ```
    <div class="d-flex mb-3">
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
    </div>

    <div class="d-flex mb-3">
     <div class="me-auto p-2">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
    </div>

    <div class="d-flex mb-3">
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="ms-auto p-2">Flex item</div>
    </div>
    ```

    ### With align-items


    Vertically move one flex item to the top or bottom of a container by mixing `align-items`, `flex-direction: column`, and `margin-top: auto` or `margin-bottom: auto`.




    Flex item
    Flex item
    Flex item


    Flex item
    Flex item
    Flex item


    html









    ```
    <div class="d-flex align-items-start flex-column mb-3" style="height: 200px;">
     <div class="mb-auto p-2">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
    </div>

    <div class="d-flex align-items-end flex-column mb-3" style="height: 200px;">
     <div class="p-2">Flex item</div>
     <div class="p-2">Flex item</div>
     <div class="mt-auto p-2">Flex item</div>
    </div>
    ```

    Wrap
    ----


    Change how flex items wrap in a flex container. Choose from no wrapping at all (the browser default) with `.flex-nowrap`, wrapping with `.flex-wrap`, or reverse wrapping with `.flex-wrap-reverse`.




    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex flex-nowrap">
     ...
    </div>

    ```


    Flex item 1
    Flex item 2
    Flex item 3
    Flex item 4
    Flex item 5
    Flex item 6
    Flex item 7
    Flex item 8
    Flex item 9
    Flex item 10
    Flex item 11
    Flex item 12
    Flex item 13
    Flex item 14



    ```
    <div class="d-flex flex-wrap">
     ...
    </div>

    ```


    Flex item 1
    Flex item 2
    Flex item 3
    Flex item 4
    Flex item 5
    Flex item 6
    Flex item 7
    Flex item 8
    Flex item 9
    Flex item 10
    Flex item 11
    Flex item 12
    Flex item 13
    Flex item 14



    ```
    <div class="d-flex flex-wrap-reverse">
     ...
    </div>

    ```
    Responsive variations also exist for `flex-wrap`.


    * `.flex-nowrap`
    * `.flex-wrap`
    * `.flex-wrap-reverse`
    * `.flex-sm-nowrap`
    * `.flex-sm-wrap`
    * `.flex-sm-wrap-reverse`
    * `.flex-md-nowrap`
    * `.flex-md-wrap`
    * `.flex-md-wrap-reverse`
    * `.flex-lg-nowrap`
    * `.flex-lg-wrap`
    * `.flex-lg-wrap-reverse`
    * `.flex-xl-nowrap`
    * `.flex-xl-wrap`
    * `.flex-xl-wrap-reverse`
    * `.flex-xxl-nowrap`
    * `.flex-xxl-wrap`
    * `.flex-xxl-wrap-reverse`


    Order
    -----


    Change the *visual* order of specific flex items with a handful of `order` utilities. We only provide options for making an item first or last, as well as a reset to use the DOM order. As `order` takes any integer value from 0 to 5, add custom CSS for any additional values needed.




    First flex item
    Second flex item
    Third flex item


    html









    ```
    <div class="d-flex flex-nowrap">
     <div class="order-3 p-2">First flex item</div>
     <div class="order-2 p-2">Second flex item</div>
     <div class="order-1 p-2">Third flex item</div>
    </div>
    ```

    Responsive variations also exist for `order`.


    * `.order-0`
    * `.order-1`
    * `.order-2`
    * `.order-3`
    * `.order-4`
    * `.order-5`
    * `.order-sm-0`
    * `.order-sm-1`
    * `.order-sm-2`
    * `.order-sm-3`
    * `.order-sm-4`
    * `.order-sm-5`
    * `.order-md-0`
    * `.order-md-1`
    * `.order-md-2`
    * `.order-md-3`
    * `.order-md-4`
    * `.order-md-5`
    * `.order-lg-0`
    * `.order-lg-1`
    * `.order-lg-2`
    * `.order-lg-3`
    * `.order-lg-4`
    * `.order-lg-5`
    * `.order-xl-0`
    * `.order-xl-1`
    * `.order-xl-2`
    * `.order-xl-3`
    * `.order-xl-4`
    * `.order-xl-5`
    * `.order-xxl-0`
    * `.order-xxl-1`
    * `.order-xxl-2`
    * `.order-xxl-3`
    * `.order-xxl-4`
    * `.order-xxl-5`


    Additionally there are also responsive `.order-first` and `.order-last` classes that change the `order` of an element by applying `order: -1` and `order: 6`, respectively.


    * `.order-first`
    * `.order-last`
    * `.order-sm-first`
    * `.order-sm-last`
    * `.order-md-first`
    * `.order-md-last`
    * `.order-lg-first`
    * `.order-lg-last`
    * `.order-xl-first`
    * `.order-xl-last`
    * `.order-xxl-first`
    * `.order-xxl-last`


    Align content
    -------------


    Use `align-content` utilities on flexbox containers to align flex items *together* on the cross axis. Choose from `start` (browser default), `end`, `center`, `between`, `around`, or `stretch`. To demonstrate these utilities, we’ve enforced `flex-wrap: wrap` and increased the number of flex items.


    **Heads up!** This property has no effect on single rows of flex items.




    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-start flex-wrap">
     ...
    </div>

    ```


    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-end flex-wrap">...</div>

    ```


    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-center flex-wrap">...</div>

    ```


    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-between flex-wrap">...</div>

    ```


    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-around flex-wrap">...</div>

    ```


    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item
    Flex item



    ```
    <div class="d-flex align-content-stretch flex-wrap">...</div>

    ```
    Responsive variations also exist for `align-content`.


    * `.align-content-start`
    * `.align-content-end`
    * `.align-content-center`
    * `.align-content-between`
    * `.align-content-around`
    * `.align-content-stretch`
    * `.align-content-sm-start`
    * `.align-content-sm-end`
    * `.align-content-sm-center`
    * `.align-content-sm-between`
    * `.align-content-sm-around`
    * `.align-content-sm-stretch`
    * `.align-content-md-start`
    * `.align-content-md-end`
    * `.align-content-md-center`
    * `.align-content-md-between`
    * `.align-content-md-around`
    * `.align-content-md-stretch`
    * `.align-content-lg-start`
    * `.align-content-lg-end`
    * `.align-content-lg-center`
    * `.align-content-lg-between`
    * `.align-content-lg-around`
    * `.align-content-lg-stretch`
    * `.align-content-xl-start`
    * `.align-content-xl-end`
    * `.align-content-xl-center`
    * `.align-content-xl-between`
    * `.align-content-xl-around`
    * `.align-content-xl-stretch`
    * `.align-content-xxl-start`
    * `.align-content-xxl-end`
    * `.align-content-xxl-center`
    * `.align-content-xxl-between`
    * `.align-content-xxl-around`
    * `.align-content-xxl-stretch`


    Media object
    ------------


    Looking to replicate the [media object component](https://getbootstrap.comhttps://getbootstrap.com/docs/4.6/components/media-object/) from Bootstrap 4? Recreate it in no time with a few flex utilities that allow even more flexibility and customization than before.





    PlaceholderImage


     This is some content from a media component. You can replace this with any content and adjust it as needed.



    html









    ```
    <div class="d-flex">
     <div class="flex-shrink-0">
     <img src="..." alt="...">
     </div>
     <div class="flex-grow-1 ms-3">
     This is some content from a media component. You can replace this with any content and adjust it as needed.
     </div>
    </div>
    ```

    And say you want to vertically center the content next to the image:





    PlaceholderImage


     This is some content from a media component. You can replace this with any content and adjust it as needed.



    html









    ```
    <div class="d-flex align-items-center">
     <div class="flex-shrink-0">
     <img src="..." alt="...">
     </div>
     <div class="flex-grow-1 ms-3">
     This is some content from a media component. You can replace this with any content and adjust it as needed.
     </div>
    </div>
    ```

    CSS
    ---


    ### Sass utilities API


    Flexbox utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "flex": (
     responsive: true,
     property: flex,
     values: (fill: 1 1 auto)
    ),
    "flex-direction": (
     responsive: true,
     property: flex-direction,
     class: flex,
     values: row column row-reverse column-reverse
    ),
    "flex-grow": (
     responsive: true,
     property: flex-grow,
     class: flex,
     values: (
     grow-0: 0,
     grow-1: 1,
     )
    ),
    "flex-shrink": (
     responsive: true,
     property: flex-shrink,
     class: flex,
     values: (
     shrink-0: 0,
     shrink-1: 1,
     )
    ),
    "flex-wrap": (
     responsive: true,
     property: flex-wrap,
     class: flex,
     values: wrap nowrap wrap-reverse
    ),
    "justify-content": (
     responsive: true,
     property: justify-content,
     values: (
     start: flex-start,
     end: flex-end,
     center: center,
     between: space-between,
     around: space-around,
     evenly: space-evenly,
     )
    ),
    "align-items": (
     responsive: true,
     property: align-items,
     values: (
     start: flex-start,
     end: flex-end,
     center: center,
     baseline: baseline,
     stretch: stretch,
     )
    ),
    "align-content": (
     responsive: true,
     property: align-content,
     values: (
     start: flex-start,
     end: flex-end,
     center: center,
     between: space-between,
     around: space-around,
     stretch: stretch,
     )
    ),
    "align-self": (
     responsive: true,
     property: align-self,
     values: (
     auto: auto,
     start: flex-start,
     end: flex-end,
     center: center,
     baseline: baseline,
     stretch: stretch,
     )
    ),
    "order": (
     responsive: true,
     property: order,
     values: (
     first: -1,
     0: 0,
     1: 1,
     2: 2,
     3: 3,
     4: 4,
     5: 5,
     last: 6,
     ),
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class FLOAT:
    """

    Float
    =====



    Toggle floats on any element, across any breakpoint, using our responsive float utilities.






     On this page


    **On this page**


    ---




    * [Overview](#overview)
    * [Responsive](#responsive)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    Overview
    --------


    These utility classes float an element to the left or right, or disable floating, based on the current viewport size using the [CSS `float` property](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/float). `!important` is included to avoid specificity issues. These use the same viewport breakpoints as our grid system. Please be aware float utilities have no effect on flex items.



    Float start on all viewport sizes

    Float end on all viewport sizes

    Don't float on all viewport sizes

    html









    ```
    <div class="float-start">Float start on all viewport sizes</div><br>
    <div class="float-end">Float end on all viewport sizes</div><br>
    <div class="float-none">Don't float on all viewport sizes</div>
    ```

    Use the [clearfix helper](https://getbootstrap.com/docs/5.3/helpers/clearfix/) on a parent element to clear floats.


    Responsive
    ----------


    Responsive variations also exist for each `float` value.



    Float end on viewports sized SM (small) or wider

    Float end on viewports sized MD (medium) or wider

    Float end on viewports sized LG (large) or wider

    Float end on viewports sized XL (extra large) or wider

    Float end on viewports sized XXL (extra extra large) or wider


    html









    ```
    <div class="float-sm-end">Float end on viewports sized SM (small) or wider</div><br>
    <div class="float-md-end">Float end on viewports sized MD (medium) or wider</div><br>
    <div class="float-lg-end">Float end on viewports sized LG (large) or wider</div><br>
    <div class="float-xl-end">Float end on viewports sized XL (extra large) or wider</div><br>
    <div class="float-xxl-end">Float end on viewports sized XXL (extra extra large) or wider</div><br>
    ```

    Here are all the support classes:


    * `.float-start`
    * `.float-end`
    * `.float-none`
    * `.float-sm-start`
    * `.float-sm-end`
    * `.float-sm-none`
    * `.float-md-start`
    * `.float-md-end`
    * `.float-md-none`
    * `.float-lg-start`
    * `.float-lg-end`
    * `.float-lg-none`
    * `.float-xl-start`
    * `.float-xl-end`
    * `.float-xl-none`
    * `.float-xxl-start`
    * `.float-xxl-end`
    * `.float-xxl-none`


    CSS
    ---


    ### Sass utilities API


    Float utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "float": (
     responsive: true,
     property: float,
     values: (
     start: left,
     end: right,
     none: none,
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class INTERACTIONS:
    """

    Interactions
    ============



    Utility classes that change how users interact with contents of a website.





    Text selection
    --------------


    Change the way in which the content is selected when the user interacts with it.



    This paragraph will be entirely selected when clicked by the user.


    This paragraph has default select behavior.


    This paragraph will not be selectable when clicked by the user.



    html









    ```
    <p class="user-select-all">This paragraph will be entirely selected when clicked by the user.</p>
    <p class="user-select-auto">This paragraph has default select behavior.</p>
    <p class="user-select-none">This paragraph will not be selectable when clicked by the user.</p>
    ```

    Pointer events
    --------------


    Bootstrap provides `.pe-none` and `.pe-auto` classes to prevent or add element interactions.



    [This link](#) can not be clicked.


    [This link](#) can be clicked (this is default behavior).


    [This link](#) can not be clicked because the `pointer-events` property is inherited from its parent. However, [this link](#) has a `pe-auto` class and can be clicked.



    html









    ```
    <p><a href="#" class="pe-none" tabindex="-1" aria-disabled="true">This link</a> can not be clicked.</p>
    <p><a href="#" class="pe-auto">This link</a> can be clicked (this is default behavior).</p>
    <p class="pe-none"><a href="#" tabindex="-1" aria-disabled="true">This link</a> can not be clicked because the <code>pointer-events</code> property is inherited from its parent. However, <a href="#" class="pe-auto">this link</a> has a <code>pe-auto</code> class and can be clicked.</p>
    ```

    The `.pe-none` class (and the `pointer-events` CSS property it sets) only prevents interactions with a pointer (mouse, stylus, touch). Links and controls with `.pe-none` are, by default, still focusable and actionable for keyboard users. To ensure that they are completely neutralized even for keyboard users, you may need to add further attributes such as `tabindex="-1"` (to prevent them from receiving keyboard focus) and `aria-disabled="true"` (to convey the fact they are effectively disabled to assistive technologies), and possibly use JavaScript to completely prevent them from being actionable.


    If possible, the simpler solution is:


    * For form controls, add the `disabled` HTML attribute.
    * For links, remove the `href` attribute, making it a non-interactive anchor or placeholder link.


    CSS
    ---


    ### Sass utilities API


    Interaction utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "user-select": (
     property: user-select,
     values: all auto none
    ),
    "pointer-events": (
     property: pointer-events,
     class: pe,
     values: none auto,
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class LINK:
    """

    Link
    ====



    Link utilities are used to stylize your anchors to adjust their color, opacity, underline offset, underline color, and more.






     On this page


    **On this page**


    ---




    * [Link opacity](#link-opacity)
    * [Link underlines](#link-underlines)
            + [Underline color](#underline-color)
            + [Underline offset](#underline-offset)
            + [Underline opacity](#underline-opacity)
            + [Hover variants](#hover-variants)
    * [Colored links](#colored-links)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    Link opacity
    ------------


    Change the alpha opacity of the link `rgba()` color value with utilities. Please be aware that changes to a color’s opacity can lead to links with [*insufficient* contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility/#color-contrast).



    [Link opacity 10](#)


    [Link opacity 25](#)


    [Link opacity 50](#)


    [Link opacity 75](#)


    [Link opacity 100](#)



    html









    ```
    <p><a class="link-opacity-10" href="#">Link opacity 10</a></p>
    <p><a class="link-opacity-25" href="#">Link opacity 25</a></p>
    <p><a class="link-opacity-50" href="#">Link opacity 50</a></p>
    <p><a class="link-opacity-75" href="#">Link opacity 75</a></p>
    <p><a class="link-opacity-100" href="#">Link opacity 100</a></p>
    ```

    You can even change the opacity level on hover.



    [Link hover opacity 10](#)


    [Link hover opacity 25](#)


    [Link hover opacity 50](#)


    [Link hover opacity 75](#)


    [Link hover opacity 100](#)



    html









    ```
    <p><a class="link-opacity-10-hover" href="#">Link hover opacity 10</a></p>
    <p><a class="link-opacity-25-hover" href="#">Link hover opacity 25</a></p>
    <p><a class="link-opacity-50-hover" href="#">Link hover opacity 50</a></p>
    <p><a class="link-opacity-75-hover" href="#">Link hover opacity 75</a></p>
    <p><a class="link-opacity-100-hover" href="#">Link hover opacity 100</a></p>
    ```

    Link underlines
    ---------------


    ### Underline color


    Change the underline’s color independent of the link text color.



    [Primary underline](#)


    [Secondary underline](#)


    [Success underline](#)


    [Danger underline](#)


    [Warning underline](#)


    [Info underline](#)


    [Light underline](#)


    [Dark underline](#)



    html









    ```
    <p><a href="#" class="link-underline-primary">Primary underline</a></p>
    <p><a href="#" class="link-underline-secondary">Secondary underline</a></p>
    <p><a href="#" class="link-underline-success">Success underline</a></p>
    <p><a href="#" class="link-underline-danger">Danger underline</a></p>
    <p><a href="#" class="link-underline-warning">Warning underline</a></p>
    <p><a href="#" class="link-underline-info">Info underline</a></p>
    <p><a href="#" class="link-underline-light">Light underline</a></p>
    <p><a href="#" class="link-underline-dark">Dark underline</a></p>
    ```

    ### Underline offset


    Change the underline’s distance from your text. Offset is set in `em` units to automatically scale with the element’s current `font-size`.



    [Default link](#)


    [Offset 1 link](#)


    [Offset 2 link](#)


    [Offset 3 link](#)



    html









    ```
    <p><a href="#">Default link</a></p>
    <p><a class="link-offset-1" href="#">Offset 1 link</a></p>
    <p><a class="link-offset-2" href="#">Offset 2 link</a></p>
    <p><a class="link-offset-3" href="#">Offset 3 link</a></p>
    ```

    ### Underline opacity


    Change the underline’s opacity. Requires adding `.link-underline` to first set an `rgba()` color we use to then modify the alpha opacity.



    [Underline opacity 0](#)


    [Underline opacity 10](#)


    [Underline opacity 25](#)


    [Underline opacity 50](#)


    [Underline opacity 75](#)


    [Underline opacity 100](#)



    html









    ```
    <p><a class="link-offset-2 link-underline link-underline-opacity-0" href="#">Underline opacity 0</a></p>
    <p><a class="link-offset-2 link-underline link-underline-opacity-10" href="#">Underline opacity 10</a></p>
    <p><a class="link-offset-2 link-underline link-underline-opacity-25" href="#">Underline opacity 25</a></p>
    <p><a class="link-offset-2 link-underline link-underline-opacity-50" href="#">Underline opacity 50</a></p>
    <p><a class="link-offset-2 link-underline link-underline-opacity-75" href="#">Underline opacity 75</a></p>
    <p><a class="link-offset-2 link-underline link-underline-opacity-100" href="#">Underline opacity 100</a></p>
    ```

    ### Hover variants


    Just like the `.link-opacity-*-hover` utilities, `.link-offset` and `.link-underline-opacity` utilities include `:hover` variants by default. Mix and match to create unique link styles.



    [Underline opacity 0](#)

    html









    ```
    <a class="link-offset-2 link-offset-3-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover" href="#">
     Underline opacity 0
    </a>
    ```

    Colored links
    -------------


    [Colored link helpers](https://getbootstrap.com/docs/5.3/helpers/colored-links/) have been updated to pair with our link utilities. Use the new utilities to modify the link opacity, underline opacity, and underline offset.



    [Primary link](#)


    [Secondary link](#)


    [Success link](#)


    [Danger link](#)


    [Warning link](#)


    [Info link](#)


    [Light link](#)


    [Dark link](#)


    [Emphasis link](#)



    html









    ```
    <p><a href="#" class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Primary link</a></p>
    <p><a href="#" class="link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Secondary link</a></p>
    <p><a href="#" class="link-success link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Success link</a></p>
    <p><a href="#" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Danger link</a></p>
    <p><a href="#" class="link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Warning link</a></p>
    <p><a href="#" class="link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Info link</a></p>
    <p><a href="#" class="link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Light link</a></p>
    <p><a href="#" class="link-dark link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Dark link</a></p>
    <p><a href="#" class="link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover">Emphasis link</a></p>
    ```


    **Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](https://getbootstrap.com/docs/5.3/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.

    CSS
    ---


    In addition to the following Sass functionality, consider reading about our included [CSS custom properties](https://getbootstrap.com/docs/5.3/customize/css-variables/) (aka CSS variables) for colors and more.


    ### Sass utilities API


    Link utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "link-opacity": (
     css-var: true,
     class: link-opacity,
     state: hover,
     values: (
     10: .1,
     25: .25,
     50: .5,
     75: .75,
     100: 1
     )
    ),
    "link-offset": (
     property: text-underline-offset,
     class: link-offset,
     state: hover,
     values: (
     1: .125em,
     2: .25em,
     3: .375em,
     )
    ),
    "link-underline": (
     property: text-decoration-color,
     class: link-underline,
     local-vars: (
     "link-underline-opacity": 1
     ),
     values: map-merge(
     $utilities-links-underline,
     (
     null: rgba(var(--#{$prefix}link-color-rgb), var(--#{$prefix}link-underline-opacity, 1)),
     )
     )
    ),
    "link-underline-opacity": (
     css-var: true,
     class: link-underline-opacity,
     state: hover,
     values: (
     0: 0,
     10: .1,
     25: .25,
     50: .5,
     75: .75,
     100: 1
     ),
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OBJECT_FIT:
    """

    Object fit
    ==========



    Use the object fit utilities to modify how the content of a [replaced element](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Replaced_element), such as an `<img>` or `<video>`, should be resized to fit its container.






     On this page


    **On this page**


    ---




    * [How it works](#how-it-works)
    * [Examples](#examples)
    * [Responsive](#responsive)
    * [Video](#video)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    How it works
    ------------


    Change the value of the [`object-fit` property](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/object-fit) with our responsive `object-fit` utility classes. This property tells the content to fill the parent container in a variety of ways, such as preserving the aspect ratio or stretching to take up as much space as possible.


    Classes for the value of `object-fit` are named using the format `.object-fit-{value}`. Choose from the following values:


    * `contain`
    * `cover`
    * `fill`
    * `scale` (for scale-down)
    * `none`


    Examples
    --------


    Add the `object-fit-{value}` class to the [replaced element](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/Replaced_element):



    ![Placeholder : Object fit contain](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EObject%20fit%20contain%3C/text%3E%3C/svg%3E)
    ![Placeholder : Object fit cover](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EObject%20fit%20cover%3C/text%3E%3C/svg%3E)
    ![Placeholder : Object fit fill](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EObject%20fit%20fill%3C/text%3E%3C/svg%3E)
    ![Placeholder : Object fit scale down](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EObject%20fit%20scale%20down%3C/text%3E%3C/svg%3E)
    ![Placeholder : Object fit none](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EObject%20fit%20none%3C/text%3E%3C/svg%3E)

    html









    ```
    <img src="..." class="object-fit-contain border rounded" alt="...">
    <img src="..." class="object-fit-cover border rounded" alt="...">
    <img src="..." class="object-fit-fill border rounded" alt="...">
    <img src="..." class="object-fit-scale border rounded" alt="...">
    <img src="..." class="object-fit-none border rounded" alt="...">
    ```

    Responsive
    ----------


    Responsive variations also exist for each `object-fit` value using the format `.object-fit-{breakpoint}-{value}`, for the following breakpoint abbreviations: `sm`, `md`, `lg`, `xl`, and `xxl`. Classes can be combined for various effects as you need.



    ![Placeholder : Contain on sm](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EContain%20on%20sm%3C/text%3E%3C/svg%3E)
    ![Placeholder : Contain on md](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EContain%20on%20md%3C/text%3E%3C/svg%3E)
    ![Placeholder : Contain on lg](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EContain%20on%20lg%3C/text%3E%3C/svg%3E)
    ![Placeholder : Contain on xl](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EContain%20on%20xl%3C/text%3E%3C/svg%3E)
    ![Placeholder : Contain on xxl](data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EPlaceholder%3C/title%3E%3Crect%20width='100%25'%20height='100%25'%20fill='%23dee2e6'%3E%3C/rect%3E%3Ctext%20x='50%25'%20y='50%25'%20fill='%23868e96'%20dy='.3em'%3EContain%20on%20xxl%3C/text%3E%3C/svg%3E)

    html









    ```
    <img src="..." class="object-fit-sm-contain border rounded" alt="...">
    <img src="..." class="object-fit-md-contain border rounded" alt="...">
    <img src="..." class="object-fit-lg-contain border rounded" alt="...">
    <img src="..." class="object-fit-xl-contain border rounded" alt="...">
    <img src="..." class="object-fit-xxl-contain border rounded" alt="...">
    ```

    Video
    -----


    The `.object-fit-{value}` and responsive `.object-fit-{breakpoint}-{value}` utilities also work on `<video>` elements.



    ```
    <video src="..." class="object-fit-contain" autoplay></video>
    <video src="..." class="object-fit-cover" autoplay></video>
    <video src="..." class="object-fit-fill" autoplay></video>
    <video src="..." class="object-fit-scale" autoplay></video>
    <video src="..." class="object-fit-none" autoplay></video>

    ```
    CSS
    ---


    ### Sass utilities API


    Object fit utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "object-fit": (
     responsive: true,
     property: object-fit,
     values: (
     contain: contain,
     cover: cover,
     fill: fill,
     scale: scale-down,
     none: none,
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OPACITY:
    """

    Opacity
    =======



    Control the opacity of elements.





    The `opacity` property sets the opacity level for an element. The opacity level describes the transparency level, where `1` is not transparent at all, `.5` is 50% visible, and `0` is completely transparent.


    Set the `opacity` of an element using `.opacity-{value}` utilities.



    100%
    75%
    50%
    25%
    0%


    ```
    <div class="opacity-100">...</div>
    <div class="opacity-75">...</div>
    <div class="opacity-50">...</div>
    <div class="opacity-25">...</div>
    <div class="opacity-0">...</div>

    ```
    CSS
    ---


    ### Sass utilities API


    Opacity utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "opacity": (
     property: opacity,
     values: (
     0: 0,
     25: .25,
     50: .5,
     75: .75,
     100: 1,
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class OVERFLOW:
    """

    Overflow
    ========



    Use these shorthand utilities for quickly configuring how content overflows an element.






     On this page


    **On this page**


    ---




    * [Overflow](#overflow)
            + [`overflow-x`](#overflow-x)
            + [`overflow-y`](#overflow-y)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    Overflow
    --------


    Adjust the `overflow` property on the fly with four default values and classes. These classes are not responsive by default.




     This is an example of using `.overflow-auto` on an element with set width and height dimensions. By design, this content will vertically scroll.


     This is an example of using `.overflow-hidden` on an element with set width and height dimensions.


     This is an example of using `.overflow-visible` on an element with set width and height dimensions.


     This is an example of using `.overflow-scroll` on an element with set width and height dimensions.



    ```
    <div class="overflow-auto">...</div>
    <div class="overflow-hidden">...</div>
    <div class="overflow-visible">...</div>
    <div class="overflow-scroll">...</div>

    ```
    ### `overflow-x`


    Adjust the `overflow-x` property to affect the overflow of content horizontally.




    `.overflow-x-auto` example on an element
     with set width and height dimensions.


    `.overflow-x-hidden` example
    on an element with set width and height dimensions.


    `.overflow-x-visible` example
    on an element with set width and height dimensions.


    `.overflow-x-scroll` example on an element
     with set width and height dimensions.



    ```
    <div class="overflow-x-auto">...</div>
    <div class="overflow-x-hidden">...</div>
    <div class="overflow-x-visible">...</div>
    <div class="overflow-x-scroll">...</div>

    ```
    ### `overflow-y`


    Adjust the `overflow-y` property to affect the overflow of content vertically.




    `.overflow-y-auto` example on an element with set width and height dimensions.


    `.overflow-y-hidden` example on an element with set width and height dimensions.


    `.overflow-y-visible` example on an element with set width and height dimensions.


    `.overflow-y-scroll` example on an element with set width and height dimensions.



    ```
    <div class="overflow-y-auto">...</div>
    <div class="overflow-y-hidden">...</div>
    <div class="overflow-y-visible">...</div>
    <div class="overflow-y-scroll">...</div>

    ```
    Using Sass variables, you may customize the overflow utilities by changing the `$overflows` variable in `_variables.scss`.


    CSS
    ---


    ### Sass utilities API


    Overflow utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "overflow": (
     property: overflow,
     values: auto hidden visible scroll,
    ),
    "overflow-x": (
     property: overflow-x,
     values: auto hidden visible scroll,
    ),
    "overflow-y": (
     property: overflow-y,
     values: auto hidden visible scroll,
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class POSITION:
    """

    Position
    ========



    Use these shorthand utilities for quickly configuring the position of an element.






     On this page


    **On this page**


    ---




    * [Position values](#position-values)
    * [Arrange elements](#arrange-elements)
    * [Center elements](#center-elements)
    * [Examples](#examples)
    * [CSS](#css)
            + [Sass maps](#sass-maps)
            + [Sass utilities API](#sass-utilities-api)






    Position values
    ---------------


    Quick positioning classes are available, though they are not responsive.



    ```
    <div class="position-static">...</div>
    <div class="position-relative">...</div>
    <div class="position-absolute">...</div>
    <div class="position-fixed">...</div>
    <div class="position-sticky">...</div>

    ```
    Arrange elements
    ----------------


    Arrange elements easily with the edge positioning utilities. The format is `{property}-{position}`.


    Where *property* is one of:


    * `top` - for the vertical `top` position
    * `start` - for the horizontal `left` position (in LTR)
    * `bottom` - for the vertical `bottom` position
    * `end` - for the horizontal `right` position (in LTR)


    Where *position* is one of:


    * `0` - for `0` edge position
    * `50` - for `50%` edge position
    * `100` - for `100%` edge position


    (You can add more position values by adding entries to the `$position-values` Sass map variable.)












    html









    ```
    <div class="position-relative">
     <div class="position-absolute top-0 start-0"></div>
     <div class="position-absolute top-0 end-0"></div>
     <div class="position-absolute top-50 start-50"></div>
     <div class="position-absolute bottom-50 end-50"></div>
     <div class="position-absolute bottom-0 start-0"></div>
     <div class="position-absolute bottom-0 end-0"></div>
    </div>
    ```

    Center elements
    ---------------


    In addition, you can also center the elements with the transform utility class `.translate-middle`.


    This class applies the transformations `translateX(-50%)` and `translateY(-50%)` to the element which, in combination with the edge positioning utilities, allows you to absolute center an element.















    html









    ```
    <div class="position-relative">
     <div class="position-absolute top-0 start-0 translate-middle"></div>
     <div class="position-absolute top-0 start-50 translate-middle"></div>
     <div class="position-absolute top-0 start-100 translate-middle"></div>
     <div class="position-absolute top-50 start-0 translate-middle"></div>
     <div class="position-absolute top-50 start-50 translate-middle"></div>
     <div class="position-absolute top-50 start-100 translate-middle"></div>
     <div class="position-absolute top-100 start-0 translate-middle"></div>
     <div class="position-absolute top-100 start-50 translate-middle"></div>
     <div class="position-absolute top-100 start-100 translate-middle"></div>
    </div>
    ```

    By adding `.translate-middle-x` or `.translate-middle-y` classes, elements can be positioned only in horizontal or vertical direction.















    html









    ```
    <div class="position-relative">
     <div class="position-absolute top-0 start-0"></div>
     <div class="position-absolute top-0 start-50 translate-middle-x"></div>
     <div class="position-absolute top-0 end-0"></div>
     <div class="position-absolute top-50 start-0 translate-middle-y"></div>
     <div class="position-absolute top-50 start-50 translate-middle"></div>
     <div class="position-absolute top-50 end-0 translate-middle-y"></div>
     <div class="position-absolute bottom-0 start-0"></div>
     <div class="position-absolute bottom-0 start-50 translate-middle-x"></div>
     <div class="position-absolute bottom-0 end-0"></div>
    </div>
    ```

    Examples
    --------


    Here are some real life examples of these classes:




     Mails +99 unread messages


     Marker


     Alerts unread messages


    html









    ```
    <button type="button" class="btn btn-primary position-relative">
     Mails <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary">+99 <span class="visually-hidden">unread messages</span></span>
    </button>

    <div class="position-relative py-2 px-4 text-bg-secondary border border-secondary rounded-pill">
     Marker <svg width="1em" height="1em" viewBox="0 0 16 16" class="position-absolute top-100 start-50 translate-middle mt-1" fill="var(--bs-secondary)" xmlns="http://www.w3.org/2000/svg"><path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/></svg>
    </div>

    <button type="button" class="btn btn-primary position-relative">
     Alerts <span class="position-absolute top-0 start-100 translate-middle badge border border-light rounded-circle bg-danger p-2"><span class="visually-hidden">unread messages</span></span>
    </button>
    ```

    You can use these classes with existing components to create new ones. Remember that you can extend its functionality by adding entries to the `$position-values` variable.







    1
    2
    3


    html









    ```
    <div class="position-relative m-4">
     <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="height: 1px;">
     <div class="progress-bar" style="width: 50%"></div>
     </div>
     <button type="button" class="position-absolute top-0 start-0 translate-middle btn btn-sm btn-primary rounded-pill" style="width: 2rem; height:2rem;">1</button>
     <button type="button" class="position-absolute top-0 start-50 translate-middle btn btn-sm btn-primary rounded-pill" style="width: 2rem; height:2rem;">2</button>
     <button type="button" class="position-absolute top-0 start-100 translate-middle btn btn-sm btn-secondary rounded-pill" style="width: 2rem; height:2rem;">3</button>
    </div>
    ```

    CSS
    ---


    ### Sass maps


    Default position utility values are declared in a Sass map, then used to generate our utilities.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $position-values: (
     0: 0,
     50: 50%,
     100: 100%
    );

    ```

    ### Sass utilities API


    Position utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "position": (
     property: position,
     values: static relative absolute fixed sticky
    ),
    "top": (
     property: top,
     values: $position-values
    ),
    "bottom": (
     property: bottom,
     values: $position-values
    ),
    "start": (
     property: left,
     class: start,
     values: $position-values
    ),
    "end": (
     property: right,
     class: end,
     values: $position-values
    ),
    "translate-middle": (
     property: transform,
     class: translate-middle,
     values: (
     null: translate(-50%, -50%),
     x: translateX(-50%),
     y: translateY(-50%),
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SHADOWS:
    """

    Shadows
    =======



    Add or remove shadows to elements with box-shadow utilities.






     On this page


    **On this page**


    ---




    * [Examples](#examples)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass utilities API](#sass-utilities-api)






    Examples
    --------


    While shadows on components are disabled by default in Bootstrap and can be enabled via `$enable-shadows`, you can also quickly add or remove a shadow with our `box-shadow` utility classes. Includes support for `.shadow-none` and three default sizes (which have associated variables to match).



    No shadow
    Small shadow
    Regular shadow
    Larger shadow

    html









    ```
    <div class="shadow-none p-3 mb-5 bg-body-tertiary rounded">No shadow</div>
    <div class="shadow-sm p-3 mb-5 bg-body-tertiary rounded">Small shadow</div>
    <div class="shadow p-3 mb-5 bg-body-tertiary rounded">Regular shadow</div>
    <div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">Larger shadow</div>
    ```

    CSS
    ---


    ### Sass variables




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $box-shadow: 0 .5rem 1rem rgba($black, .15);
    $box-shadow-sm: 0 .125rem .25rem rgba($black, .075);
    $box-shadow-lg: 0 1rem 3rem rgba($black, .175);
    $box-shadow-inset: inset 0 1px 2px rgba($black, .075);

    ```

    ### Sass utilities API


    Shadow utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "shadow": (
     property: box-shadow,
     class: shadow,
     values: (
     null: $box-shadow,
     sm: $box-shadow-sm,
     lg: $box-shadow-lg,
     none: none,
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SIZING:
    """

    Sizing
    ======



    Easily make an element as wide or as tall with our width and height utilities.






     On this page


    **On this page**


    ---




    * [Relative to the parent](#relative-to-the-parent)
    * [Relative to the viewport](#relative-to-the-viewport)
    * [CSS](#css)
            + [Sass utilities API](#sass-utilities-api)






    Relative to the parent
    ----------------------


    Width and height utilities are generated from the utility API in `_utilities.scss`. Includes support for `25%`, `50%`, `75%`, `100%`, and `auto` by default. Modify those values as you need to generate different utilities here.



    Width 25%
    Width 50%
    Width 75%
    Width 100%
    Width auto

    html









    ```
    <div class="w-25 p-3">Width 25%</div>
    <div class="w-50 p-3">Width 50%</div>
    <div class="w-75 p-3">Width 75%</div>
    <div class="w-100 p-3">Width 100%</div>
    <div class="w-auto p-3">Width auto</div>
    ```



    Height 25%
    Height 50%
    Height 75%
    Height 100%
    Height auto


    html









    ```
    <div style="height: 100px;">
     <div class="h-25 d-inline-block" style="width: 120px;">Height 25%</div>
     <div class="h-50 d-inline-block" style="width: 120px;">Height 50%</div>
     <div class="h-75 d-inline-block" style="width: 120px;">Height 75%</div>
     <div class="h-100 d-inline-block" style="width: 120px;">Height 100%</div>
     <div class="h-auto d-inline-block" style="width: 120px;">Height auto</div>
    </div>
    ```

    You can also use `max-width: 100%;` and `max-height: 100%;` utilities as needed.




    Max-width 100%


    html









    ```
    <div style="width: 50%; height: 100px;">
     <div class="mw-100" style="width: 200%;">Max-width 100%</div>
    </div>
    ```



    Max-height 100%


    html









    ```
    <div style="height: 100px;">
     <div class="mh-100" style="width: 100px; height: 200px;">Max-height 100%</div>
    </div>
    ```

    Relative to the viewport
    ------------------------


    You can also use utilities to set the width and height relative to the viewport.



    ```
    <div class="min-vw-100">Min-width 100vw</div>
    <div class="min-vh-100">Min-height 100vh</div>
    <div class="vw-100">Width 100vw</div>
    <div class="vh-100">Height 100vh</div>

    ```
    CSS
    ---


    ### Sass utilities API


    Sizing utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "width": (
     property: width,
     class: w,
     values: (
     25: 25%,
     50: 50%,
     75: 75%,
     100: 100%,
     auto: auto
     )
    ),
    "max-width": (
     property: max-width,
     class: mw,
     values: (100: 100%)
    ),
    "viewport-width": (
     property: width,
     class: vw,
     values: (100: 100vw)
    ),
    "min-viewport-width": (
     property: min-width,
     class: min-vw,
     values: (100: 100vw)
    ),
    "height": (
     property: height,
     class: h,
     values: (
     25: 25%,
     50: 50%,
     75: 75%,
     100: 100%,
     auto: auto
     )
    ),
    "max-height": (
     property: max-height,
     class: mh,
     values: (100: 100%)
    ),
    "viewport-height": (
     property: height,
     class: vh,
     values: (100: 100vh)
    ),
    "min-viewport-height": (
     property: min-height,
     class: min-vh,
     values: (100: 100vh)
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class SPACING:
    """

    Spacing
    =======



    Bootstrap includes a wide range of shorthand responsive margin, padding, and gap utility classes to modify an element’s appearance.






     On this page


    **On this page**


    ---




    * [Margin and padding](#margin-and-padding)
            + [Notation](#notation)
            + [Examples](#examples)
            + [Horizontal centering](#horizontal-centering)
    * [Negative margin](#negative-margin)
    * [Gap](#gap)
            + [row-gap](#row-gap)
            + [column-gap](#column-gap)
    * [CSS](#css)
            + [Sass maps](#sass-maps)
            + [Sass utilities API](#sass-utilities-api)






    Margin and padding
    ------------------


    Assign responsive-friendly `margin` or `padding` values to an element or a subset of its sides with shorthand classes. Includes support for individual properties, all properties, and vertical and horizontal properties. Classes are built from a default Sass map ranging from `.25rem` to `3rem`.



    **Using the CSS Grid layout module?** Consider using [the gap utility](#gap) instead.

    ### Notation


    Spacing utilities that apply to all breakpoints, from `xs` to `xxl`, have no breakpoint abbreviation in them. This is because those classes are applied from `min-width: 0` and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.


    The classes are named using the format `{property}{sides}-{size}` for `xs` and `{property}{sides}-{breakpoint}-{size}` for `sm`, `md`, `lg`, `xl`, and `xxl`.


    Where *property* is one of:


    * `m` - for classes that set `margin`
    * `p` - for classes that set `padding`


    Where *sides* is one of:


    * `t` - for classes that set `margin-top` or `padding-top`
    * `b` - for classes that set `margin-bottom` or `padding-bottom`
    * `s` - (start) for classes that set `margin-left` or `padding-left` in LTR, `margin-right` or `padding-right` in RTL
    * `e` - (end) for classes that set `margin-right` or `padding-right` in LTR, `margin-left` or `padding-left` in RTL
    * `x` - for classes that set both `*-left` and `*-right`
    * `y` - for classes that set both `*-top` and `*-bottom`
    * blank - for classes that set a `margin` or `padding` on all 4 sides of the element


    Where *size* is one of:


    * `0` - for classes that eliminate the `margin` or `padding` by setting it to `0`
    * `1` - (by default) for classes that set the `margin` or `padding` to `$spacer * .25`
    * `2` - (by default) for classes that set the `margin` or `padding` to `$spacer * .5`
    * `3` - (by default) for classes that set the `margin` or `padding` to `$spacer`
    * `4` - (by default) for classes that set the `margin` or `padding` to `$spacer * 1.5`
    * `5` - (by default) for classes that set the `margin` or `padding` to `$spacer * 3`
    * `auto` - for classes that set the `margin` to auto


    (You can add more sizes by adding entries to the `$spacers` Sass map variable.)


    ### Examples


    Here are some representative examples of these classes:



    ```
    .mt-0 {
     margin-top: 0 !important;
    }

    .ms-1 {
     margin-left: ($spacer \* .25) !important;
    }

    .px-2 {
     padding-left: ($spacer \* .5) !important;
     padding-right: ($spacer \* .5) !important;
    }

    .p-3 {
     padding: $spacer !important;
    }

    ```
    ### Horizontal centering


    Additionally, Bootstrap also includes an `.mx-auto` class for horizontally centering fixed-width block level content—that is, content that has `display: block` and a `width` set—by setting the horizontal margins to `auto`.




     Centered element



    ```
    <div class="mx-auto p-2" style="width: 200px;">
     Centered element
    </div>

    ```
    Negative margin
    ---------------


    In CSS, `margin` properties can utilize negative values (`padding` cannot). These negative margins are **disabled by default**, but can be enabled in Sass by setting `$enable-negative-margins: true`.


    The syntax is nearly the same as the default, positive margin utilities, but with the addition of `n` before the requested size. Here’s an example class that’s the opposite of `.mt-1`:



    ```
    .mt-n1 {
     margin-top: -0.25rem !important;
    }

    ```
    Gap
    ---


    When using `display: grid` or `display: flex`, you can make use of `gap` utilities on the parent element. This can save on having to add margin utilities to individual children of a grid or flex container. Gap utilities are responsive by default, and are generated via our utilities API, based on the `$spacers` Sass map.




    Grid item 1
    Grid item 2
    Grid item 3
    Grid item 4


    html









    ```
    <div class="grid gap-3">
     <div class="p-2 g-col-6">Grid item 1</div>
     <div class="p-2 g-col-6">Grid item 2</div>
     <div class="p-2 g-col-6">Grid item 3</div>
     <div class="p-2 g-col-6">Grid item 4</div>
    </div>
    ```

    Support includes responsive options for all of Bootstrap’s grid breakpoints, as well as six sizes from the `$spacers` map (`0`–`5`). There is no `.gap-auto` utility class as it’s effectively the same as `.gap-0`.


    ### row-gap


    `row-gap` sets the vertical space between children items in the specified container.




    Grid item 1
    Grid item 2
    Grid item 3
    Grid item 4


    html









    ```
    <div class="grid gap-0 row-gap-3">
     <div class="p-2 g-col-6">Grid item 1</div>
     <div class="p-2 g-col-6">Grid item 2</div>
     <div class="p-2 g-col-6">Grid item 3</div>
     <div class="p-2 g-col-6">Grid item 4</div>
    </div>
    ```

    ### column-gap


    `column-gap` sets the horizontal space between children items in the specified container.




    Grid item 1
    Grid item 2
    Grid item 3
    Grid item 4


    html









    ```
    <div class="grid gap-0 column-gap-3">
     <div class="p-2 g-col-6">Grid item 1</div>
     <div class="p-2 g-col-6">Grid item 2</div>
     <div class="p-2 g-col-6">Grid item 3</div>
     <div class="p-2 g-col-6">Grid item 4</div>
    </div>
    ```

    CSS
    ---


    ### Sass maps


    Spacing utilities are declared via Sass map and then generated with our utilities API.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $spacer: 1rem;
    $spacers: (
     0: 0,
     1: $spacer \* .25,
     2: $spacer \* .5,
     3: $spacer,
     4: $spacer \* 1.5,
     5: $spacer \* 3,
    );

    ```

    ### Sass utilities API


    Spacing utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "margin": (
     responsive: true,
     property: margin,
     class: m,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-x": (
     responsive: true,
     property: margin-right margin-left,
     class: mx,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-y": (
     responsive: true,
     property: margin-top margin-bottom,
     class: my,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-top": (
     responsive: true,
     property: margin-top,
     class: mt,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-end": (
     responsive: true,
     property: margin-right,
     class: me,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-bottom": (
     responsive: true,
     property: margin-bottom,
     class: mb,
     values: map-merge($spacers, (auto: auto))
    ),
    "margin-start": (
     responsive: true,
     property: margin-left,
     class: ms,
     values: map-merge($spacers, (auto: auto))
    ),
    // Negative margin utilities
    "negative-margin": (
     responsive: true,
     property: margin,
     class: m,
     values: $negative-spacers
    ),
    "negative-margin-x": (
     responsive: true,
     property: margin-right margin-left,
     class: mx,
     values: $negative-spacers
    ),
    "negative-margin-y": (
     responsive: true,
     property: margin-top margin-bottom,
     class: my,
     values: $negative-spacers
    ),
    "negative-margin-top": (
     responsive: true,
     property: margin-top,
     class: mt,
     values: $negative-spacers
    ),
    "negative-margin-end": (
     responsive: true,
     property: margin-right,
     class: me,
     values: $negative-spacers
    ),
    "negative-margin-bottom": (
     responsive: true,
     property: margin-bottom,
     class: mb,
     values: $negative-spacers
    ),
    "negative-margin-start": (
     responsive: true,
     property: margin-left,
     class: ms,
     values: $negative-spacers
    ),
    // Padding utilities
    "padding": (
     responsive: true,
     property: padding,
     class: p,
     values: $spacers
    ),
    "padding-x": (
     responsive: true,
     property: padding-right padding-left,
     class: px,
     values: $spacers
    ),
    "padding-y": (
     responsive: true,
     property: padding-top padding-bottom,
     class: py,
     values: $spacers
    ),
    "padding-top": (
     responsive: true,
     property: padding-top,
     class: pt,
     values: $spacers
    ),
    "padding-end": (
     responsive: true,
     property: padding-right,
     class: pe,
     values: $spacers
    ),
    "padding-bottom": (
     responsive: true,
     property: padding-bottom,
     class: pb,
     values: $spacers
    ),
    "padding-start": (
     responsive: true,
     property: padding-left,
     class: ps,
     values: $spacers
    ),
    // Gap utility
    "gap": (
     responsive: true,
     property: gap,
     class: gap,
     values: $spacers
    ),
    "row-gap": (
     responsive: true,
     property: row-gap,
     class: row-gap,
     values: $spacers
    ),
    "column-gap": (
     responsive: true,
     property: column-gap,
     class: column-gap,
     values: $spacers
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TEXT:
    """

    Text
    ====



    Documentation and examples for common text utilities to control alignment, wrapping, weight, and more.






     On this page


    **On this page**


    ---




    * [Text alignment](#text-alignment)
    * [Text wrapping and overflow](#text-wrapping-and-overflow)
    * [Word break](#word-break)
    * [Text transform](#text-transform)
    * [Font size](#font-size)
    * [Font weight and italics](#font-weight-and-italics)
    * [Line height](#line-height)
    * [Monospace](#monospace)
    * [Reset color](#reset-color)
    * [Text decoration](#text-decoration)
    * [CSS](#css)
            + [Sass variables](#sass-variables)
            + [Sass maps](#sass-maps)
            + [Sass utilities API](#sass-utilities-api)






    Text alignment
    --------------


    Easily realign text to components with text alignment classes. For start, end, and center alignment, responsive classes are available that use the same viewport width breakpoints as the grid system.



    Start aligned text on all viewport sizes.


    Center aligned text on all viewport sizes.


    End aligned text on all viewport sizes.


    End aligned text on viewports sized SM (small) or wider.


    End aligned text on viewports sized MD (medium) or wider.


    End aligned text on viewports sized LG (large) or wider.


    End aligned text on viewports sized XL (extra large) or wider.


    End aligned text on viewports sized XXL (extra extra large) or wider.



    html









    ```
    <p class="text-start">Start aligned text on all viewport sizes.</p>
    <p class="text-center">Center aligned text on all viewport sizes.</p>
    <p class="text-end">End aligned text on all viewport sizes.</p>

    <p class="text-sm-end">End aligned text on viewports sized SM (small) or wider.</p>
    <p class="text-md-end">End aligned text on viewports sized MD (medium) or wider.</p>
    <p class="text-lg-end">End aligned text on viewports sized LG (large) or wider.</p>
    <p class="text-xl-end">End aligned text on viewports sized XL (extra large) or wider.</p>
    <p class="text-xxl-end">End aligned text on viewports sized XXL (extra extra large) or wider.</p>
    ```


    Note that we don’t provide utility classes for justified text. While, aesthetically, justified text might look more appealing, it does make word-spacing more random and therefore harder to read.

    Text wrapping and overflow
    --------------------------


    Wrap text with a `.text-wrap` class.




     This text should wrap.


    html









    ```
    <div class="badge bg-primary text-wrap" style="width: 6rem;">
     This text should wrap.
    </div>
    ```

    Prevent text from wrapping with a `.text-nowrap` class.




     This text should overflow the parent.


    html









    ```
    <div class="text-nowrap bg-body-secondary border" style="width: 8rem;">
     This text should overflow the parent.
    </div>
    ```

    Word break
    ----------


    Prevent long strings of text from breaking your components’ layout by using `.text-break` to set `word-wrap: break-word` and `word-break: break-word`. We use `word-wrap` instead of the more common `overflow-wrap` for wider browser support, and add the deprecated `word-break: break-word` to avoid issues with flex containers.



    mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm



    html









    ```
    <p class="text-break">mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm</p>
    ```


    Note that [breaking words isn’t possible in Arabic](https://rtlstyling.com/posts/rtl-styling#3.-line-break), which is the most used RTL language. Therefore `.text-break` is removed from our RTL compiled CSS.

    Text transform
    --------------


    Transform text in components with text capitalization classes.



    Lowercased text.


    Uppercased text.


    CapiTaliZed text.



    html









    ```
    <p class="text-lowercase">Lowercased text.</p>
    <p class="text-uppercase">Uppercased text.</p>
    <p class="text-capitalize">CapiTaliZed text.</p>
    ```

    Note how `.text-capitalize` only changes the first letter of each word, leaving the case of any other letters unaffected.


    Font size
    ---------


    Quickly change the `font-size` of text. While our heading classes (e.g., `.h1`–`.h6`) apply `font-size`, `font-weight`, and `line-height`, these utilities *only* apply `font-size`. Sizing for these utilities matches HTML’s heading elements, so as the number increases, their size decreases.



    .fs-1 text


    .fs-2 text


    .fs-3 text


    .fs-4 text


    .fs-5 text


    .fs-6 text



    html









    ```
    <p class="fs-1">.fs-1 text</p>
    <p class="fs-2">.fs-2 text</p>
    <p class="fs-3">.fs-3 text</p>
    <p class="fs-4">.fs-4 text</p>
    <p class="fs-5">.fs-5 text</p>
    <p class="fs-6">.fs-6 text</p>
    ```

    Customize your available `font-size`s by modifying the `$font-sizes` Sass map.


    Font weight and italics
    -----------------------


    Quickly change the `font-weight` or `font-style` of text with these utilities. `font-style` utilities are abbreviated as `.fst-*` and `font-weight` utilities are abbreviated as `.fw-*`.



    Bold text.


    Bolder weight text (relative to the parent element).


    Semibold weight text.


    Medium weight text.


    Normal weight text.


    Light weight text.


    Lighter weight text (relative to the parent element).


    Italic text.


    Text with normal font style



    html









    ```
    <p class="fw-bold">Bold text.</p>
    <p class="fw-bolder">Bolder weight text (relative to the parent element).</p>
    <p class="fw-semibold">Semibold weight text.</p>
    <p class="fw-medium">Medium weight text.</p>
    <p class="fw-normal">Normal weight text.</p>
    <p class="fw-light">Light weight text.</p>
    <p class="fw-lighter">Lighter weight text (relative to the parent element).</p>
    <p class="fst-italic">Italic text.</p>
    <p class="fst-normal">Text with normal font style</p>
    ```

    Line height
    -----------


    Change the line height with `.lh-*` utilities.



    This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.


    This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.


    This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.


    This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.



    html









    ```
    <p class="lh-1">This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.</p>
    <p class="lh-sm">This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.</p>
    <p class="lh-base">This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.</p>
    <p class="lh-lg">This is a long paragraph written to show how the line-height of an element is affected by our utilities. Classes are applied to the element itself or sometimes the parent element. These classes can be customized as needed with our utility API.</p>
    ```

    Monospace
    ---------


    Change a selection to our monospace font stack with `.font-monospace`.



    This is in monospace



    html









    ```
    <p class="font-monospace">This is in monospace</p>
    ```

    Reset color
    -----------


    Reset a text or link’s color with `.text-reset`, so that it inherits the color from its parent.




     Secondary body text with a [reset link](#).




    html









    ```
    <p class="text-body-secondary">
     Secondary body text with a <a href="#" class="text-reset">reset link</a>.
    </p>
    ```

    Text decoration
    ---------------


    Decorate text in components with text decoration classes.



    This text has a line underneath it.


    This text has a line going through it.


    [This link has its text decoration removed](#)

    html









    ```
    <p class="text-decoration-underline">This text has a line underneath it.</p>
    <p class="text-decoration-line-through">This text has a line going through it.</p>
    <a href="#" class="text-decoration-none">This link has its text decoration removed</a>
    ```

    CSS
    ---


    ### Sass variables


    Default type and font related Sass variables:




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    // stylelint-disable value-keyword-case
    $font-family-sans-serif: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    $font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    // stylelint-enable value-keyword-case
    $font-family-base: var(--#{$prefix}font-sans-serif);
    $font-family-code: var(--#{$prefix}font-monospace);

    // $font-size-root affects the value of `rem`, which is used for as well font sizes, paddings, and margins
    // $font-size-base affects the font size of the body text
    $font-size-root: null;
    $font-size-base: 1rem; // Assumes the browser default, typically `16px`
    $font-size-sm: $font-size-base \* .875;
    $font-size-lg: $font-size-base \* 1.25;

    $font-weight-lighter: lighter;
    $font-weight-light: 300;
    $font-weight-normal: 400;
    $font-weight-medium: 500;
    $font-weight-semibold: 600;
    $font-weight-bold: 700;
    $font-weight-bolder: bolder;

    $font-weight-base: $font-weight-normal;

    $line-height-base: 1.5;
    $line-height-sm: 1.25;
    $line-height-lg: 2;

    $h1-font-size: $font-size-base \* 2.5;
    $h2-font-size: $font-size-base \* 2;
    $h3-font-size: $font-size-base \* 1.75;
    $h4-font-size: $font-size-base \* 1.5;
    $h5-font-size: $font-size-base \* 1.25;
    $h6-font-size: $font-size-base;

    ```

    ### Sass maps


    Font-size utilities are generated from this map, in combination with our utilities API.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $font-sizes: (
     1: $h1-font-size,
     2: $h2-font-size,
     3: $h3-font-size,
     4: $h4-font-size,
     5: $h5-font-size,
     6: $h6-font-size
    );

    ```



    [scss/\_maps.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_maps.scss)






    ```
    $theme-colors-text: (
     "primary": $primary-text-emphasis,
     "secondary": $secondary-text-emphasis,
     "success": $success-text-emphasis,
     "info": $info-text-emphasis,
     "warning": $warning-text-emphasis,
     "danger": $danger-text-emphasis,
     "light": $light-text-emphasis,
     "dark": $dark-text-emphasis,
    );

    ```

    ### Sass utilities API


    Font and text utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "font-family": (
     property: font-family,
     class: font,
     values: (monospace: var(--#{$prefix}font-monospace))
    ),
    "font-size": (
     rfs: true,
     property: font-size,
     class: fs,
     values: $font-sizes
    ),
    "font-style": (
     property: font-style,
     class: fst,
     values: italic normal
    ),
    "font-weight": (
     property: font-weight,
     class: fw,
     values: (
     lighter: $font-weight-lighter,
     light: $font-weight-light,
     normal: $font-weight-normal,
     medium: $font-weight-medium,
     semibold: $font-weight-semibold,
     bold: $font-weight-bold,
     bolder: $font-weight-bolder
     )
    ),
    "line-height": (
     property: line-height,
     class: lh,
     values: (
     1: 1,
     sm: $line-height-sm,
     base: $line-height-base,
     lg: $line-height-lg,
     )
    ),
    "text-align": (
     responsive: true,
     property: text-align,
     class: text,
     values: (
     start: left,
     end: right,
     center: center,
     )
    ),
    "text-decoration": (
     property: text-decoration,
     values: none underline line-through
    ),
    "text-transform": (
     property: text-transform,
     class: text,
     values: lowercase uppercase capitalize
    ),
    "white-space": (
     property: white-space,
     class: text,
     values: (
     wrap: normal,
     nowrap: nowrap,
     )
    ),
    "word-wrap": (
     property: word-wrap word-break,
     class: text,
     values: (break: break-word),
     rtl: false
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class VERTICAL_ALIGNMENT:
    """

    Vertical alignment
    ==================



    Easily change the vertical alignment of inline, inline-block, inline-table, and table cell elements.





    Change the alignment of elements with the [`vertical-alignment`](https://developer.mozilla.org/en-UShttps://getbootstrap.com/docs/Web/CSS/vertical-align) utilities. Please note that vertical-align only affects inline, inline-block, inline-table, and table cell elements.


    Choose from `.align-baseline`, `.align-top`, `.align-middle`, `.align-bottom`, `.align-text-bottom`, and `.align-text-top` as needed.


    To vertically center non-inline content (like `<div>`s and more), use our [flex box utilities](https://getbootstrap.com/docs/5.3/utilities/flex/#align-items).


    With inline elements:



    baseline
    top
    middle
    bottom
    text-top
    text-bottom

    html









    ```
    <span class="align-baseline">baseline</span>
    <span class="align-top">top</span>
    <span class="align-middle">middle</span>
    <span class="align-bottom">bottom</span>
    <span class="align-text-top">text-top</span>
    <span class="align-text-bottom">text-bottom</span>
    ```

    With table cells:





    |  |  |  |  |  |  |
    | --- | --- | --- | --- | --- | --- |
    | baseline | top | middle | bottom | text-top | text-bottom |



    html









    ```
    <table style="height: 100px;">
     <tbody>
     <tr>
     <td class="align-baseline">baseline</td>
     <td class="align-top">top</td>
     <td class="align-middle">middle</td>
     <td class="align-bottom">bottom</td>
     <td class="align-text-top">text-top</td>
     <td class="align-text-bottom">text-bottom</td>
     </tr>
     </tbody>
    </table>
    ```

    CSS
    ---


    ### Sass utilities API


    Vertical align utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "align": (
     property: vertical-align,
     class: align,
     values: baseline top middle bottom text-bottom text-top
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class VISIBILITY:
    """

    Visibility
    ==========



    Control the visibility of elements, without modifying their display, with visibility utilities.





    Set the `visibility` of elements with our visibility utilities. These utility classes do not modify the `display` value at all and do not affect layout – `.invisible` elements still take up space in the page.



    Elements with the `.invisible` class will be hidden *both* visually and for assistive technology/screen reader users.

    Apply `.visible` or `.invisible` as needed.



    ```
    <div class="visible">...</div>
    <div class="invisible">...</div>

    ```

    ```
    // Class
    .visible {
     visibility: visible !important;
    }
    .invisible {
     visibility: hidden !important;
    }

    ```
    CSS
    ---


    ### Sass utilities API


    Visibility utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "visibility": (
     property: visibility,
     class: null,
     values: (
     visible: visible,
     invisible: hidden,
     )
    ),
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class Z_INDEX:
    """

    Z-index
    =======



    Use our low-level `z-index` utilities to quickly change the stack level of an element or component.






     On this page


    **On this page**


    ---




    * [Example](#example)
    * [Overlays](#overlays)
    * [Component approach](#component-approach)
    * [CSS](#css)
            + [Sass maps](#sass-maps)
            + [Sass utilities API](#sass-utilities-api)






    Example
    -------


    Use `z-index` utilities to stack elements on top of one another. Requires a `position` value other than `static`, which can be set with custom styles or using our [position utilities](https://getbootstrap.com/docs/5.3/utilities/position/).



    We call these “low-level” `z-index` utilities because of their default values of `-1` through `3`, which we use for the layout of overlapping components. High-level `z-index` values are used for overlay components like modals and tooltips.


    z-3
    z-2
    z-1
    z-0
    z-n1

    html









    ```
    <div class="z-3 position-absolute p-5 rounded-3"><span>z-3</span></div>
    <div class="z-2 position-absolute p-5 rounded-3"><span>z-2</span></div>
    <div class="z-1 position-absolute p-5 rounded-3"><span>z-1</span></div>
    <div class="z-0 position-absolute p-5 rounded-3"><span>z-0</span></div>
    <div class="z-n1 position-absolute p-5 rounded-3"><span>z-n1</span></div>
    ```

    Overlays
    --------


    Bootstrap overlay components—dropdown, modal, offcanvas, popover, toast, and tooltip—all have their own `z-index` values to ensure a usable experience with competing “layers” of an interface.


    Read about them in the [`z-index` layout page](https://getbootstrap.com/docs/5.3/layout/z-index/).


    Component approach
    ------------------


    On some components, we use our low-level `z-index` values to manage repeating elements that overlap one another (like buttons in a button group or items in a list group).


    Learn about our [`z-index` approach](https://getbootstrap.com/docs/5.3/extend/approach/#z-index-scales).


    CSS
    ---


    ### Sass maps


    Customize this Sass map to change the available values and generated utilities.




    [scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






    ```
    $zindex-levels: (
     n1: -1,
     0: 0,
     1: 1,
     2: 2,
     3: 3
    );

    ```

    ### Sass utilities API


    Position utilities are declared in our utilities API in `scss/_utilities.scss`. [Learn how to use the utilities API.](https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)




    [scss/\_utilities.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_utilities.scss)






    ```
    "z-index": (
     property: z-index,
     class: z,
     values: $zindex-levels,
    )
    ```








    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class APPROACH:
    """

    Approach
    ========



    Learn about the guiding principles, strategies, and techniques used to build and maintain Bootstrap so you can more easily customize and extend it yourself.





    While the getting started pages provide an introductory tour of the project and what it offers, this document focuses on *why* we do the things we do in Bootstrap. It explains our philosophy to building on the web so that others can learn from us, contribute with us, and help us improve.


    See something that doesn’t sound right, or perhaps could be done better? [Open an issue](https://github.com/twbs/bootstrap/issues/new/choose)—we’d love to discuss it with you.


    Summary
    -------


    We’ll dive into each of these more throughout, but at a high level, here’s what guides our approach.


    * Components should be responsive and mobile-first
    * Components should be built with a base class and extended via modifier classes
    * Component states should obey a common z-index scale
    * Whenever possible, prefer an HTML and CSS implementation over JavaScript
    * Whenever possible, use utilities over custom styles
    * Whenever possible, avoid enforcing strict HTML requirements (children selectors)


    Responsive
    ----------


    Bootstrap’s responsive styles are built to be responsive, an approach that’s often referred to as *mobile-first*. We use this term in our docs and largely agree with it, but at times it can be too broad. While not every component *must* be entirely responsive in Bootstrap, this responsive approach is about reducing CSS overrides by pushing you to add styles as the viewport becomes larger.


    Across Bootstrap, you’ll see this most clearly in our media queries. In most cases, we use `min-width` queries that begin to apply at a specific breakpoint and carry up through the higher breakpoints. For example, a `.d-none` applies from `min-width: 0` to infinity. On the other hand, a `.d-md-none` applies from the medium breakpoint and up.


    At times we’ll use `max-width` when a component’s inherent complexity requires it. At times, these overrides are functionally and mentally clearer to implement and support than rewriting core functionality from our components. We strive to limit this approach, but will use it from time to time.


    Classes
    -------


    Aside from our Reboot, a cross-browser normalization stylesheet, all our styles aim to use classes as selectors. This means steering clear of type selectors (e.g., `input[type="text"]`) and extraneous parent classes (e.g., `.parent .child`) that make styles too specific to easily override.


    As such, components should be built with a base class that houses common, not-to-be overridden property-value pairs. For example, `.btn` and `.btn-primary`. We use `.btn` for all the common styles like `display`, `padding`, and `border-width`. We then use modifiers like `.btn-primary` to add the color, background-color, border-color, etc.


    Modifier classes should only be used when there are multiple properties or values to be changed across multiple variants. Modifiers are not always necessary, so be sure you’re actually saving lines of code and preventing unnecessary overrides when creating them. Good examples of modifiers are our theme color classes and size variants.


    z-index scales
    --------------


    There are two `z-index` scales in Bootstrap—elements within a component and overlay components.


    ### Component elements


    * Some components in Bootstrap are built with overlapping elements to prevent double borders without modifying the `border` property. For example, button groups, input groups, and pagination.
    * These components share a standard `z-index` scale of `0` through `3`.
    * `0` is default (initial), `1` is `:hover`, `2` is `:active`/`.active`, and `3` is `:focus`.
    * This approach matches our expectations of highest user priority. If an element is focused, it’s in view and at the user’s attention. Active elements are second highest because they indicate state. Hover is third highest because it indicates user intent, but nearly *anything* can be hovered.


    ### Overlay components


    Bootstrap includes several components that function as an overlay of some kind. This includes, in order of highest `z-index`, dropdowns, fixed and sticky navbars, modals, tooltips, and popovers. These components have their own `z-index` scale that begins at `1000`. This starting number was chosen arbitrarily and serves as a small buffer between our styles and your project’s custom styles.


    Each overlay component increases its `z-index` value slightly in such a way that common UI principles allow user focused or hovered elements to remain in view at all times. For example, a modal is document blocking (e.g., you cannot take any other action save for the modal’s action), so we put that above our navbars.


    Learn more about this in our [`z-index` layout page](https://getbootstrap.com/docs/5.3/layout/z-index/).


    HTML and CSS over JS
    --------------------


    Whenever possible, we prefer to write HTML and CSS over JavaScript. In general, HTML and CSS are more prolific and accessible to more people of all different experience levels. HTML and CSS are also faster in your browser than JavaScript, and your browser generally provides a great deal of functionality for you.


    This principle is our first-class JavaScript API using `data` attributes. You don’t need to write nearly any JavaScript to use our JavaScript plugins; instead, write HTML. Read more about this in [our JavaScript overview page](https://getbootstrap.com/docs/5.3/getting-started/javascript/#data-attributes).


    Lastly, our styles build on the fundamental behaviors of common web elements. Whenever possible, we prefer to use what the browser provides. For example, you can put a `.btn` class on nearly any element, but most elements don’t provide any semantic value or browser functionality. So instead, we use `<button>`s and `<a>`s.


    The same goes for more complex components. While we *could* write our own form validation plugin to add classes to a parent element based on an input’s state, thereby allowing us to style the text say red, we prefer using the `:valid`/`:invalid` pseudo-elements every browser provides us.


    Utilities
    ---------


    Utility classes—formerly helpers in Bootstrap 3—are a powerful ally in combating CSS bloat and poor page performance. A utility class is typically a single, immutable property-value pairing expressed as a class (e.g., `.d-block` represents `display: block;`). Their primary appeal is speed of use while writing HTML and limiting the amount of custom CSS you have to write.


    Specifically regarding custom CSS, utilities can help combat increasing file size by reducing your most commonly repeated property-value pairs into single classes. This can have a dramatic effect at scale in your projects.


    Flexible HTML
    -------------


    While not always possible, we strive to avoid being overly dogmatic in our HTML requirements for components. Thus, we focus on single classes in our CSS selectors and try to avoid immediate children selectors (`>`). This gives you more flexibility in your implementation and helps keep our CSS simpler and less specific.


    Code conventions
    ----------------


    [Code Guide](https://codeguide.co/) (from Bootstrap co-creator, @mdo) documents how we write our HTML and CSS across Bootstrap. It specifies guidelines for general formatting, common sense defaults, property and attribute orders, and more.


    We use [Stylelint](https://stylelint.io/) to enforce these standards and more in our Sass/CSS. [Our custom Stylelint config](https://github.com/twbs/stylelint-config-twbs-bootstrap) is open source and available for others to use and extend.


    We use [vnu-jar](https://www.npmjs.com/package/vnu-jar) to enforce standard and semantic HTML, as well as detecting common errors.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ICONS:
    """

    Icons
    =====



    Guidance and suggestions for using external icon libraries with Bootstrap.





    While Bootstrap doesn’t include an icon set by default, we do have our own comprehensive icon library called Bootstrap Icons. Feel free to use them or any other icon set in your project. We’ve included details for Bootstrap Icons and other preferred icon sets below.


    While most icon sets include multiple file formats, we prefer SVG implementations for their improved accessibility and vector support.


    Bootstrap Icons
    ---------------


    Bootstrap Icons is a growing library of SVG icons that are designed by [@mdo](https://github.com/mdo) and maintained by [the Bootstrap Team](https://github.com/orgs/twbs/people). The beginnings of this icon set come from Bootstrap’s very own components—our forms, carousels, and more. Bootstrap has very few icon needs out of the box, so we didn’t need much. However, once we got going, we couldn’t stop making more.


    Oh, and did we mention they’re completely open source? Licensed under MIT, just like Bootstrap, our icon set is available to everyone.


    [Learn more about Bootstrap Icons](https://icons.getbootstrap.com/), including how to install them and recommended usage.


    Alternatives
    ------------


    We’ve tested and used these icon sets ourselves as preferred alternatives to Bootstrap Icons.


    * [Font Awesome](https://fontawesome.com/)
    * [Feather](https://feathericons.com/)
    * [Octicons](https://primer.style/octicons/)


    More options
    ------------


    While we haven’t tried these out ourselves, they do look promising and provide multiple formats, including SVG.


    * [Bytesize](https://github.com/danklammer/bytesize-icons)
    * [CoreUI Icons](https://icons.coreui.io/)
    * [Google Material icons](https://fonts.google.com/icons)
    * [Ionicons](https://ionic.io/ionicons)
    * [Dripicons](http://demo.amitjakhu.com/dripicons/)
    * [Ikons](http://ikons.piotrkwiatkowski.co.uk/)
    * [Icons8](https://icons8.com/)
    * [icofont](https://icofont.com/)
    * [Tabler Icons](https://tabler-icons.io/)









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class ABOUT:
    """

    About
    =====



    Learn more about the team maintaining Bootstrap, how and why the project started, and how to get involved.





    Team
    ----


    Bootstrap is maintained by a [small team of developers](https://github.com/orgs/twbs/people) on GitHub. We’re actively looking to grow this team and would love to hear from you if you’re excited about CSS at scale, writing and maintaining vanilla JavaScript plugins, and improving build tooling processes for frontend code.


    History
    -------


    Originally created by a designer and a developer at Twitter, Bootstrap has become one of the most popular front-end frameworks and open source projects in the world.


    Bootstrap was created at Twitter in mid-2010 by [@mdo](https://twitter.com/mdo) and [@fat](https://twitter.com/fat). Prior to being an open-sourced framework, Bootstrap was known as *Twitter Blueprint*. A few months into development, Twitter held its [first Hack Week](https://blog.twitter.com/engineering/en_us/a/2010/hack-week.html) and the project exploded as developers of all skill levels jumped in without any external guidance. It served as the style guide for internal tools development at the company for over a year before its public release, and continues to do so today.


    Originally [released](https://blog.twitter.com/developer/en_us/a/2011/bootstrap-twitter.html) on Friday, August 19, 2011, we’ve since had over [twenty releases](https://github.com/twbs/bootstrap/releases), including two major rewrites with v2 and v3. With Bootstrap 2, we added responsive functionality to the entire framework as an optional stylesheet. Building on that with Bootstrap 3, we rewrote the library once more to make it responsive by default with a mobile first approach.


    With Bootstrap 4, we once again rewrote the project to account for two key architectural changes: a migration to Sass and the move to CSS’s flexbox. Our intention is to help in a small way to move the web development community forward by pushing for newer CSS properties, fewer dependencies, and new technologies across more modern browsers.


    Our latest release, Bootstrap 5, focuses on improving v4’s codebase with as few major breaking changes as possible. We improved existing features and components, removed support for older browsers, dropped jQuery for regular JavaScript, and embraced more future-friendly technologies like CSS custom properties as part of our tooling.


    Get involved
    ------------


    Get involved with Bootstrap development by [opening an issue](https://github.com/twbs/bootstrap/issues/new/choose) or submitting a pull request. Read our [contributing guidelines](https://github.com/twbs/bootstrap/blob/v5.3.1/.github/CONTRIBUTING.md) for information on how we develop.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TEAM:
    """

    Team
    ====



    An overview of the founding team and core contributors to Bootstrap.





    Bootstrap is maintained by the founding team and a small group of invaluable core contributors, with the massive support and involvement of our community.



    [![@mdo](https://github.com/mdo.png)

    **Mark Otto** @mdo](https://github.com/mdo)
    [![@fat](https://github.com/fat.png)

    **Jacob Thornton** @fat](https://github.com/fat)
    [![@xhmikosr](https://github.com/xhmikosr.png)

    **XhmikosR** @xhmikosr](https://github.com/xhmikosr)
    [![@geosot](https://github.com/geosot.png)

    **GeoSot** @geosot](https://github.com/geosot)
    [![@patrickhlauke](https://github.com/patrickhlauke.png)

    **Patrick H. Lauke** @patrickhlauke](https://github.com/patrickhlauke)
    [![@julien-deramond](https://github.com/julien-deramond.png)

    **Julien Déramond** @julien-deramond](https://github.com/julien-deramond)
    [![@ffoodd](https://github.com/ffoodd.png)

    **Gaël Poupard** @ffoodd](https://github.com/ffoodd)
    [![@rohit2sharma95](https://github.com/rohit2sharma95.png)

    **Rohit Sharma** @rohit2sharma95](https://github.com/rohit2sharma95)
    [![@alpadev](https://github.com/alpadev.png)

    **alpadev** @alpadev](https://github.com/alpadev)
    [![@martijncuppens](https://github.com/martijncuppens.png)

    **Martijn Cuppens** @martijncuppens](https://github.com/martijncuppens)
    [![@johann-s](https://github.com/johann-s.png)

    **Johann-S** @johann-s](https://github.com/johann-s)
    [![@glebm](https://github.com/glebm.png)

    **Gleb Mazovetskiy** @glebm](https://github.com/glebm)

    Get involved with Bootstrap development by [opening an issue](https://github.com/twbs/bootstrap/issues/new/choose) or submitting a pull request. Read our [contributing guidelines](https://github.com/twbs/bootstrap/blob/v5.3.1/.github/CONTRIBUTING.md) for information on how we develop.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class BRAND_GUIDELINES:
    """

    Brand guidelines
    ================



    Documentation and examples for Bootstrap’s logo and brand usage guidelines.






     On this page


    **On this page**


    ---




    * [Logo](#logo)
    * [Name](#name)






    Have a need for Bootstrap’s brand resources? Great! We have only a few guidelines we follow, and in turn ask you to follow as well.


    Logo
    ----


    When referencing Bootstrap, use our logo mark. Do not modify our logos in any way. Do not use Bootstrap’s branding for your own open or closed source projects.



    ![Bootstrap](https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo.svg)

    Our logo mark is also available in black and white. All rules for our primary logo apply to these as well.




    ![Bootstrap](https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo-black.svg)


    ![Bootstrap](https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo-white.svg)


    Name
    ----


    Bootstrap should always be referred to as just **Bootstrap**. No capital *s*.




    Bootstrap
    **Correct**


    BootStrap
    **Incorrect**









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class LICENSE_FAQS:
    """

    License FAQs
    ============



    Commonly asked questions about Bootstrap’s open source license.





    Bootstrap is released under the MIT license and is copyright 2023. Boiled down to smaller chunks, it can be described with the following conditions.


    It requires you to:
    -------------------


    * Keep the license and copyright notice included in Bootstrap’s CSS and JavaScript files when you use them in your works


    It permits you to:
    ------------------


    * Freely download and use Bootstrap, in whole or in part, for personal, private, company internal, or commercial purposes
    * Use Bootstrap in packages or distributions that you create
    * Modify the source code
    * Grant a sublicense to modify and distribute Bootstrap to third parties not included in the license


    It forbids you to:
    ------------------


    * Hold the authors and license owners liable for damages as Bootstrap is provided without warranty
    * Hold the creators or copyright holders of Bootstrap liable
    * Redistribute any piece of Bootstrap without proper attribution
    * Use any marks owned by Bootstrap in any way that might state or imply that Bootstrap endorses your distribution
    * Use any marks owned by Bootstrap in any way that might state or imply that you created the Bootstrap software in question


    It does not require you to:
    ---------------------------


    * Include the source of Bootstrap itself, or of any modifications you may have made to it, in any redistribution you may assemble that includes it
    * Submit changes that you make to Bootstrap back to the Bootstrap project (though such feedback is encouraged)


    The full Bootstrap license is located [in the project repository](https://github.com/twbs/bootstrap/blob/v5.3.1/LICENSE) for more information.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass


class TRANSLATIONS:
    """

    Translations
    ============



    Links to community-translated Bootstrap documentation sites.





    Community members have translated Bootstrap’s documentation into various languages. None are officially supported and they may not always be up-to-date.


    * [Bootstrap 4 繁體中文手冊 (中文(繁體))](https://bootstrap.hexschool.com/)
    * [Bootstrap 4 · 全球最流行的 HTML、CSS 和 JS 工具库。 (Chinese)](https://code.z01.com/v4/)
    * [Bootstrap 4 Português do Brasil (Brazilian Portuguese)](https://getbootstrap.com.br/v4/)
    * [Bootstrap 5 日本語リファレンス (Japanese)](https://getbootstrap.jp/)
    * [Bootstrap 5 на русском (Russian)](https://getbootstrap.su/)
    * [Bootstrap 5 한국어 문서 (Korean)](https://getbootstrap.kr/)
    * [Bootstrap 5 繁體中文手冊 (中文(繁體))](https://bootstrap5.hexschool.com/)
    * [Bootstrap 5 中文文档 (Simplified Chinese)](https://v5.bootcss.com/)
    * [Bootstrap 5 Español (Spanish)](https://bootstrap.esdocu.com/)


    **We don’t help organize or host translations, we just link to them.**


    Finished a new or better translation? Open a pull request to add it to our list.









    [Bootstrap
    Bootstrap](/)
    * Designed and built with all the love in the world by the [Bootstrap team](https://getbootstrap.com/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
    * Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    """

    pass

    """ 

Images
======



Documentation and examples for opting images into responsive behavior (so they never become wider than their parent) and add lightweight styles to them—all via classes.







Responsive images
-----------------


Images in Bootstrap are made responsive with `.img-fluid`. This applies `max-width: 100%;` and `height: auto;` to the image so that it scales with the parent width.



PlaceholderResponsive image

html









```
<img src="..." class="img-fluid" alt="...">
```

Image thumbnails
----------------


In addition to our [border-radius utilities](/docs/5.3/utilities/borders/), you can use `.img-thumbnail` to give an image a rounded 1px border appearance.



A generic square placeholder image with a white border around it, making it resemble a photograph taken with an old instant camera200x200

html









```
<img src="..." class="img-thumbnail" alt="...">
```

Aligning images
---------------


Align images with the [helper float classes](/docs/5.3/utilities/float/) or [text alignment classes](/docs/5.3/utilities/text/#text-alignment). `block`-level images can be centered using [the `.mx-auto` margin utility class](/docs/5.3/utilities/spacing/#horizontal-centering).



Placeholder200x200
Placeholder200x200

html









```
<img src="..." class="rounded float-start" alt="...">
<img src="..." class="rounded float-end" alt="...">
```


Placeholder200x200

html









```
<img src="..." class="rounded mx-auto d-block" alt="...">
```



Placeholder200x200


html









```
<div class="text-center">
 <img src="..." class="rounded" alt="...">
</div>
```

Picture
-------


If you are using the `<picture>` element to specify multiple `<source>` elements for a specific `<img>`, make sure to add the `.img-*` classes to the `<img>` and not to the `<picture>` tag.



```
<picture>
 <source srcset="..." type="image/svg+xml">
 <img src="..." class="img-fluid img-thumbnail" alt="...">
</picture>

```
CSS
---


### Sass variables


Variables are available for image thumbnails.




[scss/\_variables.scss](https://github.com/twbs/bootstrap/blob/v5.3.1/scss/_variables.scss)






```
$thumbnail-padding: .25rem;
$thumbnail-bg: var(--#{$prefix}body-bg);
$thumbnail-border-width: var(--#{$prefix}border-width);
$thumbnail-border-color: var(--#{$prefix}border-color);
$thumbnail-border-radius: var(--#{$prefix}border-radius);
$thumbnail-box-shadow: var(--#{$prefix}box-shadow-sm);

```








[Bootstrap
Bootstrap](/)
* Designed and built with all the love in the world by the [Bootstrap team](/docs/5.3/about/team/) with the help of [our contributors](https://github.com/twbs/bootstrap/graphs/contributors).
* Code licensed [MIT](https://github.com/twbs/bootstrap/blob/main/LICENSE), docs [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
"""
    IMAGE_FLUID = " image-fluid "
    IMAGE_THUMBNAIL = " img-thumbnail "
    ROUNDED = " rounded "
    FLOAT_START = " float-start "
    FLOAT_END = " float-end "
    TEXT_CENTER = " text-center "
    TEXT_START = " text-start "
    TEXT_END = " text-end "
