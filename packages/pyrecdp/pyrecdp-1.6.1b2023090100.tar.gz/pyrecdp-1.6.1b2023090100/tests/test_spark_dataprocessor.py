import unittest
import sys
import pandas as pd
from pathlib import Path
pathlib = str(Path(__file__).parent.parent.resolve())
print(pathlib)
try:
    import pyrecdp
except:
    print("Not detect system installed pyrecdp, using local one")
    sys.path.append(pathlib)

from pyrecdp.data_processor import DataProcessor, Categorify
from pathlib import Path

class TestSparkDataProcessor(unittest.TestCase):
    def setUp(self):
        path_prefix = "file://"
        self.path = path_prefix + f"{pathlib}/tests/data/part-00008-3f7afb26-5b6e-4f4a-8a44-f439ddc4319f-c000.snappy.parquet"
        scala_udf_jars = f"{pathlib}/pyrecdp/ScalaProcessUtils/target/recdp-scala-extensions-0.1.0-jar-with-dependencies.jar"
        print(scala_udf_jars)

        from pyspark.sql import SparkSession
        
        print(scala_udf_jars)
        spark = SparkSession.builder.master("local[1]")\
            .config('spark.driver.memory', '10g')\
            .config("spark.driver.extraClassPath", f"{scala_udf_jars}")\
            .appName("test_sortArrayByFrequency")\
            .getOrCreate()
        self.proc = DataProcessor(spark)

    def tearDown(self):
        self.proc.spark.stop()
        return super().tearDown()
    
    def test_categorify(self):
        path = self.path
        proc = self.proc
        
        df = proc.spark.read.parquet(f"{path}")
        df = df.select("language")
        proc.reset_ops([Categorify(['language'])])
        ret_df = proc.apply(df).toPandas()
        self.assertEqual(ret_df.shape, (2193, 1))
        expected_desp = {'count': 2193.0, 'mean': 3.3461012311901506, 'std': 5.223049926213455, 'min': 0.0, '25%': 0.0, '50%': 1.0, '75%': 4.0, 'max': 39.0}
        actual_desp = ret_df['language'].describe().to_dict()
        #print(actual_desp)
        self.assertEqual(actual_desp, expected_desp)
        print("test_categorify ran successfully")
        
        
    def test_sortArrayByFrequency(self):        
        path = self.path
        proc = self.proc
        
        import pyspark.sql.functions as f
        import pyspark.sql.types as t

        df = self.proc.spark.read.parquet(f"{path}")
        df = df.select("language", "tweet_timestamp")
        df = df.withColumn("dt_hour", f.dayofweek(f.from_unixtime(f.col('tweet_timestamp'))).cast(t.IntegerType()))
        df = df.groupby('dt_hour').agg(f.collect_list("language").alias("language_list"))
        df = df.filter("size(language_list) > 3")
        df = df.withColumn("sorted_language", f.expr(f"sortStringArrayByFrequency(language_list)"))
        
        ret_df = proc.apply(df).toPandas()
        # expected_ret = [['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', 'B0FA488F2911701DD8EC5B1EA5E322D8', 'B8B04128918BBF54E2E178BFF1ABA833', '1F73BB863A39DB62B4A55B7E558DB1E8', '9FCF19233EAD65EA6E32C2E6DC03A444', '313ECD3A1E5BB07406E4249475C2D6D6', '9A78FC330083E72BE0DD1EA92656F3B5', '2F548E5BE0D7F678E72DDE31DFBEF8E7', '310ECD7D1E42216E3C1B31EFDDFC72A7', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', 'B4DC2F82961F1263E90DF7A942CCE0B2', '8729EBF694C3DAF61208A209C2A542C8', 'E6936751CBF4F921F7DE1AEF33A16ED0', '5A0759FB938B1D9B1E08B7A3A14F1042', '2573A3CF633EBE6932A1E1010D5CD213', '23686A079CA538645BF6118A1EF51C8B', '5B6973BEB05212E396F3F2DC6A31B71C', 'DA13A5C3763C212D9D68FC69102DE5E5', '00304D7356D6C64481190D708D8F739C', '159541FA269CA8A9CDB93658CAEC4CA2', '3228B1FB4BC92E81EF2FE35BDA86C540', '6B90065EA806B8523C0A6E56D7A961B2', '7D11A7AA105DAB4D6799AF863369DB9C', 'A5CFB818D79497B482B7225887DBD3AD', 'D922D8FEA3EFAD3200455120B75BCEB8'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', 'B8B04128918BBF54E2E178BFF1ABA833', 'B0FA488F2911701DD8EC5B1EA5E322D8', '313ECD3A1E5BB07406E4249475C2D6D6', '1F73BB863A39DB62B4A55B7E558DB1E8', '8729EBF694C3DAF61208A209C2A542C8', '9A78FC330083E72BE0DD1EA92656F3B5', '9FCF19233EAD65EA6E32C2E6DC03A444', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', '310ECD7D1E42216E3C1B31EFDDFC72A7', 'DA13A5C3763C212D9D68FC69102DE5E5', 'E6936751CBF4F921F7DE1AEF33A16ED0', '5A0759FB938B1D9B1E08B7A3A14F1042', 'B4DC2F82961F1263E90DF7A942CCE0B2', '2573A3CF633EBE6932A1E1010D5CD213', '4CA37504EF8BA4352B03DCBA50E98A45', '914074E75CB398B5A2D81E1A51818CAA', '6B90065EA806B8523C0A6E56D7A961B2', '838A92D9F7EB57FB4A8B0C953A80C7EB', '59BE899EB83AAA19878738040F6828F0', '7D11A7AA105DAB4D6799AF863369DB9C', '2F548E5BE0D7F678E72DDE31DFBEF8E7', 'F70598172AC4514B1E6818EA361AD580', 'D7C16BC3C9A5A633D6A3043A567C95A6', '00304D7356D6C64481190D708D8F739C'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', '313ECD3A1E5BB07406E4249475C2D6D6', 'B8B04128918BBF54E2E178BFF1ABA833', 'B0FA488F2911701DD8EC5B1EA5E322D8', '1F73BB863A39DB62B4A55B7E558DB1E8', '9FCF19233EAD65EA6E32C2E6DC03A444', 'E6936751CBF4F921F7DE1AEF33A16ED0', 'B4DC2F82961F1263E90DF7A942CCE0B2', '2F548E5BE0D7F678E72DDE31DFBEF8E7', '2573A3CF633EBE6932A1E1010D5CD213', '8729EBF694C3DAF61208A209C2A542C8', '23686A079CA538645BF6118A1EF51C8B', '9A78FC330083E72BE0DD1EA92656F3B5', '159541FA269CA8A9CDB93658CAEC4CA2', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', '5A0759FB938B1D9B1E08B7A3A14F1042', '00304D7356D6C64481190D708D8F739C', '5B6973BEB05212E396F3F2DC6A31B71C', '310ECD7D1E42216E3C1B31EFDDFC72A7', '7D11A7AA105DAB4D6799AF863369DB9C', 'A5CFB818D79497B482B7225887DBD3AD'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', 'B8B04128918BBF54E2E178BFF1ABA833', 'B0FA488F2911701DD8EC5B1EA5E322D8', '313ECD3A1E5BB07406E4249475C2D6D6', '1F73BB863A39DB62B4A55B7E558DB1E8', '8729EBF694C3DAF61208A209C2A542C8', '9A78FC330083E72BE0DD1EA92656F3B5', '9FCF19233EAD65EA6E32C2E6DC03A444', 'B4DC2F82961F1263E90DF7A942CCE0B2', 'E6936751CBF4F921F7DE1AEF33A16ED0', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', 'DA13A5C3763C212D9D68FC69102DE5E5', '310ECD7D1E42216E3C1B31EFDDFC72A7', '838A92D9F7EB57FB4A8B0C953A80C7EB', '7D11A7AA105DAB4D6799AF863369DB9C', '5B6973BEB05212E396F3F2DC6A31B71C', 'BF04E736C599E9DE22F39F1DC157E1F1', '4B55C45CD308068E4D0913DEF1043AD6', 'F9D8F1DB5A398E1225A2C42E34A51DF6', '41776FB50B812A6775C2F8DEC92A9779', 'C1E99BF67DDA2227007DE8038FE32470', '5A0759FB938B1D9B1E08B7A3A14F1042', '2F548E5BE0D7F678E72DDE31DFBEF8E7', 'BAC6A3C2E18C26A77C99B41ECE1C738D', 'A5CFB818D79497B482B7225887DBD3AD', '00304D7356D6C64481190D708D8F739C', '23686A079CA538645BF6118A1EF51C8B'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', 'B8B04128918BBF54E2E178BFF1ABA833', 'B0FA488F2911701DD8EC5B1EA5E322D8', '313ECD3A1E5BB07406E4249475C2D6D6', '9FCF19233EAD65EA6E32C2E6DC03A444', '1F73BB863A39DB62B4A55B7E558DB1E8', '9A78FC330083E72BE0DD1EA92656F3B5', 'B4DC2F82961F1263E90DF7A942CCE0B2', '8729EBF694C3DAF61208A209C2A542C8', 'E6936751CBF4F921F7DE1AEF33A16ED0', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', '2573A3CF633EBE6932A1E1010D5CD213', 'E84BE2C963852FB065EE827F41A0A304', '6B90065EA806B8523C0A6E56D7A961B2', '838A92D9F7EB57FB4A8B0C953A80C7EB', '7D11A7AA105DAB4D6799AF863369DB9C', 'DA13A5C3763C212D9D68FC69102DE5E5', '99CA116BF6AA65D70F3C78BEBADC51F0', '5A0759FB938B1D9B1E08B7A3A14F1042', '2F548E5BE0D7F678E72DDE31DFBEF8E7', 'F70598172AC4514B1E6818EA361AD580', '00304D7356D6C64481190D708D8F739C', '5B6973BEB05212E396F3F2DC6A31B71C'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', '313ECD3A1E5BB07406E4249475C2D6D6', 'B0FA488F2911701DD8EC5B1EA5E322D8', '1F73BB863A39DB62B4A55B7E558DB1E8', 'B8B04128918BBF54E2E178BFF1ABA833', '9FCF19233EAD65EA6E32C2E6DC03A444', '9A78FC330083E72BE0DD1EA92656F3B5', 'B4DC2F82961F1263E90DF7A942CCE0B2', 'E6936751CBF4F921F7DE1AEF33A16ED0', '310ECD7D1E42216E3C1B31EFDDFC72A7', '8729EBF694C3DAF61208A209C2A542C8', '23686A079CA538645BF6118A1EF51C8B', '4B55C45CD308068E4D0913DEF1043AD6', '838A92D9F7EB57FB4A8B0C953A80C7EB', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', 'D922D8FEA3EFAD3200455120B75BCEB8', 'DA13A5C3763C212D9D68FC69102DE5E5', '5A0759FB938B1D9B1E08B7A3A14F1042', '2F548E5BE0D7F678E72DDE31DFBEF8E7', 'F70598172AC4514B1E6818EA361AD580', '2573A3CF633EBE6932A1E1010D5CD213', 'D7C16BC3C9A5A633D6A3043A567C95A6', '5B6973BEB05212E396F3F2DC6A31B71C'], ['488B32D24BD4BB44172EB981C1BCA6FA', 'E7F038DE3EAD397AEC9193686C911677', 'B8B04128918BBF54E2E178BFF1ABA833', 'B0FA488F2911701DD8EC5B1EA5E322D8', '8729EBF694C3DAF61208A209C2A542C8', '313ECD3A1E5BB07406E4249475C2D6D6', '1F73BB863A39DB62B4A55B7E558DB1E8', 'E6936751CBF4F921F7DE1AEF33A16ED0', '9FCF19233EAD65EA6E32C2E6DC03A444', '310ECD7D1E42216E3C1B31EFDDFC72A7', 'B4DC2F82961F1263E90DF7A942CCE0B2', '7F4FAB1EB12CD95EDCD9DB2A6634EFCE', '9A78FC330083E72BE0DD1EA92656F3B5', '5B6973BEB05212E396F3F2DC6A31B71C', 'DA13A5C3763C212D9D68FC69102DE5E5', '2573A3CF633EBE6932A1E1010D5CD213', 'A5CFB818D79497B482B7225887DBD3AD', 'D922D8FEA3EFAD3200455120B75BCEB8', '00304D7356D6C64481190D708D8F739C', '4B55C45CD308068E4D0913DEF1043AD6', '838A92D9F7EB57FB4A8B0C953A80C7EB', '5A0759FB938B1D9B1E08B7A3A14F1042']]
        # actual_ret = ret_df['sorted_language'].to_list()[:10]
        # self.assertEqual(expected_ret, actual_ret)
        print("test_sortArrayByFrequency ran successfully")