[tool.poetry]
name = "meta_msg"
version = "0.1.0"
description = "meta_msg"
authors = ["RafRaf <smartrafraf@gmail.com>"]
readme = "README.md"

[tool.poetry.scripts]
generate-proto = "src.scripts.poetry:generate_proto"
generate-proto-dev = "src.scripts.poetry:generate_proto_dev"

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.8.3"
envparse = "^0.2.0"
pytz = "^2022.7.1"
fastapi = "^0.89.1"
httpx = "^0.23.3"
python-multipart = "^0.0.5"
aiosmtplib = "^2.0.1"
aiofiles = "^22.1.0"
apscheduler = "^3.9.1.post1"
aiologger = "^0.7.0"
pillow = "^9.4.0"
sentry-sdk = "^1.13.0"
protobuf = "^4.21.12"
stripe = "^5.1.1"
nats-py = "^2.3.1"
grpclib = "^0.4.3"
grpcio-tools = "^1.51.1"

[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
mypy = "^0.991"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.20.3"
debugpy = "^1.6.5"
pytest = "^7.2.1"
ruff = "^0.0.227"
isort = "^5.11.4"
mypy-protobuf = "^3.4.0"

[tool.isort]
line_length = 100
profile = "black"
quiet = true
src_paths = ["."]

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100

[tool.mypy]
python_version = "3.10"

[tool.pytest.ini_options]
minversion = "6.0"
required_plugins = "pytest-asyncio"
testpaths = [
    "tests",
]

[tool.coverage]
ignore_errors = true

[tool.coverage.run]
branch = true
omit = [
    "*tests*",
    "src/settings/*",
    "src/main.py",
]

[tool.coverage.report]
skip_covered = true
exclude_lines = [
    "pragma: no cover",            # Have to re-enable the standard pragma
    "def __repr__",                # Don't complain about missing debug-only code:
    "if self.debug",               # Skip empty code blocks
    "pass",
    "raise AssertionError",        # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",
    "if 0:",                       # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
