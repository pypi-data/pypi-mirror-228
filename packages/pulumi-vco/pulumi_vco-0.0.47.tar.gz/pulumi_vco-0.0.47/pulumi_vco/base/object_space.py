# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ObjectSpaceArgs', 'ObjectSpace']

@pulumi.input_type
class ObjectSpaceArgs:
    def __init__(__self__, *,
                 customer_id: pulumi.Input[str],
                 location: pulumi.Input[str],
                 name: pulumi.Input[str],
                 token: pulumi.Input[str],
                 url: pulumi.Input[str],
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[int]] = None,
                 letsencrypt: Optional[pulumi.Input[bool]] = None,
                 letsencrypt_email: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ObjectSpace resource.
        """
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)
        if cloudspace_id is not None:
            pulumi.set(__self__, "cloudspace_id", cloudspace_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if external_network is not None:
            pulumi.set(__self__, "external_network", external_network)
        if letsencrypt is not None:
            pulumi.set(__self__, "letsencrypt", letsencrypt)
        if letsencrypt_email is not None:
            pulumi.set(__self__, "letsencrypt_email", letsencrypt_email)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def cloudspace_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudspace_id")

    @cloudspace_id.setter
    def cloudspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudspace_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def external_network(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "external_network")

    @external_network.setter
    def external_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "external_network", value)

    @property
    @pulumi.getter
    def letsencrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "letsencrypt")

    @letsencrypt.setter
    def letsencrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "letsencrypt", value)

    @property
    @pulumi.getter
    def letsencrypt_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "letsencrypt_email")

    @letsencrypt_email.setter
    def letsencrypt_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "letsencrypt_email", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


class ObjectSpace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[int]] = None,
                 letsencrypt: Optional[pulumi.Input[bool]] = None,
                 letsencrypt_email: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ObjectSpace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObjectSpaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ObjectSpace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ObjectSpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObjectSpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 external_network: Optional[pulumi.Input[int]] = None,
                 letsencrypt: Optional[pulumi.Input[bool]] = None,
                 letsencrypt_email: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObjectSpaceArgs.__new__(ObjectSpaceArgs)

            __props__.__dict__["cloudspace_id"] = cloudspace_id
            if customer_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_id'")
            __props__.__dict__["customer_id"] = None if customer_id is None else pulumi.Output.secret(customer_id)
            __props__.__dict__["domain"] = domain
            __props__.__dict__["external_network"] = external_network
            __props__.__dict__["letsencrypt"] = letsencrypt
            __props__.__dict__["letsencrypt_email"] = letsencrypt_email
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["subnet"] = subnet
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = None if url is None else pulumi.Output.secret(url)
            __props__.__dict__["access_key"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["objectspace_id"] = None
            __props__.__dict__["objectspace_name"] = None
            __props__.__dict__["secret"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(ObjectSpace, __self__).__init__(
            'vco:base:ObjectSpace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ObjectSpace':
        """
        Get an existing ObjectSpace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ObjectSpaceArgs.__new__(ObjectSpaceArgs)

        __props__.__dict__["access_key"] = None
        __props__.__dict__["cloudspace_id"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["customer_id"] = None
        __props__.__dict__["domain"] = None
        __props__.__dict__["external_network"] = None
        __props__.__dict__["letsencrypt"] = None
        __props__.__dict__["letsencrypt_email"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["objectspace_id"] = None
        __props__.__dict__["objectspace_name"] = None
        __props__.__dict__["secret"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["subnet"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["url"] = None
        return ObjectSpace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def access_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cloudspace_id")

    @property
    @pulumi.getter
    def creation_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def external_network(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "external_network")

    @property
    @pulumi.getter
    def letsencrypt(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "letsencrypt")

    @property
    @pulumi.getter
    def letsencrypt_email(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "letsencrypt_email")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def objectspace_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "objectspace_id")

    @property
    @pulumi.getter
    def objectspace_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "objectspace_name")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def update_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

