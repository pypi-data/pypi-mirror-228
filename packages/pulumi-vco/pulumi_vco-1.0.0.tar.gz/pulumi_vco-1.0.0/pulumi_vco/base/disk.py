# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DiskArgs', 'Disk']

@pulumi.input_type
class DiskArgs:
    def __init__(__self__, *,
                 customer_id: pulumi.Input[str],
                 description: pulumi.Input[str],
                 disk_name: pulumi.Input[str],
                 disk_size: pulumi.Input[int],
                 location: pulumi.Input[str],
                 token: pulumi.Input[str],
                 url: pulumi.Input[str],
                 detach: Optional[pulumi.Input[bool]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 permanently: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Disk resource.
        """
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)
        if detach is not None:
            pulumi.set(__self__, "detach", detach)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if permanently is not None:
            pulumi.set(__self__, "permanently", permanently)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disk_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter
    def disk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def detach(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "detach")

    @detach.setter
    def detach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detach", value)

    @property
    @pulumi.getter
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def permanently(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permanently")

    @permanently.setter
    def permanently(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permanently", value)

    @property
    @pulumi.getter
    def vm_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vm_id", value)


class Disk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detach: Optional[pulumi.Input[bool]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 permanently: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Disk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Disk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detach: Optional[pulumi.Input[bool]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 permanently: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiskArgs.__new__(DiskArgs)

            if customer_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_id'")
            __props__.__dict__["customer_id"] = None if customer_id is None else pulumi.Output.secret(customer_id)
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["detach"] = detach
            if disk_name is None and not opts.urn:
                raise TypeError("Missing required property 'disk_name'")
            __props__.__dict__["disk_name"] = disk_name
            if disk_size is None and not opts.urn:
                raise TypeError("Missing required property 'disk_size'")
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["disk_type"] = disk_type
            __props__.__dict__["iops"] = iops
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["permanently"] = permanently
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = None if url is None else pulumi.Output.secret(url)
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["cloudspace_id"] = None
            __props__.__dict__["disk_id"] = None
            __props__.__dict__["exposed"] = None
            __props__.__dict__["model"] = None
            __props__.__dict__["order"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["status"] = None
        super(Disk, __self__).__init__(
            'vco:base:Disk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Disk':
        """
        Get an existing Disk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DiskArgs.__new__(DiskArgs)

        __props__.__dict__["cloudspace_id"] = None
        __props__.__dict__["customer_id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["detach"] = None
        __props__.__dict__["disk_id"] = None
        __props__.__dict__["disk_name"] = None
        __props__.__dict__["disk_size"] = None
        __props__.__dict__["disk_type"] = None
        __props__.__dict__["exposed"] = None
        __props__.__dict__["iops"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["order"] = None
        __props__.__dict__["permanently"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["url"] = None
        __props__.__dict__["vm_id"] = None
        return Disk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloudspace_id")

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detach(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "detach")

    @property
    @pulumi.getter
    def disk_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def disk_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter
    def disk_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def disk_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def exposed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "exposed")

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def permanently(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "permanently")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def vm_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vm_id")

