# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = ['VirtualMachineArgs', 'VirtualMachine']

@pulumi.input_type
class VirtualMachineArgs:
    def __init__(__self__, *,
                 cloudspace_id: pulumi.Input[str],
                 customer_id: pulumi.Input[str],
                 description: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 name: pulumi.Input[str],
                 token: pulumi.Input[str],
                 url: pulumi.Input[str],
                 vcpus: pulumi.Input[int],
                 acronis: Optional[pulumi.Input[bool]] = None,
                 all_vm_disks: Optional[pulumi.Input[bool]] = None,
                 boot_disk_id: Optional[pulumi.Input[int]] = None,
                 boot_type: Optional[pulumi.Input[str]] = None,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 enable_vm_agent: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VirtualMachine resource.
        """
        pulumi.set(__self__, "cloudspace_id", cloudspace_id)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vcpus", vcpus)
        if acronis is not None:
            pulumi.set(__self__, "acronis", acronis)
        if all_vm_disks is not None:
            pulumi.set(__self__, "all_vm_disks", all_vm_disks)
        if boot_disk_id is not None:
            pulumi.set(__self__, "boot_disk_id", boot_disk_id)
        if boot_type is not None:
            pulumi.set(__self__, "boot_type", boot_type)
        if cdrom_id is not None:
            pulumi.set(__self__, "cdrom_id", cdrom_id)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if enable_vm_agent is not None:
            pulumi.set(__self__, "enable_vm_agent", enable_vm_agent)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloudspace_id")

    @cloudspace_id.setter
    def cloudspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloudspace_id", value)

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vcpus(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vcpus")

    @vcpus.setter
    def vcpus(self, value: pulumi.Input[int]):
        pulumi.set(self, "vcpus", value)

    @property
    @pulumi.getter
    def acronis(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "acronis")

    @acronis.setter
    def acronis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acronis", value)

    @property
    @pulumi.getter
    def all_vm_disks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_vm_disks")

    @all_vm_disks.setter
    def all_vm_disks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_vm_disks", value)

    @property
    @pulumi.getter
    def boot_disk_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "boot_disk_id")

    @boot_disk_id.setter
    def boot_disk_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boot_disk_id", value)

    @property
    @pulumi.getter
    def boot_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "boot_type")

    @boot_type.setter
    def boot_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_type", value)

    @property
    @pulumi.getter
    def cdrom_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cdrom_id")

    @cdrom_id.setter
    def cdrom_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cdrom_id", value)

    @property
    @pulumi.getter
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def enable_vm_agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_vm_agent")

    @enable_vm_agent.setter
    def enable_vm_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vm_agent", value)

    @property
    @pulumi.getter
    def image_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def os_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter
    def os_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


class VirtualMachine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acronis: Optional[pulumi.Input[bool]] = None,
                 all_vm_disks: Optional[pulumi.Input[bool]] = None,
                 boot_disk_id: Optional[pulumi.Input[int]] = None,
                 boot_type: Optional[pulumi.Input[str]] = None,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 enable_vm_agent: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a VirtualMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualMachineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualMachineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualMachineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acronis: Optional[pulumi.Input[bool]] = None,
                 all_vm_disks: Optional[pulumi.Input[bool]] = None,
                 boot_disk_id: Optional[pulumi.Input[int]] = None,
                 boot_type: Optional[pulumi.Input[str]] = None,
                 cdrom_id: Optional[pulumi.Input[int]] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 enable_vm_agent: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualMachineArgs.__new__(VirtualMachineArgs)

            __props__.__dict__["acronis"] = acronis
            __props__.__dict__["all_vm_disks"] = all_vm_disks
            __props__.__dict__["boot_disk_id"] = boot_disk_id
            __props__.__dict__["boot_type"] = boot_type
            __props__.__dict__["cdrom_id"] = cdrom_id
            if cloudspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloudspace_id'")
            __props__.__dict__["cloudspace_id"] = cloudspace_id
            if customer_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_id'")
            __props__.__dict__["customer_id"] = None if customer_id is None else pulumi.Output.secret(customer_id)
            __props__.__dict__["data_disks"] = data_disks
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["enable_vm_agent"] = enable_vm_agent
            __props__.__dict__["image_id"] = image_id
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["os_name"] = os_name
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["private_ip"] = private_ip
            __props__.__dict__["snapshot_id"] = snapshot_id
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = None if url is None else pulumi.Output.secret(url)
            __props__.__dict__["user_data"] = user_data
            if vcpus is None and not opts.urn:
                raise TypeError("Missing required property 'vcpus'")
            __props__.__dict__["vcpus"] = vcpus
            __props__.__dict__["agent_status"] = None
            __props__.__dict__["appliance"] = None
            __props__.__dict__["cpu_topology"] = None
            __props__.__dict__["cpus_pin_status"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["disks"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["impact_alert_hook"] = None
            __props__.__dict__["locked"] = None
            __props__.__dict__["network_interfaces"] = None
            __props__.__dict__["os_accounts"] = None
            __props__.__dict__["os_image_name"] = None
            __props__.__dict__["stack_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["storage"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["vm_id"] = None
        super(VirtualMachine, __self__).__init__(
            'vco:cloudspace:VirtualMachine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualMachine':
        """
        Get an existing VirtualMachine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualMachineArgs.__new__(VirtualMachineArgs)

        __props__.__dict__["acronis"] = None
        __props__.__dict__["agent_status"] = None
        __props__.__dict__["all_vm_disks"] = None
        __props__.__dict__["appliance"] = None
        __props__.__dict__["boot_disk_id"] = None
        __props__.__dict__["boot_type"] = None
        __props__.__dict__["cdrom_id"] = None
        __props__.__dict__["cloudspace_id"] = None
        __props__.__dict__["cpu_topology"] = None
        __props__.__dict__["cpus_pin_status"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["customer_id"] = None
        __props__.__dict__["data_disks"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["disk_size"] = None
        __props__.__dict__["disks"] = None
        __props__.__dict__["enable_vm_agent"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["image_id"] = None
        __props__.__dict__["impact_alert_hook"] = None
        __props__.__dict__["locked"] = None
        __props__.__dict__["memory"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_interfaces"] = None
        __props__.__dict__["os_accounts"] = None
        __props__.__dict__["os_image_name"] = None
        __props__.__dict__["os_name"] = None
        __props__.__dict__["os_type"] = None
        __props__.__dict__["private_ip"] = None
        __props__.__dict__["snapshot_id"] = None
        __props__.__dict__["stack_id"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["storage"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["update_time"] = None
        __props__.__dict__["url"] = None
        __props__.__dict__["user_data"] = None
        __props__.__dict__["vcpus"] = None
        __props__.__dict__["vm_id"] = None
        return VirtualMachine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acronis(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "acronis")

    @property
    @pulumi.getter
    def agent_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "agent_status")

    @property
    @pulumi.getter
    def all_vm_disks(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "all_vm_disks")

    @property
    @pulumi.getter
    def appliance(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "appliance")

    @property
    @pulumi.getter
    def boot_disk_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "boot_disk_id")

    @property
    @pulumi.getter
    def boot_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "boot_type")

    @property
    @pulumi.getter
    def cdrom_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "cdrom_id")

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloudspace_id")

    @property
    @pulumi.getter
    def cpu_topology(self) -> pulumi.Output['outputs.CpuTopology']:
        return pulumi.get(self, "cpu_topology")

    @property
    @pulumi.getter
    def cpus_pin_status(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "cpus_pin_status")

    @property
    @pulumi.getter
    def creation_time(self) -> pulumi.Output[float]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def data_disks(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disk_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.VmDisk']]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def enable_vm_agent(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_vm_agent")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def image_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def impact_alert_hook(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "impact_alert_hook")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network_interfaces(self) -> pulumi.Output[Sequence['outputs.NetworkInterface']]:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def os_accounts(self) -> pulumi.Output[Sequence['outputs.OsAccount']]:
        return pulumi.get(self, "os_accounts")

    @property
    @pulumi.getter
    def os_image_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "os_image_name")

    @property
    @pulumi.getter
    def os_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def os_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def private_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def snapshot_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def stack_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def update_time(self) -> pulumi.Output[float]:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def user_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def vm_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vm_id")

