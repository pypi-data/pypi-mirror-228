# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VirtualMachineNICArgs', 'VirtualMachineNIC']

@pulumi.input_type
class VirtualMachineNICArgs:
    def __init__(__self__, *,
                 cloudspace_id: pulumi.Input[str],
                 customer_id: pulumi.Input[str],
                 external_network_id: pulumi.Input[int],
                 token: pulumi.Input[str],
                 url: pulumi.Input[str],
                 vm_id: pulumi.Input[int],
                 external_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 external_network_ip: Optional[pulumi.Input[str]] = None,
                 external_network_type: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VirtualMachineNIC resource.
        """
        pulumi.set(__self__, "cloudspace_id", cloudspace_id)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "external_network_id", external_network_id)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vm_id", vm_id)
        if external_cloudspace_id is not None:
            pulumi.set(__self__, "external_cloudspace_id", external_cloudspace_id)
        if external_network_ip is not None:
            pulumi.set(__self__, "external_network_ip", external_network_ip)
        if external_network_type is not None:
            pulumi.set(__self__, "external_network_type", external_network_type)
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloudspace_id")

    @cloudspace_id.setter
    def cloudspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloudspace_id", value)

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter
    def external_network_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "external_network_id")

    @external_network_id.setter
    def external_network_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "external_network_id", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vm_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter
    def external_cloudspace_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_cloudspace_id")

    @external_cloudspace_id.setter
    def external_cloudspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_cloudspace_id", value)

    @property
    @pulumi.getter
    def external_network_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_network_ip")

    @external_network_ip.setter
    def external_network_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_ip", value)

    @property
    @pulumi.getter
    def external_network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_network_type")

    @external_network_type.setter
    def external_network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_network_type", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)


class VirtualMachineNIC(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 external_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[int]] = None,
                 external_network_ip: Optional[pulumi.Input[str]] = None,
                 external_network_type: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a VirtualMachineNIC resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualMachineNICArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualMachineNIC resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualMachineNICArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualMachineNICArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloudspace_id: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 external_cloudspace_id: Optional[pulumi.Input[str]] = None,
                 external_network_id: Optional[pulumi.Input[int]] = None,
                 external_network_ip: Optional[pulumi.Input[str]] = None,
                 external_network_type: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualMachineNICArgs.__new__(VirtualMachineNICArgs)

            if cloudspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'cloudspace_id'")
            __props__.__dict__["cloudspace_id"] = cloudspace_id
            if customer_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_id'")
            __props__.__dict__["customer_id"] = None if customer_id is None else pulumi.Output.secret(customer_id)
            __props__.__dict__["external_cloudspace_id"] = external_cloudspace_id
            if external_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'external_network_id'")
            __props__.__dict__["external_network_id"] = external_network_id
            __props__.__dict__["external_network_ip"] = external_network_ip
            __props__.__dict__["external_network_type"] = external_network_type
            __props__.__dict__["model"] = model
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = None if url is None else pulumi.Output.secret(url)
            if vm_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_id'")
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["device_name"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["network_id"] = None
            __props__.__dict__["nic_type"] = None
        super(VirtualMachineNIC, __self__).__init__(
            'vco:virtual_machine:VirtualMachineNIC',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualMachineNIC':
        """
        Get an existing VirtualMachineNIC resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualMachineNICArgs.__new__(VirtualMachineNICArgs)

        __props__.__dict__["cloudspace_id"] = None
        __props__.__dict__["customer_id"] = None
        __props__.__dict__["device_name"] = None
        __props__.__dict__["external_cloudspace_id"] = None
        __props__.__dict__["external_network_id"] = None
        __props__.__dict__["external_network_ip"] = None
        __props__.__dict__["external_network_type"] = None
        __props__.__dict__["ip_address"] = None
        __props__.__dict__["mac_address"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["network_id"] = None
        __props__.__dict__["nic_type"] = None
        __props__.__dict__["token"] = None
        __props__.__dict__["url"] = None
        __props__.__dict__["vm_id"] = None
        return VirtualMachineNIC(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cloudspace_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloudspace_id")

    @property
    @pulumi.getter(name="customerID")
    def customer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def device_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def external_cloudspace_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_cloudspace_id")

    @property
    @pulumi.getter
    def external_network_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "external_network_id")

    @property
    @pulumi.getter
    def external_network_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_network_ip")

    @property
    @pulumi.getter
    def external_network_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_network_type")

    @property
    @pulumi.getter
    def ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def mac_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def network_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def nic_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nic_type")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def vm_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vm_id")

