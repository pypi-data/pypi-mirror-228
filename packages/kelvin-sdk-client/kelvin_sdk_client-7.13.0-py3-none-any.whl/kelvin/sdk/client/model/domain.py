# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-08-31T15:20:23+00:00

from __future__ import annotations

from typing import Any, Dict, List, Mapping, Optional, Union

from kelvin.sdk.client.data_model import DataModelBase
from kelvin.sdk.client.utils import instance_classmethod

from . import kerrors, requests


class TimeseriesProjection(DataModelBase):
    """
    TimeseriesProjection object.

    Parameters
    ----------
    created: Optional[str]
    data_type: Optional[str]
    fields: Optional[List[str]]
    last_timestamp: Optional[str]
    last_value: Optional[Dict[str, Any]]
    resource: Optional[str]
    source: Optional[str]
    updated: Optional[str]

    """

    created: Optional[str] = None
    data_type: Optional[str] = None
    fields: Optional[List[str]] = None
    last_timestamp: Optional[str] = None
    last_value: Optional[Dict[str, Any]] = None
    resource: Optional[str] = None
    source: Optional[str] = None
    updated: Optional[str] = None

    @classmethod
    def get_last_timeseries_data(
        cls,
        data: Optional[Union[requests.TimeseriesGetLast, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> List[TimeseriesProjection]:
        """
        Get Last Timeseries Data


        **Permission Required:** `kelvin.permission.storage.read`.

        ``getLastTimeseriesData``: ``POST`` ``/api/v4/timeseries/last/get``

        Parameters
        ----------
        data: requests.TimeseriesGetLast, optional
        **kwargs:
            Extra parameters for requests.TimeseriesGetLast
              - selectors: list

        """

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/timeseries/last/get",
            {},
            {},
            {},
            {},
            data,
            requests.TimeseriesGetLast,
            False,
            {
                "200": List[TimeseriesProjection],
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result
