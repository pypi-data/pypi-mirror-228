Metadata-Version: 2.1
Name: pypcd4
Version: 0.1.dev2
Summary: Read and write PCL .pcd files in python
Author-email: urasakikeisuke <keisuke.urasaki@map4.jp>
License: MIT License
        
        Copyright (c) 2023 MAP IV, Inc.
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE.txt
Requires-Python: >=3.8.2
Requires-Dist: numpy>=1.24.4
Requires-Dist: python-lzf>=0.2.4
Provides-Extra: dev
Requires-Dist: black; extra == 'dev'
Requires-Dist: isort; extra == 'dev'
Requires-Dist: mypy; extra == 'dev'
Requires-Dist: setuptools-scm; extra == 'dev'
Description-Content-Type: text/markdown

# pypcd4

## Description
pypcd4 is a modern reimagining of the original [pypcd](https://github.com/dimatura/pypcd) library,
offering enhanced capabilities and performance for working with Point Cloud Data (PCD) files.

This library builds upon the foundation laid by the original pypcd while incorporating modern
Python3 syntax and methodologies to provide a more efficient and user-friendly experience.


## Install
You can install pypcd4 via pip,
```shell
pip install pypcd4
```


## How to use
#### Import pypcd4
```python
from pypcd4 import PointCloud
```

#### Read from .pcd file
```python
pc: PointCloud = PointCloud.from_path("xyzi.pcd")
```

#### PointCloud -> NumPy array
```python
array: np.ndarray = pc.numpy()

array.shape
# (1000, 4)
```

#### NumPy array -> PointCloud
```python
# Depends on number of features of your array

# If PointXYZI,
pc = PointCloud.from_xyzi_points(array)

# If PointXYZL,
pc = PointCloud.from_xyzl_points(array, label_type=np.uint32)
```

#### Create custom conversion method
If you cannot find preferred point type in pre-defined conversion methods,
you can create it easily like,

```python

fields = ("x", "y", "z", "intensity", "new_field")
types = (np.float32, np.float32, np.float32, np.float32, np.float64)

pc = PointCloud.from_points(array, fields, types)
```

#### Save as .pcd file
```python
pc.save("nice_point_cloud.pcd")
```


## TODO
- Supprt ROS message conversion
- Visualization
