# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.ftp import FTPCredential_pb2 as ftp_dot_FTPCredential__pb2


class FTPSecretServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getFTPSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/getFTPSecret',
                request_serializer=ftp_dot_FTPCredential__pb2.FTPSecretGetRequest.SerializeToString,
                response_deserializer=ftp_dot_FTPCredential__pb2.FTPSecret.FromString,
                )
        self.createFTPSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/createFTPSecret',
                request_serializer=ftp_dot_FTPCredential__pb2.FTPSecretCreateRequest.SerializeToString,
                response_deserializer=ftp_dot_FTPCredential__pb2.FTPSecret.FromString,
                )
        self.updateFTPSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/updateFTPSecret',
                request_serializer=ftp_dot_FTPCredential__pb2.FTPSecretUpdateRequest.SerializeToString,
                response_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretUpdateResponse.FromString,
                )
        self.deleteFTPSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/deleteFTPSecret',
                request_serializer=ftp_dot_FTPCredential__pb2.FTPSecretDeleteRequest.SerializeToString,
                response_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretDeleteResponse.FromString,
                )


class FTPSecretServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getFTPSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createFTPSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateFTPSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteFTPSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FTPSecretServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getFTPSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.getFTPSecret,
                    request_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretGetRequest.FromString,
                    response_serializer=ftp_dot_FTPCredential__pb2.FTPSecret.SerializeToString,
            ),
            'createFTPSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.createFTPSecret,
                    request_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretCreateRequest.FromString,
                    response_serializer=ftp_dot_FTPCredential__pb2.FTPSecret.SerializeToString,
            ),
            'updateFTPSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.updateFTPSecret,
                    request_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretUpdateRequest.FromString,
                    response_serializer=ftp_dot_FTPCredential__pb2.FTPSecretUpdateResponse.SerializeToString,
            ),
            'deleteFTPSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteFTPSecret,
                    request_deserializer=ftp_dot_FTPCredential__pb2.FTPSecretDeleteRequest.FromString,
                    response_serializer=ftp_dot_FTPCredential__pb2.FTPSecretDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.credential.service.ftp.FTPSecretService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FTPSecretService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getFTPSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/getFTPSecret',
            ftp_dot_FTPCredential__pb2.FTPSecretGetRequest.SerializeToString,
            ftp_dot_FTPCredential__pb2.FTPSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createFTPSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/createFTPSecret',
            ftp_dot_FTPCredential__pb2.FTPSecretCreateRequest.SerializeToString,
            ftp_dot_FTPCredential__pb2.FTPSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateFTPSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/updateFTPSecret',
            ftp_dot_FTPCredential__pb2.FTPSecretUpdateRequest.SerializeToString,
            ftp_dot_FTPCredential__pb2.FTPSecretUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteFTPSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.ftp.FTPSecretService/deleteFTPSecret',
            ftp_dot_FTPCredential__pb2.FTPSecretDeleteRequest.SerializeToString,
            ftp_dot_FTPCredential__pb2.FTPSecretDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
