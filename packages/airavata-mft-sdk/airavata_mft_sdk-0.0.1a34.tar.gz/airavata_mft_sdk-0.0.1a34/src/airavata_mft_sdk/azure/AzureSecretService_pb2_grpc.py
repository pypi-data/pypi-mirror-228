# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.azure import AzureCredential_pb2 as azure_dot_AzureCredential__pb2


class AzureSecretServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAzureSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/getAzureSecret',
                request_serializer=azure_dot_AzureCredential__pb2.AzureSecretGetRequest.SerializeToString,
                response_deserializer=azure_dot_AzureCredential__pb2.AzureSecret.FromString,
                )
        self.createAzureSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/createAzureSecret',
                request_serializer=azure_dot_AzureCredential__pb2.AzureSecretCreateRequest.SerializeToString,
                response_deserializer=azure_dot_AzureCredential__pb2.AzureSecret.FromString,
                )
        self.updateAzureSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/updateAzureSecret',
                request_serializer=azure_dot_AzureCredential__pb2.AzureSecretUpdateRequest.SerializeToString,
                response_deserializer=azure_dot_AzureCredential__pb2.AzureSecretUpdateResponse.FromString,
                )
        self.deleteAzureSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/deleteAzureSecret',
                request_serializer=azure_dot_AzureCredential__pb2.AzureSecretDeleteRequest.SerializeToString,
                response_deserializer=azure_dot_AzureCredential__pb2.AzureSecretDeleteResponse.FromString,
                )


class AzureSecretServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAzureSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createAzureSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAzureSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteAzureSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AzureSecretServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAzureSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.getAzureSecret,
                    request_deserializer=azure_dot_AzureCredential__pb2.AzureSecretGetRequest.FromString,
                    response_serializer=azure_dot_AzureCredential__pb2.AzureSecret.SerializeToString,
            ),
            'createAzureSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.createAzureSecret,
                    request_deserializer=azure_dot_AzureCredential__pb2.AzureSecretCreateRequest.FromString,
                    response_serializer=azure_dot_AzureCredential__pb2.AzureSecret.SerializeToString,
            ),
            'updateAzureSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAzureSecret,
                    request_deserializer=azure_dot_AzureCredential__pb2.AzureSecretUpdateRequest.FromString,
                    response_serializer=azure_dot_AzureCredential__pb2.AzureSecretUpdateResponse.SerializeToString,
            ),
            'deleteAzureSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteAzureSecret,
                    request_deserializer=azure_dot_AzureCredential__pb2.AzureSecretDeleteRequest.FromString,
                    response_serializer=azure_dot_AzureCredential__pb2.AzureSecretDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.credential.service.azure.AzureSecretService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AzureSecretService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAzureSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/getAzureSecret',
            azure_dot_AzureCredential__pb2.AzureSecretGetRequest.SerializeToString,
            azure_dot_AzureCredential__pb2.AzureSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createAzureSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/createAzureSecret',
            azure_dot_AzureCredential__pb2.AzureSecretCreateRequest.SerializeToString,
            azure_dot_AzureCredential__pb2.AzureSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateAzureSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/updateAzureSecret',
            azure_dot_AzureCredential__pb2.AzureSecretUpdateRequest.SerializeToString,
            azure_dot_AzureCredential__pb2.AzureSecretUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteAzureSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.azure.AzureSecretService/deleteAzureSecret',
            azure_dot_AzureCredential__pb2.AzureSecretDeleteRequest.SerializeToString,
            azure_dot_AzureCredential__pb2.AzureSecretDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
