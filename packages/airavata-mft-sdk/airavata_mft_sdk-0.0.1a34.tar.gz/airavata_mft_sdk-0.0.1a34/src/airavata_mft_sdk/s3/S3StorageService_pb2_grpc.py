# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.s3 import S3Storage_pb2 as s3_dot_S3Storage__pb2


class S3StorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listS3Storage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.s3.S3StorageService/listS3Storage',
                request_serializer=s3_dot_S3Storage__pb2.S3StorageListRequest.SerializeToString,
                response_deserializer=s3_dot_S3Storage__pb2.S3StorageListResponse.FromString,
                )
        self.getS3Storage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.s3.S3StorageService/getS3Storage',
                request_serializer=s3_dot_S3Storage__pb2.S3StorageGetRequest.SerializeToString,
                response_deserializer=s3_dot_S3Storage__pb2.S3Storage.FromString,
                )
        self.createS3Storage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.s3.S3StorageService/createS3Storage',
                request_serializer=s3_dot_S3Storage__pb2.S3StorageCreateRequest.SerializeToString,
                response_deserializer=s3_dot_S3Storage__pb2.S3Storage.FromString,
                )
        self.updateS3Storage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.s3.S3StorageService/updateS3Storage',
                request_serializer=s3_dot_S3Storage__pb2.S3StorageUpdateRequest.SerializeToString,
                response_deserializer=s3_dot_S3Storage__pb2.S3StorageUpdateResponse.FromString,
                )
        self.deleteS3Storage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.s3.S3StorageService/deleteS3Storage',
                request_serializer=s3_dot_S3Storage__pb2.S3StorageDeleteRequest.SerializeToString,
                response_deserializer=s3_dot_S3Storage__pb2.S3StorageDeleteResponse.FromString,
                )


class S3StorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def listS3Storage(self, request, context):
        """Storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getS3Storage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createS3Storage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateS3Storage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteS3Storage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_S3StorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listS3Storage': grpc.unary_unary_rpc_method_handler(
                    servicer.listS3Storage,
                    request_deserializer=s3_dot_S3Storage__pb2.S3StorageListRequest.FromString,
                    response_serializer=s3_dot_S3Storage__pb2.S3StorageListResponse.SerializeToString,
            ),
            'getS3Storage': grpc.unary_unary_rpc_method_handler(
                    servicer.getS3Storage,
                    request_deserializer=s3_dot_S3Storage__pb2.S3StorageGetRequest.FromString,
                    response_serializer=s3_dot_S3Storage__pb2.S3Storage.SerializeToString,
            ),
            'createS3Storage': grpc.unary_unary_rpc_method_handler(
                    servicer.createS3Storage,
                    request_deserializer=s3_dot_S3Storage__pb2.S3StorageCreateRequest.FromString,
                    response_serializer=s3_dot_S3Storage__pb2.S3Storage.SerializeToString,
            ),
            'updateS3Storage': grpc.unary_unary_rpc_method_handler(
                    servicer.updateS3Storage,
                    request_deserializer=s3_dot_S3Storage__pb2.S3StorageUpdateRequest.FromString,
                    response_serializer=s3_dot_S3Storage__pb2.S3StorageUpdateResponse.SerializeToString,
            ),
            'deleteS3Storage': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteS3Storage,
                    request_deserializer=s3_dot_S3Storage__pb2.S3StorageDeleteRequest.FromString,
                    response_serializer=s3_dot_S3Storage__pb2.S3StorageDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.resource.service.s3.S3StorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class S3StorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def listS3Storage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.s3.S3StorageService/listS3Storage',
            s3_dot_S3Storage__pb2.S3StorageListRequest.SerializeToString,
            s3_dot_S3Storage__pb2.S3StorageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getS3Storage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.s3.S3StorageService/getS3Storage',
            s3_dot_S3Storage__pb2.S3StorageGetRequest.SerializeToString,
            s3_dot_S3Storage__pb2.S3Storage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createS3Storage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.s3.S3StorageService/createS3Storage',
            s3_dot_S3Storage__pb2.S3StorageCreateRequest.SerializeToString,
            s3_dot_S3Storage__pb2.S3Storage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateS3Storage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.s3.S3StorageService/updateS3Storage',
            s3_dot_S3Storage__pb2.S3StorageUpdateRequest.SerializeToString,
            s3_dot_S3Storage__pb2.S3StorageUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteS3Storage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.s3.S3StorageService/deleteS3Storage',
            s3_dot_S3Storage__pb2.S3StorageDeleteRequest.SerializeToString,
            s3_dot_S3Storage__pb2.S3StorageDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
