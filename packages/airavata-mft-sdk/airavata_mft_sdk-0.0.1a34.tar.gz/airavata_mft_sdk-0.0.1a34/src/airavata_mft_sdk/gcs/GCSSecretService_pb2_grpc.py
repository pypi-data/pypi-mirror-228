# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.gcs import GCSCredential_pb2 as gcs_dot_GCSCredential__pb2


class GCSSecretServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getGCSSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/getGCSSecret',
                request_serializer=gcs_dot_GCSCredential__pb2.GCSSecretGetRequest.SerializeToString,
                response_deserializer=gcs_dot_GCSCredential__pb2.GCSSecret.FromString,
                )
        self.createGCSSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/createGCSSecret',
                request_serializer=gcs_dot_GCSCredential__pb2.GCSSecretCreateRequest.SerializeToString,
                response_deserializer=gcs_dot_GCSCredential__pb2.GCSSecret.FromString,
                )
        self.updateGCSSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/updateGCSSecret',
                request_serializer=gcs_dot_GCSCredential__pb2.GCSSecretUpdateRequest.SerializeToString,
                response_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretUpdateResponse.FromString,
                )
        self.deleteGCSSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/deleteGCSSecret',
                request_serializer=gcs_dot_GCSCredential__pb2.GCSSecretDeleteRequest.SerializeToString,
                response_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretDeleteResponse.FromString,
                )


class GCSSecretServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getGCSSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createGCSSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateGCSSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteGCSSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GCSSecretServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getGCSSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.getGCSSecret,
                    request_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretGetRequest.FromString,
                    response_serializer=gcs_dot_GCSCredential__pb2.GCSSecret.SerializeToString,
            ),
            'createGCSSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.createGCSSecret,
                    request_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretCreateRequest.FromString,
                    response_serializer=gcs_dot_GCSCredential__pb2.GCSSecret.SerializeToString,
            ),
            'updateGCSSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.updateGCSSecret,
                    request_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretUpdateRequest.FromString,
                    response_serializer=gcs_dot_GCSCredential__pb2.GCSSecretUpdateResponse.SerializeToString,
            ),
            'deleteGCSSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteGCSSecret,
                    request_deserializer=gcs_dot_GCSCredential__pb2.GCSSecretDeleteRequest.FromString,
                    response_serializer=gcs_dot_GCSCredential__pb2.GCSSecretDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.credential.service.gcs.GCSSecretService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GCSSecretService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getGCSSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/getGCSSecret',
            gcs_dot_GCSCredential__pb2.GCSSecretGetRequest.SerializeToString,
            gcs_dot_GCSCredential__pb2.GCSSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createGCSSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/createGCSSecret',
            gcs_dot_GCSCredential__pb2.GCSSecretCreateRequest.SerializeToString,
            gcs_dot_GCSCredential__pb2.GCSSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateGCSSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/updateGCSSecret',
            gcs_dot_GCSCredential__pb2.GCSSecretUpdateRequest.SerializeToString,
            gcs_dot_GCSCredential__pb2.GCSSecretUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteGCSSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/deleteGCSSecret',
            gcs_dot_GCSCredential__pb2.GCSSecretDeleteRequest.SerializeToString,
            gcs_dot_GCSCredential__pb2.GCSSecretDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
