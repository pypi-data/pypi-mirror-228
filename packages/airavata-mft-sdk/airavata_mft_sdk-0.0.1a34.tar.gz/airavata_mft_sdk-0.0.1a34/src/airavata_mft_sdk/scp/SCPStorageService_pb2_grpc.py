# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.scp import SCPStorage_pb2 as scp_dot_SCPStorage__pb2


class SCPStorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listSCPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/listSCPStorage',
                request_serializer=scp_dot_SCPStorage__pb2.SCPStorageListRequest.SerializeToString,
                response_deserializer=scp_dot_SCPStorage__pb2.SCPStorageListResponse.FromString,
                )
        self.getSCPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/getSCPStorage',
                request_serializer=scp_dot_SCPStorage__pb2.SCPStorageGetRequest.SerializeToString,
                response_deserializer=scp_dot_SCPStorage__pb2.SCPStorage.FromString,
                )
        self.createSCPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/createSCPStorage',
                request_serializer=scp_dot_SCPStorage__pb2.SCPStorageCreateRequest.SerializeToString,
                response_deserializer=scp_dot_SCPStorage__pb2.SCPStorage.FromString,
                )
        self.updateSCPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/updateSCPStorage',
                request_serializer=scp_dot_SCPStorage__pb2.SCPStorageUpdateRequest.SerializeToString,
                response_deserializer=scp_dot_SCPStorage__pb2.SCPStorageUpdateResponse.FromString,
                )
        self.deleteSCPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/deleteSCPStorage',
                request_serializer=scp_dot_SCPStorage__pb2.SCPStorageDeleteRequest.SerializeToString,
                response_deserializer=scp_dot_SCPStorage__pb2.SCPStorageDeleteResponse.FromString,
                )


class SCPStorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def listSCPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSCPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createSCPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSCPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSCPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SCPStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listSCPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.listSCPStorage,
                    request_deserializer=scp_dot_SCPStorage__pb2.SCPStorageListRequest.FromString,
                    response_serializer=scp_dot_SCPStorage__pb2.SCPStorageListResponse.SerializeToString,
            ),
            'getSCPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.getSCPStorage,
                    request_deserializer=scp_dot_SCPStorage__pb2.SCPStorageGetRequest.FromString,
                    response_serializer=scp_dot_SCPStorage__pb2.SCPStorage.SerializeToString,
            ),
            'createSCPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.createSCPStorage,
                    request_deserializer=scp_dot_SCPStorage__pb2.SCPStorageCreateRequest.FromString,
                    response_serializer=scp_dot_SCPStorage__pb2.SCPStorage.SerializeToString,
            ),
            'updateSCPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSCPStorage,
                    request_deserializer=scp_dot_SCPStorage__pb2.SCPStorageUpdateRequest.FromString,
                    response_serializer=scp_dot_SCPStorage__pb2.SCPStorageUpdateResponse.SerializeToString,
            ),
            'deleteSCPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSCPStorage,
                    request_deserializer=scp_dot_SCPStorage__pb2.SCPStorageDeleteRequest.FromString,
                    response_serializer=scp_dot_SCPStorage__pb2.SCPStorageDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.resource.service.scp.SCPStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SCPStorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def listSCPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/listSCPStorage',
            scp_dot_SCPStorage__pb2.SCPStorageListRequest.SerializeToString,
            scp_dot_SCPStorage__pb2.SCPStorageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSCPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/getSCPStorage',
            scp_dot_SCPStorage__pb2.SCPStorageGetRequest.SerializeToString,
            scp_dot_SCPStorage__pb2.SCPStorage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createSCPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/createSCPStorage',
            scp_dot_SCPStorage__pb2.SCPStorageCreateRequest.SerializeToString,
            scp_dot_SCPStorage__pb2.SCPStorage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSCPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/updateSCPStorage',
            scp_dot_SCPStorage__pb2.SCPStorageUpdateRequest.SerializeToString,
            scp_dot_SCPStorage__pb2.SCPStorageUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSCPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.scp.SCPStorageService/deleteSCPStorage',
            scp_dot_SCPStorage__pb2.SCPStorageDeleteRequest.SerializeToString,
            scp_dot_SCPStorage__pb2.SCPStorageDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
