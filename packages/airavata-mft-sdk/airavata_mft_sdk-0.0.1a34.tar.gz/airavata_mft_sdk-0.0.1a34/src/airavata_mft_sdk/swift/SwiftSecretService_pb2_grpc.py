# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.swift import SwiftCredential_pb2 as swift_dot_SwiftCredential__pb2


class SwiftSecretServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getSwiftSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/getSwiftSecret',
                request_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretGetRequest.SerializeToString,
                response_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecret.FromString,
                )
        self.createSwiftSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/createSwiftSecret',
                request_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretCreateRequest.SerializeToString,
                response_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecret.FromString,
                )
        self.updateSwiftSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/updateSwiftSecret',
                request_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretUpdateRequest.SerializeToString,
                response_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretUpdateResponse.FromString,
                )
        self.deleteSwiftSecret = channel.unary_unary(
                '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/deleteSwiftSecret',
                request_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretDeleteRequest.SerializeToString,
                response_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretDeleteResponse.FromString,
                )


class SwiftSecretServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getSwiftSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createSwiftSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSwiftSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteSwiftSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SwiftSecretServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getSwiftSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.getSwiftSecret,
                    request_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretGetRequest.FromString,
                    response_serializer=swift_dot_SwiftCredential__pb2.SwiftSecret.SerializeToString,
            ),
            'createSwiftSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.createSwiftSecret,
                    request_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretCreateRequest.FromString,
                    response_serializer=swift_dot_SwiftCredential__pb2.SwiftSecret.SerializeToString,
            ),
            'updateSwiftSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSwiftSecret,
                    request_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretUpdateRequest.FromString,
                    response_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretUpdateResponse.SerializeToString,
            ),
            'deleteSwiftSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteSwiftSecret,
                    request_deserializer=swift_dot_SwiftCredential__pb2.SwiftSecretDeleteRequest.FromString,
                    response_serializer=swift_dot_SwiftCredential__pb2.SwiftSecretDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.credential.service.swift.SwiftSecretService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SwiftSecretService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getSwiftSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/getSwiftSecret',
            swift_dot_SwiftCredential__pb2.SwiftSecretGetRequest.SerializeToString,
            swift_dot_SwiftCredential__pb2.SwiftSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createSwiftSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/createSwiftSecret',
            swift_dot_SwiftCredential__pb2.SwiftSecretCreateRequest.SerializeToString,
            swift_dot_SwiftCredential__pb2.SwiftSecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSwiftSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/updateSwiftSecret',
            swift_dot_SwiftCredential__pb2.SwiftSecretUpdateRequest.SerializeToString,
            swift_dot_SwiftCredential__pb2.SwiftSecretUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteSwiftSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.credential.service.swift.SwiftSecretService/deleteSwiftSecret',
            swift_dot_SwiftCredential__pb2.SwiftSecretDeleteRequest.SerializeToString,
            swift_dot_SwiftCredential__pb2.SwiftSecretDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
