# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airavata_mft_sdk.http import HTTPStorage_pb2 as http_dot_HTTPStorage__pb2


class HTTPStorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listHTTPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/listHTTPStorage',
                request_serializer=http_dot_HTTPStorage__pb2.HTTPStorageListRequest.SerializeToString,
                response_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageListResponse.FromString,
                )
        self.getHTTPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/getHTTPStorage',
                request_serializer=http_dot_HTTPStorage__pb2.HTTPStorageGetRequest.SerializeToString,
                response_deserializer=http_dot_HTTPStorage__pb2.HTTPStorage.FromString,
                )
        self.createHTTPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/createHTTPStorage',
                request_serializer=http_dot_HTTPStorage__pb2.HTTPStorageCreateRequest.SerializeToString,
                response_deserializer=http_dot_HTTPStorage__pb2.HTTPStorage.FromString,
                )
        self.updateHTTPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/updateHTTPStorage',
                request_serializer=http_dot_HTTPStorage__pb2.HTTPStorageUpdateRequest.SerializeToString,
                response_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageUpdateResponse.FromString,
                )
        self.deleteHTTPStorage = channel.unary_unary(
                '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/deleteHTTPStorage',
                request_serializer=http_dot_HTTPStorage__pb2.HTTPStorageDeleteRequest.SerializeToString,
                response_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageDeleteResponse.FromString,
                )


class HTTPStorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def listHTTPStorage(self, request, context):
        """Storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHTTPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createHTTPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateHTTPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteHTTPStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HTTPStorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listHTTPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.listHTTPStorage,
                    request_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageListRequest.FromString,
                    response_serializer=http_dot_HTTPStorage__pb2.HTTPStorageListResponse.SerializeToString,
            ),
            'getHTTPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.getHTTPStorage,
                    request_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageGetRequest.FromString,
                    response_serializer=http_dot_HTTPStorage__pb2.HTTPStorage.SerializeToString,
            ),
            'createHTTPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.createHTTPStorage,
                    request_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageCreateRequest.FromString,
                    response_serializer=http_dot_HTTPStorage__pb2.HTTPStorage.SerializeToString,
            ),
            'updateHTTPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.updateHTTPStorage,
                    request_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageUpdateRequest.FromString,
                    response_serializer=http_dot_HTTPStorage__pb2.HTTPStorageUpdateResponse.SerializeToString,
            ),
            'deleteHTTPStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteHTTPStorage,
                    request_deserializer=http_dot_HTTPStorage__pb2.HTTPStorageDeleteRequest.FromString,
                    response_serializer=http_dot_HTTPStorage__pb2.HTTPStorageDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.resource.service.http.HTTPStorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HTTPStorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def listHTTPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/listHTTPStorage',
            http_dot_HTTPStorage__pb2.HTTPStorageListRequest.SerializeToString,
            http_dot_HTTPStorage__pb2.HTTPStorageListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHTTPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/getHTTPStorage',
            http_dot_HTTPStorage__pb2.HTTPStorageGetRequest.SerializeToString,
            http_dot_HTTPStorage__pb2.HTTPStorage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createHTTPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/createHTTPStorage',
            http_dot_HTTPStorage__pb2.HTTPStorageCreateRequest.SerializeToString,
            http_dot_HTTPStorage__pb2.HTTPStorage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateHTTPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/updateHTTPStorage',
            http_dot_HTTPStorage__pb2.HTTPStorageUpdateRequest.SerializeToString,
            http_dot_HTTPStorage__pb2.HTTPStorageUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteHTTPStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.resource.service.http.HTTPStorageService/deleteHTTPStorage',
            http_dot_HTTPStorage__pb2.HTTPStorageDeleteRequest.SerializeToString,
            http_dot_HTTPStorage__pb2.HTTPStorageDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
