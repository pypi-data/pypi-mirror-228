# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import airavata_mft_sdk.MFTAgentStubs_pb2 as MFTAgentStubs__pb2
import airavata_mft_sdk.MFTTransferApi_pb2 as MFTTransferApi__pb2


class MFTTransferServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.submitTransfer = channel.unary_unary(
                '/org.apache.airavata.mft.api.service.MFTTransferService/submitTransfer',
                request_serializer=MFTTransferApi__pb2.TransferApiRequest.SerializeToString,
                response_deserializer=MFTTransferApi__pb2.TransferApiResponse.FromString,
                )
        self.getAllTransferStates = channel.unary_stream(
                '/org.apache.airavata.mft.api.service.MFTTransferService/getAllTransferStates',
                request_serializer=MFTTransferApi__pb2.TransferStateApiRequest.SerializeToString,
                response_deserializer=MFTTransferApi__pb2.TransferStateResponse.FromString,
                )
        self.getTransferStateSummary = channel.unary_unary(
                '/org.apache.airavata.mft.api.service.MFTTransferService/getTransferStateSummary',
                request_serializer=MFTTransferApi__pb2.TransferStateApiRequest.SerializeToString,
                response_deserializer=MFTTransferApi__pb2.TransferStateSummaryResponse.FromString,
                )
        self.getResourceAvailability = channel.unary_unary(
                '/org.apache.airavata.mft.api.service.MFTTransferService/getResourceAvailability',
                request_serializer=MFTTransferApi__pb2.FetchResourceMetadataRequest.SerializeToString,
                response_deserializer=MFTTransferApi__pb2.ResourceAvailabilityResponse.FromString,
                )
        self.resourceMetadata = channel.unary_unary(
                '/org.apache.airavata.mft.api.service.MFTTransferService/resourceMetadata',
                request_serializer=MFTTransferApi__pb2.FetchResourceMetadataRequest.SerializeToString,
                response_deserializer=MFTAgentStubs__pb2.ResourceMetadata.FromString,
                )
        self.removeTransfer = channel.unary_unary(
                '/org.apache.airavata.mft.api.service.MFTTransferService/removeTransfer',
                request_serializer=MFTTransferApi__pb2.TransferRemoveRequest.SerializeToString,
                response_deserializer=MFTTransferApi__pb2.TransferRemoveResponse.FromString,
                )


class MFTTransferServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def submitTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllTransferStates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTransferStateSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getResourceAvailability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resourceMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MFTTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'submitTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.submitTransfer,
                    request_deserializer=MFTTransferApi__pb2.TransferApiRequest.FromString,
                    response_serializer=MFTTransferApi__pb2.TransferApiResponse.SerializeToString,
            ),
            'getAllTransferStates': grpc.unary_stream_rpc_method_handler(
                    servicer.getAllTransferStates,
                    request_deserializer=MFTTransferApi__pb2.TransferStateApiRequest.FromString,
                    response_serializer=MFTTransferApi__pb2.TransferStateResponse.SerializeToString,
            ),
            'getTransferStateSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransferStateSummary,
                    request_deserializer=MFTTransferApi__pb2.TransferStateApiRequest.FromString,
                    response_serializer=MFTTransferApi__pb2.TransferStateSummaryResponse.SerializeToString,
            ),
            'getResourceAvailability': grpc.unary_unary_rpc_method_handler(
                    servicer.getResourceAvailability,
                    request_deserializer=MFTTransferApi__pb2.FetchResourceMetadataRequest.FromString,
                    response_serializer=MFTTransferApi__pb2.ResourceAvailabilityResponse.SerializeToString,
            ),
            'resourceMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.resourceMetadata,
                    request_deserializer=MFTTransferApi__pb2.FetchResourceMetadataRequest.FromString,
                    response_serializer=MFTAgentStubs__pb2.ResourceMetadata.SerializeToString,
            ),
            'removeTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.removeTransfer,
                    request_deserializer=MFTTransferApi__pb2.TransferRemoveRequest.FromString,
                    response_serializer=MFTTransferApi__pb2.TransferRemoveResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.mft.api.service.MFTTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MFTTransferService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def submitTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/submitTransfer',
            MFTTransferApi__pb2.TransferApiRequest.SerializeToString,
            MFTTransferApi__pb2.TransferApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllTransferStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/getAllTransferStates',
            MFTTransferApi__pb2.TransferStateApiRequest.SerializeToString,
            MFTTransferApi__pb2.TransferStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTransferStateSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/getTransferStateSummary',
            MFTTransferApi__pb2.TransferStateApiRequest.SerializeToString,
            MFTTransferApi__pb2.TransferStateSummaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getResourceAvailability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/getResourceAvailability',
            MFTTransferApi__pb2.FetchResourceMetadataRequest.SerializeToString,
            MFTTransferApi__pb2.ResourceAvailabilityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resourceMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/resourceMetadata',
            MFTTransferApi__pb2.FetchResourceMetadataRequest.SerializeToString,
            MFTAgentStubs__pb2.ResourceMetadata.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.mft.api.service.MFTTransferService/removeTransfer',
            MFTTransferApi__pb2.TransferRemoveRequest.SerializeToString,
            MFTTransferApi__pb2.TransferRemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
