{"version":3,"file":"static/chunks/139.5468dd066b0f64d0.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/anser/lib/index.js","webpack://_N_E/../../node_modules/ansi-to-react/lib/index.js","webpack://_N_E/../../node_modules/escape-carriage/index.js","webpack://_N_E/<anon>"],"sourcesContent":["\"use strict\";\n\n// This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ANSI_COLORS = [[{ color: \"0, 0, 0\", \"class\": \"ansi-black\" }, { color: \"187, 0, 0\", \"class\": \"ansi-red\" }, { color: \"0, 187, 0\", \"class\": \"ansi-green\" }, { color: \"187, 187, 0\", \"class\": \"ansi-yellow\" }, { color: \"0, 0, 187\", \"class\": \"ansi-blue\" }, { color: \"187, 0, 187\", \"class\": \"ansi-magenta\" }, { color: \"0, 187, 187\", \"class\": \"ansi-cyan\" }, { color: \"255,255,255\", \"class\": \"ansi-white\" }], [{ color: \"85, 85, 85\", \"class\": \"ansi-bright-black\" }, { color: \"255, 85, 85\", \"class\": \"ansi-bright-red\" }, { color: \"0, 255, 0\", \"class\": \"ansi-bright-green\" }, { color: \"255, 255, 85\", \"class\": \"ansi-bright-yellow\" }, { color: \"85, 85, 255\", \"class\": \"ansi-bright-blue\" }, { color: \"255, 85, 255\", \"class\": \"ansi-bright-magenta\" }, { color: \"85, 255, 255\", \"class\": \"ansi-bright-cyan\" }, { color: \"255, 255, 255\", \"class\": \"ansi-bright-white\" }]];\n\nvar Anser = function () {\n    _createClass(Anser, null, [{\n        key: \"escapeForHtml\",\n\n\n        /**\n         * Anser.escapeForHtml\n         * Escape the input HTML.\n         *\n         * This does the minimum escaping of text to make it compliant with HTML.\n         * In particular, the '&','<', and '>' characters are escaped. This should\n         * be run prior to `ansiToHtml`.\n         *\n         * @name Anser.escapeForHtml\n         * @function\n         * @param {String} txt The input text (containing the ANSI snippets).\n         * @returns {String} The escaped html.\n         */\n        value: function escapeForHtml(txt) {\n            return new Anser().escapeForHtml(txt);\n        }\n\n        /**\n         * Anser.linkify\n         * Adds the links in the HTML.\n         *\n         * This replaces any links in the text with anchor tags that display the\n         * link. The links should have at least one whitespace character\n         * surrounding it. Also, you should apply this after you have run\n         * `ansiToHtml` on the text.\n         *\n         * @name Anser.linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML containing the <a> tags (unescaped).\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return new Anser().linkify(txt);\n        }\n\n        /**\n         * Anser.ansiToHtml\n         * This replaces ANSI terminal escape codes with SPAN tags that wrap the\n         * content.\n         *\n         * This function only interprets ANSI SGR (Select Graphic Rendition) codes\n         * that can be represented in HTML.\n         * For example, cursor movement codes are ignored and hidden from output.\n         * The default style uses colors that are very close to the prescribed\n         * standard. The standard assumes that the text will have a black\n         * background. These colors are set as inline styles on the SPAN tags.\n         *\n         * Another option is to set `use_classes: true` in the options argument.\n         * This will instead set classes on the spans so the colors can be set via\n         * CSS. The class names used are of the format `ansi-*-fg/bg` and\n         * `ansi-bright-*-fg/bg` where `*` is the color name,\n         * i.e black/red/green/yellow/blue/magenta/cyan/white.\n         *\n         * @name Anser.ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return new Anser().ansiToHtml(txt, options);\n        }\n\n        /**\n         * Anser.ansiToJson\n         * Converts ANSI input into JSON output.\n         *\n         * @name Anser.ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            return new Anser().ansiToJson(txt, options);\n        }\n\n        /**\n         * Anser.ansiToText\n         * Converts ANSI input into text output.\n         *\n         * @name Anser.ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return new Anser().ansiToText(txt);\n        }\n\n        /**\n         * Anser\n         * The `Anser` class.\n         *\n         * @name Anser\n         * @function\n         * @returns {Anser}\n         */\n\n    }]);\n\n    function Anser() {\n        _classCallCheck(this, Anser);\n\n        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;\n        this.bright = 0;\n    }\n\n    /**\n     * setupPalette\n     * Sets up the palette.\n     *\n     * @name setupPalette\n     * @function\n     */\n\n\n    _createClass(Anser, [{\n        key: \"setupPalette\",\n        value: function setupPalette() {\n            this.PALETTE_COLORS = [];\n\n            // Index 0..15 : System color\n            for (var i = 0; i < 2; ++i) {\n                for (var j = 0; j < 8; ++j) {\n                    this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);\n                }\n            }\n\n            // Index 16..231 : RGB 6x6x6\n            // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml\n            var levels = [0, 95, 135, 175, 215, 255];\n            var format = function format(r, g, b) {\n                return levels[r] + \", \" + levels[g] + \", \" + levels[b];\n            };\n            var r = void 0,\n                g = void 0,\n                b = void 0;\n            for (var _r = 0; _r < 6; ++_r) {\n                for (var _g = 0; _g < 6; ++_g) {\n                    for (var _b = 0; _b < 6; ++_b) {\n                        this.PALETTE_COLORS.push(format(_r, _g, _b));\n                    }\n                }\n            }\n\n            // Index 232..255 : Grayscale\n            var level = 8;\n            for (var _i = 0; _i < 24; ++_i, level += 10) {\n                this.PALETTE_COLORS.push(format(level, level, level));\n            }\n        }\n\n        /**\n         * escapeForHtml\n         * Escapes the input text.\n         *\n         * @name escapeForHtml\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The escpaed HTML output.\n         */\n\n    }, {\n        key: \"escapeForHtml\",\n        value: function escapeForHtml(txt) {\n            return txt.replace(/[&<>]/gm, function (str) {\n                return str == \"&\" ? \"&amp;\" : str == \"<\" ? \"&lt;\" : str == \">\" ? \"&gt;\" : \"\";\n            });\n        }\n\n        /**\n         * linkify\n         * Adds HTML link elements.\n         *\n         * @name linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML output containing link elements.\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return txt.replace(/(https?:\\/\\/[^\\s]+)/gm, function (str) {\n                return \"<a href=\\\"\" + str + \"\\\">\" + str + \"</a>\";\n            });\n        }\n\n        /**\n         * ansiToHtml\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToJson\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The JSON output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            options = options || {};\n            options.json = true;\n            options.clearLine = false;\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToText\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return this.process(txt, {}, false);\n        }\n\n        /**\n         * process\n         * Processes the input.\n         *\n         * @name process\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options An object passed to `processChunk` method, extended with:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup\n         */\n\n    }, {\n        key: \"process\",\n        value: function process(txt, options, markup) {\n            var _this = this;\n\n            var self = this;\n            var raw_text_chunks = txt.split(/\\033\\[/);\n            var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split\n\n            if (options === undefined || options === null) {\n                options = {};\n            }\n            options.clearLine = /\\r/.test(txt); // check for Carriage Return\n            var color_chunks = raw_text_chunks.map(function (chunk) {\n                return _this.processChunk(chunk, options, markup);\n            });\n\n            if (options && options.json) {\n                var first = self.processChunkJson(\"\");\n                first.content = first_chunk;\n                first.clearLine = options.clearLine;\n                color_chunks.unshift(first);\n                if (options.remove_empty) {\n                    color_chunks = color_chunks.filter(function (c) {\n                        return !c.isEmpty();\n                    });\n                }\n                return color_chunks;\n            } else {\n                color_chunks.unshift(first_chunk);\n            }\n\n            return color_chunks.join(\"\");\n        }\n\n        /**\n         * processChunkJson\n         * Processes the current chunk into json output.\n         *\n         * @name processChunkJson\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object} The result object:\n         *\n         *  - `content` (String): The text.\n         *  - `fg` (String|null): The foreground color.\n         *  - `bg` (String|null): The background color.\n         *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n         *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n         *  - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n         *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n         *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n         *\n         */\n\n    }, {\n        key: \"processChunkJson\",\n        value: function processChunkJson(text, options, markup) {\n\n            // Are we using classes or styles?\n            options = typeof options == \"undefined\" ? {} : options;\n            var use_classes = options.use_classes = typeof options.use_classes != \"undefined\" && options.use_classes;\n            var key = options.key = use_classes ? \"class\" : \"color\";\n\n            var result = {\n                content: text,\n                fg: null,\n                bg: null,\n                fg_truecolor: null,\n                bg_truecolor: null,\n                clearLine: options.clearLine,\n                decoration: null,\n                was_processed: false,\n                isEmpty: function isEmpty() {\n                    return !result.content;\n                }\n            };\n\n            // Each \"chunk\" is the text after the CSI (ESC + \"[\") and before the next CSI/EOF.\n            //\n            // This regex matches four groups within a chunk.\n            //\n            // The first and third groups match code type.\n            // We supported only SGR command. It has empty first group and \"m\" in third.\n            //\n            // The second group matches all of the number+semicolon command sequences\n            // before the \"m\" (or other trailing) character.\n            // These are the graphics or SGR commands.\n            //\n            // The last group is the text (including newlines) that is colored by\n            // the other group\"s commands.\n            var matches = text.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);\n\n            if (!matches) return result;\n\n            var orig_txt = result.content = matches[4];\n            var nums = matches[2].split(\";\");\n\n            // We currently support only \"SGR\" (Select Graphic Rendition)\n            // Simply ignore if not a SGR command.\n            if (matches[1] !== \"\" || matches[3] !== \"m\") {\n                return result;\n            }\n\n            if (!markup) {\n                return result;\n            }\n\n            var self = this;\n\n            self.decoration = null;\n\n            while (nums.length > 0) {\n                var num_str = nums.shift();\n                var num = parseInt(num_str);\n\n                if (isNaN(num) || num === 0) {\n                    self.fg = self.bg = self.decoration = null;\n                } else if (num === 1) {\n                    self.decoration = \"bold\";\n                } else if (num === 2) {\n                    self.decoration = \"dim\";\n                    // Enable code 2 to get string\n                } else if (num == 3) {\n                    self.decoration = \"italic\";\n                } else if (num == 4) {\n                    self.decoration = \"underline\";\n                } else if (num == 5) {\n                    self.decoration = \"blink\";\n                } else if (num === 7) {\n                    self.decoration = \"reverse\";\n                } else if (num === 8) {\n                    self.decoration = \"hidden\";\n                    // Enable code 9 to get strikethrough\n                } else if (num === 9) {\n                    self.decoration = \"strikethrough\";\n                } else if (num == 39) {\n                    self.fg = null;\n                } else if (num == 49) {\n                    self.bg = null;\n                    // Foreground color\n                } else if (num >= 30 && num < 38) {\n                    self.fg = ANSI_COLORS[0][num % 10][key];\n                    // Foreground bright color\n                } else if (num >= 90 && num < 98) {\n                    self.fg = ANSI_COLORS[1][num % 10][key];\n                    // Background color\n                } else if (num >= 40 && num < 48) {\n                    self.bg = ANSI_COLORS[0][num % 10][key];\n                    // Background bright color\n                } else if (num >= 100 && num < 108) {\n                    self.bg = ANSI_COLORS[1][num % 10][key];\n                } else if (num === 38 || num === 48) {\n                    // extend color (38=fg, 48=bg)\n                    var is_foreground = num === 38;\n                    if (nums.length >= 1) {\n                        var mode = nums.shift();\n                        if (mode === \"5\" && nums.length >= 1) {\n                            // palette color\n                            var palette_index = parseInt(nums.shift());\n                            if (palette_index >= 0 && palette_index <= 255) {\n                                if (!use_classes) {\n                                    if (!this.PALETTE_COLORS) {\n                                        self.setupPalette();\n                                    }\n                                    if (is_foreground) {\n                                        self.fg = this.PALETTE_COLORS[palette_index];\n                                    } else {\n                                        self.bg = this.PALETTE_COLORS[palette_index];\n                                    }\n                                } else {\n                                    var klass = palette_index >= 16 ? \"ansi-palette-\" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8][\"class\"];\n                                    if (is_foreground) {\n                                        self.fg = klass;\n                                    } else {\n                                        self.bg = klass;\n                                    }\n                                }\n                            }\n                        } else if (mode === \"2\" && nums.length >= 3) {\n                            // true color\n                            var r = parseInt(nums.shift());\n                            var g = parseInt(nums.shift());\n                            var b = parseInt(nums.shift());\n                            if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n                                var color = r + \", \" + g + \", \" + b;\n                                if (!use_classes) {\n                                    if (is_foreground) {\n                                        self.fg = color;\n                                    } else {\n                                        self.bg = color;\n                                    }\n                                } else {\n                                    if (is_foreground) {\n                                        self.fg = \"ansi-truecolor\";\n                                        self.fg_truecolor = color;\n                                    } else {\n                                        self.bg = \"ansi-truecolor\";\n                                        self.bg_truecolor = color;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (self.fg === null && self.bg === null && self.decoration === null) {\n                return result;\n            } else {\n                var styles = [];\n                var classes = [];\n                var data = {};\n\n                result.fg = self.fg;\n                result.bg = self.bg;\n                result.fg_truecolor = self.fg_truecolor;\n                result.bg_truecolor = self.bg_truecolor;\n                result.decoration = self.decoration;\n                result.was_processed = true;\n\n                return result;\n            }\n        }\n\n        /**\n         * processChunk\n         * Processes the current chunk of text.\n         *\n         * @name processChunk\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object|String} The result (object if `json` is wanted back or string otherwise).\n         */\n\n    }, {\n        key: \"processChunk\",\n        value: function processChunk(text, options, markup) {\n            var _this2 = this;\n\n            var self = this;\n            options = options || {};\n            var jsonChunk = this.processChunkJson(text, options, markup);\n\n            if (options.json) {\n                return jsonChunk;\n            }\n            if (jsonChunk.isEmpty()) {\n                return \"\";\n            }\n            if (!jsonChunk.was_processed) {\n                return jsonChunk.content;\n            }\n\n            var use_classes = options.use_classes;\n\n            var styles = [];\n            var classes = [];\n            var data = {};\n            var render_data = function render_data(data) {\n                var fragments = [];\n                var key = void 0;\n                for (key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        fragments.push(\"data-\" + key + \"=\\\"\" + _this2.escapeForHtml(data[key]) + \"\\\"\");\n                    }\n                }\n                return fragments.length > 0 ? \" \" + fragments.join(\" \") : \"\";\n            };\n\n            if (jsonChunk.fg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.fg + \"-fg\");\n                    if (jsonChunk.fg_truecolor !== null) {\n                        data[\"ansi-truecolor-fg\"] = jsonChunk.fg_truecolor;\n                        jsonChunk.fg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"color:rgb(\" + jsonChunk.fg + \")\");\n                }\n            }\n\n            if (jsonChunk.bg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.bg + \"-bg\");\n                    if (jsonChunk.bg_truecolor !== null) {\n                        data[\"ansi-truecolor-bg\"] = jsonChunk.bg_truecolor;\n                        jsonChunk.bg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"background-color:rgb(\" + jsonChunk.bg + \")\");\n                }\n            }\n\n            if (jsonChunk.decoration) {\n                if (use_classes) {\n                    classes.push(\"ansi-\" + jsonChunk.decoration);\n                } else if (jsonChunk.decoration === \"bold\") {\n                    styles.push(\"font-weight:bold\");\n                } else if (jsonChunk.decoration === \"dim\") {\n                    styles.push(\"opacity:0.5\");\n                } else if (jsonChunk.decoration === \"italic\") {\n                    styles.push(\"font-style:italic\");\n                    // underline and blink are treated bellow\n                } else if (jsonChunk.decoration === \"reverse\") {\n                    styles.push(\"filter:invert(100%)\");\n                } else if (jsonChunk.decoration === \"hidden\") {\n                    styles.push(\"visibility:hidden\");\n                } else if (jsonChunk.decoration === \"strikethrough\") {\n                    styles.push(\"text-decoration:line-through\");\n                } else {\n                    styles.push(\"text-decoration:\" + jsonChunk.decoration);\n                }\n            }\n\n            if (use_classes) {\n                return \"<span class=\\\"\" + classes.join(\" \") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            } else {\n                return \"<span style=\\\"\" + styles.join(\";\") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            }\n        }\n    }]);\n\n    return Anser;\n}();\n\n;\n\nmodule.exports = Anser;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst anser_1 = __importDefault(require(\"anser\"));\nconst escape_carriage_1 = require(\"escape-carriage\");\nconst React = __importStar(require(\"react\"));\nconst LINK_REGEX = /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/;\n/**\n * Converts ANSI strings into JSON output.\n * @name ansiToJSON\n * @function\n * @param {String} input The input string.\n * @return {Array} The parsed input.\n */\nfunction ansiToJSON(input, use_classes = false) {\n    input = escape_carriage_1.escapeCarriageReturn(input);\n    return anser_1.default.ansiToJson(input, {\n        json: true,\n        remove_empty: true,\n        use_classes\n    });\n}\n/**\n * Create a class string.\n * @name createClass\n * @function\n * @param {AnserJsonEntry}.\n * @return {String} class name(s)\n */\nfunction createClass(bundle) {\n    let classNames = \"\";\n    if (!bundle.bg && !bundle.fg) {\n        return null;\n    }\n    if (bundle.bg) {\n        classNames += bundle.bg + \" \";\n    }\n    if (bundle.fg) {\n        classNames += bundle.fg + \" \";\n    }\n    classNames = classNames.substring(0, classNames.length - 1);\n    return classNames;\n}\n/**\n * Create the style attribute.\n * @name createStyle\n * @function\n * @param {AnserJsonEntry}.\n * @return {Object} returns the style object\n */\nfunction createStyle(bundle) {\n    const style = {};\n    if (bundle.bg) {\n        style.backgroundColor = `rgb(${bundle.bg})`;\n    }\n    if (bundle.fg) {\n        style.color = `rgb(${bundle.fg})`;\n    }\n    return style;\n}\n/**\n * Converts an Anser bundle into a React Node.\n * @param linkify whether links should be converting into clickable anchor tags.\n * @param useClasses should render the span with a class instead of style.\n * @param bundle Anser output.\n */\nfunction convertBundleIntoReact(linkify, useClasses, bundle, key) {\n    const style = useClasses ? null : createStyle(bundle);\n    const className = useClasses ? createClass(bundle) : null;\n    if (!linkify) {\n        return React.createElement(\"span\", { style, key, className }, bundle.content);\n    }\n    const words = bundle.content.split(/(\\s+)/).reduce((words, word, index) => {\n        // If this is a separator, re-add the space removed from split.\n        if (index % 2 === 1) {\n            words.push(word);\n            return words;\n        }\n        // If  this isn't a link, just return the word as-is.\n        if (!LINK_REGEX.test(word)) {\n            words.push(word);\n            return words;\n        }\n        words.push(React.createElement(\"a\", {\n            key: index,\n            href: word,\n            target: \"_blank\"\n        }, `${word}`));\n        return words;\n    }, []);\n    return React.createElement(\"span\", { style, key, className }, words);\n}\nfunction Ansi(props) {\n    const { className, useClasses, children, linkify } = props;\n    return React.createElement(\"code\", { className }, ansiToJSON(children, !!useClasses).map(convertBundleIntoReact.bind(null, linkify, !!useClasses)));\n}\nexports.default = Ansi;\n","/**\n * Escape carrigage returns like a terminal\n * @param {string} txt - String to escape.\n * @return {string}    - Escaped string.\n */\nfunction escapeCarriageReturn(txt) {\n  if (!txt) return \"\";\n  if (!/\\r/.test(txt)) return txt;\n  txt = txt.replace(/\\r+\\n/gm, \"\\n\"); // \\r followed by \\n --> newline\n  while (/\\r./.test(txt)) {\n    txt = txt.replace(/^([^\\r\\n]*)\\r+([^\\r\\n]+)/gm, function (_, base, insert) {\n      return insert + base.slice(insert.length);\n    });\n  }\n  return txt;\n}\n\nfunction findLongestString(arr) {\n  var longest = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[longest].length <= arr[i].length) {\n      longest = i;\n    }\n  }\n  return longest;\n}\n\nfunction escapeSingleLineSafe(txt) {\n  if (!/\\r/.test(txt)) return txt;\n  var arr = txt.split(\"\\r\");\n  var res = [];\n\n  while (arr.length > 0) {\n    var longest = findLongestString(arr);\n    res.push(arr[longest]);\n    arr = arr.slice(longest + 1);\n  }\n\n  return res.join(\"\\r\");\n}\n\n/**\n * Safely escape carrigage returns like a terminal.\n * This allows to escape carrigage returns while allowing future output to be appended\n * without loosing information.\n * Use this as a intermediate escape step if your stream hasn't completed yet.\n * @param {string} txt - String to escape.\n * @return {string}    - Escaped string.\n */\nfunction escapeCarriageReturnSafe(txt) {\n  if (!txt) return \"\";\n  if (!/\\r/.test(txt)) return txt;\n  if (!/\\n/.test(txt)) return escapeSingleLineSafe(txt);\n  txt = txt.replace(/\\r+\\n/gm, \"\\n\"); // \\r followed by \\n --> newline\n  var idx = txt.lastIndexOf(\"\\n\");\n\n  return (\n    escapeCarriageReturn(txt.slice(0, idx)) +\n    \"\\n\" +\n    escapeSingleLineSafe(txt.slice(idx + 1))\n  );\n}\n\nmodule.exports = escapeCarriageReturn;\nmodule.exports.escapeCarriageReturn = escapeCarriageReturn;\nmodule.exports.escapeCarriageReturnSafe = escapeCarriageReturnSafe;\n"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","ANSI_COLORS","color","Anser","_classCallCheck","instance","fg","bg","fg_truecolor","bg_truecolor","bright","value","txt","escapeForHtml","linkify","options","ansiToHtml","ansiToJson","ansiToText","PALETTE_COLORS","j","push","levels","format","r","g","b","_r","_g","_b","level","_i","replace","str","process","json","clearLine","markup","_this","raw_text_chunks","split","first_chunk","shift","test","color_chunks","map","chunk","processChunk","first","self","processChunkJson","content","unshift","remove_empty","filter","c","isEmpty","join","text","use_classes","result","decoration","was_processed","matches","match","nums","num","parseInt","isNaN","is_foreground","mode","palette_index","klass","setupPalette","_this2","jsonChunk","styles","classes","data","render_data","fragments","hasOwnProperty","module","exports","__importDefault","mod","__esModule","__importStar","k","call","anser_1","__webpack_require__","escape_carriage_1","React","LINK_REGEX","convertBundleIntoReact","useClasses","bundle","classNames","style","createStyle","backgroundColor","className","substring","createElement","words","reduce","word","index","href","children","ansiToJSON","input","escapeCarriageReturn","default","bind","_","base","insert","slice","escapeSingleLineSafe","arr","res","longest","findLongestString","escapeCarriageReturnSafe","idx","lastIndexOf"],"sourceRoot":""}