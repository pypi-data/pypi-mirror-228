{"version":3,"file":"static/chunks/305.3d09ef93d67cc2e8.js","mappings":"+iDA8BO,IAAMA,EAA+B,WAC1CC,CAAAA,EAAAA,EAAAA,EAAAA,IAGA,IAAMC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBC,CAD7BC,EAAAA,EAAAA,EAAAA,GAC4C,CAAC,IAAI,EACzDC,EAA4BJ,EAA5BI,YAAAA,CAAcC,EAAcL,EAAdK,UAAAA,CACfC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,IAIhB,MAFAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,aAA4BH,MAAAA,CAAfD,GAA8DK,MAAA,CAA/CJ,EAAa,IAA2BI,MAAA,CAAvBJ,EAAWK,KAAK,CAAC,EAAG,IAAO,KAGvF,GAAAC,EAAAC,GAAA,EAACC,EAAAA,CACCb,aAAcA,EACdc,qBAAsB,SAACC,CAAAA,CAAMC,CAAAA,EAC3BV,CAAO,CAACU,EAAK,CAAC,cAAyCP,MAAA,CAA3BQ,CAAAA,EAAAA,EAAAA,EAAAA,EAAqBF,IACnD,EACAG,4BAA6B,SAAAC,CAAA,MAAEC,EAAAA,EAAAA,QAAAA,CAC7Bd,EAAQe,IAAI,CAACC,CAAAA,EAAAA,EAAAA,CAAAA,EAAuBF,GACtC,GAGN,EAEaP,EAMR,SAAAM,CAAA,MAQkBnB,EAPrBA,EAAAA,EAAAA,YAAAA,CACAuB,EAAAA,EAAAA,WAAAA,CACAT,EAAAA,EAAAA,oBAAAA,CACAI,EAAAA,EAAAA,2BAAAA,CAAAA,EAAAA,EACAM,OAAAA,CAAAA,EAAAA,KAAAA,IAAAA,GAAUC,EAEoBC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAuB,CACjEC,kBAAmB3B,OAAAA,CAAAA,EAAAA,EAAa2B,iBAAiB,GAA9B3B,KAAAA,IAAAA,GAAAA,EACnB4B,qBAAsB,EACxB,MAHOC,EAAuBH,CAAAA,CAAAA,EAAAA,CAAdI,EAAcJ,CAAAA,CAAAA,EAAAA,CAKxBK,EAAc/B,EAAagC,OAAO,CAACtB,KAAK,CAAC,EAAGV,EAAagC,OAAO,CAACC,MAAM,CAAG,GAC1EC,EAAmBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsBZ,GAAe,KAAMvB,EAAaI,YAAY,EAEvFgC,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,EACrBC,EACA,CACEC,UAAW,CACTC,yBAA0BxC,EAAaK,UAAU,CAAGoC,KAAAA,EAAYP,EAChE7B,WAAYL,EAAaK,UAAU,CAAGL,EAAaK,UAAU,CAAGoC,KAAAA,EAChEC,aAAcX,EAAYY,IAAI,CAAC,KAC/BC,qBAAsBf,EAAQF,iBAAiB,CAAGc,KAAAA,EAAYV,EAAYY,IAAI,CAAC,IACjF,CACF,GAGF,MACE,GAAAhC,EAAAC,GAAA,EAACiC,EAAAA,CAAOA,CAAAA,CAA4BC,YAAaV,WAC9C,SAAAjB,CAAA,MAAE4B,EAAAA,EAAAA,uBAAAA,CACD,GAAIC,qBAAAA,EAAOC,UAAU,CACnB,MACE,GAAAtC,EAAAC,GAAA,EAACsC,EAAAA,CAA2BA,CAAAA,CAC1B1B,QAASA,EACTwB,OAAQA,EACRzB,YAAaA,IAKnB,IAAM4B,EAAeH,EAAOI,WAAW,CACjCC,EAAmBxB,EAAQF,iBAAiB,CAC9C2B,CAAAA,EAAAA,EAAAA,CAAAA,EAA+BN,EAAOO,YAAY,EAClDP,EAAOO,YAAY,CACjBC,EAAoBR,EAAOO,YAAY,CAACE,IAAI,CAChD,SAACC,CAAAA,SAAMA,EAAEC,KAAK,CAACC,UAAU,CAACC,UAAU,CAAC5B,MAAM,CAAG,WAEhD,EAAYL,oBAAoB,EAAI4B,EAEhC,GAAA7C,EAAAC,GAAA,EAACkD,EAAAA,EAAkBA,CAAAA,CACjBjC,QAASA,EACTC,WAAYA,EACZiC,aAAc,CAAC7B,iBAAAA,CAAgB,EAC/BlC,aAAcA,EACdc,qBAAsBA,EACtBI,4BAA6BA,IAMjC,GAAAP,EAAAC,GAAA,EAACoD,EAAAA,EAAaA,CAAAA,CACZnC,QAASA,EACTC,WAAYA,EACZ9B,aAAcA,EACdc,qBAAsBA,EACtBmD,UAAWjB,EACXzB,YAAaA,EACb2C,QAASb,EACTF,aAAcA,GAA8BV,KAAAA,EAC5CjB,QAASA,EACT2C,eAAgB,SAACC,CAAAA,SACff,EACGgB,MAAM,CAAC,SAACC,CAAAA,SAAMA,EAAEX,KAAK,CAACC,UAAU,CAACW,IAAI,GAAKH,IAC1CI,GAAG,CAAC,SAACF,CAAAA,QAAO,CAACG,SAAUH,EAAEG,QAAQ,MAI5C,GAGN,EAEanC,EAA+BoC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IA6C3CC,EAAAA,EAAuBA,CACvBC,EAAAA,EAAuBA,CACvBC,EAAAA,CAAoCA,CACpCC,EAAAA,EAAkCA,CAClCC,EAAAA,CAAqBA,o3BC9IzB,IAAMC,EAAwC,CAC5C,SACA,MACA,sBACA,qBACD,CAMYC,EAAoC,SAACC,CAAAA,EAChDnF,CAAAA,EAAAA,EAAAA,EAAAA,IAEA,IAAMoF,EAAiBhF,CAAAA,EAAAA,EAAAA,EAAAA,IAAhBgF,YAAAA,CACPC,EAA6BF,EAAtB3D,WAAAA,CAAAA,EAAAA,KAAAA,IAAAA,EAAc,KAAA6D,EACfpF,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBkF,GACrC/E,EAA4BJ,EAA5BI,YAAAA,CAAcC,EAAcL,EAAdK,UAAAA,CAEfgF,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc/D,GACrBgE,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBH,EAAMjF,GAEpCqF,CAAAA,EAAAA,EAAAA,CAAAA,EAAYzF,EAAcuF,GAE1B,IAAwCG,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAA4BV,GAAAA,GAA7DW,EAAiCD,CAAAA,CAAAA,EAAAA,CAAnBE,EAAmBF,CAAAA,CAAAA,EAAAA,CAClCG,EAAkBnE,EAAAA,OAAa,CAAC,WACpC,MAAO,CACL6D,EAAQ,CAACO,MAAO,MAAOC,MAAO3F,CAAY,EAAI,CAAC0F,MAAO,WAAYC,MAAO3F,CAAY,EACrFC,EAAa,CAACyF,MAAO,aAAcC,MAAO1F,CAAU,EAAI,KACzD,CAACgE,MAAM,CAAC2B,QACX,EAAG,CAACT,EAAOnF,EAAcC,EAAW,EAE9B4F,EAAY,GAAAC,EAAAC,CAAA,EAAIR,GAAAA,MAAAA,CAAc,GAAAO,EAAAC,CAAA,EAAGN,IACvC,GAAItE,EAAa,CACf,IAAM6E,EAAY,CAChBN,MAAO,MACPC,MAAO,GAAoCM,MAAAA,CAAjCC,EAAAA,CAAUA,CAACC,kBAAkB,CAAC,KAAiC9F,MAAA,CAA9B4F,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB9E,GAC9D,EACA0E,EAAU5E,IAAI,CAAC+E,EACjB,CAEA,IAAuCI,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAGrC,CACAC,MAAOC,EACPC,SA/Cc,GAgDdpE,UAAW,CACT8B,OAAQ,GAAAuC,EAAAT,CAAA,KAAAU,EAAAV,CAAA,KAAIW,CAAAA,EAAAA,EAAAA,EAAAA,EAA0Bb,IAAAA,CAAY7F,aAAAA,EAAcC,WAAAA,GAClE,EACA0G,oBAAqB,SAACC,CAAAA,MAIbA,EAHP,GAAIA,SAAAA,EAAKC,mBAAmB,CAAChE,UAAU,CAGvC,cAAO+D,CAAAA,EAAAA,EAAKC,mBAAmB,CAACC,OAAO,CAACC,GAAc,GAA/CH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiDI,EAAE,EAE5DC,eAAgB,SAACC,CAAAA,SACf,GAAaA,SAAAA,EAAKL,mBAAmB,CAAChE,UAAU,CAGzCqE,EAAKL,mBAAmB,CAACC,OAAO,CAF9B,EAAE,CAIf,GArBOpE,EAAgC0D,EAAhC1D,WAAAA,CAAayE,EAAmBf,EAAnBe,eAAAA,CAuBdC,EAAW9F,EAAAA,WAAiB,CAChC,SAACoE,CAAAA,EACC,IAAM2B,EAAgBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc5B,GAC/BH,EAAalC,IAAI,CAAC,SAACqC,CAAAA,QAAU4B,CAAAA,EAAAA,EAAAA,EAAAA,EAAc5B,KAAW2B,KACzD7B,EAAgB,GAAAM,EAAAC,CAAA,EAAIR,GAAAA,MAAAA,CAAJ,CAAkBG,EAAM,EAE5C,EACA,CAACH,EAAcC,EAAgB,EAG3B+B,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B9E,EAAa+E,EAAAA,EAAeA,EACxCC,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAmB,CACpDC,eAAgB/C,EAChBgD,OAAQrC,EACRsC,SAAUrC,EACVsC,QAASpF,EAAYoF,OAAO,GAJvBC,EAA4BL,EAA5BK,MAAAA,CAAQC,EAAoBN,EAApBM,gBAAAA,CAOf,MACE,GAAAzH,EAAAC,GAAA,EAACyH,EAAAA,EAAuBA,CAACC,QAAQ,EAACvC,MAAO,CAACwC,QAASzF,EAAYyF,OAAO,WACpE,GAAA5H,EAAAC,GAAA,EAAC4H,EAAAA,CAAIA,CAAAA,UACH,GAAA7H,EAAAC,GAAA,EAACiC,EAAAA,CAAOA,CAAAA,CAACC,YAAaA,EAAa2F,eAAgB,YAChD,SAAAtH,CAAA,MAAE8F,EAAAA,EAAAA,mBAAAA,CACD,GAAIA,SAAAA,EAAoBhE,UAAU,CAChC,MACE,GAAAtC,EAAAC,GAAA,EAAC8H,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,WACzB,GAAAjI,EAAAC,GAAA,EAACiI,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACLC,MAAM,cACNC,YAAa/B,EAAoBgC,OAAO,KAQhD,IAAMC,EAAYlC,EAFeE,OAAO,CAEjBxG,KAAK,CAAC,EAtGvB,IAuGCyI,EAAgC5B,EAAhC4B,aAAAA,CAAeC,EAAiB7B,EAAjB6B,aAAAA,CAEtB,MACE,GAAAzI,EAAA0I,IAAA,EAAA1I,EAAA2I,QAAA,YACE,GAAA3I,EAAAC,GAAA,EAAC2I,EAAAA,CAAoBA,CAAAA,CAACC,KAAM,WAC1B,GAAA7I,EAAAC,GAAA,EAAC6I,EAAAA,EAAQA,CAAAA,CACPzC,KAAMkC,EACN1B,SAAUA,EACVkC,oBACE,GAAA/I,EAAA0I,IAAA,EAACX,EAAAA,CAAGA,CAAAA,CACFiB,KAAM,CACJC,UAAW,MACXC,eAAgB,gBAChBC,KAAM,EACNC,WAAY,SACZC,IAAK,CACP,EACAC,OAAQ,CAACC,MAAO,CAAC,YAEhB/B,EACD,GAAAxH,EAAAC,GAAA,EAACuJ,EAAAA,EAAqBA,CAAAA,CAACxC,aAAcA,OAGzCyC,yBACE,GAAAzJ,EAAA0I,IAAA,EAAA1I,EAAA2I,QAAA,YACGzD,EAAgBrB,GAAG,CAAC,SAAArD,CAAA,MAAE2E,EAAAA,EAAAA,KAAAA,CAAOC,EAAAA,EAAAA,KAAAA,OAC5B,GAAApF,EAAAC,GAAA,EAACyJ,EAAAA,CAAGA,CAAAA,UAAc,GAAYtE,MAAAA,CAATD,EAAM,KAASrF,MAAA,CAANsF,IAApBD,KAEXsC,EAAiBnG,MAAM,CACtB,GAAAtB,EAAA0I,IAAA,EAAA1I,EAAA2I,QAAA,YACGlB,EACD,GAAAzH,EAAAC,GAAA,EAAC0J,EAAAA,CAAUA,CAAAA,CACTC,QAAS,WACP3E,EAAgB,EAAE,CACpB,WACD,iBAID,QAGR4E,WAAY,iBACV,GAAA7J,EAAAC,GAAA,EAAC6J,EAAAA,CACClJ,YAAaA,EACbmJ,UAAW/E,EAAa1D,MAAM,CAAG,EACjC0I,QAASvK,EACTwK,QAASzF,SAKhBgE,GAAiBC,EAChB,GAAAzI,EAAAC,GAAA,EAACiK,MAAAA,CAAIC,MAAO,CAACC,UAAW,MAAM,WAC5B,GAAApK,EAAAC,GAAA,EAACoK,EAAAA,EAAqBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAKzD,MAE3B,OAGV,OAKV,EASMkD,EAAa,SAACvF,CAAAA,EAClB,IAAO3D,EAA4C2D,EAA5C3D,WAAAA,CAAamJ,EAA+BxF,EAA/BwF,SAAAA,CAAWC,EAAoBzF,EAApByF,OAAAA,CAASC,EAAW1F,EAAX0F,OAAAA,CAElCvF,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAc/D,GACrB0J,EAAaC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB7F,EAAMsF,GA8C/C,MACE,GAAAhK,EAAAC,GAAA,EAAC8H,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAE,WACzB,GAAAjI,EAAAC,GAAA,EAACiI,EAAAA,CAAaA,CAAAA,CAACC,KAAK,MAAMC,MAAM,gBAAgBC,YA7ClD,EAIIiC,EAEA,GAAAtK,EAAA0I,IAAA,EAACX,EAAAA,CAAGA,CAAAA,CAACiB,KAAM,CAACC,UAAW,SAAUI,IAAK,EAAE,YACtC,GAAArJ,EAAAC,GAAA,EAACiK,MAAAA,UACEH,EACG,gDACA,4DAEN,GAAA/J,EAAAC,GAAA,EAACiK,MAAAA,UACC,GAAAlK,EAAAC,GAAA,EAACuK,EAAAA,CAAYA,CAAAA,CACXrC,KAAM,GAAAnI,EAAAC,GAAA,EAACwK,EAAAA,EAAIA,CAAAA,CAAC7G,KAAK,oBACjB8G,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB/J,EAAa,SAAiBd,MAAA,CAARmK,aACpD,8BASP,GAAAjK,EAAA0I,IAAA,EAACX,EAAAA,CAAGA,CAAAA,CAACiB,KAAM,CAACC,UAAW,SAAUI,IAAK,EAAE,YACtC,GAAArJ,EAAAC,GAAA,EAACiK,MAAAA,UACEH,EACG,gDACA,qDAEN,GAAA/J,EAAAC,GAAA,EAACiK,MAAAA,UACC,GAAAlK,EAAAC,GAAA,EAACuK,EAAAA,CAAYA,CAAAA,CACXrC,KAAM,GAAAnI,EAAAC,GAAA,EAACwK,EAAAA,EAAIA,CAAAA,CAAC7G,KAAK,eACjB8G,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB/J,EAAa,SAAiBd,MAAA,CAARmK,EAAQ,yBAC5D,sBAlCE,GAAAjK,EAAAC,GAAA,EAACiK,MAAAA,UAAI,oDA+ClB,EAEMnE,EAA2BhC,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IAgBhC6G,EAAAA,EAAsBA,CACtBxG,EAAAA,CAAqBA,yvDC7RlB,IAAMwE,EAAuBiC,SAAAA,EAAMA,CAACX,GAAG,CAAAY,UAAA,oCAGnC,SAAAtK,CAAA,UAAEqI,IAAAA,QAAAA,KAAAA,IAAAA,EAAO,EAAAkC,GACIC,EAAAA,CAAMA,CAACC,KAAK,CAqBZD,EAAAA,CAAMA,CAACE,WAAW","sources":["webpack://_N_E/../ui-core/src/pipelines/PipelineExplorerRoot.tsx","webpack://_N_E/../ui-core/src/pipelines/PipelineRunsRoot.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_ASSET_NODE_FRAGMENT,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\nimport {\n  PipelineExplorerRootQuery,\n  PipelineExplorerRootQueryVariables,\n} from './types/PipelineExplorerRoot.types';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString((params as any)['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={({assetKey}) => {\n        history.push(assetDetailsPathForKey(assetKey));\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer: React.FC<{\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}> = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}) => {\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery<PipelineExplorerRootQuery, PipelineExplorerRootQueryVariables>(\n    PIPELINE_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n        snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<PipelineExplorerRootQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = gql`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_ASSET_NODE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Icon,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n  useRunsFilterInput,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, isThisThingAnAssetJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = [\n  'status',\n  'tag',\n  'created_date_before',\n  'created_date_after',\n];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    enabledFilters: ENABLED_FILTERS,\n    tokens: filterTokens,\n    onChange: setFilterTokens,\n    loading: queryResult.loading,\n  });\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            const runs = pipelineRunsOrError.results;\n\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          justifyContent: 'space-between',\n                          grow: 1,\n                          alignItems: 'center',\n                          gap: 4,\n                        }}\n                        margin={{right: 8}}\n                      >\n                        {button}\n                        <QueryRefreshCountdown refreshState={refreshState} />\n                      </Box>\n                    }\n                    belowActionBarComponents={\n                      <>\n                        {permanentTokens.map(({token, value}) => (\n                          <Tag key={token}>{`${token}:${value}`}</Tag>\n                        ))}\n                        {activeFiltersJsx.length ? (\n                          <>\n                            {activeFiltersJsx}\n                            <ButtonLink\n                              onClick={() => {\n                                setFilterTokens([]);\n                              }}\n                            >\n                              Clear all\n                            </ButtonLink>\n                          </>\n                        ) : null}\n                      </>\n                    }\n                    emptyState={() => (\n                      <EmptyState\n                        repoAddress={repoAddress}\n                        anyFilter={filterTokens.length > 0}\n                        jobName={pipelineName}\n                        jobPath={pipelinePath}\n                      />\n                    )}\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\ninterface EmptyStateProps {\n  repoAddress: RepoAddress | null;\n  jobName: string;\n  jobPath: string;\n  anyFilter: boolean;\n}\n\nconst EmptyState = (props: EmptyStateProps) => {\n  const {repoAddress, anyFilter, jobName, jobPath} = props;\n\n  const repo = useRepository(repoAddress);\n  const isAssetJob = isThisThingAnAssetJob(repo, jobName);\n\n  const description = () => {\n    if (!repoAddress) {\n      return <div>You have not launched any runs for this job.</div>;\n    }\n\n    if (isAssetJob) {\n      return (\n        <Box flex={{direction: 'column', gap: 12}}>\n          <div>\n            {anyFilter\n              ? 'There are no matching runs for these filters.'\n              : 'You have not materialized any assets with this job yet.'}\n          </div>\n          <div>\n            <AnchorButton\n              icon={<Icon name=\"materialization\" />}\n              to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}`)}\n            >\n              Materialize an asset\n            </AnchorButton>\n          </div>\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12}}>\n        <div>\n          {anyFilter\n            ? 'There are no matching runs for these filters.'\n            : 'You have not launched any runs for this job yet.'}\n        </div>\n        <div>\n          <AnchorButton\n            icon={<Icon name=\"add_circle\" />}\n            to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}/playground`)}\n          >\n            Launch a run\n          </AnchorButton>\n        </div>\n      </Box>\n    );\n  };\n\n  return (\n    <Box padding={{vertical: 64}}>\n      <NonIdealState icon=\"run\" title=\"No runs found\" description={description()} />\n    </Box>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","explorerPath","explorerPathFromString","params","useParams","pipelineName","snapshotId","history","useHistory","useDocumentTitle","concat","slice","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","param","assetKey","push","assetDetailsPathForKey","repoAddress","isGraph","_param_isGraph","React","explodeComposites","preferAssetRendering","options","setOptions","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","Loading","queryResult","pipelineSnapshotOrError","result","__typename","NonIdealPipelineQueryResult","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","AssetGraphExplorer","fetchOptions","GraphExplorer","container","handles","getInvocations","definitionName","filter","s","name","map","handleID","gql","METADATA_ENTRY_FRAGMENT","GRAPH_EXPLORER_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","GRAPH_EXPLORER_ASSET_NODE_FRAGMENT","PYTHON_ERROR_FRAGMENT","ENABLED_FILTERS","PipelineRunsRoot","props","pipelinePath","_props_repoAddress","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","token","value","Boolean","allTokens","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_21__","_","repoToken","repoAddressAsTag","DagsterTag","RepositoryLabelTag","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_22__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_23__","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","id","getResultArray","data","paginationProps","onAddTag","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","useRunsFilterInput","enabledFilters","tokens","onChange","loading","button","activeFiltersJsx","RunsQueryRefetchContext","Provider","refetch","Page","allowStaleData","Box","padding","vertical","NonIdealState","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","jsxs","Fragment","StickyTableContainer","$top","RunTable","actionBarComponents","flex","direction","justifyContent","grow","alignItems","gap","margin","right","QueryRefreshCountdown","belowActionBarComponents","Tag","ButtonLink","onClick","emptyState","EmptyState","anyFilter","jobName","jobPath","div","style","marginTop","CursorHistoryControls","isAssetJob","isThisThingAnAssetJob","AnchorButton","Icon","to","workspacePathFromAddress","RUN_TABLE_RUN_FRAGMENT","styled","withConfig","_param_$top","Colors","White","KeylineGray"],"sourceRoot":""}