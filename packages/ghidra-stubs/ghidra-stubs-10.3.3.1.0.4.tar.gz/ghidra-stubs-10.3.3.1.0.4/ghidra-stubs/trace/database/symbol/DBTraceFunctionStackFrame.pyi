from typing import List
import ghidra.lifecycle
import ghidra.program.model.data
import ghidra.program.model.listing
import ghidra.program.model.symbol
import java.lang


class DBTraceFunctionStackFrame(object, ghidra.program.model.listing.StackFrame, ghidra.lifecycle.Unfinished):
    GROWS_NEGATIVE: int = -1
    GROWS_POSITIVE: int = 1
    UNKNOWN_PARAM_OFFSET: int = 131072



    def __init__(self, __a0: ghidra.trace.database.symbol.DBTraceFunctionSymbol): ...



    @overload
    @staticmethod
    def TODO() -> object: ...

    @overload
    @staticmethod
    def TODO(__a0: unicode, __a1: List[object]) -> object: ...

    def clearVariable(self, __a0: int) -> None: ...

    def createVariable(self, __a0: unicode, __a1: int, __a2: ghidra.program.model.data.DataType, __a3: ghidra.program.model.symbol.SourceType) -> ghidra.program.model.listing.Variable: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFrameSize(self) -> int: ...

    def getFunction(self) -> ghidra.program.model.listing.Function: ...

    def getLocalSize(self) -> int: ...

    def getLocals(self) -> List[ghidra.program.model.listing.Variable]: ...

    def getParameterOffset(self) -> int: ...

    def getParameterSize(self) -> int: ...

    def getParameters(self) -> List[ghidra.program.model.listing.Variable]: ...

    def getReturnAddressOffset(self) -> int: ...

    def getStackVariables(self) -> List[ghidra.program.model.listing.Variable]: ...

    def getVariableContaining(self, __a0: int) -> ghidra.program.model.listing.Variable: ...

    def growsNegative(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isParameterOffset(self, __a0: int) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setLocalSize(self, __a0: int) -> None: ...

    def setReturnAddressOffset(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def frameSize(self) -> int: ...

    @property
    def function(self) -> ghidra.trace.database.symbol.DBTraceFunctionSymbol: ...

    @property
    def localSize(self) -> int: ...

    @localSize.setter
    def localSize(self, value: int) -> None: ...

    @property
    def locals(self) -> List[ghidra.program.model.listing.LocalVariable]: ...

    @property
    def parameterOffset(self) -> int: ...

    @property
    def parameterSize(self) -> int: ...

    @property
    def parameters(self) -> List[ghidra.program.model.listing.Parameter]: ...

    @property
    def returnAddressOffset(self) -> int: ...

    @returnAddressOffset.setter
    def returnAddressOffset(self, value: int) -> None: ...

    @property
    def stackVariables(self) -> List[ghidra.program.model.listing.Variable]: ...