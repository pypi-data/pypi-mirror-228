from typing import List
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.pcode
import ghidra.program.model.symbol
import ghidra.program.util
import ghidra.trace.model
import ghidra.trace.model.symbol
import ghidra.trace.model.thread
import ghidra.util.task
import java.lang
import java.util


class TraceParameterSymbol(ghidra.trace.model.symbol.TraceSymbol, ghidra.program.model.listing.Parameter, object):
    RETURN_NAME: unicode = u'<RETURN>'
    RETURN_ORIDINAL: int = -1
    UNASSIGNED_ORDINAL: int = -2







    def compareTo(self, __a0: object) -> int: ...

    def delete(self) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getAutoParameterType(self) -> ghidra.program.model.listing.AutoParameterType: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getFirstStorageVarnode(self) -> ghidra.program.model.pcode.Varnode: ...

    def getFirstUseOffset(self) -> int: ...

    def getFormalDataType(self) -> ghidra.program.model.data.DataType: ...

    def getFunction(self) -> ghidra.program.model.listing.Function: ...

    def getID(self) -> long: ...

    def getLastStorageVarnode(self) -> ghidra.program.model.pcode.Varnode: ...

    def getLength(self) -> int: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    @overload
    def getName(self) -> unicode: ...

    @overload
    def getName(self, __a0: bool) -> unicode: ...

    def getObject(self) -> object: ...

    def getOrdinal(self) -> int: ...

    def getParentNamespace(self) -> ghidra.program.model.symbol.Namespace: ...

    def getParentSymbol(self) -> ghidra.program.model.symbol.Symbol: ...

    def getPath(self) -> List[unicode]: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getReferenceCollection(self) -> java.util.Collection: ...

    def getReferenceCount(self) -> int: ...

    @overload
    def getReferences(self) -> List[ghidra.program.model.symbol.Reference]: ...

    @overload
    def getReferences(self, __a0: ghidra.util.task.TaskMonitor) -> List[ghidra.program.model.symbol.Reference]: ...

    def getRegister(self) -> ghidra.program.model.lang.Register: ...

    def getRegisters(self) -> List[object]: ...

    def getSource(self) -> ghidra.program.model.symbol.SourceType: ...

    def getStackOffset(self) -> int: ...

    def getSymbol(self) -> ghidra.program.model.symbol.Symbol: ...

    def getSymbolType(self) -> ghidra.program.model.symbol.SymbolType: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getVariableStorage(self) -> ghidra.program.model.listing.VariableStorage: ...

    def hasAssignedStorage(self) -> bool: ...

    def hasMultipleReferences(self) -> bool: ...

    def hasReferences(self) -> bool: ...

    def hasStackStorage(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isAutoParameter(self) -> bool: ...

    def isCompoundVariable(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isDescendant(self, __a0: ghidra.program.model.symbol.Namespace) -> bool: ...

    def isDynamic(self) -> bool: ...

    def isEquivalent(self, __a0: ghidra.program.model.listing.Variable) -> bool: ...

    def isExternal(self) -> bool: ...

    def isExternalEntryPoint(self) -> bool: ...

    def isForcedIndirect(self) -> bool: ...

    def isGlobal(self) -> bool: ...

    def isMemoryVariable(self) -> bool: ...

    def isPinned(self) -> bool: ...

    def isPrimary(self) -> bool: ...

    def isRegisterVariable(self) -> bool: ...

    def isStackVariable(self) -> bool: ...

    def isUniqueVariable(self) -> bool: ...

    def isValid(self) -> bool: ...

    def isValidParent(self, __a0: ghidra.program.model.symbol.Namespace) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setComment(self, __a0: unicode) -> None: ...

    @overload
    def setDataType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.symbol.SourceType) -> None: ...

    @overload
    def setDataType(self, __a0: ghidra.program.model.data.DataType, __a1: bool, __a2: bool, __a3: ghidra.program.model.symbol.SourceType) -> None: ...

    @overload
    def setDataType(self, __a0: ghidra.program.model.data.DataType, __a1: ghidra.program.model.listing.VariableStorage, __a2: bool, __a3: ghidra.program.model.symbol.SourceType) -> None: ...

    def setName(self, __a0: unicode, __a1: ghidra.program.model.symbol.SourceType) -> None: ...

    def setNameAndNamespace(self, __a0: unicode, __a1: ghidra.program.model.symbol.Namespace, __a2: ghidra.program.model.symbol.SourceType) -> None: ...

    def setNamespace(self, __a0: ghidra.program.model.symbol.Namespace) -> None: ...

    def setPinned(self, __a0: bool) -> None: ...

    def setPrimary(self) -> bool: ...

    def setSource(self, __a0: ghidra.program.model.symbol.SourceType) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def ID(self) -> long: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def autoParameter(self) -> bool: ...

    @property
    def autoParameterType(self) -> ghidra.program.model.listing.AutoParameterType: ...

    @property
    def comment(self) -> unicode: ...

    @comment.setter
    def comment(self, value: unicode) -> None: ...

    @property
    def compoundVariable(self) -> bool: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def dynamic(self) -> bool: ...

    @property
    def external(self) -> bool: ...

    @property
    def externalEntryPoint(self) -> bool: ...

    @property
    def firstStorageVarnode(self) -> ghidra.program.model.pcode.Varnode: ...

    @property
    def firstUseOffset(self) -> int: ...

    @property
    def forcedIndirect(self) -> bool: ...

    @property
    def formalDataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def function(self) -> ghidra.program.model.listing.Function: ...

    @property
    def global(self) -> bool: ...

    @property
    def lastStorageVarnode(self) -> ghidra.program.model.pcode.Varnode: ...

    @property
    def length(self) -> int: ...

    @property
    def memoryVariable(self) -> bool: ...

    @property
    def minAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def name(self) -> unicode: ...

    @property
    def namespace(self) -> None: ...  # No getter available.

    @namespace.setter
    def namespace(self, value: ghidra.program.model.symbol.Namespace) -> None: ...

    @property
    def object(self) -> object: ...

    @property
    def ordinal(self) -> int: ...

    @property
    def parentNamespace(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbol: ...

    @property
    def parentSymbol(self) -> ghidra.trace.model.symbol.TraceNamespaceSymbol: ...

    @property
    def path(self) -> List[unicode]: ...

    @property
    def pinned(self) -> bool: ...

    @pinned.setter
    def pinned(self, value: bool) -> None: ...

    @property
    def primary(self) -> bool: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def programLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def referenceCollection(self) -> java.util.Collection: ...

    @property
    def referenceCount(self) -> int: ...

    @property
    def references(self) -> List[ghidra.trace.model.symbol.TraceReference]: ...

    @property
    def register(self) -> ghidra.program.model.lang.Register: ...

    @property
    def registerVariable(self) -> bool: ...

    @property
    def registers(self) -> List[object]: ...

    @property
    def source(self) -> ghidra.program.model.symbol.SourceType: ...

    @source.setter
    def source(self, value: ghidra.program.model.symbol.SourceType) -> None: ...

    @property
    def stackOffset(self) -> int: ...

    @property
    def stackVariable(self) -> bool: ...

    @property
    def symbol(self) -> ghidra.program.model.symbol.Symbol: ...

    @property
    def symbolType(self) -> ghidra.program.model.symbol.SymbolType: ...

    @property
    def thread(self) -> ghidra.trace.model.thread.TraceThread: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def uniqueVariable(self) -> bool: ...

    @property
    def valid(self) -> bool: ...

    @property
    def variableStorage(self) -> ghidra.program.model.listing.VariableStorage: ...