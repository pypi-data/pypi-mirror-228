# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from .errors.bad_request_error import BadRequestError
from .errors.not_found_error import NotFoundError


class TradeFlowClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_countries(self, *, freq: str) -> typing.List[str]:
        """
        Retrieve a list of countries

        Parameters:
            - freq: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/list_countries"),
            params=remove_none_from_dict({"freq": freq}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[str], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_items(
        self, *, country: str, freq: str, partner_region: typing.Optional[str] = None
    ) -> typing.List[typing.Dict[str, str]]:
        """
        Retrieve a list of items

        Parameters:
            - country: str.

            - freq: str.

            - partner_region: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/list_items"),
            params=remove_none_from_dict({"country": country, "freq": freq, "partner_region": partner_region}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[typing.Dict[str, str]], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_import_value(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve trade flow import data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_import_value"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_export_value(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve trade flow data export for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_export_value"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_import_volume(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve import volume trade flow data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_import_volume"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_export_volume(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve export volume trade flow data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_export_volume"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all_for_time(
        self,
        *,
        metric: str,
        year: str,
        month: typing.Optional[str] = None,
        quarter: typing.Optional[str] = None,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        get all items data for a particular country or all countries for a particular item in a single time period.

        Parameters:
            - metric: str.

            - year: str.

            - month: typing.Optional[str].

            - quarter: typing.Optional[str].

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - country: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_all_for_time"),
            params=remove_none_from_dict(
                {
                    "metric": metric,
                    "year": year,
                    "month": month,
                    "quarter": quarter,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "country": country,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTradeFlowClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_countries(self, *, freq: str) -> typing.List[str]:
        """
        Retrieve a list of countries

        Parameters:
            - freq: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/list_countries"),
            params=remove_none_from_dict({"freq": freq}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[str], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_items(
        self, *, country: str, freq: str, partner_region: typing.Optional[str] = None
    ) -> typing.List[typing.Dict[str, str]]:
        """
        Retrieve a list of items

        Parameters:
            - country: str.

            - freq: str.

            - partner_region: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/list_items"),
            params=remove_none_from_dict({"country": country, "freq": freq, "partner_region": partner_region}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[typing.Dict[str, str]], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_import_value(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve trade flow import data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_import_value"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_export_value(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve trade flow data export for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_export_value"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_import_volume(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve import volume trade flow data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_import_volume"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_export_volume(
        self,
        *,
        country: str,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        freq: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Retrieve export volume trade flow data for a given country and item or HS code

        Parameters:
            - country: str.

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - freq: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_export_volume"),
            params=remove_none_from_dict(
                {
                    "country": country,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "partner_region": partner_region,
                    "freq": freq,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all_for_time(
        self,
        *,
        metric: str,
        year: str,
        month: typing.Optional[str] = None,
        quarter: typing.Optional[str] = None,
        item: typing.Optional[str] = None,
        hs_6_code: typing.Optional[str] = None,
        country: typing.Optional[str] = None,
        partner_region: typing.Optional[str] = None,
        in_usd: typing.Optional[str] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        get all items data for a particular country or all countries for a particular item in a single time period.

        Parameters:
            - metric: str.

            - year: str.

            - month: typing.Optional[str].

            - quarter: typing.Optional[str].

            - item: typing.Optional[str].

            - hs_6_code: typing.Optional[str].

            - country: typing.Optional[str].

            - partner_region: typing.Optional[str].

            - in_usd: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "trade-flows/get_all_for_time"),
            params=remove_none_from_dict(
                {
                    "metric": metric,
                    "year": year,
                    "month": month,
                    "quarter": quarter,
                    "item": item,
                    "hs6_code": hs_6_code,
                    "country": country,
                    "partner_region": partner_region,
                    "in_usd": in_usd,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(str, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
