# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import GroTradeFlowEnvironment
from .resources.trade_flow.client import AsyncTradeFlowClient, TradeFlowClient


class GroTradeFlow:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GroTradeFlowEnvironment = GroTradeFlowEnvironment.PRODUCTION,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.trade_flow = TradeFlowClient(client_wrapper=self._client_wrapper)


class AsyncGroTradeFlow:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GroTradeFlowEnvironment = GroTradeFlowEnvironment.PRODUCTION,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.trade_flow = AsyncTradeFlowClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: GroTradeFlowEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
