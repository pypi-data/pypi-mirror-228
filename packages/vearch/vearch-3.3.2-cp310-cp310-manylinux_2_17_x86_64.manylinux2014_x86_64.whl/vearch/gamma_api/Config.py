# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers

class Config(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConfig(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Config()
        x.Init(buf, n + offset)
        return x

    # Config
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Config
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Config
    def LogDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Config
    def CacheInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CacheInfo import CacheInfo
            obj = CacheInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Config
    def CacheInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ConfigStart(builder): builder.StartObject(3)
def ConfigAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def ConfigAddLogDir(builder, logDir): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(logDir), 0)
def ConfigAddCacheInfos(builder, cacheInfos): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cacheInfos), 0)
def ConfigStartCacheInfosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ConfigEnd(builder): return builder.EndObject()
