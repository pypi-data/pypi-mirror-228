# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigvearch
else:
    import _swigvearch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigvearch.delete_SwigPyIterator

    def value(self):
        return _swigvearch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigvearch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigvearch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigvearch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigvearch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigvearch.SwigPyIterator_copy(self)

    def next(self):
        return _swigvearch.SwigPyIterator_next(self)

    def __next__(self):
        return _swigvearch.SwigPyIterator___next__(self)

    def previous(self):
        return _swigvearch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigvearch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigvearch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigvearch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigvearch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigvearch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigvearch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigvearch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swigvearch:
_swigvearch.SwigPyIterator_swigregister(SwigPyIterator)
class RawData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigvearch.delete_RawData

    def Serialize(self, out, out_len):
        return _swigvearch.RawData_Serialize(self, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.RawData_Deserialize(self, data, len)

# Register RawData in _swigvearch:
_swigvearch.RawData_swigregister(RawData)
class TermFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_swigvearch.TermFilter_field_get, _swigvearch.TermFilter_field_set)
    value = property(_swigvearch.TermFilter_value_get, _swigvearch.TermFilter_value_set)
    is_union = property(_swigvearch.TermFilter_is_union_get, _swigvearch.TermFilter_is_union_set)

    def __init__(self):
        _swigvearch.TermFilter_swiginit(self, _swigvearch.new_TermFilter())
    __swig_destroy__ = _swigvearch.delete_TermFilter

# Register TermFilter in _swigvearch:
_swigvearch.TermFilter_swigregister(TermFilter)
class RangeFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_swigvearch.RangeFilter_field_get, _swigvearch.RangeFilter_field_set)
    lower_value = property(_swigvearch.RangeFilter_lower_value_get, _swigvearch.RangeFilter_lower_value_set)
    upper_value = property(_swigvearch.RangeFilter_upper_value_get, _swigvearch.RangeFilter_upper_value_set)
    include_lower = property(_swigvearch.RangeFilter_include_lower_get, _swigvearch.RangeFilter_include_lower_set)
    include_upper = property(_swigvearch.RangeFilter_include_upper_get, _swigvearch.RangeFilter_include_upper_set)

    def __init__(self):
        _swigvearch.RangeFilter_swiginit(self, _swigvearch.new_RangeFilter())
    __swig_destroy__ = _swigvearch.delete_RangeFilter

# Register RangeFilter in _swigvearch:
_swigvearch.RangeFilter_swigregister(RangeFilter)
class VectorQuery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.VectorQuery_name_get, _swigvearch.VectorQuery_name_set)
    value = property(_swigvearch.VectorQuery_value_get, _swigvearch.VectorQuery_value_set)
    min_score = property(_swigvearch.VectorQuery_min_score_get, _swigvearch.VectorQuery_min_score_set)
    max_score = property(_swigvearch.VectorQuery_max_score_get, _swigvearch.VectorQuery_max_score_set)
    boost = property(_swigvearch.VectorQuery_boost_get, _swigvearch.VectorQuery_boost_set)
    has_boost = property(_swigvearch.VectorQuery_has_boost_get, _swigvearch.VectorQuery_has_boost_set)
    retrieval_type = property(_swigvearch.VectorQuery_retrieval_type_get, _swigvearch.VectorQuery_retrieval_type_set)

    def __init__(self):
        _swigvearch.VectorQuery_swiginit(self, _swigvearch.new_VectorQuery())
    __swig_destroy__ = _swigvearch.delete_VectorQuery

# Register VectorQuery in _swigvearch:
_swigvearch.VectorQuery_swigregister(VectorQuery)
class VectorResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.VectorResult_swiginit(self, _swigvearch.new_VectorResult())
    __swig_destroy__ = _swigvearch.delete_VectorResult

    def init(self, *args):
        return _swigvearch.VectorResult_init(self, *args)

    def seek(self, req_no, docid, score, source, len):
        return _swigvearch.VectorResult_seek(self, req_no, docid, score, source, len)

    def sort_by_docid(self):
        return _swigvearch.VectorResult_sort_by_docid(self)
    n = property(_swigvearch.VectorResult_n_get, _swigvearch.VectorResult_n_set)
    topn = property(_swigvearch.VectorResult_topn_get, _swigvearch.VectorResult_topn_set)
    dists = property(_swigvearch.VectorResult_dists_get, _swigvearch.VectorResult_dists_set)
    query = property(_swigvearch.VectorResult_query_get, _swigvearch.VectorResult_query_set)
    docids = property(_swigvearch.VectorResult_docids_get, _swigvearch.VectorResult_docids_set)
    sources = property(_swigvearch.VectorResult_sources_get, _swigvearch.VectorResult_sources_set)
    source_lens = property(_swigvearch.VectorResult_source_lens_get, _swigvearch.VectorResult_source_lens_set)
    total = property(_swigvearch.VectorResult_total_get, _swigvearch.VectorResult_total_set)
    idx = property(_swigvearch.VectorResult_idx_get, _swigvearch.VectorResult_idx_set)

# Register VectorResult in _swigvearch:
_swigvearch.VectorResult_swigregister(VectorResult)
class VectorDocField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.VectorDocField_name_get, _swigvearch.VectorDocField_name_set)
    score = property(_swigvearch.VectorDocField_score_get, _swigvearch.VectorDocField_score_set)
    source = property(_swigvearch.VectorDocField_source_get, _swigvearch.VectorDocField_source_set)
    source_len = property(_swigvearch.VectorDocField_source_len_get, _swigvearch.VectorDocField_source_len_set)

    def __init__(self):
        _swigvearch.VectorDocField_swiginit(self, _swigvearch.new_VectorDocField())
    __swig_destroy__ = _swigvearch.delete_VectorDocField

# Register VectorDocField in _swigvearch:
_swigvearch.VectorDocField_swigregister(VectorDocField)
class VectorDoc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.VectorDoc_swiginit(self, _swigvearch.new_VectorDoc())
    __swig_destroy__ = _swigvearch.delete_VectorDoc

    def init(self, vec_names, vec_num):
        return _swigvearch.VectorDoc_init(self, vec_names, vec_num)
    docid = property(_swigvearch.VectorDoc_docid_get, _swigvearch.VectorDoc_docid_set)
    score = property(_swigvearch.VectorDoc_score_get, _swigvearch.VectorDoc_score_set)
    fields = property(_swigvearch.VectorDoc_fields_get, _swigvearch.VectorDoc_fields_set)
    fields_len = property(_swigvearch.VectorDoc_fields_len_get, _swigvearch.VectorDoc_fields_len_set)

# Register VectorDoc in _swigvearch:
_swigvearch.VectorDoc_swigregister(VectorDoc)
class GammaResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.GammaResult_swiginit(self, _swigvearch.new_GammaResult())
    __swig_destroy__ = _swigvearch.delete_GammaResult

    def init(self, n, vec_names, vec_num):
        return _swigvearch.GammaResult_init(self, n, vec_names, vec_num)
    topn = property(_swigvearch.GammaResult_topn_get, _swigvearch.GammaResult_topn_set)
    total = property(_swigvearch.GammaResult_total_get, _swigvearch.GammaResult_total_set)
    results_count = property(_swigvearch.GammaResult_results_count_get, _swigvearch.GammaResult_results_count_set)
    docs = property(_swigvearch.GammaResult_docs_get, _swigvearch.GammaResult_docs_set)

# Register GammaResult in _swigvearch:
_swigvearch.GammaResult_swigregister(GammaResult)
class Request(RawData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.Request_swiginit(self, _swigvearch.new_Request())
    __swig_destroy__ = _swigvearch.delete_Request

    def Serialize(self, out, out_len):
        return _swigvearch.Request_Serialize(self, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.Request_Deserialize(self, data, len)

    def ReqNum(self):
        return _swigvearch.Request_ReqNum(self)

    def SetReqNum(self, req_num):
        return _swigvearch.Request_SetReqNum(self, req_num)

    def TopN(self):
        return _swigvearch.Request_TopN(self)

    def SetTopN(self, topn):
        return _swigvearch.Request_SetTopN(self, topn)

    def BruteForceSearch(self):
        return _swigvearch.Request_BruteForceSearch(self)

    def SetBruteForceSearch(self, brute_force_search):
        return _swigvearch.Request_SetBruteForceSearch(self, brute_force_search)

    def AddVectorQuery(self, vec_fields):
        return _swigvearch.Request_AddVectorQuery(self, vec_fields)

    def AddField(self, field):
        return _swigvearch.Request_AddField(self, field)

    def AddRangeFilter(self, range_filter):
        return _swigvearch.Request_AddRangeFilter(self, range_filter)

    def AddTermFilter(self, term_filter):
        return _swigvearch.Request_AddTermFilter(self, term_filter)

    def VecFields(self):
        return _swigvearch.Request_VecFields(self)

    def Fields(self):
        return _swigvearch.Request_Fields(self)

    def RangeFilters(self):
        return _swigvearch.Request_RangeFilters(self)

    def TermFilters(self):
        return _swigvearch.Request_TermFilters(self)

    def RetrievalParams(self):
        return _swigvearch.Request_RetrievalParams(self)

    def SetRetrievalParams(self, retrieval_params):
        return _swigvearch.Request_SetRetrievalParams(self, retrieval_params)

    def OnlineLogLevel(self):
        return _swigvearch.Request_OnlineLogLevel(self)

    def SetOnlineLogLevel(self, online_log_level):
        return _swigvearch.Request_SetOnlineLogLevel(self, online_log_level)

    def HasRank(self):
        return _swigvearch.Request_HasRank(self)

    def SetHasRank(self, has_rank):
        return _swigvearch.Request_SetHasRank(self, has_rank)

    def MultiVectorRank(self):
        return _swigvearch.Request_MultiVectorRank(self)

    def SetMultiVectorRank(self, multi_vector_rank):
        return _swigvearch.Request_SetMultiVectorRank(self, multi_vector_rank)

    def L2Sqrt(self):
        return _swigvearch.Request_L2Sqrt(self)

    def SetL2Sqrt(self, l2_sqrt):
        return _swigvearch.Request_SetL2Sqrt(self, l2_sqrt)

# Register Request in _swigvearch:
_swigvearch.Request_swigregister(Request)
SearchResultCode_SUCCESS = _swigvearch.SearchResultCode_SUCCESS
SearchResultCode_INDEX_NOT_TRAINED = _swigvearch.SearchResultCode_INDEX_NOT_TRAINED
SearchResultCode_SEARCH_ERROR = _swigvearch.SearchResultCode_SEARCH_ERROR
class ResultItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigvearch.ResultItem_swiginit(self, _swigvearch.new_ResultItem(*args))
    score = property(_swigvearch.ResultItem_score_get, _swigvearch.ResultItem_score_set)
    names = property(_swigvearch.ResultItem_names_get, _swigvearch.ResultItem_names_set)
    values = property(_swigvearch.ResultItem_values_get, _swigvearch.ResultItem_values_set)
    extra = property(_swigvearch.ResultItem_extra_get, _swigvearch.ResultItem_extra_set)
    __swig_destroy__ = _swigvearch.delete_ResultItem

# Register ResultItem in _swigvearch:
_swigvearch.ResultItem_swigregister(ResultItem)
class SearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigvearch.SearchResult_swiginit(self, _swigvearch.new_SearchResult(*args))
    total = property(_swigvearch.SearchResult_total_get, _swigvearch.SearchResult_total_set)
    result_code = property(_swigvearch.SearchResult_result_code_get, _swigvearch.SearchResult_result_code_set)
    msg = property(_swigvearch.SearchResult_msg_get, _swigvearch.SearchResult_msg_set)
    result_items = property(_swigvearch.SearchResult_result_items_get, _swigvearch.SearchResult_result_items_set)
    __swig_destroy__ = _swigvearch.delete_SearchResult

# Register SearchResult in _swigvearch:
_swigvearch.SearchResult_swigregister(SearchResult)
class Response(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.Response_swiginit(self, _swigvearch.new_Response())
    __swig_destroy__ = _swigvearch.delete_Response

    def Serialize(self, fields_name, out, out_len):
        return _swigvearch.Response_Serialize(self, fields_name, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.Response_Deserialize(self, data, len)

    def AddResults(self, *args):
        return _swigvearch.Response_AddResults(self, *args)

    def Results(self):
        return _swigvearch.Response_Results(self)

    def SetOnlineLogMessage(self, msg):
        return _swigvearch.Response_SetOnlineLogMessage(self, msg)

    def SetEngineInfo(self, table, vector_mgr, gamma_results, req_num):
        return _swigvearch.Response_SetEngineInfo(self, table, vector_mgr, gamma_results, req_num)

    def GetPerTool(self):
        return _swigvearch.Response_GetPerTool(self)

    def PackResults(self, fields_name):
        return _swigvearch.Response_PackResults(self, fields_name)

    def PackResultItem(self, vec_doc, fields_name, result_item):
        return _swigvearch.Response_PackResultItem(self, vec_doc, fields_name, result_item)

# Register Response in _swigvearch:
_swigvearch.Response_swigregister(Response)
DataType_INT = _swigvearch.DataType_INT
DataType_LONG = _swigvearch.DataType_LONG
DataType_FLOAT = _swigvearch.DataType_FLOAT
DataType_DOUBLE = _swigvearch.DataType_DOUBLE
DataType_STRING = _swigvearch.DataType_STRING
DataType_VECTOR = _swigvearch.DataType_VECTOR
class VectorInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.VectorInfo_name_get, _swigvearch.VectorInfo_name_set)
    data_type = property(_swigvearch.VectorInfo_data_type_get, _swigvearch.VectorInfo_data_type_set)
    is_index = property(_swigvearch.VectorInfo_is_index_get, _swigvearch.VectorInfo_is_index_set)
    dimension = property(_swigvearch.VectorInfo_dimension_get, _swigvearch.VectorInfo_dimension_set)
    model_id = property(_swigvearch.VectorInfo_model_id_get, _swigvearch.VectorInfo_model_id_set)
    store_type = property(_swigvearch.VectorInfo_store_type_get, _swigvearch.VectorInfo_store_type_set)
    store_param = property(_swigvearch.VectorInfo_store_param_get, _swigvearch.VectorInfo_store_param_set)
    has_source = property(_swigvearch.VectorInfo_has_source_get, _swigvearch.VectorInfo_has_source_set)

    def __init__(self):
        _swigvearch.VectorInfo_swiginit(self, _swigvearch.new_VectorInfo())
    __swig_destroy__ = _swigvearch.delete_VectorInfo

# Register VectorInfo in _swigvearch:
_swigvearch.VectorInfo_swigregister(VectorInfo)
class FieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.FieldInfo_name_get, _swigvearch.FieldInfo_name_set)
    data_type = property(_swigvearch.FieldInfo_data_type_get, _swigvearch.FieldInfo_data_type_set)
    is_index = property(_swigvearch.FieldInfo_is_index_get, _swigvearch.FieldInfo_is_index_set)

    def __init__(self):
        _swigvearch.FieldInfo_swiginit(self, _swigvearch.new_FieldInfo())
    __swig_destroy__ = _swigvearch.delete_FieldInfo

# Register FieldInfo in _swigvearch:
_swigvearch.FieldInfo_swigregister(FieldInfo)
class TableInfo(RawData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.TableInfo_swiginit(self, _swigvearch.new_TableInfo())

    def Serialize(self, out, out_len):
        return _swigvearch.TableInfo_Serialize(self, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.TableInfo_Deserialize(self, data, len)

    def Name(self):
        return _swigvearch.TableInfo_Name(self)

    def SetName(self, name):
        return _swigvearch.TableInfo_SetName(self, name)

    def IsCompress(self):
        return _swigvearch.TableInfo_IsCompress(self)

    def SetCompress(self, compress_mode):
        return _swigvearch.TableInfo_SetCompress(self, compress_mode)

    def Fields(self):
        return _swigvearch.TableInfo_Fields(self)

    def AddField(self, field):
        return _swigvearch.TableInfo_AddField(self, field)

    def VectorInfos(self):
        return _swigvearch.TableInfo_VectorInfos(self)

    def AddVectorInfo(self, vector_info):
        return _swigvearch.TableInfo_AddVectorInfo(self, vector_info)

    def IndexingSize(self):
        return _swigvearch.TableInfo_IndexingSize(self)

    def SetIndexingSize(self, indexing_size):
        return _swigvearch.TableInfo_SetIndexingSize(self, indexing_size)

    def RetrievalType(self):
        return _swigvearch.TableInfo_RetrievalType(self)

    def SetRetrievalType(self, retrieval_type):
        return _swigvearch.TableInfo_SetRetrievalType(self, retrieval_type)

    def RetrievalParam(self):
        return _swigvearch.TableInfo_RetrievalParam(self)

    def SetRetrievalParam(self, retrieval_param):
        return _swigvearch.TableInfo_SetRetrievalParam(self, retrieval_param)

    def Read(self, path):
        return _swigvearch.TableInfo_Read(self, path)

    def Write(self, path):
        return _swigvearch.TableInfo_Write(self, path)

    def RetrievalTypes(self):
        return _swigvearch.TableInfo_RetrievalTypes(self)

    def RetrievalParams(self):
        return _swigvearch.TableInfo_RetrievalParams(self)

    def SetRetrievalTypes(self, retrieval_types):
        return _swigvearch.TableInfo_SetRetrievalTypes(self, retrieval_types)

    def SetRetrievalParams(self, retrieval_params):
        return _swigvearch.TableInfo_SetRetrievalParams(self, retrieval_params)
    __swig_destroy__ = _swigvearch.delete_TableInfo

# Register TableInfo in _swigvearch:
_swigvearch.TableInfo_swigregister(TableInfo)
class Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_swigvearch.Field_name_get, _swigvearch.Field_name_set)
    value = property(_swigvearch.Field_value_get, _swigvearch.Field_value_set)
    source = property(_swigvearch.Field_source_get, _swigvearch.Field_source_set)
    datatype = property(_swigvearch.Field_datatype_get, _swigvearch.Field_datatype_set)

    def __init__(self, *args):
        _swigvearch.Field_swiginit(self, _swigvearch.new_Field(*args))
    __swig_destroy__ = _swigvearch.delete_Field

# Register Field in _swigvearch:
_swigvearch.Field_swigregister(Field)
class Doc(RawData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigvearch.Doc_swiginit(self, _swigvearch.new_Doc(*args))

    def Serialize(self, out, out_len):
        return _swigvearch.Doc_Serialize(self, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.Doc_Deserialize(self, data, len)

    def AddField(self, *args):
        return _swigvearch.Doc_AddField(self, *args)

    def Key(self):
        return _swigvearch.Doc_Key(self)

    def SetKey(self, key):
        return _swigvearch.Doc_SetKey(self, key)

    def TableFields(self):
        return _swigvearch.Doc_TableFields(self)

    def VectorFields(self):
        return _swigvearch.Doc_VectorFields(self)

    def SetEngine(self, engine):
        return _swigvearch.Doc_SetEngine(self, engine)
    __swig_destroy__ = _swigvearch.delete_Doc

# Register Doc in _swigvearch:
_swigvearch.Doc_swigregister(Doc)
class Docs(RawData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigvearch.Docs_swiginit(self, _swigvearch.new_Docs())

    def Serialize(self, *args):
        return _swigvearch.Docs_Serialize(self, *args)

    def Deserialize(self, *args):
        return _swigvearch.Docs_Deserialize(self, *args)

    def AddDoc(self, *args):
        return _swigvearch.Docs_AddDoc(self, *args)

    def Reserve(self, size):
        return _swigvearch.Docs_Reserve(self, size)

    def GetDocs(self):
        return _swigvearch.Docs_GetDocs(self)

    def SetEngine(self, engine):
        return _swigvearch.Docs_SetEngine(self, engine)
    __swig_destroy__ = _swigvearch.delete_Docs

# Register Docs in _swigvearch:
_swigvearch.Docs_swigregister(Docs)
class BatchResult(RawData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigvearch.BatchResult_swiginit(self, _swigvearch.new_BatchResult(*args))

    def Serialize(self, out, out_len):
        return _swigvearch.BatchResult_Serialize(self, out, out_len)

    def Deserialize(self, data, len):
        return _swigvearch.BatchResult_Deserialize(self, data, len)

    def SetResult(self, i, code, msg):
        return _swigvearch.BatchResult_SetResult(self, i, code, msg)

    def Code(self, i):
        return _swigvearch.BatchResult_Code(self, i)

    def Msg(self, i):
        return _swigvearch.BatchResult_Msg(self, i)
    __swig_destroy__ = _swigvearch.delete_BatchResult

# Register BatchResult in _swigvearch:
_swigvearch.BatchResult_swigregister(BatchResult)

def CPPSearch(engine, request, response):
    return _swigvearch.CPPSearch(engine, request, response)

def CPPSearch2(engine, result):
    return _swigvearch.CPPSearch2(engine, result)

def CPPAddOrUpdateDoc(engine, doc):
    return _swigvearch.CPPAddOrUpdateDoc(engine, doc)

def CPPAddOrUpdateDocs(engine, docs, results):
    return _swigvearch.CPPAddOrUpdateDocs(engine, docs, results)

def CPPAddOrUpdateDocs2(engine, docs, data, results):
    return _swigvearch.CPPAddOrUpdateDocs2(engine, docs, data, results)

def CPPSetNprobe(engine, nprobe, index_type):
    return _swigvearch.CPPSetNprobe(engine, nprobe, index_type)

def CPPSetRerank(engine, rerank, index_type):
    return _swigvearch.CPPSetRerank(engine, rerank, index_type)

def swigInitEngine(pConfig, len):
    return _swigvearch.swigInitEngine(pConfig, len)

def swigClose(engine):
    return _swigvearch.swigClose(engine)

def swigCreateTable(engine, pTable, len):
    return _swigvearch.swigCreateTable(engine, pTable, len)

def swigAddOrUpdateDoc(engine, pDoc, len):
    return _swigvearch.swigAddOrUpdateDoc(engine, pDoc, len)

def swigUpdateDoc(engine, pDoc, len):
    return _swigvearch.swigUpdateDoc(engine, pDoc, len)

def swigGetEngineStatus(engine):
    return _swigvearch.swigGetEngineStatus(engine)

def swigGetDocByID(engine, docid, docid_len):
    return _swigvearch.swigGetDocByID(engine, docid, docid_len)

def swigGetDocByDocID(engine, docid):
    return _swigvearch.swigGetDocByDocID(engine, docid)

def swigBuildIndex(engine):
    return _swigvearch.swigBuildIndex(engine)

def swigDump(engine):
    return _swigvearch.swigDump(engine)

def swigLoad(engine):
    return _swigvearch.swigLoad(engine)

def swigSearch(engine, pRequest, req_len):
    return _swigvearch.swigSearch(engine, pRequest, req_len)

def swigCreateRequest():
    return _swigvearch.swigCreateRequest()

def swigDeleteRequest(request):
    return _swigvearch.swigDeleteRequest(request)

def swigCreateResponse():
    return _swigvearch.swigCreateResponse()

def swigDeleteResponse(response):
    return _swigvearch.swigDeleteResponse(response)

def CreateVectorField(name, data, len, source, data_type):
    return _swigvearch.CreateVectorField(name, data, len, source, data_type)

def swigCreateDoc():
    return _swigvearch.swigCreateDoc()

def swigDeleteDoc(*args):
    return _swigvearch.swigDeleteDoc(*args)

def CreateTermFilter(name, value, is_union):
    return _swigvearch.CreateTermFilter(name, value, is_union)

def CreateRangeFilter(name, lower_value, lower_value_len, upper_value, upper_value_len, include_lower, include_upper):
    return _swigvearch.CreateRangeFilter(name, lower_value, lower_value_len, upper_value, upper_value_len, include_lower, include_upper)

def CreateVectorQuery(name, data, len, min_score, max_score, boost, has_boost, retrieval_type):
    return _swigvearch.CreateVectorQuery(name, data, len, min_score, max_score, boost, has_boost, retrieval_type)

def swigSearchCPP(engine, request, response):
    return _swigvearch.swigSearchCPP(engine, request, response)

def swigAddOrUpdateDocCPP(engine, doc):
    return _swigvearch.swigAddOrUpdateDocCPP(engine, doc)

def swigCreateBatchResult(len):
    return _swigvearch.swigCreateBatchResult(len)

def swigDeleteBatchResult(results):
    return _swigvearch.swigDeleteBatchResult(results)

def swigAddOrUpdateDocsCPP(engine, docs, results):
    return _swigvearch.swigAddOrUpdateDocsCPP(engine, docs, results)

def swigGetVectorPtr(v):
    return _swigvearch.swigGetVectorPtr(v)

def memcpy(dest, src, n):
    return _swigvearch.memcpy(dest, src, n)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.IntVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.IntVector___bool__(self)

    def __len__(self):
        return _swigvearch.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.IntVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.IntVector_pop(self)

    def append(self, x):
        return _swigvearch.IntVector_append(self, x)

    def empty(self):
        return _swigvearch.IntVector_empty(self)

    def size(self):
        return _swigvearch.IntVector_size(self)

    def swap(self, v):
        return _swigvearch.IntVector_swap(self, v)

    def begin(self):
        return _swigvearch.IntVector_begin(self)

    def end(self):
        return _swigvearch.IntVector_end(self)

    def rbegin(self):
        return _swigvearch.IntVector_rbegin(self)

    def rend(self):
        return _swigvearch.IntVector_rend(self)

    def clear(self):
        return _swigvearch.IntVector_clear(self)

    def get_allocator(self):
        return _swigvearch.IntVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.IntVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.IntVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.IntVector_swiginit(self, _swigvearch.new_IntVector(*args))

    def push_back(self, x):
        return _swigvearch.IntVector_push_back(self, x)

    def front(self):
        return _swigvearch.IntVector_front(self)

    def back(self):
        return _swigvearch.IntVector_back(self)

    def assign(self, n, x):
        return _swigvearch.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.IntVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.IntVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.IntVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.IntVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_IntVector

# Register IntVector in _swigvearch:
_swigvearch.IntVector_swigregister(IntVector)
class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.LongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.LongVector___bool__(self)

    def __len__(self):
        return _swigvearch.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.LongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.LongVector_pop(self)

    def append(self, x):
        return _swigvearch.LongVector_append(self, x)

    def empty(self):
        return _swigvearch.LongVector_empty(self)

    def size(self):
        return _swigvearch.LongVector_size(self)

    def swap(self, v):
        return _swigvearch.LongVector_swap(self, v)

    def begin(self):
        return _swigvearch.LongVector_begin(self)

    def end(self):
        return _swigvearch.LongVector_end(self)

    def rbegin(self):
        return _swigvearch.LongVector_rbegin(self)

    def rend(self):
        return _swigvearch.LongVector_rend(self)

    def clear(self):
        return _swigvearch.LongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.LongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.LongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.LongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.LongVector_swiginit(self, _swigvearch.new_LongVector(*args))

    def push_back(self, x):
        return _swigvearch.LongVector_push_back(self, x)

    def front(self):
        return _swigvearch.LongVector_front(self)

    def back(self):
        return _swigvearch.LongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.LongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.LongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.LongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.LongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_LongVector

# Register LongVector in _swigvearch:
_swigvearch.LongVector_swigregister(LongVector)
class ULongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.ULongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.ULongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.ULongVector___bool__(self)

    def __len__(self):
        return _swigvearch.ULongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.ULongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.ULongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.ULongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.ULongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.ULongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.ULongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.ULongVector_pop(self)

    def append(self, x):
        return _swigvearch.ULongVector_append(self, x)

    def empty(self):
        return _swigvearch.ULongVector_empty(self)

    def size(self):
        return _swigvearch.ULongVector_size(self)

    def swap(self, v):
        return _swigvearch.ULongVector_swap(self, v)

    def begin(self):
        return _swigvearch.ULongVector_begin(self)

    def end(self):
        return _swigvearch.ULongVector_end(self)

    def rbegin(self):
        return _swigvearch.ULongVector_rbegin(self)

    def rend(self):
        return _swigvearch.ULongVector_rend(self)

    def clear(self):
        return _swigvearch.ULongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.ULongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.ULongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.ULongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.ULongVector_swiginit(self, _swigvearch.new_ULongVector(*args))

    def push_back(self, x):
        return _swigvearch.ULongVector_push_back(self, x)

    def front(self):
        return _swigvearch.ULongVector_front(self)

    def back(self):
        return _swigvearch.ULongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.ULongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.ULongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.ULongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.ULongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.ULongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_ULongVector

# Register ULongVector in _swigvearch:
_swigvearch.ULongVector_swigregister(ULongVector)
class CharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.CharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.CharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.CharVector___bool__(self)

    def __len__(self):
        return _swigvearch.CharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.CharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.CharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.CharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.CharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.CharVector_pop(self)

    def append(self, x):
        return _swigvearch.CharVector_append(self, x)

    def empty(self):
        return _swigvearch.CharVector_empty(self)

    def size(self):
        return _swigvearch.CharVector_size(self)

    def swap(self, v):
        return _swigvearch.CharVector_swap(self, v)

    def begin(self):
        return _swigvearch.CharVector_begin(self)

    def end(self):
        return _swigvearch.CharVector_end(self)

    def rbegin(self):
        return _swigvearch.CharVector_rbegin(self)

    def rend(self):
        return _swigvearch.CharVector_rend(self)

    def clear(self):
        return _swigvearch.CharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.CharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.CharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.CharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.CharVector_swiginit(self, _swigvearch.new_CharVector(*args))

    def push_back(self, x):
        return _swigvearch.CharVector_push_back(self, x)

    def front(self):
        return _swigvearch.CharVector_front(self)

    def back(self):
        return _swigvearch.CharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.CharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.CharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.CharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.CharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.CharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_CharVector

# Register CharVector in _swigvearch:
_swigvearch.CharVector_swigregister(CharVector)
class UCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.UCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.UCharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.UCharVector___bool__(self)

    def __len__(self):
        return _swigvearch.UCharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.UCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.UCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.UCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.UCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.UCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.UCharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.UCharVector_pop(self)

    def append(self, x):
        return _swigvearch.UCharVector_append(self, x)

    def empty(self):
        return _swigvearch.UCharVector_empty(self)

    def size(self):
        return _swigvearch.UCharVector_size(self)

    def swap(self, v):
        return _swigvearch.UCharVector_swap(self, v)

    def begin(self):
        return _swigvearch.UCharVector_begin(self)

    def end(self):
        return _swigvearch.UCharVector_end(self)

    def rbegin(self):
        return _swigvearch.UCharVector_rbegin(self)

    def rend(self):
        return _swigvearch.UCharVector_rend(self)

    def clear(self):
        return _swigvearch.UCharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.UCharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.UCharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.UCharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.UCharVector_swiginit(self, _swigvearch.new_UCharVector(*args))

    def push_back(self, x):
        return _swigvearch.UCharVector_push_back(self, x)

    def front(self):
        return _swigvearch.UCharVector_front(self)

    def back(self):
        return _swigvearch.UCharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.UCharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.UCharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.UCharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.UCharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.UCharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_UCharVector

# Register UCharVector in _swigvearch:
_swigvearch.UCharVector_swigregister(UCharVector)
class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.FloatVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.FloatVector___bool__(self)

    def __len__(self):
        return _swigvearch.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.FloatVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.FloatVector_pop(self)

    def append(self, x):
        return _swigvearch.FloatVector_append(self, x)

    def empty(self):
        return _swigvearch.FloatVector_empty(self)

    def size(self):
        return _swigvearch.FloatVector_size(self)

    def swap(self, v):
        return _swigvearch.FloatVector_swap(self, v)

    def begin(self):
        return _swigvearch.FloatVector_begin(self)

    def end(self):
        return _swigvearch.FloatVector_end(self)

    def rbegin(self):
        return _swigvearch.FloatVector_rbegin(self)

    def rend(self):
        return _swigvearch.FloatVector_rend(self)

    def clear(self):
        return _swigvearch.FloatVector_clear(self)

    def get_allocator(self):
        return _swigvearch.FloatVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.FloatVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.FloatVector_swiginit(self, _swigvearch.new_FloatVector(*args))

    def push_back(self, x):
        return _swigvearch.FloatVector_push_back(self, x)

    def front(self):
        return _swigvearch.FloatVector_front(self)

    def back(self):
        return _swigvearch.FloatVector_back(self)

    def assign(self, n, x):
        return _swigvearch.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.FloatVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.FloatVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_FloatVector

# Register FloatVector in _swigvearch:
_swigvearch.FloatVector_swigregister(FloatVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.DoubleVector___bool__(self)

    def __len__(self):
        return _swigvearch.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.DoubleVector_pop(self)

    def append(self, x):
        return _swigvearch.DoubleVector_append(self, x)

    def empty(self):
        return _swigvearch.DoubleVector_empty(self)

    def size(self):
        return _swigvearch.DoubleVector_size(self)

    def swap(self, v):
        return _swigvearch.DoubleVector_swap(self, v)

    def begin(self):
        return _swigvearch.DoubleVector_begin(self)

    def end(self):
        return _swigvearch.DoubleVector_end(self)

    def rbegin(self):
        return _swigvearch.DoubleVector_rbegin(self)

    def rend(self):
        return _swigvearch.DoubleVector_rend(self)

    def clear(self):
        return _swigvearch.DoubleVector_clear(self)

    def get_allocator(self):
        return _swigvearch.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.DoubleVector_swiginit(self, _swigvearch.new_DoubleVector(*args))

    def push_back(self, x):
        return _swigvearch.DoubleVector_push_back(self, x)

    def front(self):
        return _swigvearch.DoubleVector_front(self)

    def back(self):
        return _swigvearch.DoubleVector_back(self)

    def assign(self, n, x):
        return _swigvearch.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.DoubleVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.DoubleVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_DoubleVector

# Register DoubleVector in _swigvearch:
_swigvearch.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.StringVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.StringVector___bool__(self)

    def __len__(self):
        return _swigvearch.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.StringVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.StringVector_pop(self)

    def append(self, x):
        return _swigvearch.StringVector_append(self, x)

    def empty(self):
        return _swigvearch.StringVector_empty(self)

    def size(self):
        return _swigvearch.StringVector_size(self)

    def swap(self, v):
        return _swigvearch.StringVector_swap(self, v)

    def begin(self):
        return _swigvearch.StringVector_begin(self)

    def end(self):
        return _swigvearch.StringVector_end(self)

    def rbegin(self):
        return _swigvearch.StringVector_rbegin(self)

    def rend(self):
        return _swigvearch.StringVector_rend(self)

    def clear(self):
        return _swigvearch.StringVector_clear(self)

    def get_allocator(self):
        return _swigvearch.StringVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.StringVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.StringVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.StringVector_swiginit(self, _swigvearch.new_StringVector(*args))

    def push_back(self, x):
        return _swigvearch.StringVector_push_back(self, x)

    def front(self):
        return _swigvearch.StringVector_front(self)

    def back(self):
        return _swigvearch.StringVector_back(self)

    def assign(self, n, x):
        return _swigvearch.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.StringVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.StringVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.StringVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.StringVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_StringVector

# Register StringVector in _swigvearch:
_swigvearch.StringVector_swigregister(StringVector)
class SearchResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.SearchResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.SearchResultVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.SearchResultVector___bool__(self)

    def __len__(self):
        return _swigvearch.SearchResultVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.SearchResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.SearchResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.SearchResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.SearchResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.SearchResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.SearchResultVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.SearchResultVector_pop(self)

    def append(self, x):
        return _swigvearch.SearchResultVector_append(self, x)

    def empty(self):
        return _swigvearch.SearchResultVector_empty(self)

    def size(self):
        return _swigvearch.SearchResultVector_size(self)

    def swap(self, v):
        return _swigvearch.SearchResultVector_swap(self, v)

    def begin(self):
        return _swigvearch.SearchResultVector_begin(self)

    def end(self):
        return _swigvearch.SearchResultVector_end(self)

    def rbegin(self):
        return _swigvearch.SearchResultVector_rbegin(self)

    def rend(self):
        return _swigvearch.SearchResultVector_rend(self)

    def clear(self):
        return _swigvearch.SearchResultVector_clear(self)

    def get_allocator(self):
        return _swigvearch.SearchResultVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.SearchResultVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.SearchResultVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.SearchResultVector_swiginit(self, _swigvearch.new_SearchResultVector(*args))

    def push_back(self, x):
        return _swigvearch.SearchResultVector_push_back(self, x)

    def front(self):
        return _swigvearch.SearchResultVector_front(self)

    def back(self):
        return _swigvearch.SearchResultVector_back(self)

    def assign(self, n, x):
        return _swigvearch.SearchResultVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.SearchResultVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.SearchResultVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.SearchResultVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.SearchResultVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_SearchResultVector

# Register SearchResultVector in _swigvearch:
_swigvearch.SearchResultVector_swigregister(SearchResultVector)
class ResultItemVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.ResultItemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.ResultItemVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.ResultItemVector___bool__(self)

    def __len__(self):
        return _swigvearch.ResultItemVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.ResultItemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.ResultItemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.ResultItemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.ResultItemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.ResultItemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.ResultItemVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.ResultItemVector_pop(self)

    def append(self, x):
        return _swigvearch.ResultItemVector_append(self, x)

    def empty(self):
        return _swigvearch.ResultItemVector_empty(self)

    def size(self):
        return _swigvearch.ResultItemVector_size(self)

    def swap(self, v):
        return _swigvearch.ResultItemVector_swap(self, v)

    def begin(self):
        return _swigvearch.ResultItemVector_begin(self)

    def end(self):
        return _swigvearch.ResultItemVector_end(self)

    def rbegin(self):
        return _swigvearch.ResultItemVector_rbegin(self)

    def rend(self):
        return _swigvearch.ResultItemVector_rend(self)

    def clear(self):
        return _swigvearch.ResultItemVector_clear(self)

    def get_allocator(self):
        return _swigvearch.ResultItemVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.ResultItemVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.ResultItemVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.ResultItemVector_swiginit(self, _swigvearch.new_ResultItemVector(*args))

    def push_back(self, x):
        return _swigvearch.ResultItemVector_push_back(self, x)

    def front(self):
        return _swigvearch.ResultItemVector_front(self)

    def back(self):
        return _swigvearch.ResultItemVector_back(self)

    def assign(self, n, x):
        return _swigvearch.ResultItemVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.ResultItemVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.ResultItemVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.ResultItemVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.ResultItemVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_ResultItemVector

# Register ResultItemVector in _swigvearch:
_swigvearch.ResultItemVector_swigregister(ResultItemVector)
class DocVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.DocVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.DocVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.DocVector___bool__(self)

    def __len__(self):
        return _swigvearch.DocVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.DocVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.DocVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.DocVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.DocVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.DocVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.DocVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.DocVector_pop(self)

    def append(self, x):
        return _swigvearch.DocVector_append(self, x)

    def empty(self):
        return _swigvearch.DocVector_empty(self)

    def size(self):
        return _swigvearch.DocVector_size(self)

    def swap(self, v):
        return _swigvearch.DocVector_swap(self, v)

    def begin(self):
        return _swigvearch.DocVector_begin(self)

    def end(self):
        return _swigvearch.DocVector_end(self)

    def rbegin(self):
        return _swigvearch.DocVector_rbegin(self)

    def rend(self):
        return _swigvearch.DocVector_rend(self)

    def clear(self):
        return _swigvearch.DocVector_clear(self)

    def get_allocator(self):
        return _swigvearch.DocVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.DocVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.DocVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.DocVector_swiginit(self, _swigvearch.new_DocVector(*args))

    def push_back(self, x):
        return _swigvearch.DocVector_push_back(self, x)

    def front(self):
        return _swigvearch.DocVector_front(self)

    def back(self):
        return _swigvearch.DocVector_back(self)

    def assign(self, n, x):
        return _swigvearch.DocVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.DocVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.DocVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.DocVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.DocVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_DocVector

# Register DocVector in _swigvearch:
_swigvearch.DocVector_swigregister(DocVector)
class FieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.FieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.FieldVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.FieldVector___bool__(self)

    def __len__(self):
        return _swigvearch.FieldVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.FieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.FieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.FieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.FieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.FieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.FieldVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.FieldVector_pop(self)

    def append(self, x):
        return _swigvearch.FieldVector_append(self, x)

    def empty(self):
        return _swigvearch.FieldVector_empty(self)

    def size(self):
        return _swigvearch.FieldVector_size(self)

    def swap(self, v):
        return _swigvearch.FieldVector_swap(self, v)

    def begin(self):
        return _swigvearch.FieldVector_begin(self)

    def end(self):
        return _swigvearch.FieldVector_end(self)

    def rbegin(self):
        return _swigvearch.FieldVector_rbegin(self)

    def rend(self):
        return _swigvearch.FieldVector_rend(self)

    def clear(self):
        return _swigvearch.FieldVector_clear(self)

    def get_allocator(self):
        return _swigvearch.FieldVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.FieldVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.FieldVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.FieldVector_swiginit(self, _swigvearch.new_FieldVector(*args))

    def push_back(self, x):
        return _swigvearch.FieldVector_push_back(self, x)

    def front(self):
        return _swigvearch.FieldVector_front(self)

    def back(self):
        return _swigvearch.FieldVector_back(self)

    def assign(self, n, x):
        return _swigvearch.FieldVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.FieldVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.FieldVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.FieldVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.FieldVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_FieldVector

# Register FieldVector in _swigvearch:
_swigvearch.FieldVector_swigregister(FieldVector)

def CreateStringScalarField(name, value, len, source, data_type):
    return _swigvearch.CreateStringScalarField(name, value, len, source, data_type)

def CreateIntScalarField(name, value, len, source, data_type):
    return _swigvearch.CreateIntScalarField(name, value, len, source, data_type)

def CreateLongScalarField(name, value, len, source, data_type):
    return _swigvearch.CreateLongScalarField(name, value, len, source, data_type)

def CreateFloatScalarField(name, value, len, source, data_type):
    return _swigvearch.CreateFloatScalarField(name, value, len, source, data_type)

def CreateDouleScalarField(name, value, len, source, data_type):
    return _swigvearch.CreateDouleScalarField(name, value, len, source, data_type)

def GetIntFromStringVector(value, index, data_type):
    return _swigvearch.GetIntFromStringVector(value, index, data_type)

def GetLongFromStringVector(value, index, data_type):
    return _swigvearch.GetLongFromStringVector(value, index, data_type)

def GetFloatFromStringVector(value, index, data_type):
    return _swigvearch.GetFloatFromStringVector(value, index, data_type)

def GetDoubleFromStringVector(value, index, data_type):
    return _swigvearch.GetDoubleFromStringVector(value, index, data_type)

def GetCharVectorFromStringVector(value, index, is_binary):
    return _swigvearch.GetCharVectorFromStringVector(value, index, is_binary)

def GetFloatVectorFromStringVector(value, index, is_binary):
    return _swigvearch.GetFloatVectorFromStringVector(value, index, is_binary)

def swig_ptr(a):
    return _swigvearch.swig_ptr(a)

def rev_swig_ptr(*args):
    return _swigvearch.rev_swig_ptr(*args)

