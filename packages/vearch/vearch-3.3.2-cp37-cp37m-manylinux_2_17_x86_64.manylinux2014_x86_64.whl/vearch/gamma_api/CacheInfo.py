# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers

class CacheInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCacheInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CacheInfo()
        x.Init(buf, n + offset)
        return x

    # CacheInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CacheInfo
    def FieldName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CacheInfo
    def CacheSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CacheInfoStart(builder): builder.StartObject(2)
def CacheInfoAddFieldName(builder, fieldName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fieldName), 0)
def CacheInfoAddCacheSize(builder, cacheSize): builder.PrependInt32Slot(1, cacheSize, 0)
def CacheInfoEnd(builder): return builder.EndObject()
