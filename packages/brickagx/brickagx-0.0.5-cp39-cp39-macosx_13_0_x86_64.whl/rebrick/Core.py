# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CoreSwig
else:
    import _CoreSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _CoreSwig.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreSwig.delete_SwigPyIterator

    def value(self):
        return _CoreSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CoreSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CoreSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CoreSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CoreSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CoreSwig.SwigPyIterator_copy(self)

    def next(self):
        return _CoreSwig.SwigPyIterator_next(self)

    def __next__(self):
        return _CoreSwig.SwigPyIterator___next__(self)

    def previous(self):
        return _CoreSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CoreSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CoreSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CoreSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CoreSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CoreSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CoreSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CoreSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CoreSwig:
_CoreSwig.SwigPyIterator_swigregister(SwigPyIterator)

class Token(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_CoreSwig.Token_type_get, _CoreSwig.Token_type_set)
    lexeme = property(_CoreSwig.Token_lexeme_get, _CoreSwig.Token_lexeme_set)
    line = property(_CoreSwig.Token_line_get, _CoreSwig.Token_line_set)
    column = property(_CoreSwig.Token_column_get, _CoreSwig.Token_column_set)

    def __init__(self, *args):
        _CoreSwig.Token_swiginit(self, _CoreSwig.new_Token(*args))

    @staticmethod
    def Uninitialized():
        return _CoreSwig.Token_Uninitialized()

    @staticmethod
    def Invalid():
        return _CoreSwig.Token_Invalid()

    @staticmethod
    def Identifier(lexeme):
        return _CoreSwig.Token_Identifier(lexeme)

    @staticmethod
    def _None():
        return _CoreSwig.Token__None()
    __swig_destroy__ = _CoreSwig.delete_Token

# Register Token in _CoreSwig:
_CoreSwig.Token_swigregister(Token)

def Token_Uninitialized():
    return _CoreSwig.Token_Uninitialized()

def Token_Invalid():
    return _CoreSwig.Token_Invalid()

def Token_Identifier(lexeme):
    return _CoreSwig.Token_Identifier(lexeme)

def Token__None():
    return _CoreSwig.Token__None()

NodeType_Document = _CoreSwig.NodeType_Document
NodeType_ModelDeclaration = _CoreSwig.NodeType_ModelDeclaration
NodeType_VarDeclaration = _CoreSwig.NodeType_VarDeclaration
NodeType_VarAssignment = _CoreSwig.NodeType_VarAssignment
NodeType_BinaryOp = _CoreSwig.NodeType_BinaryOp
NodeType_ModelInitializer = _CoreSwig.NodeType_ModelInitializer
NodeType_MethodDeclaration = _CoreSwig.NodeType_MethodDeclaration
NodeType_Parameter = _CoreSwig.NodeType_Parameter
NodeType_Array = _CoreSwig.NodeType_Array
NodeType_ArrayType = _CoreSwig.NodeType_ArrayType
NodeType_Constant = _CoreSwig.NodeType_Constant
NodeType_Call = _CoreSwig.NodeType_Call
NodeType_MemberAccess = _CoreSwig.NodeType_MemberAccess
NodeType_PrimitiveType = _CoreSwig.NodeType_PrimitiveType
NodeType_Unary = _CoreSwig.NodeType_Unary
NodeType_Indexing = _CoreSwig.NodeType_Indexing
NodeType_OperatorOverload = _CoreSwig.NodeType_OperatorOverload
NodeType_Annotation = _CoreSwig.NodeType_Annotation
class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNodeType(self):
        return _CoreSwig.Node_getNodeType(self)

    def isValid(self):
        return _CoreSwig.Node_isValid(self)

    def setValid(self, valid):
        return _CoreSwig.Node_setValid(self, valid)

    def isDocument(self):
        return _CoreSwig.Node_isDocument(self)

    def isModelDeclaration(self):
        return _CoreSwig.Node_isModelDeclaration(self)

    def isVarDeclaration(self):
        return _CoreSwig.Node_isVarDeclaration(self)

    def isVarAssignment(self):
        return _CoreSwig.Node_isVarAssignment(self)

    def isMethodDeclaration(self):
        return _CoreSwig.Node_isMethodDeclaration(self)

    def isParameter(self):
        return _CoreSwig.Node_isParameter(self)

    def isConstant(self):
        return _CoreSwig.Node_isConstant(self)

    def isBinaryOp(self):
        return _CoreSwig.Node_isBinaryOp(self)

    def isModelInitializer(self):
        return _CoreSwig.Node_isModelInitializer(self)

    def isArray(self):
        return _CoreSwig.Node_isArray(self)

    def isArrayType(self):
        return _CoreSwig.Node_isArrayType(self)

    def isUnary(self):
        return _CoreSwig.Node_isUnary(self)

    def isMemberAccess(self):
        return _CoreSwig.Node_isMemberAccess(self)

    def isCall(self):
        return _CoreSwig.Node_isCall(self)

    def isPrimitiveType(self):
        return _CoreSwig.Node_isPrimitiveType(self)

    def isType(self):
        return _CoreSwig.Node_isType(self)

    def isIndexing(self):
        return _CoreSwig.Node_isIndexing(self)

    def isOperatorOverload(self):
        return _CoreSwig.Node_isOperatorOverload(self)

    def isAnnotation(self):
        return _CoreSwig.Node_isAnnotation(self)

    def asDocument(self):
        return _CoreSwig.Node_asDocument(self)

    def asModelDeclaration(self):
        return _CoreSwig.Node_asModelDeclaration(self)

    def asVarDeclaration(self):
        return _CoreSwig.Node_asVarDeclaration(self)

    def asVarAssignment(self):
        return _CoreSwig.Node_asVarAssignment(self)

    def asMethodDeclaration(self):
        return _CoreSwig.Node_asMethodDeclaration(self)

    def asParameter(self):
        return _CoreSwig.Node_asParameter(self)

    def asConstant(self):
        return _CoreSwig.Node_asConstant(self)

    def asBinaryOp(self):
        return _CoreSwig.Node_asBinaryOp(self)

    def asModelInitializer(self):
        return _CoreSwig.Node_asModelInitializer(self)

    def asUnary(self):
        return _CoreSwig.Node_asUnary(self)

    def asArray(self):
        return _CoreSwig.Node_asArray(self)

    def asArrayType(self):
        return _CoreSwig.Node_asArrayType(self)

    def asMemberAccess(self):
        return _CoreSwig.Node_asMemberAccess(self)

    def asCall(self):
        return _CoreSwig.Node_asCall(self)

    def asPrimitiveType(self):
        return _CoreSwig.Node_asPrimitiveType(self)

    def asType(self):
        return _CoreSwig.Node_asType(self)

    def asIndexing(self):
        return _CoreSwig.Node_asIndexing(self)

    def asOperatorOverload(self):
        return _CoreSwig.Node_asOperatorOverload(self)

    def asAnnotation(self):
        return _CoreSwig.Node_asAnnotation(self)

    def accept(self, visitor):
        return _CoreSwig.Node_accept(self, visitor)
    __swig_destroy__ = _CoreSwig.delete_Node

    @staticmethod
    def segmentsAsString(segments):
        return _CoreSwig.Node_segmentsAsString(segments)

# Register Node in _CoreSwig:
_CoreSwig.Node_swigregister(Node)

def Node_segmentsAsString(segments):
    return _CoreSwig.Node_segmentsAsString(segments)

class ModelDeclaration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(name_token, parent_segments, annotations, members):
        return _CoreSwig.ModelDeclaration_create(name_token, parent_segments, annotations, members)

    def asModelDeclaration(self):
        return _CoreSwig.ModelDeclaration_asModelDeclaration(self)

    def asType(self):
        return _CoreSwig.ModelDeclaration_asType(self)

    def accept(self, visitor):
        return _CoreSwig.ModelDeclaration_accept(self, visitor)

    def isAssignableTo(self, other):
        return _CoreSwig.ModelDeclaration_isAssignableTo(self, other)

    def toString(self):
        return _CoreSwig.ModelDeclaration_toString(self)

    def toKey(self):
        return _CoreSwig.ModelDeclaration_toKey(self)

    def getNameToken(self):
        return _CoreSwig.ModelDeclaration_getNameToken(self)

    def getName(self):
        return _CoreSwig.ModelDeclaration_getName(self)

    def getNameWithNamespace(self, separator):
        return _CoreSwig.ModelDeclaration_getNameWithNamespace(self, separator)

    def getNameWithNamespaceSkipFirst(self, separator):
        return _CoreSwig.ModelDeclaration_getNameWithNamespaceSkipFirst(self, separator)

    def extendsSegmentsAsString(self):
        return _CoreSwig.ModelDeclaration_extendsSegmentsAsString(self)

    def getExtendsSegments(self):
        return _CoreSwig.ModelDeclaration_getExtendsSegments(self)

    def getExtends(self):
        return _CoreSwig.ModelDeclaration_getExtends(self)

    def setExtends(self, extends):
        return _CoreSwig.ModelDeclaration_setExtends(self, extends)

    def appendToAnnotations(self, annotation):
        return _CoreSwig.ModelDeclaration_appendToAnnotations(self, annotation)

    def getAnnotations(self):
        return _CoreSwig.ModelDeclaration_getAnnotations(self)

    def findAnnotations(self, name):
        return _CoreSwig.ModelDeclaration_findAnnotations(self, name)

    def appendToMembers(self, member):
        return _CoreSwig.ModelDeclaration_appendToMembers(self, member)

    def getMembers(self):
        return _CoreSwig.ModelDeclaration_getMembers(self)

    def getOuterMembers(self):
        return _CoreSwig.ModelDeclaration_getOuterMembers(self)

    def removeMember(self, member):
        return _CoreSwig.ModelDeclaration_removeMember(self, member)

    def removeInvalidMembers(self):
        return _CoreSwig.ModelDeclaration_removeInvalidMembers(self)

    def findMembers(self, name):
        return _CoreSwig.ModelDeclaration_findMembers(self, name)

    def findFirstMemberOfType(self, name, type):
        return _CoreSwig.ModelDeclaration_findFirstMemberOfType(self, name, type)

    def findFirstMember(self, name):
        return _CoreSwig.ModelDeclaration_findFirstMember(self, name)

    def countMembers(self):
        return _CoreSwig.ModelDeclaration_countMembers(self)

    def getOwningDocument(self):
        return _CoreSwig.ModelDeclaration_getOwningDocument(self)

    def setOwningDocument(self, owning_document):
        return _CoreSwig.ModelDeclaration_setOwningDocument(self, owning_document)

    def getSourceIdOrDefault(self):
        return _CoreSwig.ModelDeclaration_getSourceIdOrDefault(self)

    def getTopologicalSort(self):
        return _CoreSwig.ModelDeclaration_getTopologicalSort(self)

    def setTopologicalSort(self, topological_sort):
        return _CoreSwig.ModelDeclaration_setTopologicalSort(self, topological_sort)
    __swig_destroy__ = _CoreSwig.delete_ModelDeclaration

# Register ModelDeclaration in _CoreSwig:
_CoreSwig.ModelDeclaration_swigregister(ModelDeclaration)

def ModelDeclaration_create(name_token, parent_segments, annotations, members):
    return _CoreSwig.ModelDeclaration_create(name_token, parent_segments, annotations, members)

AnyType_Int = _CoreSwig.AnyType_Int
AnyType_Real = _CoreSwig.AnyType_Real
AnyType_Bool = _CoreSwig.AnyType_Bool
AnyType_String = _CoreSwig.AnyType_String
AnyType_Object = _CoreSwig.AnyType_Object
AnyType_Array = _CoreSwig.AnyType_Array
AnyType_Undefined = _CoreSwig.AnyType_Undefined
class Any(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CoreSwig.Any_swiginit(self, _CoreSwig.new_Any(*args))

    def __eq__(self, rhs):
        return _CoreSwig.Any___eq__(self, rhs)

    def __ne__(self, rhs):
        return _CoreSwig.Any___ne__(self, rhs)

    def typeAsString(self):
        return _CoreSwig.Any_typeAsString(self)

    @staticmethod
    def typeToString(t):
        return _CoreSwig.Any_typeToString(t)

    def getType(self):
        return _CoreSwig.Any_getType(self)

    def isReal(self):
        return _CoreSwig.Any_isReal(self)

    def isInt(self):
        return _CoreSwig.Any_isInt(self)

    def isBool(self):
        return _CoreSwig.Any_isBool(self)

    def isString(self):
        return _CoreSwig.Any_isString(self)

    def isObject(self):
        return _CoreSwig.Any_isObject(self)

    def isArray(self):
        return _CoreSwig.Any_isArray(self)

    def isUndefined(self):
        return _CoreSwig.Any_isUndefined(self)

    def asReal(self):
        return _CoreSwig.Any_asReal(self)

    def asInt(self):
        return _CoreSwig.Any_asInt(self)

    def asBool(self):
        return _CoreSwig.Any_asBool(self)

    def asString(self):
        return _CoreSwig.Any_asString(self)

    def asObject(self):
        return _CoreSwig.Any_asObject(self)

    def asArray(self):
        return _CoreSwig.Any_asArray(self)
    __swig_destroy__ = _CoreSwig.delete_Any

# Register Any in _CoreSwig:
_CoreSwig.Any_swigregister(Any)

def Any_typeToString(t):
    return _CoreSwig.Any_typeToString(t)

class Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CoreSwig.Object_swiginit(self, _CoreSwig.new_Object(*args))
    __swig_destroy__ = _CoreSwig.delete_Object

    def onInit(self):
        return _CoreSwig.Object_onInit(self)

    def setDynamic(self, key, value):
        return _CoreSwig.Object_setDynamic(self, key, value)

    def extractObjectFieldsTo(self, output):
        return _CoreSwig.Object_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        return _CoreSwig.Object_extractEntriesTo(self, output)

    def getDynamic(self, key):
        return _CoreSwig.Object_getDynamic(self, key)

    def callDynamic(self, key, args):
        return _CoreSwig.Object_callDynamic(self, key, args)

    def getName(self):
        return _CoreSwig.Object_getName(self)

    def triggerOnInit(self):
        return _CoreSwig.Object_triggerOnInit(self)

    def getType(self):
        return _CoreSwig.Object_getType(self)

    def getTypeList(self):
        return _CoreSwig.Object_getTypeList(self)

    def getOwner(self):
        return _CoreSwig.Object_getOwner(self)

# Register Object in _CoreSwig:
_CoreSwig.Object_swigregister(Object)

class EvaluatorContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def registerFactory(self, className, createMethod):
        return _CoreSwig.EvaluatorContext_registerFactory(self, className, createMethod)

    def registerStaticMethod(self, key, static_method):
        return _CoreSwig.EvaluatorContext_registerStaticMethod(self, key, static_method)

    def registerBinaryOperatorMethod(self, key, bin_op_method):
        return _CoreSwig.EvaluatorContext_registerBinaryOperatorMethod(self, key, bin_op_method)

    def registerUnaryOperatorMethod(self, key, unary_op_method):
        return _CoreSwig.EvaluatorContext_registerUnaryOperatorMethod(self, key, unary_op_method)

    def lookup(self, className):
        return _CoreSwig.EvaluatorContext_lookup(self, className)

    def callStaticMethod(self, key, args):
        return _CoreSwig.EvaluatorContext_callStaticMethod(self, key, args)

    def callBinaryOperator(self, key, lhs, rhs):
        return _CoreSwig.EvaluatorContext_callBinaryOperator(self, key, lhs, rhs)

    def callUnaryOperator(self, key, operand):
        return _CoreSwig.EvaluatorContext_callUnaryOperator(self, key, operand)

    def __init__(self):
        _CoreSwig.EvaluatorContext_swiginit(self, _CoreSwig.new_EvaluatorContext())
    __swig_destroy__ = _CoreSwig.delete_EvaluatorContext

# Register EvaluatorContext in _CoreSwig:
_CoreSwig.EvaluatorContext_swigregister(EvaluatorContext)

class TokenVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreSwig.TokenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreSwig.TokenVector___nonzero__(self)

    def __bool__(self):
        return _CoreSwig.TokenVector___bool__(self)

    def __len__(self):
        return _CoreSwig.TokenVector___len__(self)

    def __getslice__(self, i, j):
        return _CoreSwig.TokenVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreSwig.TokenVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreSwig.TokenVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreSwig.TokenVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreSwig.TokenVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreSwig.TokenVector___setitem__(self, *args)

    def pop(self):
        return _CoreSwig.TokenVector_pop(self)

    def append(self, x):
        return _CoreSwig.TokenVector_append(self, x)

    def empty(self):
        return _CoreSwig.TokenVector_empty(self)

    def size(self):
        return _CoreSwig.TokenVector_size(self)

    def swap(self, v):
        return _CoreSwig.TokenVector_swap(self, v)

    def begin(self):
        return _CoreSwig.TokenVector_begin(self)

    def end(self):
        return _CoreSwig.TokenVector_end(self)

    def rbegin(self):
        return _CoreSwig.TokenVector_rbegin(self)

    def rend(self):
        return _CoreSwig.TokenVector_rend(self)

    def clear(self):
        return _CoreSwig.TokenVector_clear(self)

    def get_allocator(self):
        return _CoreSwig.TokenVector_get_allocator(self)

    def pop_back(self):
        return _CoreSwig.TokenVector_pop_back(self)

    def erase(self, *args):
        return _CoreSwig.TokenVector_erase(self, *args)

    def __init__(self, *args):
        _CoreSwig.TokenVector_swiginit(self, _CoreSwig.new_TokenVector(*args))

    def push_back(self, x):
        return _CoreSwig.TokenVector_push_back(self, x)

    def front(self):
        return _CoreSwig.TokenVector_front(self)

    def back(self):
        return _CoreSwig.TokenVector_back(self)

    def assign(self, n, x):
        return _CoreSwig.TokenVector_assign(self, n, x)

    def resize(self, *args):
        return _CoreSwig.TokenVector_resize(self, *args)

    def insert(self, *args):
        return _CoreSwig.TokenVector_insert(self, *args)

    def reserve(self, n):
        return _CoreSwig.TokenVector_reserve(self, n)

    def capacity(self):
        return _CoreSwig.TokenVector_capacity(self)
    __swig_destroy__ = _CoreSwig.delete_TokenVector

# Register TokenVector in _CoreSwig:
_CoreSwig.TokenVector_swigregister(TokenVector)

class ObjectVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreSwig.ObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreSwig.ObjectVector___nonzero__(self)

    def __bool__(self):
        return _CoreSwig.ObjectVector___bool__(self)

    def __len__(self):
        return _CoreSwig.ObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _CoreSwig.ObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreSwig.ObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreSwig.ObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreSwig.ObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreSwig.ObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreSwig.ObjectVector___setitem__(self, *args)

    def pop(self):
        return _CoreSwig.ObjectVector_pop(self)

    def append(self, x):
        return _CoreSwig.ObjectVector_append(self, x)

    def empty(self):
        return _CoreSwig.ObjectVector_empty(self)

    def size(self):
        return _CoreSwig.ObjectVector_size(self)

    def swap(self, v):
        return _CoreSwig.ObjectVector_swap(self, v)

    def begin(self):
        return _CoreSwig.ObjectVector_begin(self)

    def end(self):
        return _CoreSwig.ObjectVector_end(self)

    def rbegin(self):
        return _CoreSwig.ObjectVector_rbegin(self)

    def rend(self):
        return _CoreSwig.ObjectVector_rend(self)

    def clear(self):
        return _CoreSwig.ObjectVector_clear(self)

    def get_allocator(self):
        return _CoreSwig.ObjectVector_get_allocator(self)

    def pop_back(self):
        return _CoreSwig.ObjectVector_pop_back(self)

    def erase(self, *args):
        return _CoreSwig.ObjectVector_erase(self, *args)

    def __init__(self, *args):
        _CoreSwig.ObjectVector_swiginit(self, _CoreSwig.new_ObjectVector(*args))

    def push_back(self, x):
        return _CoreSwig.ObjectVector_push_back(self, x)

    def front(self):
        return _CoreSwig.ObjectVector_front(self)

    def back(self):
        return _CoreSwig.ObjectVector_back(self)

    def assign(self, n, x):
        return _CoreSwig.ObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _CoreSwig.ObjectVector_resize(self, *args)

    def insert(self, *args):
        return _CoreSwig.ObjectVector_insert(self, *args)

    def reserve(self, n):
        return _CoreSwig.ObjectVector_reserve(self, n)

    def capacity(self):
        return _CoreSwig.ObjectVector_capacity(self)
    __swig_destroy__ = _CoreSwig.delete_ObjectVector

# Register ObjectVector in _CoreSwig:
_CoreSwig.ObjectVector_swigregister(ObjectVector)

class AnyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreSwig.AnyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreSwig.AnyVector___nonzero__(self)

    def __bool__(self):
        return _CoreSwig.AnyVector___bool__(self)

    def __len__(self):
        return _CoreSwig.AnyVector___len__(self)

    def __getslice__(self, i, j):
        return _CoreSwig.AnyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreSwig.AnyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreSwig.AnyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreSwig.AnyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreSwig.AnyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreSwig.AnyVector___setitem__(self, *args)

    def pop(self):
        return _CoreSwig.AnyVector_pop(self)

    def append(self, x):
        return _CoreSwig.AnyVector_append(self, x)

    def empty(self):
        return _CoreSwig.AnyVector_empty(self)

    def size(self):
        return _CoreSwig.AnyVector_size(self)

    def swap(self, v):
        return _CoreSwig.AnyVector_swap(self, v)

    def begin(self):
        return _CoreSwig.AnyVector_begin(self)

    def end(self):
        return _CoreSwig.AnyVector_end(self)

    def rbegin(self):
        return _CoreSwig.AnyVector_rbegin(self)

    def rend(self):
        return _CoreSwig.AnyVector_rend(self)

    def clear(self):
        return _CoreSwig.AnyVector_clear(self)

    def get_allocator(self):
        return _CoreSwig.AnyVector_get_allocator(self)

    def pop_back(self):
        return _CoreSwig.AnyVector_pop_back(self)

    def erase(self, *args):
        return _CoreSwig.AnyVector_erase(self, *args)

    def __init__(self, *args):
        _CoreSwig.AnyVector_swiginit(self, _CoreSwig.new_AnyVector(*args))

    def push_back(self, x):
        return _CoreSwig.AnyVector_push_back(self, x)

    def front(self):
        return _CoreSwig.AnyVector_front(self)

    def back(self):
        return _CoreSwig.AnyVector_back(self)

    def assign(self, n, x):
        return _CoreSwig.AnyVector_assign(self, n, x)

    def resize(self, *args):
        return _CoreSwig.AnyVector_resize(self, *args)

    def insert(self, *args):
        return _CoreSwig.AnyVector_insert(self, *args)

    def reserve(self, n):
        return _CoreSwig.AnyVector_reserve(self, n)

    def capacity(self):
        return _CoreSwig.AnyVector_capacity(self)
    __swig_destroy__ = _CoreSwig.delete_AnyVector

# Register AnyVector in _CoreSwig:
_CoreSwig.AnyVector_swigregister(AnyVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreSwig.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreSwig.StringVector___nonzero__(self)

    def __bool__(self):
        return _CoreSwig.StringVector___bool__(self)

    def __len__(self):
        return _CoreSwig.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CoreSwig.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreSwig.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreSwig.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreSwig.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreSwig.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreSwig.StringVector___setitem__(self, *args)

    def pop(self):
        return _CoreSwig.StringVector_pop(self)

    def append(self, x):
        return _CoreSwig.StringVector_append(self, x)

    def empty(self):
        return _CoreSwig.StringVector_empty(self)

    def size(self):
        return _CoreSwig.StringVector_size(self)

    def swap(self, v):
        return _CoreSwig.StringVector_swap(self, v)

    def begin(self):
        return _CoreSwig.StringVector_begin(self)

    def end(self):
        return _CoreSwig.StringVector_end(self)

    def rbegin(self):
        return _CoreSwig.StringVector_rbegin(self)

    def rend(self):
        return _CoreSwig.StringVector_rend(self)

    def clear(self):
        return _CoreSwig.StringVector_clear(self)

    def get_allocator(self):
        return _CoreSwig.StringVector_get_allocator(self)

    def pop_back(self):
        return _CoreSwig.StringVector_pop_back(self)

    def erase(self, *args):
        return _CoreSwig.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CoreSwig.StringVector_swiginit(self, _CoreSwig.new_StringVector(*args))

    def push_back(self, x):
        return _CoreSwig.StringVector_push_back(self, x)

    def front(self):
        return _CoreSwig.StringVector_front(self)

    def back(self):
        return _CoreSwig.StringVector_back(self)

    def assign(self, n, x):
        return _CoreSwig.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CoreSwig.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CoreSwig.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CoreSwig.StringVector_reserve(self, n)

    def capacity(self):
        return _CoreSwig.StringVector_capacity(self)
    __swig_destroy__ = _CoreSwig.delete_StringVector

# Register StringVector in _CoreSwig:
_CoreSwig.StringVector_swigregister(StringVector)



