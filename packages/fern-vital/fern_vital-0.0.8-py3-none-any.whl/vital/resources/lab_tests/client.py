# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.client_facing_lab import ClientFacingLab
from ...types.client_facing_lab_test import ClientFacingLabTest
from ...types.get_markers_response import GetMarkersResponse
from ...types.http_validation_error import HttpValidationError
from ...types.lab_test_collection_method import LabTestCollectionMethod
from ...types.lab_test_sample_type import LabTestSampleType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LabTestsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_lab_test_for_team(
        self,
        *,
        marker_ids: typing.List[int],
        lab_id: int,
        name: str,
        method: LabTestCollectionMethod,
        sample_type: LabTestSampleType,
        description: str,
        fasting: typing.Optional[bool] = OMIT,
    ) -> ClientFacingLabTest:
        """
        Parameters:
            - marker_ids: typing.List[int].

            - lab_id: int.

            - name: str.

            - method: LabTestCollectionMethod.

            - sample_type: LabTestSampleType.

            - description: str.

            - fasting: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "marker_ids": marker_ids,
            "lab_id": lab_id,
            "name": name,
            "method": method,
            "sample_type": sample_type,
            "description": description,
        }
        if fasting is not OMIT:
            _request["fasting"] = fasting
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingLabTest, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_markers(
        self,
        *,
        lab_id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetMarkersResponse:
        """
        GET all the markers for the given lab.

        Parameters:
            - lab_id: typing.Optional[int]. The identifier Vital assigned to a lab partner.

            - name: typing.Optional[str]. The name of an individual biomarker or a panel. Used as a fuzzy filter when searching markers.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/markers"),
            params=remove_none_from_dict({"lab_id": lab_id, "name": name, "page": page, "size": size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMarkersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_labs(self) -> typing.List[ClientFacingLab]:
        """
        GET all the labs.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/labs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLab], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLabTestsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_lab_test_for_team(
        self,
        *,
        marker_ids: typing.List[int],
        lab_id: int,
        name: str,
        method: LabTestCollectionMethod,
        sample_type: LabTestSampleType,
        description: str,
        fasting: typing.Optional[bool] = OMIT,
    ) -> ClientFacingLabTest:
        """
        Parameters:
            - marker_ids: typing.List[int].

            - lab_id: int.

            - name: str.

            - method: LabTestCollectionMethod.

            - sample_type: LabTestSampleType.

            - description: str.

            - fasting: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {
            "marker_ids": marker_ids,
            "lab_id": lab_id,
            "name": name,
            "method": method,
            "sample_type": sample_type,
            "description": description,
        }
        if fasting is not OMIT:
            _request["fasting"] = fasting
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingLabTest, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_markers(
        self,
        *,
        lab_id: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
    ) -> GetMarkersResponse:
        """
        GET all the markers for the given lab.

        Parameters:
            - lab_id: typing.Optional[int]. The identifier Vital assigned to a lab partner.

            - name: typing.Optional[str]. The name of an individual biomarker or a panel. Used as a fuzzy filter when searching markers.

            - page: typing.Optional[int].

            - size: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/markers"),
            params=remove_none_from_dict({"lab_id": lab_id, "name": name, "page": page, "size": size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetMarkersResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_labs(self) -> typing.List[ClientFacingLab]:
        """
        GET all the labs.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v3/lab_tests/labs"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingLab], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
