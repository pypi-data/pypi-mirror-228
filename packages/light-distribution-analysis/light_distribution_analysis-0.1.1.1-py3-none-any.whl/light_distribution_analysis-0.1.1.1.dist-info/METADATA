Metadata-Version: 2.1
Name: light-distribution-analysis
Version: 0.1.1.1
Summary: Analyze the flux of images based on wavelength and frequency
Author: Viktor Veselov
Author-email: lipovkaviktor@yahoo.com
Project-URL: Bug Tracker, https://github.com/SweatyCrayfish/light-distribution-analysis/issues
Project-URL: Source Code, https://github.com/SweatyCrayfish/light-distribution-analysis
Keywords: light distribution analysis flux wavelength frequency images
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: opencv-python
Requires-Dist: numpy
Requires-Dist: matplotlib

# Light-Distribution-Analysis

## Overview

Light-Distribution-Analysis is a Python package that enables you to analyze the flux of images based on their wavelength and frequency. By utilizing OpenCV, NumPy, and Matplotlib, this package provides a simple yet effective way to process and save images as well as calculate flux values.

## Features

- Convert RGB images to wavelength and frequency representations.
- Calculate the flux of images in terms of both wavelength and frequency.
- Save processed images and flux values.
- Export flux data to a CSV file for further analysis.

## Installation

To install Light-Distribution-Analysis, run the following command in your terminal:

```bash
pip install light-distribution-analysis
```

## Usage
Comparing Flux of Two Images
The package includes a function compare_flux that allows you to compare the flux of two images and obtain a similarity score.

Here's a simple example to demonstrate its usage:

## 1. Import the package:
```bash
import light_distribution_analysis as lda
```
## 2. Provide Paths to Images:

Provide the paths to the two images you want to compare.

```bash
image_path1 = "path/to/your/first/image.jpg"
image_path2 = "path/to/your/second/image.jpg"
```
## 3. Compare the Flux:

Use the compare_flux function to compare the flux of the two images.
```bash
similarity_score = lda.compare_flux(image_path1, image_path2)
```
Interpreting the Similarity Score:

A similarity score close to 1 indicates that the images are highly similar in terms of their flux, whereas a score close to 0 suggests they are dissimilar.
