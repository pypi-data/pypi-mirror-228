# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from speechly.slu.v2beta1 import batch_api_pb2 as speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2


class BatchAPIStub(object):
  """Run Speechly Batch API operations on audio sources without actively waiting the results.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ProcessAudioSource = channel.unary_unary(
        '/speechly.slu.v2beta1.BatchAPI/ProcessAudioSource',
        request_serializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.ProcessAudioSourceRequest.SerializeToString,
        response_deserializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.ProcessAudioSourceResponse.FromString,
        )
    self.QueryStatus = channel.unary_unary(
        '/speechly.slu.v2beta1.BatchAPI/QueryStatus',
        request_serializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.QueryStatusRequest.SerializeToString,
        response_deserializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.QueryStatusResponse.FromString,
        )


class BatchAPIServicer(object):
  """Run Speechly Batch API operations on audio sources without actively waiting the results.
  """

  def ProcessAudioSource(self, request, context):
    """Create a new background Speechly Batch API operation for a one or more audio sources.
    Audio sources must be URIs of a files, reachable from the API
    The response includes an `id` that is used to match the operation to the
    results. A `reference` identifier can also be set.
    Also a `batch_reference` can be set to mark that multiple audio sources form a
    logical batch. In that case, the response will include a `batch_id`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueryStatus(self, request, context):
    """Query the status of given operations.
    If the `ProcessAudioSourceRequest` did not define a `destination` or `completion_webhook`
    as a destination, the results are returned in the `QueryStatusResponse`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BatchAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ProcessAudioSource': grpc.unary_unary_rpc_method_handler(
          servicer.ProcessAudioSource,
          request_deserializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.ProcessAudioSourceRequest.FromString,
          response_serializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.ProcessAudioSourceResponse.SerializeToString,
      ),
      'QueryStatus': grpc.unary_unary_rpc_method_handler(
          servicer.QueryStatus,
          request_deserializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.QueryStatusRequest.FromString,
          response_serializer=speechly_dot_slu_dot_v2beta1_dot_batch__api__pb2.QueryStatusResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'speechly.slu.v2beta1.BatchAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
