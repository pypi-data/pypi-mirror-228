# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from speechly.moderation.v1beta1 import moderation_api_pb2 as speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2


class ModerationAPIStub(object):
  """Run Speechly Moderation API with streamable audio content or text content.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AudioModeration = channel.stream_unary(
        '/speechly.moderation.v1beta1.ModerationAPI/AudioModeration',
        request_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.AudioModerationRequest.SerializeToString,
        response_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.AudioModerationResponse.FromString,
        )
    self.StreamingAudioModeration = channel.stream_stream(
        '/speechly.moderation.v1beta1.ModerationAPI/StreamingAudioModeration',
        request_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.StreamingAudioModerationRequest.SerializeToString,
        response_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.StreamingAudioModerationResponse.FromString,
        )
    self.TextModeration = channel.unary_unary(
        '/speechly.moderation.v1beta1.ModerationAPI/TextModeration',
        request_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.TextModerationRequest.SerializeToString,
        response_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.TextModerationResponse.FromString,
        )


class ModerationAPIServicer(object):
  """Run Speechly Moderation API with streamable audio content or text content.
  """

  def AudioModeration(self, request_iterator, context):
    """Stream audio to be moderated and receive all results once whole audio has been processed.
    The discourse context may be described for improved performance.
    Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingAudioModeration(self, request_iterator, context):
    """Stream audio to be moderated and receive results for identified segments as soon results as possible.
    The discourse context may be described for improved performance.
    Audio must be in a format supported for Live Streaming, see https://docs.speechly.com/features/audio-formats
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TextModeration(self, request, context):
    """Moderate a text utterance.
    The discourse context may be described for improved performance.
    The related audio may be identified using `audio_context_id`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModerationAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AudioModeration': grpc.stream_unary_rpc_method_handler(
          servicer.AudioModeration,
          request_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.AudioModerationRequest.FromString,
          response_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.AudioModerationResponse.SerializeToString,
      ),
      'StreamingAudioModeration': grpc.stream_stream_rpc_method_handler(
          servicer.StreamingAudioModeration,
          request_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.StreamingAudioModerationRequest.FromString,
          response_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.StreamingAudioModerationResponse.SerializeToString,
      ),
      'TextModeration': grpc.unary_unary_rpc_method_handler(
          servicer.TextModeration,
          request_deserializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.TextModerationRequest.FromString,
          response_serializer=speechly_dot_moderation_dot_v1beta1_dot_moderation__api__pb2.TextModerationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'speechly.moderation.v1beta1.ModerationAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
