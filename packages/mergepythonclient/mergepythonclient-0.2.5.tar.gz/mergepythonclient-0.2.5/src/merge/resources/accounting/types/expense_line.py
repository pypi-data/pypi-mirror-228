# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .expense_line_account import ExpenseLineAccount
from .expense_line_contact import ExpenseLineContact
from .expense_line_item import ExpenseLineItem
from .expense_line_tracking_categories_item import ExpenseLineTrackingCategoriesItem
from .expense_line_tracking_category import ExpenseLineTrackingCategory


class ExpenseLine(pydantic.BaseModel):
    """
    # The ExpenseLine Object
    ### Description
    The `ExpenseLine` object is used to represent an expense's line items.

    ### Usage Example
    Fetch from the `GET Expense` endpoint and view the expense's line items.
    """

    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    item: typing.Optional[ExpenseLineItem] = pydantic.Field(description="The line's item.")
    net_amount: typing.Optional[float] = pydantic.Field(description="The line's net amount.")
    tracking_category: typing.Optional[ExpenseLineTrackingCategory]
    tracking_categories: typing.Optional[typing.List[typing.Optional[ExpenseLineTrackingCategoriesItem]]]
    company: typing.Optional[str] = pydantic.Field(description="The company the line belongs to.")
    account: typing.Optional[ExpenseLineAccount] = pydantic.Field(description="The expense's payment account.")
    contact: typing.Optional[ExpenseLineContact] = pydantic.Field(description="The expense's contact.")
    description: typing.Optional[str] = pydantic.Field(
        description="The description of the item that was purchased by the company."
    )
    exchange_rate: typing.Optional[str] = pydantic.Field(description="The expense line item's exchange rate.")
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
