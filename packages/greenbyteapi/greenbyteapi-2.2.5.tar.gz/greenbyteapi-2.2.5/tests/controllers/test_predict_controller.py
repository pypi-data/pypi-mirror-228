# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from greenbyteapi.api_helper import APIHelper


class PredictControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(PredictControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.predict

    # Gets a list of Predict alerts based on filter criteria. The timestamps are in the time zone configured in the Greenbyte Platform. Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Predict** endpoint permission._
    #
    #_This is a beta feature. Some details might change before it is
    #released as a stable version._
    #
    def test_test_get_predict_alerts(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        component_ids = APIHelper.json_deserialize('[1,2,3]')
        status = 'active'
        severity = 'high'
        fields = APIHelper.json_deserialize('["deviceId","highSeverity"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.get_predict_alerts(device_ids, timestamp_start, timestamp_end, site_ids, component_ids, status, severity, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"deviceId":260,"siteId":19,"componentAlert":{"componentId":46,"component'
            'Name":"Main gear oil system"},"highSeverity":true,"status":"resolved","comm'
            'ents":[{"text":"Found high temperatures. Reported to OM team.","userName":"'
            'Bill Bao","timestamp":"2019-04-16T12:48:16"}],"resolvedBy":"Jens Genberg","'
            'timestampResolved":"2019-10-25T09:29:55","actionTaken":"Replacement","compo'
            'nentResolved":{"componentId":77,"componentName":"Main gear oil system"},"di'
            'smissedBy":null,"timestampDismissed":null,"recommendations":null}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of Predict alerts based on filter criteria. The timestamps are in the time zone configured in the Greenbyte Platform. Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Predict** endpoint permission._
    #
    #_This is a beta feature. Some details might change before it is
    #released as a stable version._
    #
    def test_test_get_predict_alerts_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        component_ids = APIHelper.json_deserialize('[1,2,3]')
        status = 'active'
        severity = 'high'
        fields = APIHelper.json_deserialize('["deviceId","highSeverity"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.get_predict_alerts(device_ids, timestamp_start, timestamp_end, site_ids, component_ids, status, severity, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

