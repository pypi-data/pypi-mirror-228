# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from greenbyteapi.api_helper import APIHelper


class DataControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(DataControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.data

    # Gets authorized data signals for one or more devices.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `datasignals.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data_signals(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')

        # Perform the API call through the SDK function
        result = self.controller.get_data_signals(device_ids)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"dataSignalId":1,"title":"Wind speed","type":"Wind speed","unit":"m/s","'
            'deviceType":{"deviceTypeId":1,"title":"Turbine"}},{"dataSignalId":5,"title"'
            ':"Power","type":"Power","unit":"kW","deviceType":{"deviceTypeId":1,"title":'
            '"Turbine"}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets authorized data signals for one or more devices.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `datasignals.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data_signals_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')

        # Perform the API call through the SDK function
        result = self.controller.get_data_signals(device_ids)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

    # Gets data for multiple devices and data signals in the given
    #resolution. The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC for all resolutions other than daily, weekly, monthly and yearly.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `data.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_ids = APIHelper.json_deserialize('[1,5]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        use_utc = False
        resolution = '10minute'
        aggregate = 'device'
        aggregate_level = 0
        calculation = 'sum'

        # Perform the API call through the SDK function
        result = self.controller.get_data(device_ids, data_signal_ids, timestamp_start, timestamp_end, use_utc, resolution, aggregate, aggregate_level, calculation)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"aggregate":"device","aggregateId":1,"aggregatePathNames":[],"deviceIds"'
            ':[1],"resolution":"hourly","calculation":"sum","dataSignal":{"dataSignalId"'
            ':1,"title":"Wind speed","unit":"m/s"},"data":{"2020-01-01T00:00:00":6.89,"2'
            '020-01-01T01:00:00":8.33}},{"aggregate":"device","aggregateId":1,"aggregate'
            'PathNames":[],"deviceIds":[1],"resolution":"hourly","calculation":"sum","da'
            'taSignal":{"dataSignalId":5,"title":"Power","unit":"kW"},"data":{"2020-01-0'
            '1T00:00:00":584.33,"2020-01-01T01:00:00":1014}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets data for multiple devices and data signals in the given
    #resolution. The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC for all resolutions other than daily, weekly, monthly and yearly.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `data.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_ids = APIHelper.json_deserialize('[1,5]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        use_utc = False
        resolution = '10minute'
        aggregate = 'device'
        aggregate_level = 0
        calculation = 'sum'

        # Perform the API call through the SDK function
        result = self.controller.get_data(device_ids, data_signal_ids, timestamp_start, timestamp_end, use_utc, resolution, aggregate, aggregate_level, calculation)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

    # Gets the most recent data point for each
    #specified device and data signal. The timestamps are in UTC.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `realtimedata.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_real_time_data(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_ids = APIHelper.json_deserialize('[1,5]')
        aggregate = 'device'
        aggregate_level = 0
        calculation = 'sum'

        # Perform the API call through the SDK function
        result = self.controller.get_real_time_data(device_ids, data_signal_ids, aggregate, aggregate_level, calculation)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"aggregate":"device","aggregateId":24,"aggregatePathNames":[],"deviceIds'
            '":[24],"calculation":"sum","dataSignal":{"dataSignalId":5,"title":"Power","'
            'unit":"kW"},"data":{"2020-03-17T12:50:02Z":2174}},{"aggregate":"device","ag'
            'gregateId":24,"aggregatePathNames":[],"deviceIds":[24],"calculation":"sum",'
            '"dataSignal":{"dataSignalId":1,"title":"Wind speed","unit":"m/s"},"data":{"'
            '2020-03-17T12:50:02Z":12.2}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets the most recent data point for each
    #specified device and data signal. The timestamps are in UTC.
    #
    #_üîê This endpoint requires the **Data** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `realtimedata.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_real_time_data_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_ids = APIHelper.json_deserialize('[1,5]')
        aggregate = 'device'
        aggregate_level = 0
        calculation = 'sum'

        # Perform the API call through the SDK function
        result = self.controller.get_real_time_data(device_ids, data_signal_ids, aggregate, aggregate_level, calculation)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

    # Gets signal data aggregated per availability contract category.
    #
    #_üîê This endpoint requires the **Data** and **Statuses** endpoint permissions._
    #
    #_This request can also be made using the POST method, 
    #with a request to `datapercategory.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data_per_category(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_id = 248
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        aggregate = 'device'
        aggregate_level = 0
        category = APIHelper.json_deserialize('["stop"]')
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_data_per_category(device_ids, data_signal_id, timestamp_start, timestamp_end, aggregate, aggregate_level, category, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '{"dataSignal":{"dataSignalId":248,"title":"Lost Production (Contractual)",'
            '"unit":"kWh"},"calculation":"sum","data":[{"aggregateId":6,"aggregatePathNa'
            'mes":[],"deviceIds":[1,2,3],"contractTitle":"Vestas 1","categoryTitle":"Ici'
            'ng","categoryTime":"available","value":104.55,"duration":150},{"aggregateId'
            '":6,"aggregatePathNames":[],"deviceIds":[1,2,3],"contractTitle":"Vestas 1",'
            '"categoryTitle":"Utility","categoryTime":"excluded","value":73,"duration":5'
            '0.3}]}'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets signal data aggregated per availability contract category.
    #
    #_üîê This endpoint requires the **Data** and **Statuses** endpoint permissions._
    #
    #_This request can also be made using the POST method, 
    #with a request to `datapercategory.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_data_per_category_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_id = 248
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        aggregate = 'device'
        aggregate_level = 0
        category = APIHelper.json_deserialize('["stop"]')
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_data_per_category(device_ids, data_signal_id, timestamp_start, timestamp_end, aggregate, aggregate_level, category, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

    # Gets high resolution data for a data signal for each
    #specified device. The timestamps are in UTC.
    #
    #The endpoint returns up to an hour's worth of high resolution data for the provided device IDs and data signal ID.
    #It is possible to request data for up to 10 separate devices and one data signal ID.
    #Timestamp start and end are optional. The default time span returned is the latest hour.
    #If supplied, timestamp start must be within the past 12 hours.
    #Timestamp end will by default be an hour after timestamp start but can be set for shorter intervals.
    #
    #There is no high resolution data available for data signals that are calculated. 
    #The data for those signals can be retrieved through the data endpoint.
    #
    #_üîê This endpoint requires the **HighResolution** endpoint permission._
    #
    def test_test_get_high_res_data(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_id = 1
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime

        # Perform the API call through the SDK function
        result = self.controller.get_high_res_data(device_ids, data_signal_id, timestamp_start, timestamp_end)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"deviceId":24,"dataSignal":{"dataSignalId":1,"title":"Wind speed","unit"'
            ':"m/s"},"data":{"2021-04-09T04:14:18Z":6.21827459335327,"2021-04-09T04:14:4'
            '8Z":6.46509933471681,"2021-04-09T04:15:18Z":7.41247510910034,"2021-04-09T04'
            ':15:48Z":6.71687459945679,"2021-04-09T04:16:20Z":5.66159963607788}},{"devic'
            'eId":25,"dataSignal":{"dataSignalId":1,"title":"Wind speed","unit":"m/s"},"'
            'data":{"2021-04-09T04:14:18Z":5.81789970397949,"2021-04-09T04:14:48Z":5.431'
            '27489089966,"2021-04-09T04:15:18Z":7.41247510910034,"2021-04-09T04:15:48Z":'
            '5.58427476882935,"2021-04-09T04:16:20Z":6.80189990997314}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets high resolution data for a data signal for each
    #specified device. The timestamps are in UTC.
    #
    #The endpoint returns up to an hour's worth of high resolution data for the provided device IDs and data signal ID.
    #It is possible to request data for up to 10 separate devices and one data signal ID.
    #Timestamp start and end are optional. The default time span returned is the latest hour.
    #If supplied, timestamp start must be within the past 12 hours.
    #Timestamp end will by default be an hour after timestamp start but can be set for shorter intervals.
    #
    #There is no high resolution data available for data signals that are calculated. 
    #The data for those signals can be retrieved through the data endpoint.
    #
    #_üîê This endpoint requires the **HighResolution** endpoint permission._
    #
    def test_test_get_high_res_data_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        data_signal_id = 1
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime

        # Perform the API call through the SDK function
        result = self.controller.get_high_res_data(device_ids, data_signal_id, timestamp_start, timestamp_end)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

