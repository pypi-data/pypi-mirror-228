# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from greenbyteapi.api_helper import APIHelper


class PlanControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(PlanControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.plan

    # Gets a list of tasks.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_tasks(self):
        # Parameters for the API call
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        category_ids = APIHelper.json_deserialize('[1,2,3]')
        state = 'unresolved'
        fields = APIHelper.json_deserialize('["taskId","title"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_tasks(timestamp_start, timestamp_end, device_ids, site_ids, category_ids, state, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"taskId":10,"title":"Maintenance","createdBy":{"firstName":"Greenbyte","'
            'lastName":"Support"},"description":"maintenance on site","category":{"categ'
            'oryId":5,"title":"Site visit without downtime"},"priority":"medium","timest'
            'ampStart":"2020-01-01T00:00:00","timestampEnd":"2020-01-08T00:00:00","state'
            '":"resolved","resolved":true,"timestampResolved":"2020-01-08T00:00:00","dev'
            'iceIds":[21,22],"siteIds":[],"siteAccessIds":[4177],"downtimeEventIds":[],"'
            'statusIds":[],"numberOfComments":3,"recurrence":null,"mainTaskId":null,"ass'
            'ignee":null,"metadata":[{"key":"Component","value":"Yaw encoder"}]}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of task categories.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_task_categories(self):

        # Perform the API call through the SDK function
        result = self.controller.list_task_categories()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"categoryId":10,"title":"Scheduled maintenance"},{"categoryId":20,"title'
            '":"Unscheduled maintenance"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of comments belonging to one or more tasks with given taskIds.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_comments_for_multiple_tasks(self):
        # Parameters for the API call
        task_ids = APIHelper.json_deserialize('[1,2,3]')
        fields = APIHelper.json_deserialize('["commentId","text"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_comments_for_multiple_tasks(task_ids, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"commentId":10,"taskId":1,"text":"Task started","timestampCreated":"2020'
            '-01-01T00:00:00","createdBy":{"firstName":"Greenbyte","lastName":"Support"}'
            '},{"commentId":11,"taskId":2,"text":"Task finished","timestampCreated":"202'
            '0-01-02T00:00:00","createdBy":{"firstName":"Greenbyte","lastName":"Support"'
            '}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of site accesses.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_site_accesses(self):
        # Parameters for the API call
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        fields = APIHelper.json_deserialize('["siteAccessId","timestampStart"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_site_accesses(timestamp_start, timestamp_end, device_ids, site_ids, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"siteAccessId":10,"siteId":18,"deviceIds":[11,12],"taskIds":[66],"siteAc'
            'cessPersonnel":[{"personnelId":1234,"firstName":"Andreas","lastName":"Jonss'
            'on","company":"Power Offtakers Inc.","phoneNumber":"456-123","vehicleRegist'
            'ration":"ABC456","comment":"Site access comment","timestampStart":"2020-04-'
            '30T10:03:00","timestampEnd":"2020-04-30T17:39:00"}],"timestampStart":"2020-'
            '01-01T12:00:00","timestampEndExpected":"2020-01-01T13:00:00","timestampEnd"'
            ':"2020-01-01T13:30:00","logOnComment":"Investigating","logOffComment":"All '
            'clear"},{"siteAccessId":11,"siteId":18,"deviceIds":[15],"taskIds":[55,56],"'
            'siteAccessPersonnel":[{"personnelId":2345,"firstName":"Andrea","lastName":"'
            'Larsson","company":"Power Offtakers Inc.","phoneNumber":"123-456","vehicleR'
            'egistration":"ABC123","comment":"Site access comment","timestampStart":"202'
            '0-04-30T10:04:00","timestampEnd":"2020-04-30T17:39:00"}],"timestampStart":"'
            '2020-01-02T12:00:00","timestampEndExpected":"2020-01-02T13:00:00","timestam'
            'pEnd":"2020-01-02T13:30:00","logOnComment":"Investigating","logOffComment":'
            '"All clear"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of device accesses belonging to site accesses with specified SiteAccessIds.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_device_accesses_for_multiple_site_accesses(self):
        # Parameters for the API call
        site_access_ids = APIHelper.json_deserialize('[1,2]')
        fields = APIHelper.json_deserialize('["deviceAccessId","siteId"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_device_accesses_for_multiple_site_accesses(site_access_ids, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"deviceAccessId":1504,"siteId":50,"siteAccessId":1,"deviceIds":[15],"per'
            'sonnelIds":[11,12],"taskIds":[55],"timestampStart":"2020-01-02T12:00:00","t'
            'imestampEnd":"2020-01-02T12:55:00","timestampEndExpected":"2020-01-02T13:00'
            ':00","logOnComment":"TOC at 12:01","logOffComment":"Access completed"},{"de'
            'viceAccessId":1560,"siteId":50,"siteAccessId":2,"deviceIds":[15],"personnel'
            'Ids":[11,12],"taskIds":[55],"timestampStart":"2020-01-02T13:00:00","timesta'
            'mpEnd":"2020-01-02T13:55:00","timestampEndExpected":"2020-01-02T14:00:00","'
            'logOnComment":"TOC at 13:01","logOffComment":"Access completed"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of downtime events.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_downtime_events(self):
        # Parameters for the API call
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        fields = APIHelper.json_deserialize('["deviceIds","timestampStart"]')
        page_size = 50
        page = 1
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_downtime_events(timestamp_start, timestamp_end, device_ids, site_ids, fields, page_size, page, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"downtimeEventId":1,"deviceIds":[1,2,3],"timestampStart":"2020-01-01T00:'
            '00:00","timestampEnd":"2020-01-02T00:00:00","comment":"Planned downtime","s'
            'iteIds":[],"taskIds":[1358]},{"downtimeEventId":2,"deviceIds":[1,2,3],"time'
            'stampStart":"2020-01-10T00:00:00","timestampEnd":"2020-01-12T00:00:00","com'
            'ment":"Unplanned downtime","siteIds":[1],"taskIds":[1359]}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of personnel.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_personnel(self):
        # Parameters for the API call
        fields = APIHelper.json_deserialize('["lastName","phone"]')
        page_size = 50
        page = 1

        # Perform the API call through the SDK function
        result = self.controller.list_personnel(fields, page_size, page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"personnelId":5,"firstName":"Greenbyte","lastName":"Support","email":"su'
            'pport@greenbyte.com","phone":"123-456","mobile":"654-321","organization":{"'
            'organizationId":10,"name":"Power Offtakers Inc.","email":"support@power-off'
            'takers.example.com","phone":"456-789"},"qualifications":[{"qualificationId"'
            ':85,"manufacturer":"GE","qualificationType":"AP","qualificationDescription"'
            ':"Authorized Person"}],"siteInductions":[{"siteInductionId":43,"siteId":1,"'
            'dateExpires":"2020-12-01"}]}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of organizations.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    def test_test_list_organizations(self):

        # Perform the API call through the SDK function
        result = self.controller.list_organizations()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"organizationId":10,"name":"Power Offtakers Inc.","email":"support@power'
            '-offtakers.example.com","phone":"456-789"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of HSE incidents.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    #_This is a beta feature. Some details might change before it is released as a stable version._
    #
    def test_test_list_hse_incidents(self):
        # Parameters for the API call
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        state = 'unresolved'
        category = 'Accident'
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_hse_incidents(timestamp_start, timestamp_end, site_ids, state, category, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"hseIncidentId":10,"siteId":5,"deviceId":1,"timestamp":"2022-12-18T09:45'
            ':00","hseCategory":"HazardObservation","lostTimeInjury":false,"incidentDesc'
            'ription":"Broken ladder","resolved":false,"resolvedTimestamp":null}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets a list of worklog items.
    #
    #_üîê This endpoint requires the **Plan** endpoint permission._
    #
    #_This is a beta feature. Some details might change before it is released as a stable version._
    #
    def test_test_list_worklog_items(self):
        # Parameters for the API call
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        site_ids = APIHelper.json_deserialize('[1,2,3]')
        use_utc = False

        # Perform the API call through the SDK function
        result = self.controller.list_worklog_items(timestamp_start, timestamp_end, site_ids, use_utc)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"worklogItemId":10,"timestamp":"2023-01-08T00:00:00","siteId":5,"hoursWo'
            'rked":2.5,"comment":"Inverter B Offline With Repeated Fault\\n- Work Perfor'
            'med: INV B was cleaned\\n"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


