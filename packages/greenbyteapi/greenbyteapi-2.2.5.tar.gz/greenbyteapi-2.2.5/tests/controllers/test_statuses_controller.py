# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from greenbyteapi.api_helper import APIHelper


class StatusesControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(StatusesControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.statuses

    # Gets statuses for multiple devices during the given time period.
    #The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Statuses** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `status.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_statuses(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        category = None
        lost_production_signal_id = 432
        fields = APIHelper.json_deserialize('["deviceId","message","lostProduction"]')
        sort_by = None
        sort_asc = False
        page_size = 50
        page = 1
        use_utc = False
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_statuses(device_ids, timestamp_start, timestamp_end, category, lost_production_signal_id, fields, sort_by, sort_asc, page_size, page, use_utc, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"turbineStatusId":8983231,"lostProductionSignal":{"dataSignalId":432,"ti'
            'tle":"Lost Production to Downtime","unit":"kWh"},"lostProduction":3899.5309'
            '669995286,"categoryIec":"Requested Shutdown","categoryContract":"Preventive'
            ' Maintenance","categoryGlobalContract":null,"categoryCustomContract":null,"'
            'subStatus":[],"deviceId":25,"timestampStart":"2021-12-12T22:07:10","timesta'
            'mpEnd":"2021-12-13T07:16:48","hasTimestampEnd":true,"category":"stop","code'
            '":615,"message":"Maintenance: Maintenance","comment":null,"acknowledged":fa'
            'lse,"component":{"componentId":123,"componentName":"Converter System","comp'
            'onentTag":"MSE"}}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets statuses for multiple devices during the given time period.
    #The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Statuses** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `status.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_statuses_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        timestamp_start = APIHelper.RFC3339DateTime.from_value('2023-04-01T00:00:00Z').datetime
        timestamp_end = APIHelper.RFC3339DateTime.from_value('2023-04-08T00:00:00Z').datetime
        category = None
        lost_production_signal_id = 432
        fields = APIHelper.json_deserialize('["deviceId","message","lostProduction"]')
        sort_by = None
        sort_asc = False
        page_size = 50
        page = 1
        use_utc = False
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_statuses(device_ids, timestamp_start, timestamp_end, category, lost_production_signal_id, fields, sort_by, sort_asc, page_size, page, use_utc, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

    # Gets active statuses for multiple devices.
    #The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Statuses** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `activestatus.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_active_statuses(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        category = None
        lost_production_signal_id = 432
        fields = APIHelper.json_deserialize('["deviceId","message","lostProduction"]')
        sort_by = None
        sort_asc = False
        page_size = 50
        page = 1
        use_utc = False
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_active_statuses(device_ids, category, lost_production_signal_id, fields, sort_by, sort_asc, page_size, page, use_utc, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json; charset=utf-8'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize(
            '[{"lostProduction":696.16,"lostProductionSignal":{"dataSignalId":432,"titl'
            'e":"Lost Production to Downtime","unit":"kWh"},"deviceId":4,"code":8000,"me'
            'ssage":"Maintenance: Maintenance"},{"lostProduction":0,"lostProductionSigna'
            'l":{"dataSignalId":432,"title":"Lost Production to Downtime","unit":"kWh"},'
            '"deviceId":4,"code":21001,"message":"Cable twisted: Left (2-3 turns)"}]'
            )
        received_body = APIHelper.json_deserialize(self.response_catcher.response.raw_body)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))


    # Gets active statuses for multiple devices.
    #The timestamps are in the time zone configured in the Greenbyte Platform.
    #Use the useUtc flag to get timestamps in UTC.
    #
    #_üîê This endpoint requires the **Statuses** endpoint permission._
    #
    #_This request can also be made using the POST method, 
    #with a request to `activestatus.json` and 
    #a JSON request body instead of query parameters._
    #
    def test_test_get_active_statuses_1(self):
        # Parameters for the API call
        device_ids = APIHelper.json_deserialize('[1,2,3]')
        category = None
        lost_production_signal_id = 432
        fields = APIHelper.json_deserialize('["deviceId","message","lostProduction"]')
        sort_by = None
        sort_asc = False
        page_size = 50
        page = 1
        use_utc = False
        contract_type = 'service'

        # Perform the API call through the SDK function
        result = self.controller.get_active_statuses(device_ids, category, lost_production_signal_id, fields, sort_by, sort_asc, page_size, page, use_utc, contract_type)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 204)

