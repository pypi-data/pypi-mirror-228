# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import greenbyteapi.models.predict_recommendation

class PredictStatusActive(object):

    """Implementation of the 'PredictStatusActive' model.

    Status info for an active Predict alert.

    Attributes:
        recommendations (list of PredictRecommendation): Recommended actions
            for resolving the alert. Will be null if not calculated yet.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "recommendations":'recommendations'
    }

    def __init__(self,
                 recommendations=None):
        """Constructor for the PredictStatusActive class"""

        # Initialize members of the class
        self.recommendations = recommendations


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        recommendations = None
        if dictionary.get('recommendations') != None:
            recommendations = list()
            for structure in dictionary.get('recommendations'):
                recommendations.append(greenbyteapi.models.predict_recommendation.PredictRecommendation.from_dictionary(structure))

        # Return an object of this model
        return cls(recommendations)


