# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import greenbyteapi.models.component
import greenbyteapi.models.predict_comment

class PredictAlertsResponse(object):

    """Implementation of the 'Predict Alerts Response' model.

    An alert generated by Predict. The statusData object will be of one of the
    following types depending on its status:
    * Predict Status Active
    * Predict Status Resolved
    * Predict Status Dismissed

    Attributes:
        id (object): The id of the predict alert.
        device_id (int): The id of the device the alert was generated for.
        site_id (int): The id of the site the device is located in.
        component_alert (Component): A component of a wind turbine.
        high_severity (bool): Whether the alert is high severity or not.
        status (PredictStatusEnum): The status of a Predict alert.
        status_data (object): TODO: type description here.
        comments (list of PredictComment): User comments for the alert.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "device_id":'deviceId',
        "site_id":'siteId',
        "component_alert":'componentAlert',
        "high_severity":'highSeverity',
        "status":'status',
        "status_data":'statusData',
        "comments":'comments'
    }

    def __init__(self,
                 id=None,
                 device_id=None,
                 site_id=None,
                 component_alert=None,
                 high_severity=None,
                 status=None,
                 status_data=None,
                 comments=None):
        """Constructor for the PredictAlertsResponse class"""

        # Initialize members of the class
        self.id = id
        self.device_id = device_id
        self.site_id = site_id
        self.component_alert = component_alert
        self.high_severity = high_severity
        self.status = status
        self.status_data = status_data
        self.comments = comments


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        device_id = dictionary.get('deviceId')
        site_id = dictionary.get('siteId')
        component_alert = greenbyteapi.models.component.Component.from_dictionary(dictionary.get('componentAlert')) if dictionary.get('componentAlert') else None
        high_severity = dictionary.get('highSeverity')
        status = dictionary.get('status')
        status_data = dictionary.get('statusData')
        comments = None
        if dictionary.get('comments') != None:
            comments = list()
            for structure in dictionary.get('comments'):
                comments.append(greenbyteapi.models.predict_comment.PredictComment.from_dictionary(structure))

        # Return an object of this model
        return cls(id,
                   device_id,
                   site_id,
                   component_alert,
                   high_severity,
                   status,
                   status_data,
                   comments)


