# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from greenbyteapi.api_helper import APIHelper
import greenbyteapi.models.component

class PredictStatusResolved(object):

    """Implementation of the 'PredictStatusResolved' model.

    Status info for a resolved Predict alert.

    Attributes:
        timestamp_resolved (datetime): When the alert was resolved.
        action_taken (string): The action that was taken to resolve the
            alert.
        component_resolved (Component): A component of a wind turbine.
        resolved_by (PredictActionEnum): The action that was taken to resolve
            the alert.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "timestamp_resolved":'timestampResolved',
        "action_taken":'actionTaken',
        "component_resolved":'componentResolved',
        "resolved_by":'resolvedBy'
    }

    def __init__(self,
                 timestamp_resolved=None,
                 action_taken=None,
                 component_resolved=None,
                 resolved_by=None):
        """Constructor for the PredictStatusResolved class"""

        # Initialize members of the class
        self.timestamp_resolved = APIHelper.RFC3339DateTime(timestamp_resolved) if timestamp_resolved else None
        self.action_taken = action_taken
        self.component_resolved = component_resolved
        self.resolved_by = resolved_by


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        timestamp_resolved = APIHelper.RFC3339DateTime.from_value(dictionary.get("timestampResolved")).datetime if dictionary.get("timestampResolved") else None
        action_taken = dictionary.get('actionTaken')
        component_resolved = greenbyteapi.models.component.Component.from_dictionary(dictionary.get('componentResolved')) if dictionary.get('componentResolved') else None
        resolved_by = dictionary.get('resolvedBy')

        # Return an object of this model
        return cls(timestamp_resolved,
                   action_taken,
                   component_resolved,
                   resolved_by)


