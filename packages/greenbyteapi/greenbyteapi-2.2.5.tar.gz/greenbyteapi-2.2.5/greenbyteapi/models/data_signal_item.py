# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import greenbyteapi.models.device_type

class DataSignalItem(object):

    """Implementation of the 'DataSignalItem' model.

    A data signal, including type.

    Attributes:
        data_signal_id (int): The unique id of a data signal.
        title (string): TODO: type description here.
        mtype (string): TODO: type description here.
        unit (string): TODO: type description here.
        device_type (DeviceType): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "data_signal_id":'dataSignalId',
        "title":'title',
        "mtype":'type',
        "unit":'unit',
        "device_type":'deviceType'
    }

    def __init__(self,
                 data_signal_id=None,
                 title=None,
                 mtype=None,
                 unit=None,
                 device_type=None):
        """Constructor for the DataSignalItem class"""

        # Initialize members of the class
        self.data_signal_id = data_signal_id
        self.title = title
        self.mtype = mtype
        self.unit = unit
        self.device_type = device_type


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        data_signal_id = dictionary.get('dataSignalId')
        title = dictionary.get('title')
        mtype = dictionary.get('type')
        unit = dictionary.get('unit')
        device_type = greenbyteapi.models.device_type.DeviceType.from_dictionary(dictionary.get('deviceType')) if dictionary.get('deviceType') else None

        # Return an object of this model
        return cls(data_signal_id,
                   title,
                   mtype,
                   unit,
                   device_type)


