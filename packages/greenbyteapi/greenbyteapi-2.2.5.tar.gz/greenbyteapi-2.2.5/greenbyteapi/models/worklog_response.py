# -*- coding: utf-8 -*-

"""
    greenbyteapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from greenbyteapi.api_helper import APIHelper

class WorklogResponse(object):

    """Implementation of the 'Worklog Response' model.

    A worklog item.

    Attributes:
        worklog_item_id (int): The id of a worklog item.
        timestamp (datetime): The timestamp when the worklog item was entered.
            The timestamp is in the time zone configured in the Greenbyte
            Platform without UTC offset.
        site_id (int): The id of a site.
        hours_worked (float): The number of hours worked on the worklog item.
        comment (string): The comment related to the worklog item.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "worklog_item_id":'worklogItemId',
        "timestamp":'timestamp',
        "site_id":'siteId',
        "hours_worked":'hoursWorked',
        "comment":'comment'
    }

    def __init__(self,
                 worklog_item_id=None,
                 timestamp=None,
                 site_id=None,
                 hours_worked=None,
                 comment=None):
        """Constructor for the WorklogResponse class"""

        # Initialize members of the class
        self.worklog_item_id = worklog_item_id
        self.timestamp = APIHelper.RFC3339DateTime(timestamp) if timestamp else None
        self.site_id = site_id
        self.hours_worked = hours_worked
        self.comment = comment


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        worklog_item_id = dictionary.get('worklogItemId')
        timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("timestamp")).datetime if dictionary.get("timestamp") else None
        site_id = dictionary.get('siteId')
        hours_worked = dictionary.get('hoursWorked')
        comment = dictionary.get('comment')

        # Return an object of this model
        return cls(worklog_item_id,
                   timestamp,
                   site_id,
                   hours_worked,
                   comment)


