# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RestArgs', 'Rest']

@pulumi.input_type
class RestArgs:
    def __init__(__self__, *,
                 class_name: pulumi.Input[str],
                 dn: pulumi.Input[str],
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ChildArgs']]]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Rest resource.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
        :param pulumi.Input[Sequence[pulumi.Input['ChildArgs']]] children: List of child objects to be created. Each child object must have a unique relative name.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "dn", dn)
        if children is not None:
            pulumi.set(__self__, "children", children)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def class_name(self) -> pulumi.Input[str]:
        """
        Which class object is being created. (Make sure there is no colon in the classname)
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Input[str]:
        """
        Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
        """
        return pulumi.get(self, "dn")

    @dn.setter
    def dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "dn", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChildArgs']]]]:
        """
        List of child objects to be created. Each child object must have a unique relative name.
        """
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChildArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "content", value)


class Rest(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ChildArgs']]]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages ACI Model Objects via REST API calls. This resource can only manage a single API object.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ChildArgs']]]] children: List of child objects to be created. Each child object must have a unique relative name.
        :param pulumi.Input[str] class_name: Which class object is being created. (Make sure there is no colon in the classname)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] content: Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
        :param pulumi.Input[str] dn: Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages ACI Model Objects via REST API calls. This resource can only manage a single API object.

        :param str resource_name: The name of the resource.
        :param RestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ChildArgs']]]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestArgs.__new__(RestArgs)

            __props__.__dict__["children"] = children
            if class_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_name'")
            __props__.__dict__["class_name"] = class_name
            __props__.__dict__["content"] = content
            if dn is None and not opts.urn:
                raise TypeError("Missing required property 'dn'")
            __props__.__dict__["dn"] = dn
        super(Rest, __self__).__init__(
            'aci:apic:Rest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Rest':
        """
        Get an existing Rest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RestArgs.__new__(RestArgs)

        __props__.__dict__["children"] = None
        __props__.__dict__["class_name"] = None
        __props__.__dict__["content"] = None
        __props__.__dict__["dn"] = None
        return Rest(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def children(self) -> pulumi.Output[Optional[Sequence['outputs.Child']]]:
        """
        List of child objects to be created. Each child object must have a unique relative name.
        """
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def class_name(self) -> pulumi.Output[str]:
        """
        Which class object is being created. (Make sure there is no colon in the classname)
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dn(self) -> pulumi.Output[str]:
        """
        Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
        """
        return pulumi.get(self, "dn")

