name: PEP-ify Version Tag

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:

  pepify:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
      pepified-tag: ${{ steps.pepify-tag.outputs.pepified-tag }}
    steps:
      
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check tag
        id: check-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            NEW_TAG=${{ github.ref_name }}
          else
            NEW_TAG=${{ github.event.inputs.new-tag }}
          fi
          echo "New tag: ${NEW_TAG}"

          regex='^([0-9]+\.){2}(\*|[0-9]+)(-.*)?$'
          if [[ ! $NEW_TAG =~ $regex ]]; then
            echo "Error: tag is not a valid semver: $NEW_TAG"
            exit 1
          fi

          # TODO: Verify tag isn't older than most recent tag

          echo "tag=$(echo $NEW_TAG)" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$(echo $NEW_TAG)" >> $GITHUB_ENV

      - name: Make Tag PEP-Compliant
        id: pepify-tag
        shell: bash
        run: |
          semver=${{ env.NEW_TAG }}
          # Per PEP 440, traditional semantic versioning is not allowed in Python.
          pepified_version=$(echo "$semver" | sed -r -e 's/-alpha/a0/g' -e 's/-beta/b0/g' -e 's/\+PR/\.dev/g' -e 's/([0-9]+\.[0-9]+\.[0-9]+)([a-b0-9]+)?([\.dev]+)?(([0-9]+)\.([0-9]+)\.([0-9]+))?/\1\2\3\5\6\7/g')
          echo "Tagged version converted to PEP 440 standard: $pepified_version"
          echo "pepified-tag=$pepified_version" >> $GITHUB_OUTPUT
          echo "PEPIFIED_TAG=$pepified_version" >> $GITHUB_ENV
