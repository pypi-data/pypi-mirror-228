Metadata-Version: 2.1
Name: as-csbs-import
Version: 3.10.1
Summary: Convert CSBS information into Python code stubs.
License: Proprietary
Author: Clinton Roy
Author-email: clintonr@ansto.gov.au
Requires-Python: >=3.9,<4.0
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: Jinja2 (>=3.1.2,<4.0.0)
Requires-Dist: inflect (>=6.0.2,<7.0.0)
Requires-Dist: requests (>=2.28.2,<3.0.0)
Requires-Dist: requests-file (>=1.5.1,<2.0.0)
Requires-Dist: rfc3986 (>=2.0.0,<3.0.0)
Requires-Dist: tomli (>=2.0.1,<3.0.0) ; python_version < "3.11"
Requires-Dist: typer (>=0.7.0,<0.8.0)
Description-Content-Type: text/plain

# CSBS Importer

Parses information on hardware devices from CSBS. Can display this data, or optionally generate code based on it.

To generate code for an area, create a new library for your area (just for generated code) add as-csbs-import as a dev dependency.
If you have any area specific code for devices or mocks, also add that library as a dev dependency.

All the configuration is done via the tools.csbs area in pyproject.toml, here is the Biosaxs example:

```
[tool.csbs]
area = "BSX"
output_path = "src/bsx_csbs"
area_device_registry = "beamline.devices:registry"
area_mock_registry = "beamline.mocks:registry"
component_factory = "beamline.devices.component:component"
```

To run the generator:

```
$ poetry install --with=dev
$ poetry run csbs-import
Generating src/bsx-csbs/devices.py from devices.py.jinja2
Generating src/bsx-csbs/info.py from info.py.jinja2
Generating src/bsx-csbs/mock.py from mock.py.jinja2
```
# Now you can do a git diff and see if you're happy with the changes.
