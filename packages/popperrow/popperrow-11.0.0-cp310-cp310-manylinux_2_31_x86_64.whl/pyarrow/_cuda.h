/* Generated by Cython 0.29.36 */

#ifndef __PYX_HAVE__pyarrow___cuda
#define __PYX_HAVE__pyarrow___cuda

#include "Python.h"

#ifndef __PYX_HAVE_API__pyarrow___cuda

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C int pyarrow_is_buffer(PyObject *);
__PYX_EXTERN_C int pyarrow_is_cudabuffer(PyObject *);
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudabuffer_base(std::shared_ptr< arrow::cuda::CudaBuffer>  const &, PyObject *);
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudabuffer(std::shared_ptr< arrow::cuda::CudaBuffer>  const &);
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaBuffer>  pyarrow_unwrap_cudabuffer(PyObject *);
__PYX_EXTERN_C int pyarrow_is_cudahostbuffer(PyObject *);
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudahostbuffer(std::shared_ptr< arrow::cuda::CudaHostBuffer>  const &);
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaHostBuffer>  pyarrow_unwrap_cudahostbuffer(PyObject *);
__PYX_EXTERN_C int pyarrow_is_cudacontext(PyObject *);
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudacontext(std::shared_ptr< arrow::cuda::CudaContext>  const &);
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaContext>  pyarrow_unwrap_cudacontext(PyObject *);
__PYX_EXTERN_C int pyarrow_is_cudaipcmemhandle(PyObject *);
__PYX_EXTERN_C PyObject *pyarrow_wrap_cudaipcmemhandle(std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  &);
__PYX_EXTERN_C std::shared_ptr< arrow::cuda::CudaIpcMemHandle>  pyarrow_unwrap_cudaipcmemhandle(PyObject *);

#endif /* !__PYX_HAVE_API__pyarrow___cuda */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_cuda(void);
#else
PyMODINIT_FUNC PyInit__cuda(void);
#endif

#endif /* !__PYX_HAVE__pyarrow___cuda */
