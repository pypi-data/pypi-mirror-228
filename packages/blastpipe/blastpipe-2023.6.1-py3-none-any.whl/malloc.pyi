"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Hashable, Optional

from . import public

"""Utilities for measuring memory usage."""

@public
def total_size(
    obj: Hashable,
    handlers: Optional[Dict[Any, Callable[..., Any]]] = ...,
    verbose: bool = ...,
) -> int:
    """Returns the approximate memory footprint an object and all of its contents.

    See `recipe <https://code.activestate.com/recipes/577504/>`__ for original.

    :param obj: object to measure size of
    :type  obj: object
    :param handlers: handlers to iterate over contents of containers, defaults to None
    :type  handlers: dict, optional
    :param verbose: whether to print verbose output, defaults to False
    :type  verbose: bool, optional
    :return: approximate memory footprint in bytes
    :rtype:  int

    Automatically finds the contents of the following builtin containers and
    their subclasses:  tuple, list, deque, dict, set and frozenset.
    To search other containers, add handlers to iterate over their contents:

        handlers = {SomeContainerClass: iter,
                    OtherContainerClass: OtherContainerClass.get_elements}
    """
    ...
