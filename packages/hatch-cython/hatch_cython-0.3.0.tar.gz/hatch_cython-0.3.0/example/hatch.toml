[build]
ignore-vcs = true
artifacts = [
    "*.so",
    "*.dll",
]

[build.targets.wheel]
packages = ["src/example_lib"]

[build.targets.wheel.hooks.custom]
path = "../src/hatch_cython/devel.py"
dependencies = [
  "Cython",
  "setuptools",
  "numpy",
  "llvmlite",
  "hatch",
  "typing_extensions; python_version < '3.10'"
]

[build.targets.wheel.hooks.custom.options]
src = "example_lib"
parallel = true
include_numpy = true
retain_intermediate_artifacts = true
directives = { language_level = 3, boundscheck = false }
compile_args = [
  { arg = "-v" },
  { platforms = ["linux", "darwin"], arg = "-Wcpp" },
  { platforms = ["darwin"], arch = "x86_64", arg = "-arch x86_64" },
  { platforms = ["darwin"], arch = "arm64", arg = "-arch arm64" },
  { platforms = ["darwin"], arch = "x86_64", arg = "-I/usr/local/opt/llvm/include", depends_path = true, marker = "python_version <= '3.10'"  },
  { platforms = ["darwin"], arch = "x86_64", arg = "-I/opt/homebrew/opt/llvm/include", depends_path = true, marker = "python_version <= '3.10'" },
]
extra_link_args =  [
  { platforms = ["darwin"],  arch = "x86_64", arg = "-L/usr/local/opt/llvm/lib", depends_path = true, marker = "python_version <= '3.10'" },
  { platforms = ["darwin"],  arch = "x86_64", arg = "-L/opt/homebrew/opt/llvm/lib", depends_path = true, marker = "python_version <= '3.10'" },
]

env = [
  { env = "CC", arg = "c++", platforms = ["darwin", "linux"] },
  { env = "CPP", arg = "c++", platforms = ["darwin", "linux"] },
  { env = "CXX", arg = "c++", platforms = ["darwin", "linux"] },
]

cythonize_kwargs = { annotate = true, nthreads = 4 }
define_macros = [
    ["NPY_NO_DEPRECATED_API", "NPY_1_7_API_VERSION"],
]

[build.targets.wheel.hooks.custom.options.templates]
index = [
  {keyword = "global", matches = "*" },
  {keyword = "templated_mac", matches = "templated.*.in",  platforms = ["darwin"] },
  {keyword = "templated_win", matches = "templated.*.in",  platforms = ["windows"] },
]

global = { supported = ["int"] }
templated_mac = { supported = ["int", "float"] }
templated_win = { supported = ["int", "float", "complex"] }


[build.targets.wheel.hooks.custom.options.files]
exclude = [
    "*/no_compile/*",
    "*_sample*",
]
aliases = {"example_lib._alias" = "example_lib.aliased"}

[[envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]


[envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/funcclasses tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[envs.default]
dependencies = [
  "coverage",
  "pytest",
  "beartype",
  "numpy",
]

[envs.default.scripts]
install = "python bootstrap.py"
test = [
  "install",
  "pytest {args:tests}"
]
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "install",
  "test-cov",
  "cov-report",
]
