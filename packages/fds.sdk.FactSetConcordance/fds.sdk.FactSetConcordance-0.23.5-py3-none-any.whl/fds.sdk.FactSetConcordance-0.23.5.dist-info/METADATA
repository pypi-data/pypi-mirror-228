Metadata-Version: 2.1
Name: fds.sdk.FactSetConcordance
Version: 0.23.5
Summary: FactSet Concordance client library for Python
Home-page: https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2
Author: FactSet Research Systems
License: Apache License, Version 2.0
Keywords: FactSet,API,SDK
Platform: UNKNOWN
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: urllib3 (>=1.25.3)
Requires-Dist: python-dateutil
Requires-Dist: fds.sdk.utils (>=1.0.0)

[![FactSet](https://raw.githubusercontent.com/factset/enterprise-sdk/main/docs/images/factset-logo.svg)](https://www.factset.com)

# FactSet Concordance client library for Python

[![PyPi](https://img.shields.io/pypi/v/fds.sdk.FactSetConcordance)](https://pypi.org/project/fds.sdk.FactSetConcordance/)
[![Apache-2 license](https://img.shields.io/badge/license-Apache2-brightgreen.svg)](https://www.apache.org/licenses/LICENSE-2.0)




The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>  

 Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>
 
 <b>There are two types of workflows supported in the API:</b>
 
 <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.
 
 <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.
 
 Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p>


This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 2.6.0
- Package version: 0.23.5
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements

* Python >= 3.7

## Installation

### Poetry

```shell
poetry add fds.sdk.utils fds.sdk.FactSetConcordance==0.23.5
```

### pip

```shell
pip install fds.sdk.utils fds.sdk.FactSetConcordance==0.23.5
```

## Usage

1. [Generate authentication credentials](../../../../README.md#authentication).
2. Setup Python environment.
   1. Install and activate python 3.7+. If you're using [pyenv](https://github.com/pyenv/pyenv):

      ```sh
      pyenv install 3.9.7
      pyenv shell 3.9.7
      ```

   2. (optional) [Install poetry](https://python-poetry.org/docs/#installation).
3. [Install dependencies](#installation).
4. Run the following:

```python
from fds.sdk.utils.authentication import ConfidentialClient

import fds.sdk.FactSetConcordance
from fds.sdk.FactSetConcordance.api import entity_mappings_api
from fds.sdk.FactSetConcordance.models import *
from dateutil.parser import parse as dateutil_parser
from pprint import pprint

# See configuration.py for a list of all supported configuration parameters.

# Examples for each supported authentication method are below,
# choose one that satisfies your use case.

# (Preferred) OAuth 2.0: FactSetOAuth2
# See https://github.com/FactSet/enterprise-sdk#oauth-20
# for information on how to create the app-config.json file
# See https://github.com/FactSet/enterprise-sdk-utils-python#authentication
# for more information on using the ConfidentialClient class
configuration = fds.sdk.FactSetConcordance.Configuration(
    fds_oauth_client=ConfidentialClient('/path/to/app-config.json')
)

# Basic authentication: FactSetApiKey
# See https://github.com/FactSet/enterprise-sdk#api-key
# for information how to create an API key
# configuration = fds.sdk.FactSetConcordance.Configuration(
#     username='USERNAME-SERIAL',
#     password='API-KEY'
# )

# Enter a context with an instance of the API client
with fds.sdk.FactSetConcordance.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = entity_mappings_api.EntityMappingsApi(api_client)
    # NOTE: The parameter variable defined below is just an example and may potentially contain non valid values. So please replace this with valid values.
    entity_mapping_delete_request = EntityMappingDeleteRequest(
        universe_id=1,
        client_id=["abc-123","dfg-456"],
    ) # EntityMappingDeleteRequest | A request to delete entity mappings specified by the client

    try:
        # Deletes mapping specified by the client.
        # example passing only required values which don't have defaults set
        api_response = api_instance.get_entity_mapping_delete_for_list(entity_mapping_delete_request)

        pprint(api_response)
    except fds.sdk.FactSetConcordance.ApiException as e:
        print("Exception when calling EntityMappingsApi->get_entity_mapping_delete_for_list: %s\n" % e)

    # # Get response, http status code and response headers
    # try:
    #     # Deletes mapping specified by the client.
    #     api_response, http_status_code, response_headers = api_instance.get_entity_mapping_delete_for_list_with_http_info(entity_mapping_delete_request)


    #     pprint(api_response)
    #     pprint(http_status_code)
    #     pprint(response_headers)
    # except fds.sdk.FactSetConcordance.ApiException as e:
    #     print("Exception when calling EntityMappingsApi->get_entity_mapping_delete_for_list: %s\n" % e)

    # # Get response asynchronous
    # try:
    #     # Deletes mapping specified by the client.
    #     async_result = api_instance.get_entity_mapping_delete_for_list_async(entity_mapping_delete_request)
    #     api_response = async_result.get()


    #     pprint(api_response)
    # except fds.sdk.FactSetConcordance.ApiException as e:
    #     print("Exception when calling EntityMappingsApi->get_entity_mapping_delete_for_list: %s\n" % e)

    # # Get response, http status code and response headers asynchronous
    # try:
    #     # Deletes mapping specified by the client.
    #     async_result = api_instance.get_entity_mapping_delete_for_list_with_http_info_async(entity_mapping_delete_request)
    #     api_response, http_status_code, response_headers = async_result.get()


    #     pprint(api_response)
    #     pprint(http_status_code)
    #     pprint(response_headers)
    # except fds.sdk.FactSetConcordance.ApiException as e:
    #     print("Exception when calling EntityMappingsApi->get_entity_mapping_delete_for_list: %s\n" % e)

```

### Using Pandas

To convert an API response to a Pandas DataFrame, it is necessary to transform it first to a dictionary.
```python
import pandas as pd

response_dict = api_response.to_dict()['data']

simple_json_response = pd.DataFrame(response_dict)
nested_json_response = pd.json_normalize(response_dict)
```

### Debugging

The SDK uses the standard library [`logging`](https://docs.python.org/3/library/logging.html#module-logging) module.

Setting `debug` to `True` on an instance of the `Configuration` class sets the log-level of related packages to `DEBUG`
and enables additional logging in Pythons [HTTP Client](https://docs.python.org/3/library/http.client.html).

**Note**: This prints out sensitive information (e.g. the full request and response). Use with care.

```python
import logging
import fds.sdk.FactSetConcordance

logging.basicConfig(level=logging.DEBUG)

configuration = fds.sdk.FactSetConcordance.Configuration(...)
configuration.debug = True
```

### Configure a Proxy

You can pass proxy settings to the Configuration class:

* `proxy`: The URL of the proxy to use.
* `proxy_headers`: a dictionary to pass additional headers to the proxy (e.g. `Proxy-Authorization`).

```python
import fds.sdk.FactSetConcordance

configuration = fds.sdk.FactSetConcordance.Configuration(
    # ...
    proxy="http://secret:password@localhost:5050",
    proxy_headers={
        "Custom-Proxy-Header": "Custom-Proxy-Header-Value"
    }
)
```

### Custom SSL Certificate

TLS/SSL certificate verification can be configured with the following Configuration parameters:

* `ssl_ca_cert`: a path to the certificate to use for verification in `PEM` format.
* `verify_ssl`: setting this to `False` disables the verification of certificates.
  Disabling the verification is not recommended, but it might be useful during
  local development or testing.

```python
import fds.sdk.FactSetConcordance

configuration = fds.sdk.FactSetConcordance.Configuration(
    # ...
    ssl_ca_cert='/path/to/ca.pem'
)
```


## Documentation for API Endpoints

All URIs are relative to *https://api.factset.com/content*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*EntityMappingsApi* | [**get_entity_mapping_delete_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingsApi.md#get_entity_mapping_delete_for_list) | **POST** /factset-concordance/v2/entity-mapping-delete | Deletes mapping specified by the client.
*EntityMappingsApi* | [**get_entity_mapping_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingsApi.md#get_entity_mapping_for_list) | **POST** /factset-concordance/v2/entity-mapping | Saves a single-mapping specified by the client.
*EntityMappingsApi* | [**get_entity_universe**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingsApi.md#get_entity_universe) | **GET** /factset-concordance/v2/entity-universe | Retrieve all saved mappings within a requested universe
*EntityMappingsApi* | [**get_entity_universe_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingsApi.md#get_entity_universe_for_list) | **POST** /factset-concordance/v2/entity-universe | Retrieve all saved mappings within a requested universe or large list of client ids
*EntityMatchApi* | [**get_entity_match**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchApi.md#get_entity_match) | **GET** /factset-concordance/v2/entity-match | Get Entity Candidates and Matches for a single name and attributes.
*EntityMatchApi* | [**get_entity_match_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchApi.md#get_entity_match_for_list) | **POST** /factset-concordance/v2/entity-match | Get a list of Entity Candidates and Matches for a requested list of up to 25 names and attributes.
*EntityMatchBulkApi* | [**get_entity_decisions**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchBulkApi.md#get_entity_decisions) | **GET** /factset-concordance/v2/entity-decisions | Get the decisions of matches for the requested taskId.
*EntityMatchBulkApi* | [**get_entity_task_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchBulkApi.md#get_entity_task_for_list) | **POST** /factset-concordance/v2/entity-task | Input a file with names and attributes, creating a taskId.
*EntityMatchBulkApi* | [**get_entity_task_status**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchBulkApi.md#get_entity_task_status) | **GET** /factset-concordance/v2/entity-task-status | Gets the status of the requested taskId or all tasks for a User
*PeopleMappingApi* | [**get_people_mapping_delete_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingApi.md#get_people_mapping_delete_for_list) | **POST** /factset-concordance/v2/people-mapping-delete | Deletes mapping specified by the client.
*PeopleMappingApi* | [**get_people_mapping_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingApi.md#get_people_mapping_for_list) | **POST** /factset-concordance/v2/people-mapping | Saves a single-mapping specified by the client.
*PeopleMappingApi* | [**get_people_universe**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingApi.md#get_people_universe) | **GET** /factset-concordance/v2/people-universe | Retrieve all saved mappings within a requested universe
*PeopleMappingApi* | [**get_people_universe_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingApi.md#get_people_universe_for_list) | **POST** /factset-concordance/v2/people-universe | Retrieve all saved mappings within a requested universe or large list of client ids
*PeopleMatchApi* | [**get_people_match**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchApi.md#get_people_match) | **GET** /factset-concordance/v2/people-match | Find potential people matches given a person&#39;s name.People matches can be retrieved using person&#39;s name and other attributes like firstname, middlename and lastname.
*PeopleMatchApi* | [**get_people_match_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchApi.md#get_people_match_for_list) | **POST** /factset-concordance/v2/people-match | Find potential people matches given a person&#39;s name.
*PeopleMatchBulkApi* | [**get_people_decisions**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchBulkApi.md#get_people_decisions) | **GET** /factset-concordance/v2/people-decisions | Get the decisions of matches for the requested taskId.
*PeopleMatchBulkApi* | [**get_people_task_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchBulkApi.md#get_people_task_for_list) | **POST** /factset-concordance/v2/people-task | Create a People Concordance Task.
*PeopleMatchBulkApi* | [**get_people_task_status**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchBulkApi.md#get_people_task_status) | **GET** /factset-concordance/v2/people-task-status | Get the Status of the People Tasks.
*SnowflakeApi* | [**get_snowflake_entity_match_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeApi.md#get_snowflake_entity_match_for_list) | **POST** /factset-concordance/v2/snowflake-entity-match | Perform an entity search and return a snowflake-friendly response. Up to 25 Names per request.
*SnowflakeApi* | [**snowflake_entity_mapping_post**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeApi.md#snowflake_entity_mapping_post) | **POST** /factset-concordance/v2/snowflake-entity-mapping | Save entity mappings to a universe
*UniversesApi* | [**get_entity_universe_statistics**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesApi.md#get_entity_universe_statistics) | **GET** /factset-concordance/v2/entity-universe-statistics | Get statistics on a given universe
*UniversesApi* | [**get_universe_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesApi.md#get_universe_for_list) | **POST** /factset-concordance/v2/universe | Create a new universe
*UniversesApi* | [**get_universe_statistics**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesApi.md#get_universe_statistics) | **GET** /factset-concordance/v2/universe-statistics | Get statistics on a given universe
*UniversesApi* | [**get_universes**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesApi.md#get_universes) | **GET** /factset-concordance/v2/universes | Fetch metadata for universes
*UniversesApi* | [**get_update_universe_for_list**](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesApi.md#get_update_universe_for_list) | **POST** /factset-concordance/v2/update-universe | Update metadata for an existing universe


## Documentation For Models

 - [CreateUniverseRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/CreateUniverseRequest.md)
 - [EntityDecisionsResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityDecisionsResponse.md)
 - [EntityMapping](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMapping.md)
 - [EntityMappingDeleteRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingDeleteRequest.md)
 - [EntityMappingDeleteResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingDeleteResponse.md)
 - [EntityMappingRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingRequest.md)
 - [EntityMappingResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMappingResponse.md)
 - [EntityMatch](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatch.md)
 - [EntityMatchRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchRequest.md)
 - [EntityMatchRequestInput](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchRequestInput.md)
 - [EntityMatchesResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityMatchesResponse.md)
 - [EntityResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityResponse.md)
 - [EntityTaskResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityTaskResponse.md)
 - [EntityTaskStatus](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityTaskStatus.md)
 - [EntityTaskStatusResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityTaskStatusResponse.md)
 - [EntityUniverseRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityUniverseRequest.md)
 - [EntityUniverseResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityUniverseResponse.md)
 - [EntityUniverseStatisticsResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/EntityUniverseStatisticsResponse.md)
 - [ErrorResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/ErrorResponse.md)
 - [ErrorResponseSubErrors](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/ErrorResponseSubErrors.md)
 - [MapStatus](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/MapStatus.md)
 - [PeopleDecisions](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleDecisions.md)
 - [PeopleDecisionsResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleDecisionsResponse.md)
 - [PeopleMapping](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMapping.md)
 - [PeopleMappingDeleteResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingDeleteResponse.md)
 - [PeopleMappingRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingRequest.md)
 - [PeopleMappingResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMappingResponse.md)
 - [PeopleMatch](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatch.md)
 - [PeopleMatchRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchRequest.md)
 - [PeopleMatchRequestInput](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchRequestInput.md)
 - [PeopleMatchesResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleMatchesResponse.md)
 - [PeopleTask](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleTask.md)
 - [PeopleTaskResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleTaskResponse.md)
 - [PeopleTaskStatus](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleTaskStatus.md)
 - [PeopleTaskStatusResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleTaskStatusResponse.md)
 - [PeopleUniverseRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleUniverseRequest.md)
 - [PeopleUniverseResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/PeopleUniverseResponse.md)
 - [SnowflakeEntityMappingRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeEntityMappingRequest.md)
 - [SnowflakeEntityMappingResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeEntityMappingResponse.md)
 - [SnowflakeEntityMatchRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeEntityMatchRequest.md)
 - [SnowflakeEntityMatchResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/SnowflakeEntityMatchResponse.md)
 - [Universe](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/Universe.md)
 - [UniverseMeta](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniverseMeta.md)
 - [UniverseMetaResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniverseMetaResponse.md)
 - [UniverseStatistics](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniverseStatistics.md)
 - [UniverseStatisticsResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniverseStatisticsResponse.md)
 - [UniversesResponse](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UniversesResponse.md)
 - [UpdateUniverseRequest](https://github.com/FactSet/enterprise-sdk/tree/main/code/python/FactSetConcordance/v2/docs/UpdateUniverseRequest.md)


## Documentation For Authorization


## FactSetApiKey

- **Type**: HTTP basic authentication


## FactSetOAuth2

- **Type**: OAuth
- **Flow**: application
- **Authorization URL**: 
- **Scopes**: N/A


## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in fds.sdk.FactSetConcordance.apis and fds.sdk.FactSetConcordance.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from fds.sdk.FactSetConcordance.api.default_api import DefaultApi`
- `from fds.sdk.FactSetConcordance.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import fds.sdk.FactSetConcordance
from fds.sdk.FactSetConcordance.apis import *
from fds.sdk.FactSetConcordance.models import *
```

## Contributing

Please refer to the [contributing guide](../../../../CONTRIBUTING.md).

## Copyright

Copyright 2022 FactSet Research Systems Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



